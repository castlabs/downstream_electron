/*! For license information please see downstream-electron-be.js.LICENSE.txt */
!function(Q,F){if("object"==typeof exports&&"object"==typeof module)module.exports=F(require("base64-js"),require("biguint-format"),require("electron"),require("flake-idgen"),require("get-folder-size"),require("jsonfile"),require("mkdirp"),require("moment/moment"),require("underscore"),require("url-parse"),require("xmldom"));else if("function"==typeof define&&define.amd)define(["base64-js","biguint-format","electron","flake-idgen","get-folder-size","jsonfile","mkdirp","moment/moment","underscore","url-parse","xmldom"],F);else{var U="object"==typeof exports?F(require("base64-js"),require("biguint-format"),require("electron"),require("flake-idgen"),require("get-folder-size"),require("jsonfile"),require("mkdirp"),require("moment/moment"),require("underscore"),require("url-parse"),require("xmldom")):F(Q["base64-js"],Q["biguint-format"],Q.electron,Q["flake-idgen"],Q["get-folder-size"],Q.jsonfile,Q.mkdirp,Q["moment/moment"],Q.underscore,Q["url-parse"],Q.xmldom);for(var B in U)("object"==typeof exports?exports:Q)[B]=U[B]}}(global,((__WEBPACK_EXTERNAL_MODULE__7769__,__WEBPACK_EXTERNAL_MODULE__1637__,__WEBPACK_EXTERNAL_MODULE__7194__,__WEBPACK_EXTERNAL_MODULE__1759__,__WEBPACK_EXTERNAL_MODULE__6838__,__WEBPACK_EXTERNAL_MODULE__3480__,__WEBPACK_EXTERNAL_MODULE__9526__,__WEBPACK_EXTERNAL_MODULE__1908__,__WEBPACK_EXTERNAL_MODULE__4952__,__WEBPACK_EXTERNAL_MODULE__3720__,__WEBPACK_EXTERNAL_MODULE__678__)=>(()=>{var __webpack_modules__={9277:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n/**\n * @typedef Configuration\n * @property {string=} appDir main directory path, can be any valid path, default is electronApp.getPath(\'userData\')\n * @property {string=} settingsName - name of the folder in main directory path where to store settings\n * @property {string=} publicName - name of the folder in main directory path which will be served over http\n * @property {string=} downloadsName - name of the folder in main directory path and publicName where to store assets\n * @property {string=} offlineDomain - on which domain the content should be served, default is 127.0.0.1\n * @property {number=} offlineContentPortStart - on which port offline content should be served, default is 3010\n * @property {number=} maxOfflineContentPortRange - max range for offline port to on which content can be served\n *   It will try from {offlineContentPortStart} and if taken it will try next until it finds a free one\n * @property {number=} numberOfManifestsInParallel - max number of manifest that can be downloaded at the same time,\n *   the rest will go into queue.\n *   Be reasonable here, as it might slow down your computer, default value is 2. With 10 and very larges manifests\n *   it might go to hundreds of chunks (50 files can be downloaded at the same time per manifest). Also the highger number\n *   doesn\'t mean it will downloads all movies faster. You should find here some balance.\n *   Seems like 2-3 manifests gives the best results, 1 manifest limitation might work better for slower computers.\n * @property {regex | string=} customManifestIdFolderRegex - regex to use to validate custom manifest id - bear in mind that this\n * need to be also a valid folder name.<br>\n * By default it matches any letter or number or unicode characters (regional characters) or "-" or "_" as a first character<br>\n * Then it may have any letter or number or unicode characters (regional characters) or space or any of the following characters:\n * ,.;\'[]{}!@#$%&*()-_=+\n *\n * @property {string=} openingTagForInvalidCustomManifestIdCharacter - when customManifestId is being invalidated\n * against customManifestIdFolderRegex it will raise the error and include the customManifestId with marked invalid characters\n * this is the opening tag to be added before invalid character\n *\n * @property {string=} closingTagForInvalidCustomManifestIdCharacter - when customManifestId is being invalidated\n * against customManifestIdFolderRegex it will raise the error and include the customManifestId with marked invalid characters\n * this is the closing tag to be added after invalid character\n *\n * @namespace DownstreamElectronBE.configuration\n * @description\n * During initialization you can configure your app\n * @example\n * //somewhere in the main process\n * const downstreamElectron = require(\'downstream-electron\');\n * const userSettings = {\n *   appDir: "/Users/admin/myApp",\n *   settingsName: "settings",\n *   publicName: "public",\n *   downloadsName: "movies"\n *   numberOfManifestsInParallel: 3\n * };\n * function createWindow() {\n *   downstreamElectron.init(userSettings);\n *   const win = new BrowserWindow({\n *     width: 1200,\n *     height: 700,\n *     resizable: true,\n *     webPreferences: {\n *       plugins: true,\n *       nodeIntegration: true\n *     }\n *   });\n *   win.loadURL(\'file://index.html\');\n *   win.webContents.openDevTools();\n * }\n * app.on(\'ready\', createWindow);\n */\n\nvar electronApp = (__webpack_require__(7194).app);\n\nvar path = __webpack_require__(1017);\n\nvar settings = {\n  downloadingThreadsRules: {\n    items: [{\n      max: 10,\n      files: 5\n    }, {\n      max: 100,\n      files: 10\n    }, {\n      max: 1000,\n      files: 30\n    }, {\n      max: 100000,\n      files: 50\n    }],\n    threads: [{\n      size: 10,\n      number: 1\n    }, {\n      size: 100,\n      number: 3\n    }, {\n      size: 1000,\n      number: 4\n    }, {\n      size: 100000,\n      number: 5\n    }]\n  },\n  MAX_ERRORS_DOWNLOAD_RETRY: 5,\n  MAX_INTERNET_ERRORS_DOWNLOAD_CHUNK_RETRY: 100,\n  MAX_ERRORS_DOWNLOAD_CHUNK_RETRY: 5,\n  offlineDomain: "http://127.0.0.1",\n  offlineContentPortStart: 3010,\n  maxOfflineContentPortRange: 3030,\n  numberOfManifestsInParallel: 2,\n  stopOnError: false,\n  stores: {\n    DOWNLOADS: {\n      "LEFT": "left",\n      "DOWNLOADING": "downloading",\n      "DOWNLOADED": "downloaded",\n      "ERRORS": "errors"\n    },\n    STATUS: "status",\n    PARAMS: "params",\n    MANIFEST: "manifest",\n    PERSISTENT: "persistent",\n    DATA: "data"\n  },\n  saveToDisk: true,\n  times: {\n    DOWNLOAD_TIMEOUT: 5000,\n    RETRY_TIMEOUT: 5000\n  },\n  useChunkedEncoding: false,\n  useHeadRequests: true,\n  noCache: false,\n  defaultManifestRequestOptions: {\n    headers: {\n      "Accept": "*/*",\n      // \'Accept-Encoding\': \'gzip, deflate, br\', // gzip doesn\'t work\n      // \'Accept-Language\': \'en-US,en;q=0.8,pl;q=0.6\',\n      // \'Cache-Control\': \'no-cache\',\n      // \'Connection\': \'keep-alive\', // @TODO investigate it\n      // \'Pragma\': \'no-cache\',\n      "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Electron/1.8.6 Safari/537.36"\n    },\n    timeout: 5000\n  },\n  // matches any letter or number or unicode characters (regional characters) or "-" or "_" as a start\n  // then it may have any letter or number or unicode characters (regional characters) or space or any of the following characters\n  // ,.;\'[]{}!@#$%&*()-_=+\n  // and is all case insensitive\n  customManifestIdFolderRegex: /^([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|\\-|\\_){1,1}([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|\\ |\\,|\\.|\\;|\\\'|\\[|\\]|\\{|\\}|\\!|\\@|\\#|\\$|\\%|\\&|\\*|\\(|\\)|\\-|\\_|\\=|\\+?){0,49}$/i,\n  openingTagForInvalidCustomManifestIdCharacter: \'<span style=\\\'background-color:blue;\\\'>\',\n  closingTagForInvalidCustomManifestIdCharacter: \'</span>\'\n};\n\nfunction loadUserSettings(jsonSettings) {\n  var appDir = electronApp.getPath("userData");\n  var settingsName = "settings";\n  var publicName = "public";\n  var downloadsName = "movies";\n\n  if (jsonSettings) {\n    if (jsonSettings.appDir) {\n      appDir = jsonSettings.appDir;\n    }\n\n    if (jsonSettings.settingsName) {\n      settingsName = jsonSettings.settingsName;\n    }\n\n    if (jsonSettings.publicName) {\n      publicName = jsonSettings.publicName;\n    }\n\n    if (jsonSettings.downloadsName) {\n      downloadsName = jsonSettings.downloadsName;\n    }\n\n    if (jsonSettings.offlineDomain) {\n      settings.offlineDomain = jsonSettings.offlineDomain;\n    }\n\n    if (jsonSettings.offlineContentPortStart) {\n      settings.offlineContentPortStart = jsonSettings.offlineContentPortStart;\n    }\n\n    if (jsonSettings.maxOfflineContentPortRange) {\n      settings.maxOfflineContentPortRange = jsonSettings.maxOfflineContentPortRange;\n    }\n\n    if (jsonSettings.numberOfManifestsInParallel) {\n      settings.numberOfManifestsInParallel = jsonSettings.numberOfManifestsInParallel;\n    }\n\n    if (jsonSettings.stopOnError !== undefined) {\n      settings.stopOnError = jsonSettings.stopOnError;\n    }\n\n    if (jsonSettings.customManifestIdFolderRegex) {\n      settings.customManifestIdFolderRegex = jsonSettings.customManifestIdFolderRegex;\n    }\n\n    if (jsonSettings.openingTagForInvalidCustomManifestIdCharacter) {\n      settings.openingTagForInvalidCustomManifestIdCharacter = jsonSettings.openingTagForInvalidCustomManifestIdCharacter;\n    }\n\n    if (jsonSettings.closingTagForInvalidCustomManifestIdCharacter) {\n      settings.closingTagForInvalidCustomManifestIdCharacter = jsonSettings.closingTagForInvalidCustomManifestIdCharacter;\n    }\n\n    if (jsonSettings.useHeadRequests !== undefined) {\n      settings.useHeadRequests = jsonSettings.useHeadRequests;\n    }\n\n    if (jsonSettings.times && jsonSettings.times.RETRY_TIMEOUT) {\n      settings.times.RETRY_TIMEOUT = jsonSettings.times.RETRY_TIMEOUT;\n    }\n\n    if (jsonSettings.MAX_ERRORS_DOWNLOAD_RETRY) {\n      settings.MAX_ERRORS_DOWNLOAD_RETRY = jsonSettings.MAX_ERRORS_DOWNLOAD_RETRY;\n    }\n\n    if (jsonSettings.MAX_INTERNET_ERRORS_DOWNLOAD_CHUNK_RETRY) {\n      settings.MAX_INTERNET_ERRORS_DOWNLOAD_CHUNK_RETRY = jsonSettings.MAX_INTERNET_ERRORS_DOWNLOAD_CHUNK_RETRY;\n    }\n\n    if (jsonSettings.MAX_ERRORS_DOWNLOAD_CHUNK_RETRY) {\n      settings.MAX_ERRORS_DOWNLOAD_CHUNK_RETRY = jsonSettings.MAX_ERRORS_DOWNLOAD_CHUNK_RETRY;\n    }\n\n    if (jsonSettings.noCache) {\n      settings.noCache = jsonSettings.noCache;\n    }\n  }\n\n  appDir = path.join(path.resolve(appDir), "/");\n  var settingsFolder = path.join(path.resolve(appDir + settingsName) + "/", "/");\n  var publicFolderPath = path.join(path.resolve(appDir + publicName) + "/", "/");\n  var downloadsFolderPath = path.join(path.resolve(publicFolderPath + downloadsName) + "/", "/");\n  settings.appDir = appDir;\n  settings.downloadsFolderPath = downloadsFolderPath;\n  settings.downloadsName = downloadsName;\n  settings.publicFolderPath = publicFolderPath;\n  settings.settingsFolder = settingsFolder; // console.log(\'appDir:\', appDir);\n}\n\nfunction getSettings() {\n  return settings;\n}\n\nexports.load = loadUserSettings;\nexports.getSettings = getSettings;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9277\n')},9097:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n/**\n * @typedef manifestObject\n * @property {Object} video - video representations\n * @property {Object} audio - audio representations\n * @property {Object} text - text representations\n * @property {String} id - manifest id\n */\n\n/**\n * @memberOf DownstreamElectronFE\n * @namespace DownstreamElectronFE.downloads\n */\n\nvar downloads = {};\n/**\n * create a new download, if success the result will contain "id" which should be used for other calls\n * @method create\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestUrl - manifest url\n * @param {string} customManifestId - custom manifest id, if empty, null or \'\'\n * the id will be generated automatically.<br>\n * The manifestId is used to also store information about movie under the same folder so if you overwrite it,\n * it will be also used as a name for folder where movie content will be stored\n * customManifestId will be validated against default regex\n * {@link DownstreamElectronBE.configuration|customManifestIdFolderRegex}\n * @example\n * var url = "http://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd";\n * DownstreamElectronFE.downloads.create(url)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * DownstreamElectronFE.downloads.create(url, \'<myCustomId>\')\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.create = __webpack_require__(3678);\n/**\n * create a persistent session\n * @method createPersistent\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @param {PersistentConfig} config - persistent configuration\n * @param {boolean} [forced=false] - replace existing persistent session, if true\n * @example\n * var config = {\n *   licenseUrl: \'https://lic.staging.drmtoday.com/license-proxy-widevine/cenc/\',\n *   serverCertificate: new Uint8Array(<server_certificate>),\n *   customData: {\n *     userId: \'<user_id>\',\n *     sessionId: \'<session_id>\',\n *     merchant: \'<merchant>\'\n *   }\n * };\n * DownstreamElectronFE.downloads.createPersistent(manifestId, config)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.createPersistent = __webpack_require__(6916);\n/**\n * Get info about manifest folder\n * @method getFolderInfo\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.getFolderInfo()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.getFolderInfo = __webpack_require__(7217);\n/**\n * get ids of all downloads\n * @method getList\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.getList()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.getList = __webpack_require__(136);\n/**\n * get list of all downloads with additional info {@link manifestObject}\n * @method getListWithInfo\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.getListWithInfo()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.getListWithInfo = __webpack_require__(7318);\n/**\n * get offline link for download which can be used by any player to play movie\n * @method getOfflineLink\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.getOfflineLink(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.getOfflineLink = __webpack_require__(9074);\n/**\n * get info for download\n * @method info\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.info(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.info = __webpack_require__(589);\n/**\n * removes download\n * @method remove\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.remove(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.remove = __webpack_require__(6128);\n/**\n * removes all downloads\n * @method removeAll\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.removeAll()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.removeAll = __webpack_require__(5058);\n/**\n * removes all unfinished downloads\n * @method removeAllUnfinished\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.removeAllUnfinished()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.removeAllUnfinished = __webpack_require__(9199);\n/**\n * removes persistent information previously stored\n * @method removePersistent\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.removePersistent(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.removePersistent = __webpack_require__(7552);\n/**\n * resumes download which could be previously stopped or is broken\n * @method resume\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.resume(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.resume = __webpack_require__(7560);\n/**\n * Saves some user data this might be a string or json object.\n * This data will be available as "data" property for info of download\n * @method saveData\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @param {string|json} data - user data\n * @example\n * DownstreamElectronFE.downloads.saveData(manifestId, data)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.saveData = __webpack_require__(9463);\n/**\n * saves persistent session identifier\n * @method savePersistent\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @param {string} persistentSessionId - persistent session identifier\n * @example\n * DownstreamElectronFE.downloads.savePersistent(manifestId, persistentSessionId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.savePersistent = __webpack_require__(3880);\n/**\n * starts download\n * @method start\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @param {object} representations - representations to be downloaded, available options: \'video\', \'audio\', \'text\'.\n * For each option please provide an array of representations id to be downloaded\n * @example\n * DownstreamElectronFE.downloads.start(manifestId, {video: [\'video=400000\', \'video=795000\'], audio: [\'audio=128000\']})\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.start = __webpack_require__(1792);\n/**\n * stops download\n * @method stop\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.stop(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.stop = __webpack_require__(647);\n/**\n * stops all downloads\n * @method stopAll\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.stopAll()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.stopAll = __webpack_require__(1120);\n/**\n * subscribe to download progress\n * @method subscribe\n * @memberOf DownstreamElectronFE.downloads\n * @param {string|array} manifestId - manifest identifier, or the array of the manifests identifier.\n * @param {number} interval - in milliseconds - how often callback onProgress should be invoked\n * @param {function} onProgress - callback to be invoked as often as defined by interval with [stats information]{@link DownloadStats}\n * @param {function} onFinish - callback to be invoked when download is finished\n * @example\n * function onProgress (err, stats) {\n *   if (err) {\n *     console.logs(stats);\n *   }\n * };\n * function onFinish (err, info) {\n *   if (err) {\n *     console.log("error", err);\n *   } else {\n *     console.log("success", info);\n *   }\n * };\n * DownstreamElectronFE.downloads.subscribe(manifestId, 1000, onProgress, onFinish)\n *    .then(\n *      function onSuccess() {console.log("subscribed successfully");},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.subscribe = __webpack_require__(608);\n/**\n * removes callbacks from subscribe process\n * @method unsubscribe\n * @memberOf DownstreamElectronFE.downloads\n * @param {string|array} manifestId - manifest identifier, or the array of the manifests identifier.\n * @example\n * DownstreamElectronFE.downloads.unsubscribe(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.unsubscribe = __webpack_require__(6439);\n/**\n * update download folder info for manifest id\n * this can be usefule when user has copied download folder\n * @method updateDownloadFolder\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @param {string} downloadFolder - new download folder path\n * @example\n * DownstreamElectronFE.downloads.updateDownloadFolder(manifestId, downloadFolder)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\ndownloads.updateDownloadFolder = __webpack_require__(1052);\n/**\n * remove all subscribers\n * @private\n * @method removeSubscribers\n * @memberOf DownstreamElectronFE\n * @example\n * DownstreamElectronFE.removeSubscribers()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\n\nvar removeSubscribers = __webpack_require__(8105);\n\nmodule.exports = {\n  downloads: downloads,\n  removeSubscribers: removeSubscribers\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9097\n')},3678:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar Manifest = (__webpack_require__(1269)/* .Manifest */ .G);\n\nvar translation = __webpack_require__(817);\n\nvar canCreateManifest = __webpack_require__(5079);\n\nvar getInvalidDiff = __webpack_require__(7815);\n\nvar appSettings = __webpack_require__(9277);\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestUrl, customManifestId, manifestStr) {\n  var useCustomId = true;\n\n  if (typeof customManifestId === "undefined" || customManifestId === "" || customManifestId === null) {\n    useCustomId = false;\n  }\n\n  if (useCustomId) {\n    if (typeof customManifestId !== "undefined" && typeof customManifestId !== "number" && typeof customManifestId !== "string") {\n      onFailure(translation.getError(translation.e.manifests.INVALID_ID, customManifestId));\n      return;\n    }\n\n    var customManifestIdFolderRegex = appSettings.getSettings().customManifestIdFolderRegex;\n\n    if (!customManifestId.match(customManifestIdFolderRegex)) {\n      var invalid = getInvalidDiff(customManifestId, customManifestIdFolderRegex, appSettings.getSettings().openingTagForInvalidCustomManifestIdCharacter, appSettings.getSettings().closingTagForInvalidCustomManifestIdCharacter);\n      onFailure(translation.getError(translation.e.manifests.INVALID_ID, invalid));\n      return;\n    }\n  }\n\n  var manifest = new Manifest(customManifestId);\n  var promise;\n\n  if (manifestStr) {\n    promise = manifest.loadWithManifest(manifestUrl, manifestStr);\n  } else {\n    promise = manifest.load(manifestUrl);\n  }\n\n  promise.then(function () {\n    if (useCustomId) {\n      canCreateManifest(customManifestId).then(function () {\n        api.manifestController.cacheManifest(manifest);\n        onSuccess(manifest.getJsonInfo());\n      }, function (err) {\n        onFailure(translation.getError(translation.e.manifests.FOLDER_ALREADY_EXISTS, customManifestId), err);\n      });\n    } else {\n      api.manifestController.cacheManifest(manifest);\n      onSuccess(manifest.getJsonInfo());\n    }\n  }, function (err) {\n    onFailure(translation.getError(translation.e.manifests.LOADING_FAILED, manifestUrl), err);\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TUFDQWpCLFNBQVMsQ0FBQ2lCLFFBQVEsQ0FBQ08sV0FBVCxFQUFELENBQVQ7SUFDRDtFQUNGLENBWkQsRUFZRyxVQUFDQyxHQUFELEVBQVM7SUFDVnhCLFNBQVMsQ0FBQ1IsV0FBVyxDQUFDYyxRQUFaLENBQXFCZCxXQUFXLENBQUNlLENBQVosQ0FBY0MsU0FBZCxDQUF3QmtCLGNBQTdDLEVBQTZEeEIsV0FBN0QsQ0FBRCxFQUE0RXNCLEdBQTVFLENBQVQ7RUFDRCxDQWREO0FBZUQsQ0FwREQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2JlLW1ldGhvZHMvZG93bmxvYWRzL2NyZWF0ZS5qcz9lYzI0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBNYW5pZmVzdCA9IHJlcXVpcmUoXCIuLi8uLi9tYW5pZmVzdC9sb2FkZXIvbWFuaWZlc3RcIikuTWFuaWZlc3Q7XG5jb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoXCIuLi8uLi90cmFuc2xhdGlvbi9pbmRleFwiKTtcbmNvbnN0IGNhbkNyZWF0ZU1hbmlmZXN0ID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvY2FuLWNyZWF0ZS1tYW5pZmVzdFwiKTtcbmNvbnN0IGdldEludmFsaWREaWZmID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvZ2V0LWludmFsaWQtZGlmZlwiKTtcbmNvbnN0IGFwcFNldHRpbmdzID0gcmVxdWlyZShcIi4uLy4uL2FwcC1zZXR0aW5nc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdFVybCwgY3VzdG9tTWFuaWZlc3RJZCwgbWFuaWZlc3RTdHIpIHtcbiAgdmFyIHVzZUN1c3RvbUlkID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGN1c3RvbU1hbmlmZXN0SWQgPT09IFwidW5kZWZpbmVkXCIgfHxcbiAgICBjdXN0b21NYW5pZmVzdElkID09PSBcIlwiIHx8XG4gICAgY3VzdG9tTWFuaWZlc3RJZCA9PT0gbnVsbCkge1xuICAgIHVzZUN1c3RvbUlkID0gZmFsc2U7XG4gIH1cblxuICBpZiAodXNlQ3VzdG9tSWQpIHtcbiAgICBpZiAodHlwZW9mIGN1c3RvbU1hbmlmZXN0SWQgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgIHR5cGVvZiBjdXN0b21NYW5pZmVzdElkICE9PSBcIm51bWJlclwiICYmXG4gICAgICB0eXBlb2YgY3VzdG9tTWFuaWZlc3RJZCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUubWFuaWZlc3RzLklOVkFMSURfSUQsIGN1c3RvbU1hbmlmZXN0SWQpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY3VzdG9tTWFuaWZlc3RJZEZvbGRlclJlZ2V4ID0gYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5jdXN0b21NYW5pZmVzdElkRm9sZGVyUmVnZXg7XG5cbiAgICBpZiAoIWN1c3RvbU1hbmlmZXN0SWQubWF0Y2goY3VzdG9tTWFuaWZlc3RJZEZvbGRlclJlZ2V4KSkge1xuICAgICAgY29uc3QgaW52YWxpZCA9IGdldEludmFsaWREaWZmKFxuICAgICAgICBjdXN0b21NYW5pZmVzdElkLFxuICAgICAgICBjdXN0b21NYW5pZmVzdElkRm9sZGVyUmVnZXgsXG4gICAgICAgIGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkub3BlbmluZ1RhZ0ZvckludmFsaWRDdXN0b21NYW5pZmVzdElkQ2hhcmFjdGVyLFxuICAgICAgICBhcHBTZXR0aW5ncy5nZXRTZXR0aW5ncygpLmNsb3NpbmdUYWdGb3JJbnZhbGlkQ3VzdG9tTWFuaWZlc3RJZENoYXJhY3Rlcik7XG4gICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5tYW5pZmVzdHMuSU5WQUxJRF9JRCwgaW52YWxpZCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGxldCBtYW5pZmVzdCA9IG5ldyBNYW5pZmVzdChjdXN0b21NYW5pZmVzdElkKTtcbiAgbGV0IHByb21pc2U7XG4gIGlmIChtYW5pZmVzdFN0cikge1xuICAgIHByb21pc2UgPSBtYW5pZmVzdC5sb2FkV2l0aE1hbmlmZXN0KG1hbmlmZXN0VXJsLCBtYW5pZmVzdFN0cilcbiAgfSBlbHNlIHtcbiAgICBwcm9taXNlID0gbWFuaWZlc3QubG9hZChtYW5pZmVzdFVybCk7XG4gIH1cblxuICBwcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgIGlmICh1c2VDdXN0b21JZCkge1xuICAgICAgY2FuQ3JlYXRlTWFuaWZlc3QoY3VzdG9tTWFuaWZlc3RJZCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFwaS5tYW5pZmVzdENvbnRyb2xsZXIuY2FjaGVNYW5pZmVzdChtYW5pZmVzdCk7XG4gICAgICAgIG9uU3VjY2VzcyhtYW5pZmVzdC5nZXRKc29uSW5mbygpKTtcbiAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUubWFuaWZlc3RzLkZPTERFUl9BTFJFQURZX0VYSVNUUywgY3VzdG9tTWFuaWZlc3RJZCksIGVycik7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLm1hbmlmZXN0Q29udHJvbGxlci5jYWNoZU1hbmlmZXN0KG1hbmlmZXN0KTtcbiAgICAgIG9uU3VjY2VzcyhtYW5pZmVzdC5nZXRKc29uSW5mbygpKTtcbiAgICB9XG4gIH0sIChlcnIpID0+IHtcbiAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5tYW5pZmVzdHMuTE9BRElOR19GQUlMRUQsIG1hbmlmZXN0VXJsKSwgZXJyKTtcbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbIk1hbmlmZXN0IiwicmVxdWlyZSIsInRyYW5zbGF0aW9uIiwiY2FuQ3JlYXRlTWFuaWZlc3QiLCJnZXRJbnZhbGlkRGlmZiIsImFwcFNldHRpbmdzIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsInRhcmdldCIsIm1hbmlmZXN0VXJsIiwiY3VzdG9tTWFuaWZlc3RJZCIsIm1hbmlmZXN0U3RyIiwidXNlQ3VzdG9tSWQiLCJnZXRFcnJvciIsImUiLCJtYW5pZmVzdHMiLCJJTlZBTElEX0lEIiwiY3VzdG9tTWFuaWZlc3RJZEZvbGRlclJlZ2V4IiwiZ2V0U2V0dGluZ3MiLCJtYXRjaCIsImludmFsaWQiLCJvcGVuaW5nVGFnRm9ySW52YWxpZEN1c3RvbU1hbmlmZXN0SWRDaGFyYWN0ZXIiLCJjbG9zaW5nVGFnRm9ySW52YWxpZEN1c3RvbU1hbmlmZXN0SWRDaGFyYWN0ZXIiLCJtYW5pZmVzdCIsInByb21pc2UiLCJsb2FkV2l0aE1hbmlmZXN0IiwibG9hZCIsInRoZW4iLCJtYW5pZmVzdENvbnRyb2xsZXIiLCJjYWNoZU1hbmlmZXN0IiwiZ2V0SnNvbkluZm8iLCJlcnIiLCJGT0xERVJfQUxSRUFEWV9FWElTVFMiLCJMT0FESU5HX0ZBSUxFRCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3678\n')},6916:module=>{"use strict";eval("\n\nmodule.exports = function (api, onSuccess\n/*, onFailure, target, manifestId */\n) {\n  onSuccess();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjkxNi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUM7QUFBVTtBQUF6QixFQUErRDtFQUM5RUEsU0FBUztBQUNWLENBRkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2JlLW1ldGhvZHMvZG93bmxvYWRzL2NyZWF0ZVBlcnNpc3RlbnQuanM/ZWFkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MgLyosIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdElkICovKSB7XG4gIG9uU3VjY2VzcygpO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYXBpIiwib25TdWNjZXNzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6916\n")},7217:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId) {\n  api.offlineController.getManifestFolderInfo(manifestId, function (err, info) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.INFO_FAILED, manifestId), err);\n    } else {\n      onSuccess(info);\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzIxNy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsR0FBRCxDQUEzQjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQkMsU0FBMUIsRUFBcUNDLE1BQXJDLEVBQTZDQyxVQUE3QyxFQUF5RDtFQUN4RUosR0FBRyxDQUFDSyxpQkFBSixDQUFzQkMscUJBQXRCLENBQTRDRixVQUE1QyxFQUF3RCxVQUFVRyxHQUFWLEVBQWVDLElBQWYsRUFBcUI7SUFDM0UsSUFBSUQsR0FBSixFQUFTO01BQ1BMLFNBQVMsQ0FBQ04sV0FBVyxDQUFDYSxRQUFaLENBQXFCYixXQUFXLENBQUNjLENBQVosQ0FBY0MsU0FBZCxDQUF3QkMsV0FBN0MsRUFBMERSLFVBQTFELENBQUQsRUFBd0VHLEdBQXhFLENBQVQ7SUFDRCxDQUZELE1BRU87TUFDTE4sU0FBUyxDQUFDTyxJQUFELENBQVQ7SUFDRDtFQUNGLENBTkQ7QUFPRCxDQVJEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9iZS1tZXRob2RzL2Rvd25sb2Fkcy9mb2xkZXItaW5mby5qcz9lY2MyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3RyYW5zbGF0aW9uL2luZGV4Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgbWFuaWZlc3RJZCkge1xuICBhcGkub2ZmbGluZUNvbnRyb2xsZXIuZ2V0TWFuaWZlc3RGb2xkZXJJbmZvKG1hbmlmZXN0SWQsIGZ1bmN0aW9uIChlcnIsIGluZm8pIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5tYW5pZmVzdHMuSU5GT19GQUlMRUQsIG1hbmlmZXN0SWQpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvblN1Y2Nlc3MoaW5mbyk7XG4gICAgfVxuICB9KTtcbn07XG4iXSwibmFtZXMiOlsidHJhbnNsYXRpb24iLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsInRhcmdldCIsIm1hbmlmZXN0SWQiLCJvZmZsaW5lQ29udHJvbGxlciIsImdldE1hbmlmZXN0Rm9sZGVySW5mbyIsImVyciIsImluZm8iLCJnZXRFcnJvciIsImUiLCJtYW5pZmVzdHMiLCJJTkZPX0ZBSUxFRCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7217\n")},7318:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\n\nmodule.exports = function (api, onSuccess, onFailure, target, full) {\n  api.offlineController.getManifestsListWithInfo(function (err, list) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.LIST_LOADING_FAILED), err);\n    } else {\n      onSuccess(list);\n    }\n  }, full);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzMxOC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsR0FBRCxDQUEzQjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQkMsU0FBMUIsRUFBcUNDLE1BQXJDLEVBQTZDQyxJQUE3QyxFQUFtRDtFQUNsRUosR0FBRyxDQUFDSyxpQkFBSixDQUFzQkMsd0JBQXRCLENBQStDLFVBQVVDLEdBQVYsRUFBZUMsSUFBZixFQUFxQjtJQUNsRSxJQUFJRCxHQUFKLEVBQVM7TUFDUEwsU0FBUyxDQUFDTixXQUFXLENBQUNhLFFBQVosQ0FBcUJiLFdBQVcsQ0FBQ2MsQ0FBWixDQUFjQyxTQUFkLENBQXdCQyxtQkFBN0MsQ0FBRCxFQUFvRUwsR0FBcEUsQ0FBVDtJQUNELENBRkQsTUFFTztNQUNMTixTQUFTLENBQUNPLElBQUQsQ0FBVDtJQUNEO0VBQ0YsQ0FORCxFQU1HSixJQU5IO0FBT0QsQ0FSRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvZ2V0LWxpc3Qtd2l0aC1pbmZvLmpzP2Y0ODEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHRyYW5zbGF0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHJhbnNsYXRpb24vaW5kZXgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBmdWxsKSB7XG4gIGFwaS5vZmZsaW5lQ29udHJvbGxlci5nZXRNYW5pZmVzdHNMaXN0V2l0aEluZm8oZnVuY3Rpb24gKGVyciwgbGlzdCkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLm1hbmlmZXN0cy5MSVNUX0xPQURJTkdfRkFJTEVEKSwgZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb25TdWNjZXNzKGxpc3QpO1xuICAgIH1cbiAgfSwgZnVsbCk7XG59O1xuIl0sIm5hbWVzIjpbInRyYW5zbGF0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJ0YXJnZXQiLCJmdWxsIiwib2ZmbGluZUNvbnRyb2xsZXIiLCJnZXRNYW5pZmVzdHNMaXN0V2l0aEluZm8iLCJlcnIiLCJsaXN0IiwiZ2V0RXJyb3IiLCJlIiwibWFuaWZlc3RzIiwiTElTVF9MT0FESU5HX0ZBSUxFRCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7318\n")},136:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\n\nmodule.exports = function (api, onSuccess, onFailure) {\n  api.offlineController.getManifestsList(function (err, list) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.LIST_LOADING_FAILED), err);\n    } else {\n      onSuccess(list);\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM2LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQU1BLFdBQVcsR0FBR0MsbUJBQU8sQ0FBQyxHQUFELENBQTNCOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBVUMsR0FBVixFQUFlQyxTQUFmLEVBQTBCQyxTQUExQixFQUFxQztFQUNwREYsR0FBRyxDQUFDRyxpQkFBSixDQUFzQkMsZ0JBQXRCLENBQXVDLFVBQVVDLEdBQVYsRUFBZUMsSUFBZixFQUFxQjtJQUMxRCxJQUFJRCxHQUFKLEVBQVM7TUFDUEgsU0FBUyxDQUFDTixXQUFXLENBQUNXLFFBQVosQ0FBcUJYLFdBQVcsQ0FBQ1ksQ0FBWixDQUFjQyxTQUFkLENBQXdCQyxtQkFBN0MsQ0FBRCxFQUFvRUwsR0FBcEUsQ0FBVDtJQUNELENBRkQsTUFFTztNQUNMSixTQUFTLENBQUNLLElBQUQsQ0FBVDtJQUNEO0VBQ0YsQ0FORDtBQU9ELENBUkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2JlLW1ldGhvZHMvZG93bmxvYWRzL2dldC1saXN0LmpzPzNmYjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHRyYW5zbGF0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHJhbnNsYXRpb24vaW5kZXgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSkge1xuICBhcGkub2ZmbGluZUNvbnRyb2xsZXIuZ2V0TWFuaWZlc3RzTGlzdChmdW5jdGlvbiAoZXJyLCBsaXN0KSB7XG4gICAgaWYgKGVycikge1xuICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUubWFuaWZlc3RzLkxJU1RfTE9BRElOR19GQUlMRUQpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvblN1Y2Nlc3MobGlzdCk7XG4gICAgfVxuICB9KTtcbn07XG4iXSwibmFtZXMiOlsidHJhbnNsYXRpb24iLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsIm9mZmxpbmVDb250cm9sbGVyIiwiZ2V0TWFuaWZlc3RzTGlzdCIsImVyciIsImxpc3QiLCJnZXRFcnJvciIsImUiLCJtYW5pZmVzdHMiLCJMSVNUX0xPQURJTkdfRkFJTEVEIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///136\n")},9074:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId) {\n  api.offlineController.getManifestInfo(manifestId, function (err, info) {\n    if (err) {\n      onFailure(translation.getError(translation.e.downloads._GENERAL), err);\n    } else {\n      onSuccess({\n        offlineLink: api.getOfflinePath(manifestId) + info.manifest.name,\n        persistent: info.persistent\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTA3NC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsR0FBRCxDQUEzQjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQkMsU0FBMUIsRUFBcUNDLE1BQXJDLEVBQTZDQyxVQUE3QyxFQUF5RDtFQUN4RUosR0FBRyxDQUFDSyxpQkFBSixDQUFzQkMsZUFBdEIsQ0FBc0NGLFVBQXRDLEVBQWtELFVBQVVHLEdBQVYsRUFBZUMsSUFBZixFQUFxQjtJQUNyRSxJQUFJRCxHQUFKLEVBQVM7TUFDUEwsU0FBUyxDQUFDTixXQUFXLENBQUNhLFFBQVosQ0FBcUJiLFdBQVcsQ0FBQ2MsQ0FBWixDQUFjQyxTQUFkLENBQXdCQyxRQUE3QyxDQUFELEVBQXlETCxHQUF6RCxDQUFUO0lBQ0QsQ0FGRCxNQUVPO01BQ0xOLFNBQVMsQ0FBQztRQUNSWSxXQUFXLEVBQUViLEdBQUcsQ0FBQ2MsY0FBSixDQUFtQlYsVUFBbkIsSUFBaUNJLElBQUksQ0FBQ08sUUFBTCxDQUFjQyxJQURwRDtRQUVSQyxVQUFVLEVBQUVULElBQUksQ0FBQ1M7TUFGVCxDQUFELENBQVQ7SUFJRDtFQUNGLENBVEQ7QUFVRCxDQVhEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9iZS1tZXRob2RzL2Rvd25sb2Fkcy9nZXQtb2ZmbGluZS1saW5rLmpzP2Y0YzIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3RyYW5zbGF0aW9uL2luZGV4Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgbWFuaWZlc3RJZCkge1xuICBhcGkub2ZmbGluZUNvbnRyb2xsZXIuZ2V0TWFuaWZlc3RJbmZvKG1hbmlmZXN0SWQsIGZ1bmN0aW9uIChlcnIsIGluZm8pIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuX0dFTkVSQUwpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvblN1Y2Nlc3Moe1xuICAgICAgICBvZmZsaW5lTGluazogYXBpLmdldE9mZmxpbmVQYXRoKG1hbmlmZXN0SWQpICsgaW5mby5tYW5pZmVzdC5uYW1lLFxuICAgICAgICBwZXJzaXN0ZW50OiBpbmZvLnBlcnNpc3RlbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbInRyYW5zbGF0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJ0YXJnZXQiLCJtYW5pZmVzdElkIiwib2ZmbGluZUNvbnRyb2xsZXIiLCJnZXRNYW5pZmVzdEluZm8iLCJlcnIiLCJpbmZvIiwiZ2V0RXJyb3IiLCJlIiwiZG93bmxvYWRzIiwiX0dFTkVSQUwiLCJvZmZsaW5lTGluayIsImdldE9mZmxpbmVQYXRoIiwibWFuaWZlc3QiLCJuYW1lIiwicGVyc2lzdGVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9074\n")},589:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, full) {\n  api.offlineController.getManifestInfo(manifestId, function (err, info) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.INFO_FAILED, manifestId), err);\n    } else {\n      onSuccess(info);\n    }\n  }, full);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTg5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQU1BLFdBQVcsR0FBR0MsbUJBQU8sQ0FBQyxHQUFELENBQTNCOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBVUMsR0FBVixFQUFlQyxTQUFmLEVBQTBCQyxTQUExQixFQUFxQ0MsTUFBckMsRUFBNkNDLFVBQTdDLEVBQXlEQyxJQUF6RCxFQUErRDtFQUM5RUwsR0FBRyxDQUFDTSxpQkFBSixDQUFzQkMsZUFBdEIsQ0FBc0NILFVBQXRDLEVBQWtELFVBQVVJLEdBQVYsRUFBZUMsSUFBZixFQUFxQjtJQUNyRSxJQUFJRCxHQUFKLEVBQVM7TUFDUE4sU0FBUyxDQUFDTixXQUFXLENBQUNjLFFBQVosQ0FBcUJkLFdBQVcsQ0FBQ2UsQ0FBWixDQUFjQyxTQUFkLENBQXdCQyxXQUE3QyxFQUEwRFQsVUFBMUQsQ0FBRCxFQUF3RUksR0FBeEUsQ0FBVDtJQUNELENBRkQsTUFFTztNQUNMUCxTQUFTLENBQUNRLElBQUQsQ0FBVDtJQUNEO0VBQ0YsQ0FORCxFQU1HSixJQU5IO0FBT0QsQ0FSRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvaW5mby5qcz82ZGI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3RyYW5zbGF0aW9uL2luZGV4Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgbWFuaWZlc3RJZCwgZnVsbCkge1xuICBhcGkub2ZmbGluZUNvbnRyb2xsZXIuZ2V0TWFuaWZlc3RJbmZvKG1hbmlmZXN0SWQsIGZ1bmN0aW9uIChlcnIsIGluZm8pIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5tYW5pZmVzdHMuSU5GT19GQUlMRUQsIG1hbmlmZXN0SWQpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvblN1Y2Nlc3MoaW5mbyk7XG4gICAgfVxuICB9LCBmdWxsKTtcbn07XG4iXSwibmFtZXMiOlsidHJhbnNsYXRpb24iLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsInRhcmdldCIsIm1hbmlmZXN0SWQiLCJmdWxsIiwib2ZmbGluZUNvbnRyb2xsZXIiLCJnZXRNYW5pZmVzdEluZm8iLCJlcnIiLCJpbmZvIiwiZ2V0RXJyb3IiLCJlIiwibWFuaWZlc3RzIiwiSU5GT19GQUlMRUQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///589\n")},9199:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\n\nvar STATUSES = __webpack_require__(8255);\n\nmodule.exports = function (api, onSuccess, onFailure) {\n  api.offlineController.getManifestsListWithInfo(function (err, results) {\n    if (err) {\n      onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_UNFINISHED_FAILED), err);\n    } else {\n      var promises = [];\n      var manifestIds = [];\n\n      if (!results.length) {\n        onFailure(translation.getError(translation.e.downloads.ALREADY_REMOVED_ALL_UNFINISHED));\n        return;\n      }\n\n      for (var i = 0, j = results.length; i < j; i++) {\n        var status = results[i].status;\n        var manifestId = results[i].manifestInfo.id;\n\n        if (status !== STATUSES.FINISHED) {\n          manifestIds.push(manifestId);\n          promises.push(api.downloadsController.removePromise(manifestId));\n        }\n      }\n\n      Promise.all(promises).then(function () {\n        var promises = [];\n\n        for (var _i = 0, _j = manifestIds.length; _i < _j; _i++) {\n          promises.push(api.offlineController.removePromise(manifestIds[_i]));\n        }\n\n        Promise.all(promises).then(function () {\n          api.subscribersController.unsubscribe(manifestIds);\n          api.manifestController.removeFromCache(manifestIds);\n          onSuccess(manifestIds);\n        }, function (err) {\n          onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_UNFINISHED_FAILED), err);\n        });\n      }, function (err) {\n        onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_UNFINISHED_FAILED), err);\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0lBaUJEO0VBQ0YsQ0FwQ0Q7QUFxQ0QsQ0F0Q0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2JlLW1ldGhvZHMvZG93bmxvYWRzL3JlbW92ZS1hbGwtdW5maW5pc2hlZC5qcz83NzFkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgdHJhbnNsYXRpb24gPSByZXF1aXJlKCcuLi8uLi90cmFuc2xhdGlvbi9pbmRleCcpO1xuY29uc3QgU1RBVFVTRVMgPSByZXF1aXJlKFwiLi4vLi4vZG93bmxvYWRzL3N0YXR1c2VzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlKSB7XG4gIGFwaS5vZmZsaW5lQ29udHJvbGxlci5nZXRNYW5pZmVzdHNMaXN0V2l0aEluZm8oZnVuY3Rpb24gKGVyciwgcmVzdWx0cykge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5SRU1PVklOR19BTExfVU5GSU5JU0hFRF9GQUlMRUQpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcHJvbWlzZXMgPSBbXTtcbiAgICAgIGxldCBtYW5pZmVzdElkcyA9IFtdO1xuICAgICAgaWYgKCFyZXN1bHRzLmxlbmd0aCkge1xuICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuQUxSRUFEWV9SRU1PVkVEX0FMTF9VTkZJTklTSEVEKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gcmVzdWx0cy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgbGV0IHN0YXR1cyA9IHJlc3VsdHNbaV0uc3RhdHVzO1xuICAgICAgICBsZXQgbWFuaWZlc3RJZCA9IHJlc3VsdHNbaV0ubWFuaWZlc3RJbmZvLmlkO1xuICAgICAgICBpZiAoc3RhdHVzICE9PSBTVEFUVVNFUy5GSU5JU0hFRCkge1xuICAgICAgICAgIG1hbmlmZXN0SWRzLnB1c2gobWFuaWZlc3RJZCk7XG4gICAgICAgICAgcHJvbWlzZXMucHVzaChhcGkuZG93bmxvYWRzQ29udHJvbGxlci5yZW1vdmVQcm9taXNlKG1hbmlmZXN0SWQpKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGxldCBwcm9taXNlcyA9IFtdO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gbWFuaWZlc3RJZHMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgICBwcm9taXNlcy5wdXNoKGFwaS5vZmZsaW5lQ29udHJvbGxlci5yZW1vdmVQcm9taXNlKG1hbmlmZXN0SWRzW2ldKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBhcGkuc3Vic2NyaWJlcnNDb250cm9sbGVyLnVuc3Vic2NyaWJlKG1hbmlmZXN0SWRzKTtcbiAgICAgICAgICAgICAgYXBpLm1hbmlmZXN0Q29udHJvbGxlci5yZW1vdmVGcm9tQ2FjaGUobWFuaWZlc3RJZHMpO1xuICAgICAgICAgICAgICBvblN1Y2Nlc3MobWFuaWZlc3RJZHMpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuUkVNT1ZJTkdfQUxMX1VORklOSVNIRURfRkFJTEVEKSwgZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUuZG93bmxvYWRzLlJFTU9WSU5HX0FMTF9VTkZJTklTSEVEX0ZBSUxFRCksIGVycik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbInRyYW5zbGF0aW9uIiwicmVxdWlyZSIsIlNUQVRVU0VTIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsIm9mZmxpbmVDb250cm9sbGVyIiwiZ2V0TWFuaWZlc3RzTGlzdFdpdGhJbmZvIiwiZXJyIiwicmVzdWx0cyIsImdldEVycm9yIiwiZSIsImRvd25sb2FkcyIsIlJFTU9WSU5HX0FMTF9VTkZJTklTSEVEX0ZBSUxFRCIsInByb21pc2VzIiwibWFuaWZlc3RJZHMiLCJsZW5ndGgiLCJBTFJFQURZX1JFTU9WRURfQUxMX1VORklOSVNIRUQiLCJpIiwiaiIsInN0YXR1cyIsIm1hbmlmZXN0SWQiLCJtYW5pZmVzdEluZm8iLCJpZCIsIkZJTklTSEVEIiwicHVzaCIsImRvd25sb2Fkc0NvbnRyb2xsZXIiLCJyZW1vdmVQcm9taXNlIiwiUHJvbWlzZSIsImFsbCIsInRoZW4iLCJzdWJzY3JpYmVyc0NvbnRyb2xsZXIiLCJ1bnN1YnNjcmliZSIsIm1hbmlmZXN0Q29udHJvbGxlciIsInJlbW92ZUZyb21DYWNoZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9199\n")},5058:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\n\nmodule.exports = function (api, onSuccess, onFailure) {\n  api.offlineController.getManifestsListWithInfo(function (err, manifests) {\n    if (err) {\n      onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_FAILED), err);\n    } else {\n      var manifestIds = manifests.map(function (manifest) {\n        return manifest.manifestInfo.id;\n      });\n      var promises = [];\n\n      for (var i = 0, j = manifestIds.length; i < j; i++) {\n        promises.push(api.downloadsController.removePromise(manifestIds[i]));\n      }\n\n      Promise.all(promises).then(function () {\n        api.offlineController.removeAllPromise().then(function () {\n          api.subscribersController.unsubscribeAll();\n          api.manifestController.removeFromCacheAll();\n          onSuccess(manifests);\n        }, function (err) {\n          onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_FAILED), err);\n        });\n      }, function (err) {\n        onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_FAILED), err);\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTA1OC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsR0FBRCxDQUEzQjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQkMsU0FBMUIsRUFBcUM7RUFDcERGLEdBQUcsQ0FBQ0csaUJBQUosQ0FBc0JDLHdCQUF0QixDQUErQyxVQUFVQyxHQUFWLEVBQWVDLFNBQWYsRUFBMEI7SUFDdkUsSUFBSUQsR0FBSixFQUFTO01BQ1BILFNBQVMsQ0FBQ04sV0FBVyxDQUFDVyxRQUFaLENBQXFCWCxXQUFXLENBQUNZLENBQVosQ0FBY0MsU0FBZCxDQUF3QkMsbUJBQTdDLENBQUQsRUFBb0VMLEdBQXBFLENBQVQ7SUFDRCxDQUZELE1BRU87TUFDTCxJQUFNTSxXQUFXLEdBQUdMLFNBQVMsQ0FBQ00sR0FBVixDQUFjLFVBQVVDLFFBQVYsRUFBb0I7UUFDcEQsT0FBT0EsUUFBUSxDQUFDQyxZQUFULENBQXNCQyxFQUE3QjtNQUNELENBRm1CLENBQXBCO01BR0EsSUFBSUMsUUFBUSxHQUFHLEVBQWY7O01BQ0EsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBUixFQUFXQyxDQUFDLEdBQUdQLFdBQVcsQ0FBQ1EsTUFBaEMsRUFBd0NGLENBQUMsR0FBR0MsQ0FBNUMsRUFBK0NELENBQUMsRUFBaEQsRUFBb0Q7UUFDbERELFFBQVEsQ0FBQ0ksSUFBVCxDQUFjcEIsR0FBRyxDQUFDcUIsbUJBQUosQ0FBd0JDLGFBQXhCLENBQXNDWCxXQUFXLENBQUNNLENBQUQsQ0FBakQsQ0FBZDtNQUNEOztNQUNETSxPQUFPLENBQUNDLEdBQVIsQ0FBWVIsUUFBWixFQUNLUyxJQURMLENBQ1UsWUFBWTtRQUNoQnpCLEdBQUcsQ0FBQ0csaUJBQUosQ0FBc0J1QixnQkFBdEIsR0FDS0QsSUFETCxDQUNVLFlBQVk7VUFDaEJ6QixHQUFHLENBQUMyQixxQkFBSixDQUEwQkMsY0FBMUI7VUFDQTVCLEdBQUcsQ0FBQzZCLGtCQUFKLENBQXVCQyxrQkFBdkI7VUFDQTdCLFNBQVMsQ0FBQ0ssU0FBRCxDQUFUO1FBQ0QsQ0FMTCxFQUtPLFVBQVVELEdBQVYsRUFBZTtVQUNoQkgsU0FBUyxDQUFDTixXQUFXLENBQUNXLFFBQVosQ0FBcUJYLFdBQVcsQ0FBQ1ksQ0FBWixDQUFjQyxTQUFkLENBQXdCQyxtQkFBN0MsQ0FBRCxFQUFvRUwsR0FBcEUsQ0FBVDtRQUNELENBUEw7TUFRRCxDQVZMLEVBVU8sVUFBVUEsR0FBVixFQUFlO1FBQ2hCSCxTQUFTLENBQUNOLFdBQVcsQ0FBQ1csUUFBWixDQUFxQlgsV0FBVyxDQUFDWSxDQUFaLENBQWNDLFNBQWQsQ0FBd0JDLG1CQUE3QyxDQUFELEVBQW9FTCxHQUFwRSxDQUFUO01BQ0QsQ0FaTDtJQWFEO0VBQ0YsQ0F6QkQ7QUEwQkQsQ0EzQkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2JlLW1ldGhvZHMvZG93bmxvYWRzL3JlbW92ZS1hbGwuanM/ZjY1YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgdHJhbnNsYXRpb24gPSByZXF1aXJlKCcuLi8uLi90cmFuc2xhdGlvbi9pbmRleCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlKSB7XG4gIGFwaS5vZmZsaW5lQ29udHJvbGxlci5nZXRNYW5pZmVzdHNMaXN0V2l0aEluZm8oZnVuY3Rpb24gKGVyciwgbWFuaWZlc3RzKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUuZG93bmxvYWRzLlJFTU9WSU5HX0FMTF9GQUlMRUQpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBtYW5pZmVzdElkcyA9IG1hbmlmZXN0cy5tYXAoZnVuY3Rpb24gKG1hbmlmZXN0KSB7XG4gICAgICAgIHJldHVybiBtYW5pZmVzdC5tYW5pZmVzdEluZm8uaWQ7XG4gICAgICB9KTtcbiAgICAgIGxldCBwcm9taXNlcyA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGogPSBtYW5pZmVzdElkcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgcHJvbWlzZXMucHVzaChhcGkuZG93bmxvYWRzQ29udHJvbGxlci5yZW1vdmVQcm9taXNlKG1hbmlmZXN0SWRzW2ldKSk7XG4gICAgICB9XG4gICAgICBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBhcGkub2ZmbGluZUNvbnRyb2xsZXIucmVtb3ZlQWxsUHJvbWlzZSgpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgYXBpLnN1YnNjcmliZXJzQ29udHJvbGxlci51bnN1YnNjcmliZUFsbCgpO1xuICAgICAgICAgICAgICAgICAgYXBpLm1hbmlmZXN0Q29udHJvbGxlci5yZW1vdmVGcm9tQ2FjaGVBbGwoKTtcbiAgICAgICAgICAgICAgICAgIG9uU3VjY2VzcyhtYW5pZmVzdHMpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5SRU1PVklOR19BTExfRkFJTEVEKSwgZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuUkVNT1ZJTkdfQUxMX0ZBSUxFRCksIGVycik7XG4gICAgICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn07XG4iXSwibmFtZXMiOlsidHJhbnNsYXRpb24iLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsIm9mZmxpbmVDb250cm9sbGVyIiwiZ2V0TWFuaWZlc3RzTGlzdFdpdGhJbmZvIiwiZXJyIiwibWFuaWZlc3RzIiwiZ2V0RXJyb3IiLCJlIiwiZG93bmxvYWRzIiwiUkVNT1ZJTkdfQUxMX0ZBSUxFRCIsIm1hbmlmZXN0SWRzIiwibWFwIiwibWFuaWZlc3QiLCJtYW5pZmVzdEluZm8iLCJpZCIsInByb21pc2VzIiwiaSIsImoiLCJsZW5ndGgiLCJwdXNoIiwiZG93bmxvYWRzQ29udHJvbGxlciIsInJlbW92ZVByb21pc2UiLCJQcm9taXNlIiwiYWxsIiwidGhlbiIsInJlbW92ZUFsbFByb21pc2UiLCJzdWJzY3JpYmVyc0NvbnRyb2xsZXIiLCJ1bnN1YnNjcmliZUFsbCIsIm1hbmlmZXN0Q29udHJvbGxlciIsInJlbW92ZUZyb21DYWNoZUFsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5058\n")},7552:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar appSettings = __webpack_require__(9277);\n\nvar translation = __webpack_require__(817);\n\nvar removeDir = __webpack_require__(6951);\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId) {\n  api.offlineController.getManifestInfo(manifestId, function (err, info) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId), err);\n    } else {\n      var file = appSettings.getSettings().settingsFolder + manifestId + "/" + appSettings.getSettings().stores.PERSISTENT + ".json";\n      removeDir(file, function (err) {\n        if (err && err.code !== "ENOENT") {\n          onFailure(translation.getError(translation.e.downloads.REMOVING_PERSISTENT_FAILED, manifestId), err);\n        } else {\n          onSuccess(info);\n        }\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzU1Mi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsSUFBRCxDQUEzQjs7QUFDQSxJQUFNQyxXQUFXLEdBQUdELG1CQUFPLENBQUMsR0FBRCxDQUEzQjs7QUFDQSxJQUFNRSxTQUFTLEdBQUdGLG1CQUFPLENBQUMsSUFBRCxDQUF6Qjs7QUFFQUcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQkMsU0FBMUIsRUFBcUNDLE1BQXJDLEVBQTZDQyxVQUE3QyxFQUF5RDtFQUN4RUosR0FBRyxDQUFDSyxpQkFBSixDQUFzQkMsZUFBdEIsQ0FBc0NGLFVBQXRDLEVBQWtELFVBQVVHLEdBQVYsRUFBZUMsSUFBZixFQUFxQjtJQUNyRSxJQUFJRCxHQUFKLEVBQVM7TUFDUEwsU0FBUyxDQUFDTixXQUFXLENBQUNhLFFBQVosQ0FBcUJiLFdBQVcsQ0FBQ2MsQ0FBWixDQUFjQyxTQUFkLENBQXdCQyxTQUE3QyxFQUF3RFIsVUFBeEQsQ0FBRCxFQUFzRUcsR0FBdEUsQ0FBVDtJQUNELENBRkQsTUFFTztNQUNMLElBQU1NLElBQUksR0FBR25CLFdBQVcsQ0FBQ29CLFdBQVosR0FBMEJDLGNBQTFCLEdBQTJDWCxVQUEzQyxHQUF3RCxHQUF4RCxHQUE4RFYsV0FBVyxDQUFDb0IsV0FBWixHQUEwQkUsTUFBMUIsQ0FBaUNDLFVBQS9GLEdBQTRHLE9BQXpIO01BRUFwQixTQUFTLENBQUNnQixJQUFELEVBQU8sVUFBVU4sR0FBVixFQUFlO1FBQzdCLElBQUlBLEdBQUcsSUFBSUEsR0FBRyxDQUFDVyxJQUFKLEtBQWEsUUFBeEIsRUFBa0M7VUFDaENoQixTQUFTLENBQUNOLFdBQVcsQ0FBQ2EsUUFBWixDQUFxQmIsV0FBVyxDQUFDYyxDQUFaLENBQWNTLFNBQWQsQ0FBd0JDLDBCQUE3QyxFQUF5RWhCLFVBQXpFLENBQUQsRUFBdUZHLEdBQXZGLENBQVQ7UUFDRCxDQUZELE1BRU87VUFDTE4sU0FBUyxDQUFDTyxJQUFELENBQVQ7UUFDRDtNQUNGLENBTlEsQ0FBVDtJQU9EO0VBQ0YsQ0FkRDtBQWdCRCxDQWpCRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvcmVtb3ZlLXBlcnNpc3RlbnQuanM/Nzc1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGFwcFNldHRpbmdzID0gcmVxdWlyZSgnLi4vLi4vYXBwLXNldHRpbmdzJyk7XG5jb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3RyYW5zbGF0aW9uL2luZGV4Jyk7XG5jb25zdCByZW1vdmVEaXIgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9yZW1vdmUtZGlyXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlLCB0YXJnZXQsIG1hbmlmZXN0SWQpIHtcbiAgYXBpLm9mZmxpbmVDb250cm9sbGVyLmdldE1hbmlmZXN0SW5mbyhtYW5pZmVzdElkLCBmdW5jdGlvbiAoZXJyLCBpbmZvKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUubWFuaWZlc3RzLk5PVF9GT1VORCwgbWFuaWZlc3RJZCksIGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGZpbGUgPSBhcHBTZXR0aW5ncy5nZXRTZXR0aW5ncygpLnNldHRpbmdzRm9sZGVyICsgbWFuaWZlc3RJZCArIFwiL1wiICsgYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5zdG9yZXMuUEVSU0lTVEVOVCArIFwiLmpzb25cIjtcblxuICAgICAgcmVtb3ZlRGlyKGZpbGUsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKGVyciAmJiBlcnIuY29kZSAhPT0gXCJFTk9FTlRcIikge1xuICAgICAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5SRU1PVklOR19QRVJTSVNURU5UX0ZBSUxFRCwgbWFuaWZlc3RJZCksIGVycik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb25TdWNjZXNzKGluZm8pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG59O1xuIl0sIm5hbWVzIjpbImFwcFNldHRpbmdzIiwicmVxdWlyZSIsInRyYW5zbGF0aW9uIiwicmVtb3ZlRGlyIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsInRhcmdldCIsIm1hbmlmZXN0SWQiLCJvZmZsaW5lQ29udHJvbGxlciIsImdldE1hbmlmZXN0SW5mbyIsImVyciIsImluZm8iLCJnZXRFcnJvciIsImUiLCJtYW5pZmVzdHMiLCJOT1RfRk9VTkQiLCJmaWxlIiwiZ2V0U2V0dGluZ3MiLCJzZXR0aW5nc0ZvbGRlciIsInN0b3JlcyIsIlBFUlNJU1RFTlQiLCJjb2RlIiwiZG93bmxvYWRzIiwiUkVNT1ZJTkdfUEVSU0lTVEVOVF9GQUlMRUQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7552\n')},6128:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId) {\n  api.offlineController.getManifestInfo(manifestId, function (err, info) {\n    api.downloadsController.removePromise(manifestId).then(function () {\n      api.offlineController.removePromise(manifestId).then(function () {\n        api.subscribersController.unsubscribe(manifestId);\n        api.manifestController.removeFromCache(manifestId);\n        onSuccess(info);\n      }, function (err) {\n        onFailure(translation.getError(translation.e.downloads.REMOVING_FAILED, manifestId), err);\n      });\n    }, function (err) {\n      onFailure(translation.getError(translation.e.downloads.REMOVING_FAILED, manifestId), err);\n    });\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjEyOC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsR0FBRCxDQUEzQjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQkMsU0FBMUIsRUFBcUNDLE1BQXJDLEVBQTZDQyxVQUE3QyxFQUF5RDtFQUN4RUosR0FBRyxDQUFDSyxpQkFBSixDQUFzQkMsZUFBdEIsQ0FBc0NGLFVBQXRDLEVBQWtELFVBQVVHLEdBQVYsRUFBZUMsSUFBZixFQUFxQjtJQUNyRVIsR0FBRyxDQUFDUyxtQkFBSixDQUF3QkMsYUFBeEIsQ0FBc0NOLFVBQXRDLEVBQ0tPLElBREwsQ0FDVSxZQUFZO01BQ2hCWCxHQUFHLENBQUNLLGlCQUFKLENBQXNCSyxhQUF0QixDQUFvQ04sVUFBcEMsRUFDS08sSUFETCxDQUNVLFlBQVk7UUFDaEJYLEdBQUcsQ0FBQ1kscUJBQUosQ0FBMEJDLFdBQTFCLENBQXNDVCxVQUF0QztRQUNBSixHQUFHLENBQUNjLGtCQUFKLENBQXVCQyxlQUF2QixDQUF1Q1gsVUFBdkM7UUFDQUgsU0FBUyxDQUFDTyxJQUFELENBQVQ7TUFDRCxDQUxMLEVBS08sVUFBVUQsR0FBVixFQUFlO1FBQ2hCTCxTQUFTLENBQUNOLFdBQVcsQ0FBQ29CLFFBQVosQ0FBcUJwQixXQUFXLENBQUNxQixDQUFaLENBQWNDLFNBQWQsQ0FBd0JDLGVBQTdDLEVBQThEZixVQUE5RCxDQUFELEVBQTRFRyxHQUE1RSxDQUFUO01BQ0QsQ0FQTDtJQVFELENBVkwsRUFVTyxVQUFVQSxHQUFWLEVBQWU7TUFDaEJMLFNBQVMsQ0FBQ04sV0FBVyxDQUFDb0IsUUFBWixDQUFxQnBCLFdBQVcsQ0FBQ3FCLENBQVosQ0FBY0MsU0FBZCxDQUF3QkMsZUFBN0MsRUFBOERmLFVBQTlELENBQUQsRUFBNEVHLEdBQTVFLENBQVQ7SUFDRCxDQVpMO0VBYUQsQ0FkRDtBQWVELENBaEJEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9iZS1tZXRob2RzL2Rvd25sb2Fkcy9yZW1vdmUuanM/NDNhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgdHJhbnNsYXRpb24gPSByZXF1aXJlKCcuLi8uLi90cmFuc2xhdGlvbi9pbmRleCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlLCB0YXJnZXQsIG1hbmlmZXN0SWQpIHtcbiAgYXBpLm9mZmxpbmVDb250cm9sbGVyLmdldE1hbmlmZXN0SW5mbyhtYW5pZmVzdElkLCBmdW5jdGlvbiAoZXJyLCBpbmZvKSB7XG4gICAgYXBpLmRvd25sb2Fkc0NvbnRyb2xsZXIucmVtb3ZlUHJvbWlzZShtYW5pZmVzdElkKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYXBpLm9mZmxpbmVDb250cm9sbGVyLnJlbW92ZVByb21pc2UobWFuaWZlc3RJZClcbiAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGFwaS5zdWJzY3JpYmVyc0NvbnRyb2xsZXIudW5zdWJzY3JpYmUobWFuaWZlc3RJZCk7XG4gICAgICAgICAgICAgICAgYXBpLm1hbmlmZXN0Q29udHJvbGxlci5yZW1vdmVGcm9tQ2FjaGUobWFuaWZlc3RJZCk7XG4gICAgICAgICAgICAgICAgb25TdWNjZXNzKGluZm8pO1xuICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUuZG93bmxvYWRzLlJFTU9WSU5HX0ZBSUxFRCwgbWFuaWZlc3RJZCksIGVycik7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUuZG93bmxvYWRzLlJFTU9WSU5HX0ZBSUxFRCwgbWFuaWZlc3RJZCksIGVycik7XG4gICAgICAgIH0pO1xuICB9KTtcbn07XG4iXSwibmFtZXMiOlsidHJhbnNsYXRpb24iLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsInRhcmdldCIsIm1hbmlmZXN0SWQiLCJvZmZsaW5lQ29udHJvbGxlciIsImdldE1hbmlmZXN0SW5mbyIsImVyciIsImluZm8iLCJkb3dubG9hZHNDb250cm9sbGVyIiwicmVtb3ZlUHJvbWlzZSIsInRoZW4iLCJzdWJzY3JpYmVyc0NvbnRyb2xsZXIiLCJ1bnN1YnNjcmliZSIsIm1hbmlmZXN0Q29udHJvbGxlciIsInJlbW92ZUZyb21DYWNoZSIsImdldEVycm9yIiwiZSIsImRvd25sb2FkcyIsIlJFTU9WSU5HX0ZBSUxFRCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6128\n")},7560:module=>{"use strict";eval("\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, representations) {\n  api.downloadsController.resume(manifestId, representations, onSuccess, onFailure);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzU2MC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQkMsU0FBMUIsRUFBcUNDLE1BQXJDLEVBQTZDQyxVQUE3QyxFQUF5REMsZUFBekQsRUFBMEU7RUFDekZMLEdBQUcsQ0FBQ00sbUJBQUosQ0FBd0JDLE1BQXhCLENBQStCSCxVQUEvQixFQUEyQ0MsZUFBM0MsRUFBNERKLFNBQTVELEVBQXVFQyxTQUF2RTtBQUNELENBRkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2JlLW1ldGhvZHMvZG93bmxvYWRzL3Jlc3VtZS5qcz84Mzg5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlLCB0YXJnZXQsIG1hbmlmZXN0SWQsIHJlcHJlc2VudGF0aW9ucykge1xuICBhcGkuZG93bmxvYWRzQ29udHJvbGxlci5yZXN1bWUobWFuaWZlc3RJZCwgcmVwcmVzZW50YXRpb25zLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSk7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJ0YXJnZXQiLCJtYW5pZmVzdElkIiwicmVwcmVzZW50YXRpb25zIiwiZG93bmxvYWRzQ29udHJvbGxlciIsInJlc3VtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7560\n")},9463:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar appSettings = __webpack_require__(9277);\n\nvar translation = __webpack_require__(817);\n\nvar FlushItem = __webpack_require__(1789);\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, data) {\n  api.offlineController.getManifestInfo(manifestId, function (err) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId), err);\n    } else {\n      var flushItem = new FlushItem(manifestId, appSettings.getSettings().stores.DATA, data);\n      flushItem.save().then(function () {\n        onSuccess();\n      }, function (err) {\n        onFailure(translation.getError(translation.e.downloads.SAVING_DATA_FAILED, manifestId), err);\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQ2My5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsSUFBRCxDQUEzQjs7QUFDQSxJQUFNQyxXQUFXLEdBQUdELG1CQUFPLENBQUMsR0FBRCxDQUEzQjs7QUFDQSxJQUFNRSxTQUFTLEdBQUdGLG1CQUFPLENBQUMsSUFBRCxDQUF6Qjs7QUFFQUcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQkMsU0FBMUIsRUFBcUNDLE1BQXJDLEVBQTZDQyxVQUE3QyxFQUF5REMsSUFBekQsRUFBK0Q7RUFDOUVMLEdBQUcsQ0FBQ00saUJBQUosQ0FBc0JDLGVBQXRCLENBQXNDSCxVQUF0QyxFQUFrRCxVQUFVSSxHQUFWLEVBQWU7SUFDL0QsSUFBSUEsR0FBSixFQUFTO01BQ1BOLFNBQVMsQ0FBQ04sV0FBVyxDQUFDYSxRQUFaLENBQXFCYixXQUFXLENBQUNjLENBQVosQ0FBY0MsU0FBZCxDQUF3QkMsU0FBN0MsRUFBd0RSLFVBQXhELENBQUQsRUFBc0VJLEdBQXRFLENBQVQ7SUFDRCxDQUZELE1BRU87TUFDTCxJQUFNSyxTQUFTLEdBQUcsSUFBSWhCLFNBQUosQ0FBY08sVUFBZCxFQUEwQlYsV0FBVyxDQUFDb0IsV0FBWixHQUEwQkMsTUFBMUIsQ0FBaUNDLElBQTNELEVBQWlFWCxJQUFqRSxDQUFsQjtNQUNBUSxTQUFTLENBQUNJLElBQVYsR0FDR0MsSUFESCxDQUNRLFlBQVk7UUFDaEJqQixTQUFTO01BQ1YsQ0FISCxFQUdLLFVBQVVPLEdBQVYsRUFBZTtRQUNoQk4sU0FBUyxDQUFDTixXQUFXLENBQUNhLFFBQVosQ0FBcUJiLFdBQVcsQ0FBQ2MsQ0FBWixDQUFjUyxTQUFkLENBQXdCQyxrQkFBN0MsRUFBaUVoQixVQUFqRSxDQUFELEVBQStFSSxHQUEvRSxDQUFUO01BQ0QsQ0FMSDtJQU1EO0VBQ0YsQ0FaRDtBQWNELENBZkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2JlLW1ldGhvZHMvZG93bmxvYWRzL3NhdmUtZGF0YS5qcz84MGIxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgYXBwU2V0dGluZ3MgPSByZXF1aXJlKCcuLi8uLi9hcHAtc2V0dGluZ3MnKTtcbmNvbnN0IHRyYW5zbGF0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHJhbnNsYXRpb24vaW5kZXgnKTtcbmNvbnN0IEZsdXNoSXRlbSA9IHJlcXVpcmUoXCIuLi8uLi9kb3dubG9hZHMvZmx1c2gtaXRlbVwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdElkLCBkYXRhKSB7XG4gIGFwaS5vZmZsaW5lQ29udHJvbGxlci5nZXRNYW5pZmVzdEluZm8obWFuaWZlc3RJZCwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLm1hbmlmZXN0cy5OT1RfRk9VTkQsIG1hbmlmZXN0SWQpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBmbHVzaEl0ZW0gPSBuZXcgRmx1c2hJdGVtKG1hbmlmZXN0SWQsIGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkuc3RvcmVzLkRBVEEsIGRhdGEpO1xuICAgICAgZmx1c2hJdGVtLnNhdmUoKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgb25TdWNjZXNzKCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuU0FWSU5HX0RBVEFfRkFJTEVELCBtYW5pZmVzdElkKSwgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxufTtcbiJdLCJuYW1lcyI6WyJhcHBTZXR0aW5ncyIsInJlcXVpcmUiLCJ0cmFuc2xhdGlvbiIsIkZsdXNoSXRlbSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJ0YXJnZXQiLCJtYW5pZmVzdElkIiwiZGF0YSIsIm9mZmxpbmVDb250cm9sbGVyIiwiZ2V0TWFuaWZlc3RJbmZvIiwiZXJyIiwiZ2V0RXJyb3IiLCJlIiwibWFuaWZlc3RzIiwiTk9UX0ZPVU5EIiwiZmx1c2hJdGVtIiwiZ2V0U2V0dGluZ3MiLCJzdG9yZXMiLCJEQVRBIiwic2F2ZSIsInRoZW4iLCJkb3dubG9hZHMiLCJTQVZJTkdfREFUQV9GQUlMRUQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9463\n")},3880:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar appSettings = __webpack_require__(9277);\n\nvar translation = __webpack_require__(817);\n\nvar FlushItem = __webpack_require__(1789);\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, persistent) {\n  api.offlineController.getManifestInfo(manifestId, function (err) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId), err);\n    } else {\n      var flushItem = new FlushItem(manifestId, appSettings.getSettings().stores.PERSISTENT, persistent);\n      flushItem.save().then(function () {\n        onSuccess();\n      }, function (err) {\n        onFailure(translation.getError(translation.e.downloads.SAVING_PERSISTENT_FAILED, manifestId), err);\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg4MC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsSUFBRCxDQUEzQjs7QUFDQSxJQUFNQyxXQUFXLEdBQUdELG1CQUFPLENBQUMsR0FBRCxDQUEzQjs7QUFDQSxJQUFNRSxTQUFTLEdBQUdGLG1CQUFPLENBQUMsSUFBRCxDQUF6Qjs7QUFFQUcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQkMsU0FBMUIsRUFBcUNDLE1BQXJDLEVBQTZDQyxVQUE3QyxFQUF5REMsVUFBekQsRUFBcUU7RUFDcEZMLEdBQUcsQ0FBQ00saUJBQUosQ0FBc0JDLGVBQXRCLENBQXNDSCxVQUF0QyxFQUFrRCxVQUFVSSxHQUFWLEVBQWU7SUFDL0QsSUFBSUEsR0FBSixFQUFTO01BQ1BOLFNBQVMsQ0FBQ04sV0FBVyxDQUFDYSxRQUFaLENBQXFCYixXQUFXLENBQUNjLENBQVosQ0FBY0MsU0FBZCxDQUF3QkMsU0FBN0MsRUFBd0RSLFVBQXhELENBQUQsRUFBc0VJLEdBQXRFLENBQVQ7SUFDRCxDQUZELE1BRU87TUFDTCxJQUFNSyxTQUFTLEdBQUcsSUFBSWhCLFNBQUosQ0FBY08sVUFBZCxFQUEwQlYsV0FBVyxDQUFDb0IsV0FBWixHQUEwQkMsTUFBMUIsQ0FBaUNDLFVBQTNELEVBQXVFWCxVQUF2RSxDQUFsQjtNQUNBUSxTQUFTLENBQUNJLElBQVYsR0FDS0MsSUFETCxDQUNVLFlBQVk7UUFDaEJqQixTQUFTO01BQ1YsQ0FITCxFQUdPLFVBQVVPLEdBQVYsRUFBZTtRQUNoQk4sU0FBUyxDQUFDTixXQUFXLENBQUNhLFFBQVosQ0FBcUJiLFdBQVcsQ0FBQ2MsQ0FBWixDQUFjUyxTQUFkLENBQXdCQyx3QkFBN0MsRUFBdUVoQixVQUF2RSxDQUFELEVBQXFGSSxHQUFyRixDQUFUO01BQ0QsQ0FMTDtJQU1EO0VBQ0YsQ0FaRDtBQWNELENBZkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2JlLW1ldGhvZHMvZG93bmxvYWRzL3NhdmUtcGVyc2lzdGVudC5qcz83MjUxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgYXBwU2V0dGluZ3MgPSByZXF1aXJlKCcuLi8uLi9hcHAtc2V0dGluZ3MnKTtcbmNvbnN0IHRyYW5zbGF0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHJhbnNsYXRpb24vaW5kZXgnKTtcbmNvbnN0IEZsdXNoSXRlbSA9IHJlcXVpcmUoXCIuLi8uLi9kb3dubG9hZHMvZmx1c2gtaXRlbVwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdElkLCBwZXJzaXN0ZW50KSB7XG4gIGFwaS5vZmZsaW5lQ29udHJvbGxlci5nZXRNYW5pZmVzdEluZm8obWFuaWZlc3RJZCwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLm1hbmlmZXN0cy5OT1RfRk9VTkQsIG1hbmlmZXN0SWQpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBmbHVzaEl0ZW0gPSBuZXcgRmx1c2hJdGVtKG1hbmlmZXN0SWQsIGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkuc3RvcmVzLlBFUlNJU1RFTlQsIHBlcnNpc3RlbnQpO1xuICAgICAgZmx1c2hJdGVtLnNhdmUoKVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG9uU3VjY2VzcygpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5TQVZJTkdfUEVSU0lTVEVOVF9GQUlMRUQsIG1hbmlmZXN0SWQpLCBlcnIpO1xuICAgICAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbn07XG4iXSwibmFtZXMiOlsiYXBwU2V0dGluZ3MiLCJyZXF1aXJlIiwidHJhbnNsYXRpb24iLCJGbHVzaEl0ZW0iLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBpIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwidGFyZ2V0IiwibWFuaWZlc3RJZCIsInBlcnNpc3RlbnQiLCJvZmZsaW5lQ29udHJvbGxlciIsImdldE1hbmlmZXN0SW5mbyIsImVyciIsImdldEVycm9yIiwiZSIsIm1hbmlmZXN0cyIsIk5PVF9GT1VORCIsImZsdXNoSXRlbSIsImdldFNldHRpbmdzIiwic3RvcmVzIiwiUEVSU0lTVEVOVCIsInNhdmUiLCJ0aGVuIiwiZG93bmxvYWRzIiwiU0FWSU5HX1BFUlNJU1RFTlRfRkFJTEVEIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3880\n")},1792:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\n\nvar canCreateManifest = __webpack_require__(5079);\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, representations, downloadFolder) {\n  var manifest = api.manifestController.getManifestById(manifestId);\n\n  if (!manifest) {\n    onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n    return;\n  }\n\n  function start() {\n    api.downloadsController.storage.getItem(manifestId).then(function (result) {\n      if (result) {\n        onFailure(translation.getError(translation.e.downloads.ALREADY_STARTED, manifestId));\n      } else {\n        api.downloadsController.start(manifestId, representations, downloadFolder, onSuccess, function (err) {\n          onFailure(translation.getError(translation.e.downloads._GENERAL), err);\n        });\n      }\n    }, function (err) {\n      onFailure(translation.getError(translation.e.downloads._GENERAL), err);\n    });\n  }\n\n  canCreateManifest(manifestId, downloadFolder).then(function () {\n    start();\n  }, function (errors) {\n    errors = errors || [];\n    var movieFolderError = errors[1];\n\n    if (errors.length) {\n      if (movieFolderError) {\n        // if movie folder has been already created the we can't start as it might be either different folder\n        // or simply the resume should be used\n        onFailure(translation.getError(translation.e.manifests.FOLDER_ALREADY_EXISTS, manifestId));\n        return;\n      }\n    } // if manifest exists physically on drive that means something is wrong and can't start the manifest\n    // the manifest is saved in method start so this cannot be overwritten here\n\n\n    api.offlineController.getManifestDataFile(manifestId, function (data) {\n      if (data) {\n        onFailure(translation.getError(translation.e.manifests.FOLDER_ALREADY_EXISTS, manifestId));\n      } else {\n        start();\n      }\n    });\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9iZS1tZXRob2RzL2Rvd25sb2Fkcy9zdGFydC5qcz8yZDdjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoXCIuLi8uLi90cmFuc2xhdGlvbi9pbmRleFwiKTtcbmNvbnN0IGNhbkNyZWF0ZU1hbmlmZXN0ID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvY2FuLWNyZWF0ZS1tYW5pZmVzdFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdElkLCByZXByZXNlbnRhdGlvbnMsIGRvd25sb2FkRm9sZGVyKSB7XG4gIGNvbnN0IG1hbmlmZXN0ID0gYXBpLm1hbmlmZXN0Q29udHJvbGxlci5nZXRNYW5pZmVzdEJ5SWQobWFuaWZlc3RJZCk7XG4gIGlmICghbWFuaWZlc3QpIHtcbiAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5tYW5pZmVzdHMuTk9UX0ZPVU5ELCBtYW5pZmVzdElkKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnQgKCkge1xuICAgIGFwaS5kb3dubG9hZHNDb250cm9sbGVyLnN0b3JhZ2UuZ2V0SXRlbShtYW5pZmVzdElkKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUuZG93bmxvYWRzLkFMUkVBRFlfU1RBUlRFRCwgbWFuaWZlc3RJZCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBpLmRvd25sb2Fkc0NvbnRyb2xsZXIuc3RhcnQobWFuaWZlc3RJZCwgcmVwcmVzZW50YXRpb25zLCBkb3dubG9hZEZvbGRlciwgb25TdWNjZXNzLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUuZG93bmxvYWRzLl9HRU5FUkFMKSwgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUuZG93bmxvYWRzLl9HRU5FUkFMKSwgZXJyKTtcbiAgICB9KTtcbiAgfVxuXG4gIGNhbkNyZWF0ZU1hbmlmZXN0KG1hbmlmZXN0SWQsIGRvd25sb2FkRm9sZGVyKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICBzdGFydCgpO1xuICB9LCBmdW5jdGlvbiAoZXJyb3JzKSB7XG4gICAgZXJyb3JzID0gZXJyb3JzIHx8IFtdO1xuICAgIHZhciBtb3ZpZUZvbGRlckVycm9yID0gZXJyb3JzWzFdO1xuICAgIGlmIChlcnJvcnMubGVuZ3RoKSB7XG4gICAgICBpZiAobW92aWVGb2xkZXJFcnJvcikge1xuICAgICAgICAvLyBpZiBtb3ZpZSBmb2xkZXIgaGFzIGJlZW4gYWxyZWFkeSBjcmVhdGVkIHRoZSB3ZSBjYW4ndCBzdGFydCBhcyBpdCBtaWdodCBiZSBlaXRoZXIgZGlmZmVyZW50IGZvbGRlclxuICAgICAgICAvLyBvciBzaW1wbHkgdGhlIHJlc3VtZSBzaG91bGQgYmUgdXNlZFxuICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5tYW5pZmVzdHMuRk9MREVSX0FMUkVBRFlfRVhJU1RTLCBtYW5pZmVzdElkKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gaWYgbWFuaWZlc3QgZXhpc3RzIHBoeXNpY2FsbHkgb24gZHJpdmUgdGhhdCBtZWFucyBzb21ldGhpbmcgaXMgd3JvbmcgYW5kIGNhbid0IHN0YXJ0IHRoZSBtYW5pZmVzdFxuICAgIC8vIHRoZSBtYW5pZmVzdCBpcyBzYXZlZCBpbiBtZXRob2Qgc3RhcnQgc28gdGhpcyBjYW5ub3QgYmUgb3ZlcndyaXR0ZW4gaGVyZVxuICAgIGFwaS5vZmZsaW5lQ29udHJvbGxlci5nZXRNYW5pZmVzdERhdGFGaWxlKG1hbmlmZXN0SWQsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5tYW5pZmVzdHMuRk9MREVSX0FMUkVBRFlfRVhJU1RTLCBtYW5pZmVzdElkKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGFydCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxufTtcbiJdLCJuYW1lcyI6WyJ0cmFuc2xhdGlvbiIsInJlcXVpcmUiLCJjYW5DcmVhdGVNYW5pZmVzdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJ0YXJnZXQiLCJtYW5pZmVzdElkIiwicmVwcmVzZW50YXRpb25zIiwiZG93bmxvYWRGb2xkZXIiLCJtYW5pZmVzdCIsIm1hbmlmZXN0Q29udHJvbGxlciIsImdldE1hbmlmZXN0QnlJZCIsImdldEVycm9yIiwiZSIsIm1hbmlmZXN0cyIsIk5PVF9GT1VORCIsInN0YXJ0IiwiZG93bmxvYWRzQ29udHJvbGxlciIsInN0b3JhZ2UiLCJnZXRJdGVtIiwidGhlbiIsInJlc3VsdCIsImRvd25sb2FkcyIsIkFMUkVBRFlfU1RBUlRFRCIsImVyciIsIl9HRU5FUkFMIiwiZXJyb3JzIiwibW92aWVGb2xkZXJFcnJvciIsImxlbmd0aCIsIkZPTERFUl9BTFJFQURZX0VYSVNUUyIsIm9mZmxpbmVDb250cm9sbGVyIiwiZ2V0TWFuaWZlc3REYXRhRmlsZSIsImRhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1792\n")},1120:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\n\nvar STATUSES = __webpack_require__(8255);\n\nmodule.exports = function (api, onSuccess, onFailure) {\n  api.offlineController.getManifestsListWithInfo(function (err, results) {\n    if (err) {\n      onFailure(translation.getError(translation.e.downloads.STOPPING_ALL_FAILED), err);\n    } else {\n      var promises = [];\n      var manifestIds = [];\n\n      for (var i = 0, j = results.length; i < j; i++) {\n        var status = results[i].status;\n        var manifestId = results[i].manifestInfo.id;\n\n        if (status !== STATUSES.FINISHED) {\n          manifestIds.push(manifestId);\n          promises.push(api.downloadsController.stopPromise(manifestId, true));\n        }\n      }\n\n      if (manifestIds.length > 0) {\n        Promise.all(promises).then(function () {\n          onSuccess(manifestIds);\n        }, function (err) {\n          onFailure(translation.getError(translation.e.downloads.STOPPING_ALL_FAILED), err);\n        });\n      } else {\n        onFailure(translation.getError(translation.e.downloads.ALREADY_STOPPED_ALL));\n      }\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEyMC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsR0FBRCxDQUEzQjs7QUFDQSxJQUFNQyxRQUFRLEdBQUdELG1CQUFPLENBQUMsSUFBRCxDQUF4Qjs7QUFFQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQkMsU0FBMUIsRUFBcUM7RUFDcERGLEdBQUcsQ0FBQ0csaUJBQUosQ0FBc0JDLHdCQUF0QixDQUErQyxVQUFVQyxHQUFWLEVBQWVDLE9BQWYsRUFBd0I7SUFDckUsSUFBSUQsR0FBSixFQUFTO01BQ1BILFNBQVMsQ0FBQ1AsV0FBVyxDQUFDWSxRQUFaLENBQXFCWixXQUFXLENBQUNhLENBQVosQ0FBY0MsU0FBZCxDQUF3QkMsbUJBQTdDLENBQUQsRUFBb0VMLEdBQXBFLENBQVQ7SUFDRCxDQUZELE1BRU87TUFDTCxJQUFJTSxRQUFRLEdBQUcsRUFBZjtNQUNBLElBQUlDLFdBQVcsR0FBRyxFQUFsQjs7TUFDQSxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFSLEVBQVdDLENBQUMsR0FBR1IsT0FBTyxDQUFDUyxNQUE1QixFQUFvQ0YsQ0FBQyxHQUFHQyxDQUF4QyxFQUEyQ0QsQ0FBQyxFQUE1QyxFQUFnRDtRQUM5QyxJQUFJRyxNQUFNLEdBQUdWLE9BQU8sQ0FBQ08sQ0FBRCxDQUFQLENBQVdHLE1BQXhCO1FBQ0EsSUFBSUMsVUFBVSxHQUFHWCxPQUFPLENBQUNPLENBQUQsQ0FBUCxDQUFXSyxZQUFYLENBQXdCQyxFQUF6Qzs7UUFDQSxJQUFJSCxNQUFNLEtBQUtuQixRQUFRLENBQUN1QixRQUF4QixFQUFrQztVQUNoQ1IsV0FBVyxDQUFDUyxJQUFaLENBQWlCSixVQUFqQjtVQUNBTixRQUFRLENBQUNVLElBQVQsQ0FBY3JCLEdBQUcsQ0FBQ3NCLG1CQUFKLENBQXdCQyxXQUF4QixDQUFvQ04sVUFBcEMsRUFBZ0QsSUFBaEQsQ0FBZDtRQUNEO01BQ0Y7O01BQ0QsSUFBSUwsV0FBVyxDQUFDRyxNQUFaLEdBQXFCLENBQXpCLEVBQTRCO1FBQzFCUyxPQUFPLENBQUNDLEdBQVIsQ0FBWWQsUUFBWixFQUNLZSxJQURMLENBQ1UsWUFBWTtVQUNoQnpCLFNBQVMsQ0FBQ1csV0FBRCxDQUFUO1FBQ0QsQ0FITCxFQUdPLFVBQVVQLEdBQVYsRUFBZTtVQUNoQkgsU0FBUyxDQUFDUCxXQUFXLENBQUNZLFFBQVosQ0FBcUJaLFdBQVcsQ0FBQ2EsQ0FBWixDQUFjQyxTQUFkLENBQXdCQyxtQkFBN0MsQ0FBRCxFQUFvRUwsR0FBcEUsQ0FBVDtRQUNELENBTEw7TUFNRCxDQVBELE1BT087UUFDTEgsU0FBUyxDQUFDUCxXQUFXLENBQUNZLFFBQVosQ0FBcUJaLFdBQVcsQ0FBQ2EsQ0FBWixDQUFjQyxTQUFkLENBQXdCa0IsbUJBQTdDLENBQUQsQ0FBVDtNQUNEO0lBQ0Y7RUFDRixDQXpCRDtBQTBCRCxDQTNCRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvc3RvcC1hbGwuanM/NzcwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgdHJhbnNsYXRpb24gPSByZXF1aXJlKCcuLi8uLi90cmFuc2xhdGlvbi9pbmRleCcpO1xuY29uc3QgU1RBVFVTRVMgPSByZXF1aXJlKFwiLi4vLi4vZG93bmxvYWRzL3N0YXR1c2VzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlKSB7XG4gIGFwaS5vZmZsaW5lQ29udHJvbGxlci5nZXRNYW5pZmVzdHNMaXN0V2l0aEluZm8oZnVuY3Rpb24gKGVyciwgcmVzdWx0cykge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5TVE9QUElOR19BTExfRkFJTEVEKSwgZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHByb21pc2VzID0gW107XG4gICAgICBsZXQgbWFuaWZlc3RJZHMgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gcmVzdWx0cy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgbGV0IHN0YXR1cyA9IHJlc3VsdHNbaV0uc3RhdHVzO1xuICAgICAgICBsZXQgbWFuaWZlc3RJZCA9IHJlc3VsdHNbaV0ubWFuaWZlc3RJbmZvLmlkO1xuICAgICAgICBpZiAoc3RhdHVzICE9PSBTVEFUVVNFUy5GSU5JU0hFRCkge1xuICAgICAgICAgIG1hbmlmZXN0SWRzLnB1c2gobWFuaWZlc3RJZCk7XG4gICAgICAgICAgcHJvbWlzZXMucHVzaChhcGkuZG93bmxvYWRzQ29udHJvbGxlci5zdG9wUHJvbWlzZShtYW5pZmVzdElkLCB0cnVlKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtYW5pZmVzdElkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBvblN1Y2Nlc3MobWFuaWZlc3RJZHMpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuU1RPUFBJTkdfQUxMX0ZBSUxFRCksIGVycik7XG4gICAgICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5BTFJFQURZX1NUT1BQRURfQUxMKSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG4iXSwibmFtZXMiOlsidHJhbnNsYXRpb24iLCJyZXF1aXJlIiwiU1RBVFVTRVMiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBpIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwib2ZmbGluZUNvbnRyb2xsZXIiLCJnZXRNYW5pZmVzdHNMaXN0V2l0aEluZm8iLCJlcnIiLCJyZXN1bHRzIiwiZ2V0RXJyb3IiLCJlIiwiZG93bmxvYWRzIiwiU1RPUFBJTkdfQUxMX0ZBSUxFRCIsInByb21pc2VzIiwibWFuaWZlc3RJZHMiLCJpIiwiaiIsImxlbmd0aCIsInN0YXR1cyIsIm1hbmlmZXN0SWQiLCJtYW5pZmVzdEluZm8iLCJpZCIsIkZJTklTSEVEIiwicHVzaCIsImRvd25sb2Fkc0NvbnRyb2xsZXIiLCJzdG9wUHJvbWlzZSIsIlByb21pc2UiLCJhbGwiLCJ0aGVuIiwiQUxSRUFEWV9TVE9QUEVEX0FMTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1120\n")},647:module=>{"use strict";eval("\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId) {\n  api.downloadsController.stop(manifestId, onSuccess, onFailure);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQ3LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBVUMsR0FBVixFQUFlQyxTQUFmLEVBQTBCQyxTQUExQixFQUFxQ0MsTUFBckMsRUFBNkNDLFVBQTdDLEVBQXlEO0VBQ3hFSixHQUFHLENBQUNLLG1CQUFKLENBQXdCQyxJQUF4QixDQUE2QkYsVUFBN0IsRUFBeUNILFNBQXpDLEVBQW9EQyxTQUFwRDtBQUNELENBRkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2JlLW1ldGhvZHMvZG93bmxvYWRzL3N0b3AuanM/MzQ2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdElkKSB7XG4gIGFwaS5kb3dubG9hZHNDb250cm9sbGVyLnN0b3AobWFuaWZlc3RJZCwgb25TdWNjZXNzLCBvbkZhaWx1cmUpO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYXBpIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwidGFyZ2V0IiwibWFuaWZlc3RJZCIsImRvd25sb2Fkc0NvbnRyb2xsZXIiLCJzdG9wIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///647\n")},608:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\n\nvar Subscriber = __webpack_require__(6137);\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestIds, timeout) {\n  if (typeof manifestIds === 'string') {\n    subscribeSingle(api, onSuccess, onFailure, target, manifestIds, timeout);\n  } else {\n    subscribeMany(api, onSuccess, onFailure, target, manifestIds, timeout);\n  }\n};\n\nfunction subscribeMany(api, onSuccess, onFailure, target, manifestIds, timeout) {\n  var subscriber1, subscriber2, subscribersId;\n  var manifestId = manifestIds.sort().join(',');\n  subscribersId = []; // callbackOnProgress\n\n  subscriber1 = new Subscriber(function () {\n    return api.downloadsController.downloadStats.getStats(manifestIds);\n  }, api.processSubscriber, target, manifestId, timeout);\n  subscribersId.push(api.subscribersController.addSubscriber(subscriber1)); // callbackOnFinish\n\n  subscriber2 = new Subscriber(function () {\n    var result = true;\n\n    for (var i = 0, j = manifestIds.length; i < j; i++) {\n      result = result && api.downloadsController.isDownloadFinishedAndSynced(manifestIds[i]);\n    }\n\n    return result;\n  }, api.processSubscriber, target, manifestId, timeout, true);\n  subscriber2.onFinish(function (callback) {\n    subscriber1.remove();\n    var items = [];\n\n    for (var i = 0, j = manifestIds.length; i < j; i++) {\n      items.push(api.offlineController.getManifestInfoPromise(manifestIds[i]));\n    }\n\n    Promise.all(items).then(function (results) {\n      callback(null, results);\n    }, function (err) {\n      callback(err);\n    });\n  });\n  subscribersId.push(api.subscribersController.addSubscriber(subscriber2));\n  onSuccess(null, subscribersId);\n}\n\nfunction subscribeSingle(api, onSuccess, onFailure, target, manifestId, timeout) {\n  var manifest = api.manifestController.getManifestById(manifestId);\n  var subscriber1, subscriber2, subscribersId;\n\n  if (manifest) {\n    subscribersId = []; // callbackOnProgress\n\n    subscriber1 = new Subscriber(function () {\n      return api.downloadsController.downloadStats.getStats(manifestId);\n    }, api.processSubscriber, target, manifestId, timeout);\n    subscribersId.push(api.subscribersController.addSubscriber(subscriber1)); // callbackOnFinish\n\n    subscriber2 = new Subscriber(function () {\n      return api.downloadsController.isDownloadFinishedAndSynced(manifestId);\n    }, api.processSubscriber, target, manifestId, timeout, true);\n    subscriber2.onFinish(function (callback) {\n      subscriber1.remove();\n      api.offlineController.getManifestInfo(manifestId, function (err, result) {\n        callback(err, result);\n      });\n    });\n    subscribersId.push(api.subscribersController.addSubscriber(subscriber2));\n    onSuccess(manifest.getJsonInfo(), subscribersId);\n  } else {\n    onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///608\n")},6439:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(817);\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestIds) {\n  if (typeof manifestIds === 'string') {\n    unsubscribeSingle(api, onSuccess, onFailure, target, manifestIds);\n  } else {\n    api.subscribersController.unsubscribe(manifestIds);\n    api.subscribersController.unsubscribe(manifestIds.sort().join(','));\n  }\n};\n\nfunction unsubscribeSingle(api, onSuccess, onFailure, target, manifestId) {\n  var manifest = api.manifestController.getManifestById(manifestId);\n\n  if (manifest) {\n    api.subscribersController.unsubscribe(manifestId);\n    onSuccess();\n  } else {\n    onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQzOS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsR0FBRCxDQUEzQjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQkMsU0FBMUIsRUFBcUNDLE1BQXJDLEVBQTZDQyxXQUE3QyxFQUEwRDtFQUN6RSxJQUFJLE9BQU9BLFdBQVAsS0FBdUIsUUFBM0IsRUFBcUM7SUFDbkNDLGlCQUFpQixDQUFDTCxHQUFELEVBQU1DLFNBQU4sRUFBaUJDLFNBQWpCLEVBQTRCQyxNQUE1QixFQUFvQ0MsV0FBcEMsQ0FBakI7RUFDRCxDQUZELE1BRU87SUFDTEosR0FBRyxDQUFDTSxxQkFBSixDQUEwQkMsV0FBMUIsQ0FBc0NILFdBQXRDO0lBQ0FKLEdBQUcsQ0FBQ00scUJBQUosQ0FBMEJDLFdBQTFCLENBQXNDSCxXQUFXLENBQUNJLElBQVosR0FBbUJDLElBQW5CLENBQXdCLEdBQXhCLENBQXRDO0VBQ0Q7QUFDRixDQVBEOztBQVNBLFNBQVNKLGlCQUFULENBQTRCTCxHQUE1QixFQUFpQ0MsU0FBakMsRUFBNENDLFNBQTVDLEVBQXVEQyxNQUF2RCxFQUErRE8sVUFBL0QsRUFBMkU7RUFDekUsSUFBTUMsUUFBUSxHQUFHWCxHQUFHLENBQUNZLGtCQUFKLENBQXVCQyxlQUF2QixDQUF1Q0gsVUFBdkMsQ0FBakI7O0VBQ0EsSUFBSUMsUUFBSixFQUFjO0lBQ1pYLEdBQUcsQ0FBQ00scUJBQUosQ0FBMEJDLFdBQTFCLENBQXNDRyxVQUF0QztJQUNBVCxTQUFTO0VBQ1YsQ0FIRCxNQUdPO0lBQ0xDLFNBQVMsQ0FBQ04sV0FBVyxDQUFDa0IsUUFBWixDQUFxQmxCLFdBQVcsQ0FBQ21CLENBQVosQ0FBY0MsU0FBZCxDQUF3QkMsU0FBN0MsRUFBd0RQLFVBQXhELENBQUQsQ0FBVDtFQUNEO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2JlLW1ldGhvZHMvZG93bmxvYWRzL3Vuc3Vic2NyaWJlLmpzPzJkODEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHRyYW5zbGF0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHJhbnNsYXRpb24vaW5kZXgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdElkcykge1xuICBpZiAodHlwZW9mIG1hbmlmZXN0SWRzID09PSAnc3RyaW5nJykge1xuICAgIHVuc3Vic2NyaWJlU2luZ2xlKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgbWFuaWZlc3RJZHMpO1xuICB9IGVsc2Uge1xuICAgIGFwaS5zdWJzY3JpYmVyc0NvbnRyb2xsZXIudW5zdWJzY3JpYmUobWFuaWZlc3RJZHMpO1xuICAgIGFwaS5zdWJzY3JpYmVyc0NvbnRyb2xsZXIudW5zdWJzY3JpYmUobWFuaWZlc3RJZHMuc29ydCgpLmpvaW4oJywnKSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHVuc3Vic2NyaWJlU2luZ2xlIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlLCB0YXJnZXQsIG1hbmlmZXN0SWQpIHtcbiAgY29uc3QgbWFuaWZlc3QgPSBhcGkubWFuaWZlc3RDb250cm9sbGVyLmdldE1hbmlmZXN0QnlJZChtYW5pZmVzdElkKTtcbiAgaWYgKG1hbmlmZXN0KSB7XG4gICAgYXBpLnN1YnNjcmliZXJzQ29udHJvbGxlci51bnN1YnNjcmliZShtYW5pZmVzdElkKTtcbiAgICBvblN1Y2Nlc3MoKTtcbiAgfSBlbHNlIHtcbiAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5tYW5pZmVzdHMuTk9UX0ZPVU5ELCBtYW5pZmVzdElkKSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJ0cmFuc2xhdGlvbiIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBpIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwidGFyZ2V0IiwibWFuaWZlc3RJZHMiLCJ1bnN1YnNjcmliZVNpbmdsZSIsInN1YnNjcmliZXJzQ29udHJvbGxlciIsInVuc3Vic2NyaWJlIiwic29ydCIsImpvaW4iLCJtYW5pZmVzdElkIiwibWFuaWZlc3QiLCJtYW5pZmVzdENvbnRyb2xsZXIiLCJnZXRNYW5pZmVzdEJ5SWQiLCJnZXRFcnJvciIsImUiLCJtYW5pZmVzdHMiLCJOT1RfRk9VTkQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6439\n")},1052:module=>{"use strict";eval("\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, downloadFolder) {\n  api.downloadsController.updateDownloadFolder(manifestId, downloadFolder, onSuccess, onFailure);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA1Mi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQkMsU0FBMUIsRUFBcUNDLE1BQXJDLEVBQTZDQyxVQUE3QyxFQUF5REMsY0FBekQsRUFBeUU7RUFDeEZMLEdBQUcsQ0FBQ00sbUJBQUosQ0FBd0JDLG9CQUF4QixDQUE2Q0gsVUFBN0MsRUFBeURDLGNBQXpELEVBQXlFSixTQUF6RSxFQUFvRkMsU0FBcEY7QUFDRCxDQUZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9iZS1tZXRob2RzL2Rvd25sb2Fkcy91cGRhdGUtZG93bmxvYWQtZm9sZGVyLmpzPzMyM2YiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgbWFuaWZlc3RJZCwgZG93bmxvYWRGb2xkZXIpIHtcbiAgYXBpLmRvd25sb2Fkc0NvbnRyb2xsZXIudXBkYXRlRG93bmxvYWRGb2xkZXIobWFuaWZlc3RJZCwgZG93bmxvYWRGb2xkZXIsIG9uU3VjY2Vzcywgb25GYWlsdXJlKTtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsInRhcmdldCIsIm1hbmlmZXN0SWQiLCJkb3dubG9hZEZvbGRlciIsImRvd25sb2Fkc0NvbnRyb2xsZXIiLCJ1cGRhdGVEb3dubG9hZEZvbGRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1052\n")},8105:module=>{"use strict";eval("\n\nmodule.exports = function (api, onSuccess, onFailure, target, subscribers) {\n  api.subscribersController.removeSubscribersById(subscribers);\n  onSuccess();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODEwNS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsU0FBZixFQUEwQkMsU0FBMUIsRUFBcUNDLE1BQXJDLEVBQTZDQyxXQUE3QyxFQUEwRDtFQUN6RUosR0FBRyxDQUFDSyxxQkFBSixDQUEwQkMscUJBQTFCLENBQWdERixXQUFoRDtFQUNBSCxTQUFTO0FBQ1YsQ0FIRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvYmUtbWV0aG9kcy9yZW1vdmUtc3Vic2NyaWJlcnMuanM/NTMzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBzdWJzY3JpYmVycykge1xuICBhcGkuc3Vic2NyaWJlcnNDb250cm9sbGVyLnJlbW92ZVN1YnNjcmliZXJzQnlJZChzdWJzY3JpYmVycyk7XG4gIG9uU3VjY2VzcygpO1xufTtcblxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJ0YXJnZXQiLCJzdWJzY3JpYmVycyIsInN1YnNjcmliZXJzQ29udHJvbGxlciIsInJlbW92ZVN1YnNjcmliZXJzQnlJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8105\n")},6953:module=>{"use strict";eval("\n\nmodule.exports = {\n  regexpProtocolRemove: /^https{0,1}\\:\\/\\//i\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjk1My5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0VBQ2ZDLG9CQUFvQixFQUFFO0FBRFAsQ0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2NvbnN0YW50cy5qcz9kOTlhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcmVnZXhwUHJvdG9jb2xSZW1vdmU6IC9eaHR0cHN7MCwxfVxcOlxcL1xcLy9pXG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZWdleHBQcm90b2NvbFJlbW92ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6953\n")},4612:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('/*eslint no-console: ["error", { allow: ["warn", "error", "info"] }] */\n\n\nvar _ = __webpack_require__(4952);\n\nvar mkdirp = __webpack_require__(9526);\n\nvar appSettings = __webpack_require__(9277);\n\nvar translation = __webpack_require__(817);\n\nvar Download = __webpack_require__(8158);\n\nvar DownloadsStorageController = __webpack_require__(2381);\n\nvar downloadUtil = __webpack_require__(957);\n\nvar DownloadStats = __webpack_require__(2197);\n\nvar STATUSES = __webpack_require__(8255);\n\nvar CODES = __webpack_require__(6999);\n\nvar constants = __webpack_require__(6953);\n\nvar utilUrl = __webpack_require__(8279);\n\nvar path = __webpack_require__(1017);\n\nvar ReadItem = __webpack_require__(3812);\n\nvar FlushItem = __webpack_require__(1789);\n\nvar downloadFileUtil = __webpack_require__(2777);\n/**\n *\n * @param {ManifestController} manifestController - existing manifest controller\n * @param {OfflineController} offlineController - existing offline controller\n * @constructor\n */\n\n\nfunction DownloadsController(manifestController, offlineController) {\n  this._manifestsDownloadOrder = [];\n  this._manifestsDownloadOrderObj = {};\n  this._manifestController = manifestController;\n  this._offlineController = offlineController;\n  this.storage = new DownloadsStorageController();\n\n  this._offlineController.setDownloadStorage(this.storage);\n\n  this._names = {\n    downloadInProgress: "downloadInProgress",\n    options: "options",\n    maxDownloadInProgress: "maxDownloadInProgress"\n  };\n  this._STATS_TIME_GENERATION = 1000;\n  this.downloadStats = new DownloadStats(this.storage);\n\n  _.bindAll(this, "_onDownloadEnd", "_onDownloadError", "isDownloadFinished");\n}\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Array} videoLinks - video links to be downloaded\n * @param {Array} audioLinks - audio links to be downloaded\n * @param {Array} textLinks - text links to be downloaded\n * @returns {void}\n * @private\n */\n\n\nDownloadsController.prototype._addDownloads = function (manifestId, videoLinks, audioLinks, textLinks) {\n  var working = true;\n\n  this._prepareStartOptions(manifestId, videoLinks, audioLinks, textLinks);\n\n  while (working) {\n    var ratioAudioVideo = videoLinks.length ? Math.round(audioLinks.length / videoLinks.length) : 1;\n    var ratioTextVideo = videoLinks.length ? Math.round(textLinks.length / videoLinks.length) : 1;\n\n    this._addNextItemToQueue(manifestId, textLinks, ratioTextVideo);\n\n    this._addNextItemToQueue(manifestId, audioLinks, ratioAudioVideo);\n\n    this._addNextItemToQueue(manifestId, videoLinks);\n\n    working = !!(textLinks.length || videoLinks.length || audioLinks.length);\n  }\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Array} links - array of links to be downloaded\n * @param {number} nbItems - the rnumber of items to add to the queue\n * @private\n * @returns {void}\n */\n\n\nDownloadsController.prototype._addNextItemToQueue = function (manifestId, links, nbItems) {\n  var link;\n\n  if (!nbItems) {\n    nbItems = 1;\n  }\n\n  if (links.length) {\n    while (nbItems > 0) {\n      link = links.shift();\n      link.manifestId = manifestId;\n      this.storage.left.push(manifestId, link);\n      nbItems--;\n    }\n  }\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {boolean} asFirst - to force to download manifest without wiating in queue\n * @returns {boolean} - status if operation was successfully\n * @private\n */\n\n\nDownloadsController.prototype._downloadOrderAddManifest = function (manifestId, asFirst) {\n  if (!this._downloadOrderManifestExists(manifestId)) {\n    this._manifestsDownloadOrderObj[manifestId] = true;\n\n    if (asFirst) {\n      this._manifestsDownloadOrder.unshift(manifestId);\n    } else {\n      this._manifestsDownloadOrder.push(manifestId);\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n};\n/**\n *\n * @param {number} nextManifestPositionInArray - index number from array _manifestsDownloadOrder\n * @returns {manifestId} - manifest identifier\n * @private\n */\n\n\nDownloadsController.prototype._downloadOrderGetManifestId = function (nextManifestPositionInArray) {\n  return this._manifestsDownloadOrder[nextManifestPositionInArray];\n};\n/**\n *\n * @param {manifestId} manifestId -  manifest identifier\n * @returns {number} index number from array _manifestsDownloadOrder\n * @private\n */\n\n\nDownloadsController.prototype._indexOfManifest = function (manifestId) {\n  return this._manifestsDownloadOrder.indexOf(manifestId);\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {*} - if manifest has been already added to the queue\n * @private\n */\n\n\nDownloadsController.prototype._downloadOrderManifestExists = function (manifestId) {\n  return this._manifestsDownloadOrderObj[manifestId];\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {boolean} - status if manifest has been removed from queue\n * @private\n */\n\n\nDownloadsController.prototype._downloadOrderRemoveManifest = function (manifestId) {\n  var found = false,\n      i,\n      j;\n  delete this._manifestsDownloadOrderObj[manifestId];\n\n  for (i = 0, j = this._manifestsDownloadOrder.length; i < j; i++) {\n    if (this._manifestsDownloadOrder[i] === manifestId) {\n      this._manifestsDownloadOrder.splice(i, 1);\n\n      found = true;\n      break;\n    }\n  }\n\n  return found;\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {function} onSuccess - callback to be invoked when download finishes with success\n * @param {function} onFailure - callback to be invoked when download failed\n * @private\n * @returns {void}\n */\n\n\nDownloadsController.prototype._finish = function (manifestId, onSuccess, onFailure) {\n  this.downloadStats.refresh();\n\n  this._downloadOrderRemoveManifest(manifestId);\n\n  if (!this._manifestsDownloadOrder.length) {\n    this.downloadStats.stop();\n  }\n\n  this.storage.removeItem(manifestId).then(onSuccess, onFailure);\n};\n/**\n *\n * @param {object} link - link object which consist remote and local url\n * @private\n * @returns {string} - unique hash for download file based on local and remote url\n */\n\n\nDownloadsController.prototype._getDownloadHash = function (link) {\n  return link.remoteUrl + "-" + link.localUrl;\n};\n/**\n *\n * @param {Download} download - download class to be marked either with success or with error\n * @private\n * @returns {void}\n */\n\n\nDownloadsController.prototype._markDownloadItem = function (download) {\n  var self = this;\n  var manifestId = download.manifestId;\n\n  var downloadHash = self._getDownloadHash(download);\n\n  var syncStorageKeys = [];\n  var lastItem;\n  download.events.removeListener("end", self._onDownloadEnd);\n  download.events.removeListener("error", self._onDownloadError); //refreshing stats for last time - to have correct stats for subscribers progress before it is removed\n\n  if (self.storage.downloading.count(manifestId) === 1 && self.storage.left.count(manifestId) === 0) {\n    this.downloadStats.refresh();\n    lastItem = true;\n  }\n\n  if (download.status === STATUSES.FINISHED) {\n    self.storage.downloaded.push(manifestId, download);\n    syncStorageKeys.push(this.storage.stores.DOWNLOADS.DOWNLOADED);\n  } else {\n    self.storage.errors.push(manifestId, download);\n  }\n\n  self.storage.downloading.removeItem(manifestId, downloadHash);\n\n  if (self.isDownloadFinished(manifestId)) {\n    if (self.storage.errors.count(manifestId) === 0) {\n      self.storage.status.setItem(manifestId, "status", STATUSES.FINISHED);\n    } else {\n      self.storage.status.setItem(manifestId, "status", STATUSES.ERROR);\n    }\n\n    syncStorageKeys.push(this.storage.stores.STATUS);\n  }\n\n  self.storage.sync(manifestId, syncStorageKeys).then(function () {\n    self.storage.params.decrease(manifestId, self._names.downloadInProgress);\n\n    if (lastItem) {\n      self._finish(manifestId, function () {\n        self.startQueue();\n        console.info("FINISHED", manifestId);\n      }, function () {\n        self.startQueue();\n      });\n    } else {\n      self.startQueue();\n    }\n  }, function (err) {\n    console.error("ERROR", err);\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {function} onSuccess - callback to be invoked when stop has been successfully\n * @param {function} onFailure - callback to be invoked when stop failed\n * @param {string} status - the status\n * @param {string} statusDetails - adds details about status (on errors for example)\n * @returns {void}\n */\n\n\nDownloadsController.prototype._stopWithStatus = function (manifestId, onSuccess, onFailure, status, statusDetails) {\n  var self = this;\n\n  self._downloadOrderRemoveManifest(manifestId);\n\n  self.storage.getItem(manifestId).then(function (result) {\n    if (!result) {\n      onFailure(translation.getError(translation.e.downloads.ALREADY_STOPPED, manifestId));\n      return;\n    }\n\n    var itemsToStop = self.storage.downloading.getKeys(manifestId);\n    var itemToStop;\n    console.info("STOPPING", manifestId, itemsToStop.length);\n    var promises = [];\n\n    for (var i = 0, j = itemsToStop.length; i < j; i++) {\n      itemToStop = self.storage.downloading.getItem(manifestId, itemsToStop[i]);\n      itemToStop.events.removeListener("end", self._onDownloadEnd);\n      itemToStop.events.removeListener("error", self._onDownloadError);\n      promises.push(itemToStop.stopPromise());\n    }\n\n    self.storage.status.setItem(manifestId, "status", status);\n\n    if (statusDetails) {\n      self.storage.status.setItem(manifestId, "details", statusDetails);\n    }\n\n    promises.push(self.storage.sync(manifestId, [self.storage.stores.DOWNLOADS.DOWNLOADED, self.storage.stores.STATUS]));\n    Promise.all(promises).then(function () {\n      self._finish(manifestId, onSuccess, onFailure);\n    }, function (err) {\n      onFailure(translation.getError(translation.e.downloads.STOPPING_FAILED, manifestId), err);\n    });\n  }, function (err) {\n    onFailure(translation.getError(translation.e.downloads.STOPPING_FAILED, manifestId), err);\n  });\n};\n/**\n * @param {Download} download - Download Class\n * @param {object} err - error object\n * @returns {void}\n * @private\n */\n\n\nDownloadsController.prototype._onDownloadError = function (download, err) {\n  console.error("ERROR", download.remoteUrl, err);\n\n  this._markDownloadItem(download);\n\n  if (err === downloadFileUtil.errors.NO_SPACE_LEFT_ERROR || appSettings.getSettings().stopOnError) {\n    // stop downloading => cannot write\n    this._stopWithStatus(download.manifestId, function () {\n      console.info(\'stopped\');\n    }, function (failure) {\n      console.info(failure);\n    }, STATUSES.ERROR, err);\n  }\n};\n/**\n *\n * @param {Download} download - Download Class\n * @returns {void}\n * @private\n */\n\n\nDownloadsController.prototype._onDownloadEnd = function (download) {\n  // console.log("FINISHED", download.remoteUrl, download.localUrl);\n  this._markDownloadItem(download);\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Array} videoLinks - video links to be downloaded\n * @param {Array} audioLinks - audio links to be downloaded\n * @param {Array} textLinks - text links to be downloaded\n * @returns {void}\n * @private\n */\n\n\nDownloadsController.prototype._prepareStartOptions = function (manifestId, videoLinks, audioLinks, textLinks) {\n  var count = videoLinks.length + audioLinks.length + textLinks.length;\n  console.info("ADDING ->>> ", manifestId + ",", count, "fragments");\n  var options = {};\n  this.storage.params.setItem(manifestId, this._names.downloadInProgress, 0);\n  var maxDownloadInProgress;\n  var threadRules = appSettings.getSettings().downloadingThreadsRules;\n\n  for (var i = 0, j = threadRules.items.length; i < j; i++) {\n    if (count <= threadRules.items[i].max) {\n      options[threadRules.threadName] = threadRules.items[i].threads;\n      maxDownloadInProgress = threadRules.items[i].files;\n      break;\n    }\n  }\n\n  this.storage.params.setItem(manifestId, this._names.options, options);\n  this.storage.params.setItem(manifestId, this._names.maxDownloadInProgress, maxDownloadInProgress); //download order can help to stop download one manifest and download another or download them in parallel\n\n  this._downloadOrderAddManifest(manifestId);\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {boolean} - if download is finished\n */\n\n\nDownloadsController.prototype.isDownloadFinished = function (manifestId) {\n  return !this.storage.left.count(manifestId) && !this.storage.downloading.count(manifestId);\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {boolean} - if download is finished and synced (info written on disk)\n */\n\n\nDownloadsController.prototype.isDownloadFinishedAndSynced = function (manifestId) {\n  return !this.storage.left.count(manifestId) && !this.storage.downloading.count(manifestId) && !this.storage.keyExists(manifestId);\n};\n\nDownloadsController.prototype.getDownloading = function (manifestId, localFile) {\n  var items = this.storage.downloading.getItems(manifestId);\n\n  if (!items) {\n    return null;\n  }\n\n  for (var link in items) {\n    if (items.hasOwnProperty(link)) {\n      var download = items[link];\n      var downloadPath = path.normalize(download.localUrl);\n      var local = path.normalize(localFile);\n\n      if (downloadPath === local) {\n        return download;\n      }\n    }\n  }\n\n  return null;\n};\n\nDownloadsController.prototype.waitForDownload = function (download, callback) {\n  var _onDownloadEnd;\n\n  var _onDownloadError;\n\n  var removeListener = function removeListener(download) {\n    download.events.removeListener("end", _onDownloadEnd);\n    download.events.removeListener("error", _onDownloadError);\n  };\n\n  _onDownloadEnd = function _onDownloadEnd(download) {\n    removeListener(download);\n    callback();\n  };\n\n  _onDownloadError = function _onDownloadError(download, err) {\n    removeListener(download);\n    callback(err);\n  };\n\n  download.events.on("end", _onDownloadEnd);\n  download.events.on("error", _onDownloadError);\n};\n/**\n* Perform a seek - this changes order of fragment download for a manifest\n* @param {string} manifestId - manifest identifier\n* @param {string} localFile - local file\n* @param {function} callback - callback to get result\n* @returns {void}\n*/\n\n\nDownloadsController.prototype.performSeek = function (manifestId, localFile, callback) {\n  var self = this;\n  var download;\n  download = self.getDownloading(manifestId, localFile);\n\n  if (download) {\n    self.waitForDownload(download, callback);\n    return;\n  }\n\n  var items = self.storage.left.getItems(manifestId);\n\n  if (!items) {\n    callback(\'No download found\');\n    return;\n  }\n\n  var index = items.findIndex(function (download) {\n    var downloadPath = path.normalize(download.localUrl);\n    var local = path.normalize(localFile);\n    return downloadPath === local;\n  });\n\n  if (index > -1) {\n    var part1 = items.slice(0, index);\n    var part2 = items.slice(index);\n    self.storage.left.clear(manifestId);\n    self.storage.left.concat(manifestId, part2);\n    self.storage.left.concat(manifestId, part1);\n    items = self.storage.left.getItems(manifestId);\n    self.startQueue(self._indexOfManifest(manifestId), true);\n    download = self.getDownloading(manifestId, localFile);\n\n    if (download) {\n      self.waitForDownload(download, callback);\n    } else {\n      // if not queued, return an error\n      callback(\'No download found\');\n    }\n  } else {\n    callback(\'No download found\');\n  }\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {object} representations - object containing video, audio and text representations ids\n * @param {string} downloadFolder - download folder for video. If undefined, then default download folder is used\n * @param {function} onSuccess - callback to be invoked when start has been successfully\n * @param {function} onFailure - callback to be invoked when start failed\n * @param {boolean} fromResumed - if start has been called from resume api method\n * @param {string} oldstatus - if from resumed, then indicates the old status of download\n * @returns {void}\n */\n\n\nDownloadsController.prototype.start = function (manifestId, representations, downloadFolder, onSuccess, onFailure, fromResumed, oldstatus) {\n  var self = this;\n  this.downloadStats.start();\n\n  var manifest = this._manifestController.getManifestById(manifestId);\n\n  if (!manifest) {\n    onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n    return;\n  }\n\n  representations = representations || {};\n  var video = representations.video || [];\n\n  if (!Array.isArray(video)) {\n    video = [video];\n  }\n\n  var audio = representations.audio || [];\n\n  if (!Array.isArray(audio)) {\n    audio = [audio];\n  }\n\n  var text = representations.text || [];\n\n  if (!Array.isArray(text)) {\n    text = [text];\n  }\n\n  var videoR = manifest.getVideoRepresentations();\n  var audioR = manifest.getAudioRepresentations();\n  var textR = manifest.getTextRepresentations();\n  var localDownloadFolder = path.resolve(appSettings.getSettings().downloadsFolderPath);\n\n  if (downloadFolder) {\n    localDownloadFolder = path.resolve(downloadFolder);\n  }\n\n  var localPath = path.resolve(localDownloadFolder + "/" + manifestId + "/");\n  var manifestUrl = manifest.getManifestUrl();\n  var manifestName = manifest.getManifestName();\n\n  function getManifestBaseUrl(xml, manifestUrlDomain) {\n    var manifestBaseUrl;\n    var MPD = xml.getElementsByTagName("MPD")[0];\n\n    if (MPD) {\n      for (var i = 0, j = MPD.childNodes.length; i < j; i++) {\n        if (MPD.childNodes[i].nodeName === "BaseURL") {\n          manifestBaseUrl = MPD.childNodes[i].textContent;\n\n          if (!manifestBaseUrl.match(constants.regexpProtocolRemove)) {\n            manifestBaseUrl = utilUrl.joinPath(manifestUrlDomain, manifestBaseUrl);\n          }\n\n          break;\n        }\n      }\n    }\n\n    if (!manifestBaseUrl) {\n      manifestBaseUrl = manifestUrlDomain;\n    }\n\n    return manifestBaseUrl;\n  }\n\n  Promise.all([this._offlineController.getManifestInfoPromise(manifestId, true), this.storage.getItem(manifestId), mkdirp(localPath)]).then(function (results) {\n    var info = results[0];\n    var storageItem = results[1];\n\n    if (storageItem && !self.isDownloadFinished(manifestId)) {\n      if (fromResumed) {\n        onFailure(translation.getError(translation.e.downloads.ALREADY_RESUMED, manifestId));\n      } else {\n        onFailure(translation.getError(translation.e.downloads.ALREADY_STARTED, manifestId));\n      }\n\n      return;\n    } //collect Links - start\n\n\n    if (info.manifest.video) {\n      video = _.union(video, info.manifest.video);\n    }\n\n    if (info.manifest.audio) {\n      audio = _.union(audio, info.manifest.audio);\n    }\n\n    if (info.manifest.text) {\n      text = _.union(text, info.manifest.text);\n    }\n\n    var downloaded = info.downloadedFiles || [];\n    var downloadedHash = {};\n\n    for (var i = 0, j = downloaded.length; i < j; i++) {\n      downloadedHash[downloaded[i].localUrl] = downloaded[i];\n    }\n\n    var remotePath = getManifestBaseUrl(manifest.manifestXML.xml, manifest.url_domain);\n    var videoLinks = downloadUtil.getDownloadLinks(manifestId, localPath, remotePath, video, videoR, downloadedHash);\n    var audioLinks = downloadUtil.getDownloadLinks(manifestId, localPath, remotePath, audio, audioR, downloadedHash);\n    var textLinks = downloadUtil.getDownloadLinks(manifestId, localPath, remotePath, text, textR, downloadedHash);\n    var allvideoLinks = downloadUtil.getAllLinks(manifestId, localPath, remotePath, video, videoR);\n    var allaudioLinks = downloadUtil.getAllLinks(manifestId, localPath, remotePath, audio, audioR);\n    var alltextLinks = downloadUtil.getAllLinks(manifestId, localPath, remotePath, text, textR);\n    var allFiles = allvideoLinks.concat(allaudioLinks, alltextLinks); //collect Links - end\n\n    self.storage.createIfNotExists(manifestId).then(function () {\n      self.storage.manifest.setItem(manifestId, "ts", new Date().getTime());\n      self.storage.manifest.setItem(manifestId, "url", manifestUrl);\n      self.storage.manifest.setItem(manifestId, "name", manifestName);\n      self.storage.manifest.setItem(manifestId, "video", video);\n      self.storage.manifest.setItem(manifestId, "audio", audio);\n      self.storage.manifest.setItem(manifestId, "text", text);\n      self.storage.manifest.setItem(manifestId, "files", allFiles);\n      self.storage.manifest.setItem(manifestId, "folder", localDownloadFolder);\n      self.storage.downloaded.clear(manifestId);\n      self.storage.downloaded.concat(manifestId, downloaded);\n      self.storage.errors.clear(manifestId);\n\n      if (!fromResumed) {\n        // do not initialise state of manifest is start is from resume\n        // state must stay the last one\n        self.storage.status.setItem(manifestId, "status", STATUSES.CREATED);\n      } else {\n        // init status with last status\n        self.storage.status.setItem(manifestId, "status", oldstatus);\n      }\n\n      Promise.all([self.storage.sync(manifestId, [self.storage.stores.MANIFEST, self.storage.stores.STATUS]), self._manifestController.saveOriginalManifestOnceOnly(manifestId), self._manifestController.saveManifestWithChosenRepresentations(manifestId, {\n        video: video,\n        audio: audio,\n        text: text\n      }, localPath)]).then(function () {\n        self._addDownloads(manifestId, videoLinks, audioLinks, textLinks);\n\n        if (self._indexOfManifest(manifestId) > appSettings.getSettings().numberOfManifestsInParallel - 1) {\n          self.storage.status.setItem(manifestId, "status", STATUSES.QUEUED);\n        } else {\n          self.storage.status.setItem(manifestId, "status", STATUSES.STARTED);\n        }\n\n        self.storage.status.setItem(manifestId, "left", self.storage.left.count(manifestId));\n        self.storage.sync(manifestId, [self.storage.stores.DOWNLOADS.DOWNLOADED, self.storage.stores.STATUS]).then(function () {\n          self.downloadStats.refresh();\n\n          if (self.isDownloadFinished(manifestId)) {\n            self.storage.status.setItem(manifestId, "status", STATUSES.FINISHED);\n            self.storage.sync(manifestId, self.storage.stores.STATUS).then(function () {\n              self._finish(manifestId, onSuccess, onFailure);\n            }, onFailure);\n          } else {\n            self.downloadStats.start();\n            self.startQueue();\n            onSuccess();\n          }\n        }, onFailure);\n      }, onFailure);\n    }, onFailure);\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {object} representations - object containing video, audio and text representations ids\n * @param {function} onSuccess - callback to be invoked when start has been successfully\n * @param {function} onFailure - callback to be invoked when start failed\n * @returns {void}\n */\n\n\nDownloadsController.prototype.resume = function (manifestId, representations, onSuccess, onFailure) {\n  var self = this;\n\n  this._offlineController.getManifestInfo(manifestId, function (err, info) {\n    if (err) {\n      onFailure(translation.getError(translation.e.downloads.RESUMING_FAILED, manifestId), err);\n    } else {\n      var folder = info.manifest.folder;\n\n      if (!folder) {\n        // use default download folder path\n        folder = path.resolve(appSettings.getSettings().downloadsFolderPath);\n      }\n\n      self.start(manifestId, representations, folder, onSuccess, onFailure, true, info.status);\n    }\n  });\n};\n/**\n * Update download folder path\n * @param {string} manifestId - manifest identifier\n * @param {string} downloadFolder - new download folder\n * @param {function} onSuccess - callback to be invoked when start has been successfully\n * @param {function} onFailure - callback to be invoked when start failed\n * @returns {void}\n */\n\n\nDownloadsController.prototype.updateDownloadFolder = function (manifestId, downloadFolder, onSuccess, onFailure) {\n  Promise.all([new ReadItem(manifestId, appSettings.getSettings().stores.MANIFEST)]).then(function (results) {\n    var manifestSettings = results[0];\n\n    if (!manifestSettings) {\n      onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n      return;\n    }\n\n    manifestSettings.folder = downloadFolder;\n    var flushItem = new FlushItem(manifestId, appSettings.getSettings().stores.MANIFEST, manifestSettings);\n    flushItem.save().then(function () {\n      onSuccess();\n    }, function (err) {\n      onFailure(translation.getError(translation.e.downloads.SAVING_DATA_FAILED, manifestId), err);\n    });\n  }, function (err) {\n    onFailure(translation.getError(translation.e.downloads.UPDATE_DOWNLOAD_FOLDER_FAILED, manifestId), err);\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {function} onSuccess - callback to be invoked when stop has been successfully\n * @param {function} onFailure - callback to be invoked when stop failed\n * @returns {void}\n */\n\n\nDownloadsController.prototype.stop = function (manifestId, onSuccess, onFailure) {\n  this._stopWithStatus(manifestId, onSuccess, onFailure, STATUSES.STOPPED);\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {boolean} ignoreStopped - don\'t fail if download has been already stopped\n * @returns {Promise} - promise\n */\n\n\nDownloadsController.prototype.stopPromise = function (manifestId, ignoreStopped) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self.stop(manifestId, resolve, function (err) {\n      if (err) {\n        if (ignoreStopped && err.code === CODES.ERRORS.STOPPED) {\n          resolve();\n          return;\n        }\n\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} - promise\n */\n\n\nDownloadsController.prototype.removePromise = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self.stopPromise(manifestId).then(function () {\n      self.storage.removeItem(manifestId).then(resolve, reject);\n    }, function (err) {\n      //already stopped, continue\n      if (err && err.code === CODES.ERRORS.STOPPED) {\n        self.storage.removeItem(manifestId).then(resolve, reject);\n      } else {\n        reject(err);\n      }\n    });\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {object} link - object link to be downloaded\n * @private\n * @returns {void}\n */\n\n\nDownloadsController.prototype._addLinkToDownload = function (manifestId, link) {\n  var self = this;\n  var params = Object.assign({}, link);\n  var download = new Download(params, self.storage.params.getItem(manifestId, self._names.options));\n\n  var downloadHash = self._getDownloadHash(link);\n\n  self.storage.downloading.setItem(manifestId, downloadHash, download);\n  self.storage.status.setItem(manifestId, "left", self.storage.left.count(manifestId) + self.storage.errors.count(manifestId));\n  self.storage.sync(manifestId, self.storage.stores.STATUS);\n  download.events.on("end", self._onDownloadEnd);\n  download.events.on("error", self._onDownloadError);\n  download.start();\n  return download;\n};\n/**\n *\n * @param {number} [nextManifestPositionInArray] - index from array to decide which manifest should be downloaded next\n *   (queue)\n * @param {boolean} forceDownload true to force next download to be queued\n * @returns {void}\n */\n\n\nDownloadsController.prototype.startQueue = function (nextManifestPositionInArray, forceDownload) {\n  var count, downloadsInProgress, link, manifestId, maxDownloads;\n\n  if (typeof nextManifestPositionInArray === "undefined") {\n    nextManifestPositionInArray = 0;\n  }\n\n  manifestId = this._downloadOrderGetManifestId(nextManifestPositionInArray);\n\n  if (manifestId && this.isDownloadFinished(manifestId)) {\n    // the manifest id will be removed from queue, wait next time. Thus, do not change status\n    return;\n  }\n\n  if (nextManifestPositionInArray >= appSettings.getSettings().numberOfManifestsInParallel) {\n    if (manifestId) {\n      this.storage.status.setItem(manifestId, "status", STATUSES.QUEUED);\n    }\n\n    return;\n  } else {\n    this.storage.status.setItem(manifestId, "status", STATUSES.STARTED);\n  }\n\n  if (!manifestId) {\n    count = 0;\n    var i, j, items;\n    items = this.storage.getKeys();\n\n    for (i = 0, j = items.length; i < j; i++) {\n      count += this.storage.params.count(items[i], this._names.downloadInProgress);\n    }\n\n    if (count === 0) {\n      this.downloadStats.stop();\n    }\n\n    return;\n  }\n\n  downloadsInProgress = this.storage.params.getItem(manifestId, this._names.downloadInProgress);\n  maxDownloads = this.storage.params.getItem(manifestId, this._names.maxDownloadInProgress);\n\n  if (downloadsInProgress < maxDownloads - 1 || forceDownload) {\n    link = this.storage.left.shift(manifestId);\n\n    if (link) {\n      this.storage.params.increase(manifestId, this._names.downloadInProgress);\n\n      this._addLinkToDownload(manifestId, link);\n    } else {\n      //check next manifest\n      nextManifestPositionInArray++;\n    }\n\n    this.startQueue(nextManifestPositionInArray);\n  } else if (appSettings.getSettings().numberOfManifestsInParallel > 1 && nextManifestPositionInArray < appSettings.getSettings().numberOfManifestsInParallel) {\n    nextManifestPositionInArray++;\n    this.startQueue(nextManifestPositionInArray);\n  }\n};\n\nmodule.exports = DownloadsController;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4612\n')},2381:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('/*eslint no-console: ["error", { allow: ["warn", "error", "info"] }] */\n\n\nvar _ = __webpack_require__(4952);\n\nvar appSettings = __webpack_require__(9277);\n\nvar ArrayStorage = __webpack_require__(9567);\n\nvar ArrayStorageBridge = __webpack_require__(8048);\n\nvar FlushItem = __webpack_require__(1789);\n\nvar Storage = __webpack_require__(1396);\n\nvar StorageBridge = __webpack_require__(3890);\n\nvar SyncItem = __webpack_require__(6716);\n/**\n *\n * @constructor\n */\n\n\nfunction DownloadsStorageController() {\n  this.stores = appSettings.getSettings().stores;\n  this._items = {};\n  this._syncItems = [];\n  this._FLUSH_TIME = 50; //in miliseconds\n\n  this._flushThrottled = _.throttle(this._flush, this._FLUSH_TIME, {\n    leading: false\n  });\n\n  this._createDummyStorageBridge();\n}\n/**\n *\n * @private\n * @param {string} manifestId - manifest identifier\n * @param {string} key - key identifier\n * @returns {void}\n */\n\n\nDownloadsStorageController.prototype._createArrayStorage = function (manifestId, key) {\n  if (!this[key]) {\n    this._createArrayStorageBridge(key);\n  }\n\n  this._items[manifestId][key] = new ArrayStorage();\n};\n/**\n *\n * @private\n * @param {string} key - key identifier\n * @returns {void}\n */\n\n\nDownloadsStorageController.prototype._createArrayStorageBridge = function (key) {\n  this[key] = new ArrayStorageBridge(this, key);\n};\n\nDownloadsStorageController.prototype._createDummyStorageBridge = function () {\n  this._createArrayStorageBridge(this.stores.DOWNLOADS.LEFT);\n\n  this._createArrayStorageBridge(this.stores.DOWNLOADS.DOWNLOADED);\n\n  this._createStorageBridge(this.stores.DOWNLOADS.DOWNLOADING);\n\n  this._createArrayStorageBridge(this.stores.DOWNLOADS.ERRORS);\n\n  this._createStorageBridge(this.stores.PARAMS);\n\n  this._createStorageBridge(this.stores.MANIFEST);\n\n  this._createStorageBridge(this.stores.STATUS);\n};\n/**\n *\n * @private\n * @param {string} manifestId - manifest identifier\n * @param {string} key - key identifier\n * @returns {void}\n */\n\n\nDownloadsStorageController.prototype._createStorage = function (manifestId, key) {\n  if (!this[key]) {\n    this._createStorageBridge(key);\n  }\n\n  this._items[manifestId][key] = new Storage();\n};\n/**\n *\n * @private\n * @param {string} key - key identifier\n * @returns {void}\n */\n\n\nDownloadsStorageController.prototype._createStorageBridge = function (key) {\n  this[key] = new StorageBridge(this, key);\n};\n/**\n *\n * @private\n * @returns {void}\n */\n\n\nDownloadsStorageController.prototype._flush = function () {\n  var self = this;\n\n  var items = this._syncItems.splice(0, this._syncItems.length);\n\n  var flushItem, flushItems, i, item, j, k, l, manifestId, storageKey, storageKeys, storagesToFlush;\n  storagesToFlush = {};\n\n  function getItems(manifestId, storageKey) {\n    if (self._items[manifestId] && self._items[manifestId][storageKey]) {\n      return self._items[manifestId][storageKey].getItems();\n    } else {\n      return [];\n    }\n  } //collect information which storages needs to be saved\n\n\n  for (i = 0, j = items.length; i < j; i++) {\n    item = items[i];\n    storagesToFlush[item.manifestId] = storagesToFlush[item.manifestId] || {};\n\n    for (k = 0, l = item.storageKeys.length; k < l; k++) {\n      storagesToFlush[item.manifestId][item.storageKeys[k]] = true;\n    }\n  }\n\n  flushItems = []; //create flush items - promises that needs to be resolved together in parallel\n\n  for (manifestId in storagesToFlush) {\n    storageKeys = storagesToFlush[manifestId];\n\n    for (storageKey in storageKeys) {\n      try {\n        flushItem = new FlushItem(manifestId, storageKey, getItems(manifestId, storageKey));\n        flushItems.push(flushItem.save());\n      } catch (e) {\n        console.error("ERROR", storageKey);\n      }\n    }\n  }\n\n  Promise.all(flushItems).then(function () {\n    var i, j;\n\n    for (i = 0, j = items.length; i < j; i++) {\n      items[i].resolve();\n    }\n  }, function () {\n    var i, j;\n\n    for (i = 0, j = items.length; i < j; i++) {\n      items[i].reject();\n    }\n  });\n};\n/**\n *\n * @private\n * @param {Array} [storageKey] storage key\n * @returns {Array} keys for all storages\n */\n\n\nDownloadsStorageController.prototype._getAllStorageKeys = function (storageKey) {\n  var keys = [];\n  storageKey = storageKey || this.stores;\n\n  for (var key in storageKey) {\n    if (storageKey.hasOwnProperty(key)) {\n      if (typeof storageKey[key] === "string") {\n        //params don\'t need to be stored to disk\n        if (key !== this.stores.PARAMS) {\n          keys.push(storageKey[key]);\n        }\n      } else {\n        keys = keys.concat(this._getAllStorageKeys(storageKey[key]));\n      }\n    }\n  }\n\n  return keys;\n};\n/**\n *\n * @private\n * @param {string} storageKey storage key identifier\n * @param {string} bridgeMethodName method name to be called\n * @param {string} manifestId - manifest identifier\n * @returns {*} items\n */\n\n\nDownloadsStorageController.prototype._itemAction = function (storageKey, bridgeMethodName, manifestId) {\n  var args = [],\n      i,\n      j; //collect all other parameters except those already listed\n\n  for (i = 3, j = arguments.length; i < j; i++) {\n    args.push(arguments[i]);\n  }\n\n  if (this._items[manifestId] && this._items[manifestId][storageKey] && this._items[manifestId][storageKey][bridgeMethodName]) {\n    return this._items[manifestId][storageKey][bridgeMethodName].apply(this._items[manifestId][storageKey], args);\n  } else {\n    //if manifest still exists\n    if (this._items[manifestId]) {\n      console.error("ERROR", manifestId, storageKey, bridgeMethodName, args);\n    }\n\n    return undefined;\n  }\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Array} [storageKeys] storage keys that will be cleared\n * @returns {Promise} promise\n */\n\n\nDownloadsStorageController.prototype.clear = function (manifestId, storageKeys) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    storageKeys = storageKeys || self._getAllStorageKeys();\n\n    if (self._items[manifestId]) {\n      for (var i = 0, j = storageKeys.length; i < j; i++) {\n        var storage = self._items[manifestId][storageKeys[i]];\n\n        if (storage) {\n          storage.clear();\n        }\n      }\n    }\n\n    delete self._items[manifestId];\n    self.sync(manifestId, storageKeys).then(resolve, reject);\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\n\n\nDownloadsStorageController.prototype.create = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self._items[manifestId] = {};\n\n    self._createArrayStorage(manifestId, self.stores.DOWNLOADS.LEFT);\n\n    self._createArrayStorage(manifestId, self.stores.DOWNLOADS.DOWNLOADED);\n\n    self._createStorage(manifestId, self.stores.DOWNLOADS.DOWNLOADING);\n\n    self._createArrayStorage(manifestId, self.stores.DOWNLOADS.ERRORS);\n\n    self._createStorage(manifestId, self.stores.PARAMS);\n\n    self._createStorage(manifestId, self.stores.MANIFEST);\n\n    self._createStorage(manifestId, self.stores.STATUS);\n\n    self.sync(manifestId, [self.stores.DOWNLOADS.DOWNLOADED, self.stores.MANIFEST, self.stores.STATUS]).then(resolve, reject);\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\n\n\nDownloadsStorageController.prototype.createIfNotExists = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self.getItem(manifestId).then(function (result) {\n      if (result) {\n        resolve();\n      } else {\n        self.create(manifestId).then(resolve, reject);\n      }\n    }, reject);\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\n\n\nDownloadsStorageController.prototype.getItem = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve) {\n    resolve(self._items[manifestId]);\n  });\n};\n/**\n *\n * @returns {string[]} keys of all items\n */\n\n\nDownloadsStorageController.prototype.getKeys = function () {\n  return Object.keys(this._items);\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {boolean} if certain manifest id exists\n */\n\n\nDownloadsStorageController.prototype.keyExists = function (manifestId) {\n  return !!this._items[manifestId];\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\n\n\nDownloadsStorageController.prototype.removeItem = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve) {\n    delete self._items[manifestId];\n    resolve();\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Array} [storageKeys] storage keys that will be synced\n * @returns {Promise} promise\n */\n\n\nDownloadsStorageController.prototype.sync = function (manifestId, storageKeys) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    if (typeof storageKeys === "undefined") {\n      reject("Storage key is missing");\n      return;\n    }\n\n    if (typeof storageKeys === "string") {\n      storageKeys = [storageKeys];\n    }\n\n    if (appSettings.getSettings().saveToDisk) {\n      self._syncItems.push(new SyncItem(resolve, reject, manifestId, storageKeys));\n\n      self._flushThrottled();\n    } else {\n      resolve();\n    }\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\n\n\nDownloadsStorageController.prototype.syncAll = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    if (appSettings.getSettings().saveToDisk) {\n      var storageKeys = self._getAllStorageKeys();\n\n      self._syncItems.push(new SyncItem(resolve, reject, manifestId, storageKeys));\n\n      self._flushThrottled();\n    } else {\n      resolve();\n    }\n  });\n};\n\nmodule.exports = DownloadsStorageController;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2381\n')},42:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar XMLSerializer = (__webpack_require__(678).XMLSerializer);\n\nvar appSettings = __webpack_require__(9277);\n\nvar parseManifestWithChoosenRepresentations = __webpack_require__(4803);\n\nvar downloadFileUtil = __webpack_require__(2777);\n\nvar saveFile = __webpack_require__(1349);\n\nvar translation = __webpack_require__(817);\n/**\n *\n * @constructor\n */\n\n\nfunction ManifestController() {\n  this._manifests = {};\n}\n/**\n *\n * @param {object} manifest manifest object\n * @returns {void}\n */\n\n\nManifestController.prototype.cacheManifest = function (manifest) {\n  this._manifests[manifest.id] = manifest;\n};\n/**\n *\n * @param {Array|number|string} [manifestIds] manifests identifiers\n * @returns {*} manifests\n */\n\n\nManifestController.prototype.getManifests = function (manifestIds) {\n  var selectedManifests;\n\n  if (typeof manifestIds === "undefined") {\n    selectedManifests = this._manifests;\n  } else if (typeof manifestIds === "number" || typeof manifestIds === "string") {\n    selectedManifests = [this._manifests[String(manifestIds)]];\n  } else {\n    selectedManifests = [];\n\n    for (var i = 0, j = manifestIds.length; i < j; i++) {\n      if (this._manifests[manifestIds[i]]) {\n        selectedManifests.push(this._manifests[manifestIds[i]]);\n      }\n    }\n  }\n\n  return selectedManifests;\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {*} manifest\n */\n\n\nManifestController.prototype.getManifestById = function (manifestId) {\n  if (typeof manifestId === "number" || typeof manifestId === "string") {\n    return this._manifests[String(manifestId)];\n  }\n};\n/**\n *\n * @param {Array|number|string} [manifestIds] manifests identifiers\n * @returns {Array} manifests infomrations\n */\n\n\nManifestController.prototype.getManifestsInfo = function (manifestIds) {\n  var manifests = [];\n  var selectedManifests = this.getManifests(manifestIds);\n\n  for (var i = 0, j = selectedManifests.length; i < j; i++) {\n    manifests.push(selectedManifests[i].getJsonInfo());\n  }\n\n  return manifests;\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {string} local path for manifest files\n */\n\n\nManifestController.prototype.getOriginalManifestLocalPath = function (manifestId) {\n  return appSettings.getSettings().settingsFolder + manifestId + "/";\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {*} manifest info\n */\n\n\nManifestController.prototype.getManifestInfoById = function (manifestId) {\n  var manifest = this.getManifestById(manifestId);\n\n  if (manifest) {\n    return manifest.getJsonInfo();\n  }\n};\n/**\n *\n * @param {Array|number|string} [manifestIds] manifests identifiers\n * @returns {void}\n */\n\n\nManifestController.prototype.removeFromCache = function (manifestIds) {\n  if (typeof manifestIds === "number" || typeof manifestIds === "string") {\n    manifestIds = [String(manifestIds)];\n  }\n\n  manifestIds = manifestIds || [];\n\n  for (var i = 0, j = manifestIds.length; i < j; i++) {\n    delete this._manifests[manifestIds[i]];\n  }\n};\n\nManifestController.prototype.removeFromCacheAll = function () {\n  this._manifests = [];\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\n\n\nManifestController.prototype.saveOriginalManifestOnceOnly = function (manifestId) {\n  var localPath = this.getOriginalManifestLocalPath(manifestId);\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    var manifest = self.getManifestById(manifestId);\n\n    if (!manifest) {\n      reject(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n      return;\n    }\n\n    downloadFileUtil.checkForLocalFile(localPath + manifest.getManifestName(), function (exists) {\n      if (exists) {\n        resolve();\n      } else {\n        var xmlSerializer = new XMLSerializer();\n        var manifestString;\n\n        try {\n          manifestString = xmlSerializer.serializeToString(manifest.getManifestXML());\n        } catch (err) {\n          reject(err);\n          return;\n        }\n\n        saveFile(localPath, manifest.getManifestName(), manifestString, function (err) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      }\n    });\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {object} representations representations to be saved\n * @param {string} downloadFolder - folder where all fragments are downloaded\n * @returns {Promise} promise\n */\n\n\nManifestController.prototype.saveManifestWithChosenRepresentations = function (manifestId, representations, downloadFolder) {\n  var localPath = downloadFolder;\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    var manifest = self.getManifestById(manifestId);\n\n    if (!manifest) {\n      reject(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n      return;\n    }\n\n    var manifestString;\n\n    try {\n      manifestString = parseManifestWithChoosenRepresentations(manifest, representations);\n    } catch (err) {\n      reject(err);\n      return;\n    }\n\n    saveFile(localPath, manifest.getManifestName(), manifestString, function (err) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n\nmodule.exports = ManifestController;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///42\n')},7094:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar path = __webpack_require__(1017);\n\nvar getSize = __webpack_require__(6838);\n\nvar rmdir = __webpack_require__(6951);\n\nvar appSettings = __webpack_require__(9277);\n\nvar ReadItem = __webpack_require__(3812);\n\nvar dirList = __webpack_require__(8494);\n\nvar Manifest = (__webpack_require__(1269)/* .Manifest */ .G);\n\nvar STATUSES = __webpack_require__(8255);\n/**\n *\n * @param {ManifestController} manifestController - reference to existing manifest controller\n * @constructor\n */\n\n\nfunction OfflineController(manifestController) {\n  this._manifestController = manifestController;\n}\n/**\n *\n * @param {Function} callback - function to be called when list is ready\n * @returns {void}\n */\n\n\nOfflineController.prototype.getManifestsList = function (callback) {\n  dirList(appSettings.getSettings().settingsFolder, true, false).then(function (settingsFolderList) {\n    var manifestList = [];\n\n    for (var i = 0, j = settingsFolderList.length; i < j; i++) {\n      manifestList.push(settingsFolderList[i]);\n    }\n\n    callback(null, manifestList);\n  }, function (err) {\n    callback(err);\n  });\n};\n/**\n *\n * @param {Function} callback - function to be called when list with info is ready\n * @param {Boolean} full - if downloaded info should contain all items or only the length\n * @returns {void}\n */\n\n\nOfflineController.prototype.getManifestsListWithInfo = function (callback, full) {\n  var self = this;\n  this.getManifestsList(function (err, list) {\n    if (err) {\n      callback(err);\n    } else {\n      var infoP = [];\n\n      for (var i = 0, j = list.length; i < j; i++) {\n        infoP.push(self.getManifestInfoPromise(list[i], full));\n      }\n\n      Promise.all(infoP).then(function (results) {\n        var newResults = [];\n\n        for (var _i = 0, _j = results.length; _i < _j; _i++) {\n          if (results[_i]) {\n            newResults.push(results[_i]);\n          }\n        }\n\n        callback(null, newResults);\n      }, function (promisesError) {\n        callback(promisesError);\n      });\n    }\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Function} callback - function to be called when info for manifest is ready\n * @param {Boolean} full - if downloaded info should contain all items or only the length\n * @returns {void}\n */\n\n\nOfflineController.prototype.getManifestInfo = function (manifestId, callback, full) {\n  var self = this;\n\n  function addManifestInfoAndContinue(info) {\n    var manifestName = info.manifest.name;\n    var manifestUrl = info.manifest.url;\n    var manifestLocalUrl = path.resolve(appSettings.getSettings().settingsFolder + "/" + manifestId + "/" + manifestName);\n\n    var manifest = self._manifestController.getManifestById(manifestId);\n\n    if (manifest) {\n      info.manifestInfo = manifest.getJsonInfo();\n      callback(null, info);\n    } else {\n      manifest = new Manifest(manifestId);\n      manifest.loadFromLocal(manifestLocalUrl, manifestUrl).then(function () {\n        self._manifestController.cacheManifest(manifest);\n\n        info.manifestInfo = manifest.getJsonInfo();\n        callback(null, info);\n      }, function (err) {\n        if (err && err.code === "ENOENT") {\n          callback();\n        } else {\n          callback(err);\n        }\n      });\n    }\n  }\n\n  Promise.all([new ReadItem(manifestId, appSettings.getSettings().stores.MANIFEST), new ReadItem(manifestId, appSettings.getSettings().stores.DOWNLOADS.DOWNLOADED), new ReadItem(manifestId, appSettings.getSettings().stores.STATUS), new ReadItem(manifestId, appSettings.getSettings().stores.PERSISTENT), new ReadItem(manifestId, appSettings.getSettings().stores.DATA)]).then(function (results) {\n    var info = {};\n    var manifestSettings = results[0] || {};\n    var downloaded = results[1] || [];\n    var status = results[2] || {};\n    var persistent = results[3] || \'\';\n    var data = results[4] || \'\';\n    info.status = status.status || STATUSES.BROKEN;\n    info.details = status.details || undefined;\n\n    if (!self.downloadStorage.keyExists(manifestId) && info.status === STATUSES.STARTED) {\n      info.status = STATUSES.BROKEN;\n    }\n\n    info.manifest = manifestSettings;\n\n    if (info.manifest.files) {\n      info.manifest.totalFiles = info.manifest.files.length;\n\n      if (full === false) {\n        delete info.manifest.files;\n      }\n    }\n\n    info.left = status.left || 0;\n    info.persistent = persistent;\n    info.downloaded = downloaded.length;\n\n    if (full) {\n      info.downloadedFiles = downloaded;\n    }\n\n    info.data = data;\n    addManifestInfoAndContinue(info);\n  }, callback);\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Function} callback - function to be called when info for manifest is ready\n * @returns {void}\n */\n\n\nOfflineController.prototype.getManifestFolderInfo = function (manifestId, callback) {\n  Promise.all([new ReadItem(manifestId, appSettings.getSettings().stores.MANIFEST)]).then(function (results) {\n    var info = {};\n    var manifestSettings = results[0] || {};\n    var downloadFolder = manifestSettings.folder;\n\n    if (!downloadFolder) {\n      // try to serve from default download folder\n      downloadFolder = appSettings.getSettings().downloadsFolderPath;\n    }\n\n    var videoFolder = path.join(downloadFolder, manifestId);\n    info.folder = videoFolder; // get size of folder\n\n    getSize(videoFolder, function (err, size) {\n      if (err) {\n        info.size = 0;\n      } else {\n        info.size = size;\n      }\n\n      callback(null, info);\n    });\n  }, callback);\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Boolean} full - if downloaded info should contain all items or only the length\n * @returns {Promise} - promise\n */\n\n\nOfflineController.prototype.getManifestInfoPromise = function (manifestId, full) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self.getManifestInfo(manifestId, function (err, result) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(result);\n      }\n    }, full);\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Function} callback - callback with resolved info data about manifest - if such exists\n * @returns {void}\n */\n\n\nOfflineController.prototype.getManifestDataFile = function (manifestId, callback) {\n  new ReadItem(manifestId, appSettings.getSettings().stores.MANIFEST).then(function (data) {\n    callback(data);\n  }, function () {\n    callback();\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Function} onSuccess - callback to be invoked when remove has been successfully\n * @param {Function} onFailure - callback to be invoked when remove failed\n * @returns {void}\n */\n\n\nOfflineController.prototype.remove = function (manifestId, onSuccess, onFailure) {\n  var settingsFolder = appSettings.getSettings().settingsFolder + manifestId;\n  this.getManifestDataFile(manifestId, function (info) {\n    if (!info) {\n      // no manifest data found for manifest, the download has not been started => just remove settings\n      rmdir(settingsFolder, function (err) {\n        if (err && err.code !== "ENOENT") {\n          onFailure(err);\n        } else {\n          onSuccess();\n        }\n      });\n    } else {\n      var folder = info.folder;\n\n      if (!folder) {\n        // use default download folder path\n        folder = path.resolve(appSettings.getSettings().downloadsFolderPath);\n      }\n\n      var downloadsFolder = folder + \'/\' + manifestId;\n      rmdir(downloadsFolder, function (err) {\n        if (err && err.code !== "ENOENT") {\n          onFailure(err);\n        } else {\n          rmdir(settingsFolder, function (err) {\n            if (err && err.code !== "ENOENT") {\n              onFailure(err);\n            } else {\n              onSuccess();\n            }\n          });\n        }\n      });\n    }\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} - promise\n */\n\n\nOfflineController.prototype.removePromise = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self.remove(manifestId, resolve, reject);\n  });\n};\n/**\n *\n * @returns {Promise} - promise\n */\n\n\nOfflineController.prototype.removeAllPromise = function () {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    var settingsFolder = appSettings.getSettings().settingsFolder;\n    self.getManifestsList(function (err, list) {\n      if (err) {\n        reject(err);\n      } else {\n        var removeP = [];\n\n        for (var i = 0, j = list.length; i < j; i++) {\n          removeP.push(self.removePromise(list[i]));\n        }\n\n        Promise.all(removeP).then(function () {\n          rmdir(settingsFolder, function (err) {\n            if (err && err.code !== "ENOENT") {\n              reject(err);\n            } else {\n              resolve();\n            }\n          });\n        }, function (err) {\n          reject(err);\n        });\n      }\n    });\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Function} onSuccess - callback to be invoked when restore has been successfully\n * @param {Function} onFailure - callback to be invoked when restore failed\n * @returns {void}\n */\n\n\nOfflineController.prototype.restoreLocalManifest = function (manifestId, onSuccess, onFailure) {\n  var self = this;\n  this.getManifestInfo(manifestId, function (err, info) {\n    var representations = {};\n    representations.video = info.manifest.video;\n    representations.audio = info.manifest.audio;\n    representations.text = info.manifest.text;\n\n    self._manifestController.saveManifestWithChosenRepresentations(manifestId, representations).then(onSuccess, onFailure);\n  });\n};\n/**\n *\n * @param {DownloadsStorageController} storage - downloads storage controller\n * @returns {void}\n */\n\n\nOfflineController.prototype.setDownloadStorage = function (storage) {\n  this.downloadStorage = storage;\n};\n\nmodule.exports = OfflineController;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7094\n')},9256:module=>{"use strict";eval('\n/**\n *\n * @constructor\n */\n\nfunction SubscribersController() {\n  this._subscribers = {};\n}\n/**\n *\n * @param {Subscriber} subscriber - subscriber\n * @returns {void}\n */\n\n\nSubscribersController.prototype.addSubscriber = function (subscriber) {\n  var id = subscriber.getId();\n  this._subscribers[id] = subscriber;\n  return id;\n};\n/**\n *\n * @param {Array|String} subscribersId - subscriber identifier\n * @returns {void}\n */\n\n\nSubscribersController.prototype.removeSubscribersById = function (subscribersId) {\n  if (typeof subscribersId === "string") {\n    subscribersId = [subscribersId];\n  }\n\n  for (var i = 0, j = subscribersId.length; i < j; i++) {\n    if (this._subscribers[subscribersId[i]]) {\n      this._subscribers[subscribersId[i]].remove();\n\n      delete this._subscribers[subscribersId[i]];\n    }\n  }\n};\n/**\n *\n * Remove all subscribers for certain manifest based on any subscriberId that belongs to this manifest\n * @param {Array|String} subscriberId - subscriber identifier\n * @returns {void}\n */\n\n\nSubscribersController.prototype.removeAllManifestSubscribersById = function (subscriberId) {\n  var subscriber = subscriberId && this._subscribers[subscriberId];\n\n  if (subscriber) {\n    this.unsubscribe(subscriber.getManifestId());\n  }\n};\n/**\n *\n * @param {Array|String} manifestIds - manifest or manifests identifier\n * @returns {void}\n */\n\n\nSubscribersController.prototype.unsubscribe = function (manifestIds) {\n  var subscribersId = [];\n  var manifestIdsHash = {};\n\n  if (typeof manifestIds === "string") {\n    manifestIds = [manifestIds];\n  }\n\n  manifestIds = manifestIds || [];\n\n  for (var i = 0, j = manifestIds.length; i < j; i++) {\n    manifestIdsHash[manifestIds[i]] = true;\n  }\n\n  for (var key in this._subscribers) {\n    if (this._subscribers.hasOwnProperty(key)) {\n      if (manifestIdsHash[this._subscribers[key].getManifestId()]) {\n        subscribersId.push(key);\n      }\n    }\n  }\n\n  this.removeSubscribersById(subscribersId);\n};\n/**\n * @returns {void}\n */\n\n\nSubscribersController.prototype.unsubscribeAll = function () {\n  for (var key in this._subscribers) {\n    if (this._subscribers.hasOwnProperty(key)) {\n      this._subscribers[key].remove();\n    }\n  }\n\n  this._subscribers = {};\n};\n\nmodule.exports = SubscribersController;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q29CLGNBQWhDLEdBQWlELFlBQVk7RUFDM0QsS0FBSyxJQUFJSCxHQUFULElBQWdCLEtBQUtsQixZQUFyQixFQUFtQztJQUNqQyxJQUFJLEtBQUtBLFlBQUwsQ0FBa0JtQixjQUFsQixDQUFpQ0QsR0FBakMsQ0FBSixFQUEyQztNQUN6QyxLQUFLbEIsWUFBTCxDQUFrQmtCLEdBQWxCLEVBQXVCUCxNQUF2QjtJQUNEO0VBQ0Y7O0VBQ0QsS0FBS1gsWUFBTCxHQUFvQixFQUFwQjtBQUNELENBUEQ7O0FBU0FzQixNQUFNLENBQUNDLE9BQVAsR0FBaUJ4QixxQkFBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2NvbnRyb2xsZXJzL3N1YnNjcmliZXJzLWNvbnRyb2xsZXIuanM/YTg0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTdWJzY3JpYmVyc0NvbnRyb2xsZXIgKCkge1xuICB0aGlzLl9zdWJzY3JpYmVycyA9IHt9O1xufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0ge1N1YnNjcmliZXJ9IHN1YnNjcmliZXIgLSBzdWJzY3JpYmVyXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuU3Vic2NyaWJlcnNDb250cm9sbGVyLnByb3RvdHlwZS5hZGRTdWJzY3JpYmVyID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgY29uc3QgaWQgPSBzdWJzY3JpYmVyLmdldElkKCk7XG4gIHRoaXMuX3N1YnNjcmliZXJzW2lkXSA9IHN1YnNjcmliZXI7XG4gIHJldHVybiBpZDtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBzdWJzY3JpYmVyc0lkIC0gc3Vic2NyaWJlciBpZGVudGlmaWVyXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuU3Vic2NyaWJlcnNDb250cm9sbGVyLnByb3RvdHlwZS5yZW1vdmVTdWJzY3JpYmVyc0J5SWQgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcnNJZCkge1xuICBpZiAodHlwZW9mIHN1YnNjcmliZXJzSWQgPT09IFwic3RyaW5nXCIpIHtcbiAgICBzdWJzY3JpYmVyc0lkID0gW3N1YnNjcmliZXJzSWRdO1xuICB9XG4gIGZvciAobGV0IGkgPSAwLCBqID0gc3Vic2NyaWJlcnNJZC5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICBpZiAodGhpcy5fc3Vic2NyaWJlcnNbc3Vic2NyaWJlcnNJZFtpXV0pIHtcbiAgICAgIHRoaXMuX3N1YnNjcmliZXJzW3N1YnNjcmliZXJzSWRbaV1dLnJlbW92ZSgpO1xuICAgICAgZGVsZXRlKHRoaXMuX3N1YnNjcmliZXJzW3N1YnNjcmliZXJzSWRbaV1dKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICpcbiAqIFJlbW92ZSBhbGwgc3Vic2NyaWJlcnMgZm9yIGNlcnRhaW4gbWFuaWZlc3QgYmFzZWQgb24gYW55IHN1YnNjcmliZXJJZCB0aGF0IGJlbG9uZ3MgdG8gdGhpcyBtYW5pZmVzdFxuICogQHBhcmFtIHtBcnJheXxTdHJpbmd9IHN1YnNjcmliZXJJZCAtIHN1YnNjcmliZXIgaWRlbnRpZmllclxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblN1YnNjcmliZXJzQ29udHJvbGxlci5wcm90b3R5cGUucmVtb3ZlQWxsTWFuaWZlc3RTdWJzY3JpYmVyc0J5SWQgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcklkKSB7XG4gIGxldCBzdWJzY3JpYmVyID0gc3Vic2NyaWJlcklkICYmIHRoaXMuX3N1YnNjcmliZXJzW3N1YnNjcmliZXJJZF07XG4gIGlmIChzdWJzY3JpYmVyKSB7XG4gICAgdGhpcy51bnN1YnNjcmliZShzdWJzY3JpYmVyLmdldE1hbmlmZXN0SWQoKSk7XG4gIH1cbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBtYW5pZmVzdElkcyAtIG1hbmlmZXN0IG9yIG1hbmlmZXN0cyBpZGVudGlmaWVyXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuU3Vic2NyaWJlcnNDb250cm9sbGVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIChtYW5pZmVzdElkcykge1xuICBsZXQgc3Vic2NyaWJlcnNJZCA9IFtdO1xuICBsZXQgbWFuaWZlc3RJZHNIYXNoID0ge307XG4gIGlmICh0eXBlb2YgbWFuaWZlc3RJZHMgPT09IFwic3RyaW5nXCIpIHtcbiAgICBtYW5pZmVzdElkcyA9IFttYW5pZmVzdElkc107XG4gIH1cbiAgbWFuaWZlc3RJZHMgPSBtYW5pZmVzdElkcyB8fCBbXTtcbiAgZm9yIChsZXQgaSA9IDAsIGogPSBtYW5pZmVzdElkcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICBtYW5pZmVzdElkc0hhc2hbbWFuaWZlc3RJZHNbaV1dID0gdHJ1ZTtcbiAgfVxuXG4gIGZvciAobGV0IGtleSBpbiB0aGlzLl9zdWJzY3JpYmVycykge1xuICAgIGlmICh0aGlzLl9zdWJzY3JpYmVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBpZiAobWFuaWZlc3RJZHNIYXNoW3RoaXMuX3N1YnNjcmliZXJzW2tleV0uZ2V0TWFuaWZlc3RJZCgpXSkge1xuICAgICAgICBzdWJzY3JpYmVyc0lkLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aGlzLnJlbW92ZVN1YnNjcmliZXJzQnlJZChzdWJzY3JpYmVyc0lkKTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblN1YnNjcmliZXJzQ29udHJvbGxlci5wcm90b3R5cGUudW5zdWJzY3JpYmVBbGwgPSBmdW5jdGlvbiAoKSB7XG4gIGZvciAobGV0IGtleSBpbiB0aGlzLl9zdWJzY3JpYmVycykge1xuICAgIGlmICh0aGlzLl9zdWJzY3JpYmVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpYmVyc1trZXldLnJlbW92ZSgpO1xuICAgIH1cbiAgfVxuICB0aGlzLl9zdWJzY3JpYmVycyA9IHt9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTdWJzY3JpYmVyc0NvbnRyb2xsZXI7XG4iXSwibmFtZXMiOlsiU3Vic2NyaWJlcnNDb250cm9sbGVyIiwiX3N1YnNjcmliZXJzIiwicHJvdG90eXBlIiwiYWRkU3Vic2NyaWJlciIsInN1YnNjcmliZXIiLCJpZCIsImdldElkIiwicmVtb3ZlU3Vic2NyaWJlcnNCeUlkIiwic3Vic2NyaWJlcnNJZCIsImkiLCJqIiwibGVuZ3RoIiwicmVtb3ZlIiwicmVtb3ZlQWxsTWFuaWZlc3RTdWJzY3JpYmVyc0J5SWQiLCJzdWJzY3JpYmVySWQiLCJ1bnN1YnNjcmliZSIsImdldE1hbmlmZXN0SWQiLCJtYW5pZmVzdElkcyIsIm1hbmlmZXN0SWRzSGFzaCIsImtleSIsImhhc093blByb3BlcnR5IiwicHVzaCIsInVuc3Vic2NyaWJlQWxsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9256\n')},6999:module=>{"use strict";eval("\n\nvar codes = {\n  GENERAL: -1,\n  ERRORS: {\n    INTERNAL_ERROR: 1,\n    BROKEN: 11,\n    FINISHED: 12,\n    UNFINISHED: 13,\n    STOPPED: 14,\n    CREATED: 15,\n    MISSING: 16,\n    RESUMED: 17,\n    STARTED: 18,\n    LOADING: 19,\n    REMOVED: 20,\n    INFO: 21,\n    EXISTS: 22,\n    NOT_FOUND: 100\n  }\n};\nmodule.exports = codes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjk5OS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxLQUFLLEdBQUc7RUFDWkMsT0FBTyxFQUFFLENBQUMsQ0FERTtFQUVaQyxNQUFNLEVBQUU7SUFDTkMsY0FBYyxFQUFFLENBRFY7SUFFTkMsTUFBTSxFQUFFLEVBRkY7SUFHTkMsUUFBUSxFQUFFLEVBSEo7SUFJTkMsVUFBVSxFQUFFLEVBSk47SUFLTkMsT0FBTyxFQUFFLEVBTEg7SUFNTkMsT0FBTyxFQUFFLEVBTkg7SUFPTkMsT0FBTyxFQUFFLEVBUEg7SUFRTkMsT0FBTyxFQUFFLEVBUkg7SUFTTkMsT0FBTyxFQUFFLEVBVEg7SUFVTkMsT0FBTyxFQUFFLEVBVkg7SUFXTkMsT0FBTyxFQUFFLEVBWEg7SUFZTkMsSUFBSSxFQUFFLEVBWkE7SUFhTkMsTUFBTSxFQUFFLEVBYkY7SUFjTkMsU0FBUyxFQUFFO0VBZEw7QUFGSSxDQUFkO0FBbUJBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJsQixLQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvZG93bmxvYWRzL2NvZGVzLmpzPzhlYzAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBjb2RlcyA9IHtcbiAgR0VORVJBTDogLTEsXG4gIEVSUk9SUzoge1xuICAgIElOVEVSTkFMX0VSUk9SOiAxLFxuICAgIEJST0tFTjogMTEsXG4gICAgRklOSVNIRUQ6IDEyLFxuICAgIFVORklOSVNIRUQ6IDEzLFxuICAgIFNUT1BQRUQ6IDE0LFxuICAgIENSRUFURUQ6IDE1LFxuICAgIE1JU1NJTkc6IDE2LFxuICAgIFJFU1VNRUQ6IDE3LFxuICAgIFNUQVJURUQ6IDE4LFxuICAgIExPQURJTkc6IDE5LFxuICAgIFJFTU9WRUQ6IDIwLFxuICAgIElORk86IDIxLFxuICAgIEVYSVNUUzogMjIsXG4gICAgTk9UX0ZPVU5EOiAxMDAsXG4gIH1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IGNvZGVzO1xuXG4iXSwibmFtZXMiOlsiY29kZXMiLCJHRU5FUkFMIiwiRVJST1JTIiwiSU5URVJOQUxfRVJST1IiLCJCUk9LRU4iLCJGSU5JU0hFRCIsIlVORklOSVNIRUQiLCJTVE9QUEVEIiwiQ1JFQVRFRCIsIk1JU1NJTkciLCJSRVNVTUVEIiwiU1RBUlRFRCIsIkxPQURJTkciLCJSRU1PVkVEIiwiSU5GTyIsIkVYSVNUUyIsIk5PVF9GT1VORCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6999\n")},6006:(module,__unused_webpack_exports,__webpack_require__)=>{eval('var downloadFileUtil = __webpack_require__(2777);\n\nvar fs = __webpack_require__(7147);\n\nvar _require = __webpack_require__(7194),\n    net = _require.net;\n\nvar EventEmitter = (__webpack_require__(2361).EventEmitter);\n/**\n *\n * @param {string} url - url\n * @param {object} options - options\n * @returns {Chunk} - chunk object\n * @constructor\n */\n\n\nfunction Chunk(url, options) {\n  var self = this;\n  this.url = url;\n  this.options = options;\n  this.endPosition = options.endPosition;\n  this.startPosition = options.startPosition;\n  this.bytesRangeNotAvailable = options.bytesRangeNotAvailable;\n  this.reset();\n  this.events = new EventEmitter();\n  this._promise = new Promise(function (resolve, reject) {\n    self.resolve = resolve;\n    self.reject = reject;\n  });\n  return this;\n}\n\nChunk.prototype._retry = function (errorType, callback) {\n  var self = this;\n  var maxDownloadRetry;\n  this._errors = this._errors || {};\n  this._errors[errorType] = this._errors[errorType] || 0;\n  this._errors[errorType]++;\n\n  if (errorType === downloadFileUtil.errors.INTERNET) {\n    maxDownloadRetry = this.options.maxDownloadInternetRetry;\n  } else {\n    maxDownloadRetry = this.options.maxDownloadRetry;\n  }\n\n  if (this._errors[errorType] <= maxDownloadRetry) {\n    if (self._timer) {\n      clearTimeout(self._timer);\n    }\n\n    callback(true);\n    self._timer = setTimeout(function () {\n      // console.log("retrying chunk", errorType, self.destFile);\n      self.reset(function () {\n        self.start();\n      });\n    }, self.options.retryTimeout);\n  } else {\n    // console.log("not retrying chunk", errorType, self._errors[errorType]);\n    callback(false);\n  }\n};\n\nChunk.prototype.createFileStream = function (callback) {\n  var self = this;\n\n  if (!this.fileStream) {\n    var destFile = this.options.destFile;\n\n    if (this.options.multiChunks) {\n      destFile = destFile + "." + this.startPosition + "." + this.endPosition;\n    }\n\n    downloadFileUtil.checkForLocalFile(destFile, function (resumeFile, fileSize) {\n      self.destFile = destFile;\n\n      if (resumeFile) {\n        if (fileSize <= self.endPosition - self.startPosition) {\n          self.resumeFile = resumeFile;\n          self.available = fileSize;\n          self.offsetStartPosition = fileSize;\n        }\n      }\n\n      self.fileStream = fs.createWriteStream(destFile, {\n        flags: self.resumeFile ? "a" : "w"\n      });\n      self.fileStream.on("error", callback);\n      self.fileStream.on("open", function () {\n        // for unknown reason from time to time the file descriptor of self.fileStream is null\n        // when event \'open\' is fired then the file descriptor is not a null anymore\n        // this should fix a problem with EBADF error\n        // a bug in fs ?\n        self.fileStream = this;\n        this.removeListener("error", callback);\n        this.on("error", function (error) {\n          if (error.code === "ENOSPC") {\n            // no space left on disk, do not retry downloading\n            self.resolve(downloadFileUtil.errors.NO_SPACE_LEFT_ERROR, error);\n          } else {\n            self._retry(downloadFileUtil.errors.FILE_WRITING_ERROR, function (retried) {\n              if (!retried) {\n                self.resolve(downloadFileUtil.errors.FILE_WRITING_ERROR, error);\n              }\n            });\n          }\n        });\n        this.on("finish", function () {\n          if (!self.isDownloaded()) {\n            self._retry(downloadFileUtil.errors.CHUNK_SIZE_ERROR, function (retried) {\n              if (!retried) {\n                self.closeStreamAndRequest(function () {\n                  self.resolve(downloadFileUtil.errors.CHUNK_SIZE_ERROR);\n                });\n              }\n            });\n          } else {\n            self.closeStreamAndRequest(self.resolve);\n          }\n        });\n        callback();\n      });\n    });\n  } else {\n    callback();\n  }\n};\n\nChunk.prototype.isDownloaded = function () {\n  return this.endPosition - this.startPosition - this.offsetStartPosition + 1 === this.downloaded;\n};\n\nChunk.prototype.start = function () {\n  var self = this;\n  var req_options = {\n    timeout: this.options.timeout,\n    url: this.url\n  };\n  self.createFileStream(function (err) {\n    if (err) {\n      self._retry(downloadFileUtil.errors.FILE_CREATING_ERROR, function (retried) {\n        if (!retried) {\n          self.closeStreamAndRequest(function () {\n            self.resolve(downloadFileUtil.errors.FILE_CREATING_ERROR, err);\n          });\n        }\n      });\n\n      return;\n    }\n\n    req_options.headers = req_options.headers || {};\n\n    if (!self.bytesRangeNotAvailable) {\n      req_options.headers.range = "bytes=" + (self.startPosition + self.offsetStartPosition) + "-" + self.endPosition;\n    }\n\n    self._req = net.request(req_options);\n    self._req.chunkedEncoding = self.options.useChunkedEncoding;\n\n    self._req.on(\'response\', function (response) {\n      response.on("error", function (error) {\n        if (error.code === "ESOCKETTIMEDOUT" || error.code === "ENOTFOUND" || error.code === "ETIMEDOUT") {\n          self._retry(downloadFileUtil.errors.INTERNET, function (retried) {\n            if (!retried) {\n              self.closeStreamAndRequest(function () {\n                self.resolve(downloadFileUtil.errors.TIMEOUT, error);\n              });\n            }\n          });\n        } else {\n          self.closeStreamAndRequest(function () {\n            self.resolve(downloadFileUtil.errors.CHUNK_ERROR);\n          });\n        }\n      });\n      response.on("data", function (data) {\n        if (response.statusCode === 200 || response.statusCode === 206) {\n          self.available += data.length;\n          self.downloaded += data.length;\n          self.events.emit("download", data.length);\n        }\n      });\n      response.pipe(self.fileStream);\n    });\n\n    self._req.end();\n  });\n  return this._promise;\n};\n\nChunk.prototype.closeStreamAndRequest = function (callback) {\n  var self = this;\n  var timer;\n  var timerTimoutMS = 300;\n\n  function onClose() {\n    clearTimeout(timer);\n\n    if (self.fileStream) {\n      self.fileStream.destroy();\n      delete self.fileStream;\n    }\n\n    delete self._req;\n    callback();\n  }\n\n  if (this._req) {\n    this._req.removeAllListeners();\n  }\n\n  if (this.fileStream) {\n    this.fileStream.removeAllListeners();\n  }\n\n  if (this._req) {\n    this._req.abort();\n\n    if (this._req.timeoutTimer) {\n      clearTimeout(this._req.timeoutTimer);\n      this._req.timeoutTimer = null;\n    }\n  }\n\n  if (this.fileStream) {\n    timer = setTimeout(function () {\n      onClose();\n    }, timerTimoutMS);\n    this.fileStream.end();\n    this.fileStream.close(onClose);\n  } else {\n    delete this._req;\n    callback();\n  }\n};\n\nChunk.prototype.reset = function (callback) {\n  var self = this;\n\n  callback = callback || function () {};\n\n  self.closeStreamAndRequest(function () {\n    self.offsetStartPosition = 0;\n    self.available = 0;\n    self.downloaded = 0;\n    self.writeProgress = 0;\n    self.resumeFile = false;\n    callback();\n  });\n};\n\nChunk.prototype.stop = function () {\n  var self = this;\n  this.reset(function () {\n    self.resolve(downloadFileUtil.errors.ABORTED);\n  });\n};\n\nmodule.exports = Chunk;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6006\n')},5979:(module,__unused_webpack_exports,__webpack_require__)=>{eval('/*eslint no-console: ["error", { allow: ["warn", "error", "info"] }] */\nvar fs = __webpack_require__(7147);\n\nvar _require = __webpack_require__(7194),\n    net = _require.net;\n\nvar EventEmitter = (__webpack_require__(2361).EventEmitter);\n\nvar util = __webpack_require__(3837);\n\nvar downloadFileUtil = __webpack_require__(2777);\n/**\n *\n * @param {string} url - remote url\n * @param {string} destFile - local url\n * @param {object} options - options\n * @constructor\n */\n\n\nfunction DownloadFileNoHead(url, destFile, options) {\n  this._url = url;\n  this._destFile = destFile;\n  this._options = options;\n\n  this._resetValues();\n}\n\nutil.inherits(DownloadFileNoHead, EventEmitter);\n\nDownloadFileNoHead.prototype._reset = function (callback) {\n  var self = this;\n\n  callback = callback || function () {};\n\n  self._closeStreamAndRequest(function () {\n    self._resetValues();\n\n    callback();\n  });\n};\n\nDownloadFileNoHead.prototype._resetValues = function () {\n  this.available = 0;\n  this.downloaded = 0;\n  this.file_size = 0;\n  this.writeProgress = 0;\n};\n\nDownloadFileNoHead.prototype._createFileStream = function (callback) {\n  var self = this;\n\n  if (!this.fileStream) {\n    var destFile = this._destFile;\n    self.fileStream = fs.createWriteStream(destFile, {\n      flags: "w"\n    });\n    self.fileStream.on("error", callback);\n    self.fileStream.on("open", function () {\n      // for unknown reason from time to time the file descriptor of self.fileStream is null\n      // when event \'open\' is fired then the file descriptor is not a null anymore\n      // this should fix a problem with EBADF error\n      // a bug in fs ?\n      self.fileStream = this;\n      this.removeListener("error", callback);\n      this.on("error", function (error) {\n        if (error.code === "ENOSPC") {\n          // no space left on disk, do not retry downloading\n          self.emit("error", {\n            message: downloadFileUtil.errors.NO_SPACE_LEFT_ERROR,\n            data: error\n          });\n        } else {\n          self._retry(downloadFileUtil.errors.FILE_WRITING_ERROR, function (retried) {\n            if (!retried) {\n              self.emit("error", {\n                message: downloadFileUtil.errors.FILE_WRITING_ERROR,\n                data: error\n              });\n            }\n          });\n        }\n      });\n      this.on("finish", function () {\n        if (!self.isDownloaded()) {\n          self._retry(downloadFileUtil.errors.CHUNK_SIZE_ERROR, function (retried) {\n            if (!retried) {\n              self._closeStreamAndRequest(function () {\n                self.emit("error", {\n                  message: downloadFileUtil.errors.CHUNK_SIZE_ERROR\n                });\n              });\n            }\n          });\n        } else {\n          self.writeProgress = 1;\n          self.emit("end");\n        }\n      });\n      callback();\n    });\n  } else {\n    callback();\n  }\n};\n\nDownloadFileNoHead.prototype.isDownloaded = function () {\n  return this.downloaded === this.file_size;\n};\n\nDownloadFileNoHead.prototype._retry = function (errorType, callback) {\n  var self = this;\n  var maxDownloadRetry;\n  this._errors = this._errors || {};\n  this._errors[errorType] = this._errors[errorType] || 0;\n  this._errors[errorType]++;\n\n  if (errorType === downloadFileUtil.errors.INTERNET) {\n    maxDownloadRetry = this._options.maxDownloadChunkInternetRetry;\n  } else {\n    maxDownloadRetry = this._options.maxDownloadRetry;\n  }\n\n  if (this._errors[errorType] <= maxDownloadRetry) {\n    if (self._timer) {\n      clearTimeout(self._timer);\n    }\n\n    callback(true);\n    self._timer = setTimeout(function () {\n      // console.log("retrying chunk", errorType, self.destFile);\n      self._reset(function () {\n        self.start();\n      });\n    }, self._options.retryTimeout);\n  } else {\n    // console.log("not retrying chunk", errorType, self._errors[errorType]);\n    callback(false);\n  }\n};\n\nDownloadFileNoHead.prototype._closeStreamAndRequest = function (callback) {\n  var self = this;\n  var timer;\n  var timerTimoutMS = 300;\n\n  function onClose() {\n    clearTimeout(timer);\n\n    if (self.fileStream) {\n      self.fileStream.destroy();\n      delete self.fileStream;\n    }\n\n    delete self._req;\n    callback();\n  }\n\n  if (this._req) {\n    this._req.removeAllListeners();\n  }\n\n  if (this.fileStream) {\n    this.fileStream.removeAllListeners();\n  }\n\n  if (this._req) {\n    this._req.abort();\n\n    if (this._req.timeoutTimer) {\n      clearTimeout(this._req.timeoutTimer);\n      this._req.timeoutTimer = null;\n    }\n  }\n\n  if (this.fileStream) {\n    timer = setTimeout(function () {\n      onClose();\n    }, timerTimoutMS);\n    this.fileStream.end();\n    this.fileStream.close(onClose);\n  } else {\n    delete this._req;\n    callback();\n  }\n};\n/**\n * starts download\n * @returns {void}\n */\n\n\nDownloadFileNoHead.prototype.start = function () {\n  var self = this;\n  var req_options = {\n    timeout: this._options.timeout,\n    url: this._url\n  };\n\n  if (this._options.noCache) {\n    req_options.headers = {\n      \'Cache-Control\': \'no-cache\'\n    };\n  }\n\n  self._createFileStream(function (err) {\n    if (err) {\n      self._retry(downloadFileUtil.errors.FILE_CREATING_ERROR, function (retried) {\n        if (!retried) {\n          self._closeStreamAndRequest(function () {\n            self.emit("error", {\n              message: downloadFileUtil.errors.FILE_CREATING_ERROR\n            });\n          });\n        }\n      });\n\n      return;\n    }\n\n    req_options.headers = req_options.headers || {};\n    self._req = net.request(req_options);\n\n    self._req.on(\'response\', function (response) {\n      response.on("error", function (error) {\n        console.error(\'ERROR (\' + self._url + \') :\' + error);\n\n        if (error.code === "ESOCKETTIMEDOUT" || error.code === "ENOTFOUND" || error.code === "ETIMEDOUT") {\n          self._retry(downloadFileUtil.errors.INTERNET, function (retried) {\n            if (!retried) {\n              self._closeStreamAndRequest(function () {\n                self.emit("error", {\n                  message: downloadFileUtil.errors.TIMEOUT,\n                  data: error\n                });\n              });\n            }\n          });\n        } else {\n          self._retry(downloadFileUtil.errors.INTERNET, function (retried) {\n            if (!retried) {\n              self._closeStreamAndRequest(function () {\n                self.emit("error", {\n                  message: downloadFileUtil.errors.CHUNK_ERROR,\n                  data: error\n                });\n              });\n            }\n          });\n        }\n      });\n\n      if (response && response.statusCode >= 400) {\n        self._retry(downloadFileUtil.errors.INTERNET, function (retried) {\n          if (!retried) {\n            self._closeStreamAndRequest(function () {\n              console.error("HTTP DOWNLOAD ERROR url: ".concat(self._url, ", statusCode: ").concat(response.statusCode));\n              self.emit("error", {\n                message: downloadFileUtil.errors.CHUNK_ERROR,\n                data: response\n              });\n            });\n          }\n        });\n      } else {\n        self._headers = response.headers;\n        self.file_size = Number(self._headers["content-length"]);\n        response.on("data", function (data) {\n          if (response.statusCode === 200 || response.statusCode === 206) {\n            self.available += data.length;\n            self.downloaded += data.length;\n          }\n        });\n        response.pipe(self.fileStream);\n      }\n    });\n\n    self._req.end();\n  });\n\n  return this._promise;\n};\n/**\n * stops download\n * @returns {void}\n */\n\n\nDownloadFileNoHead.prototype.stop = function () {\n  var self = this;\n\n  this._reset(function () {\n    self.emit("error", {\n      message: downloadFileUtil.errors.ABORTED\n    });\n  });\n};\n\nmodule.exports = DownloadFileNoHead;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5979\n')},2777:(module,__unused_webpack_exports,__webpack_require__)=>{eval('var fs = __webpack_require__(7147);\n\nvar appSettings = __webpack_require__(9277);\n/**\n *\n * @type {{start: number, end: null}}\n */\n\n\nvar defaultOptions = Object.assign({\n  start: 0,\n  end: null\n}, appSettings.getSettings().defaultManifestRequestOptions);\n/**\n *\n * @type {{CHUNK_ERROR: string, CHUNK_SIZE_ERROR: string, FILE_CREATING_ERROR: string, FILE_WRITING_ERROR: string,\n *     ABORTED: string}}\n */\n\nvar errors = {\n  ABORTED: "ABORTED",\n  CHUNK_ERROR: "CHUNK_ERROR",\n  CHUNK_SIZE_ERROR: "CHUNK_SIZE_ERROR",\n  FILE_CREATING_ERROR: "FILE_CREATING_ERROR",\n  FILE_WRITING_ERROR: "FILE_WRITING_ERROR",\n  NO_SPACE_LEFT_ERROR: "NO_SPACE_LEFT_ERROR",\n  INTERNET: "INTERNET",\n  TIMEOUT: "TIMEOUT"\n};\n/**\n * @param {string} fileUrl - file url\n * @param {function} callback - callback to be invoked when check for file has been done\n * @returns {void}\n */\n\nfunction checkForLocalFile(fileUrl, callback) {\n  fs.stat(fileUrl, function (error, stat) {\n    if (error) {\n      callback(false);\n    } else {\n      callback(true, stat.size);\n    }\n  });\n}\n\nmodule.exports = {\n  checkForLocalFile: checkForLocalFile,\n  defaultOptions: defaultOptions,\n  errors: errors\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc3Ny5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxFQUFFLEdBQUdDLG1CQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxJQUFNQyxXQUFXLEdBQUdELG1CQUFPLENBQUMsSUFBRCxDQUEzQjtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxJQUFNRSxjQUFjLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUNyQjtFQUNFQyxLQUFLLEVBQUUsQ0FEVDtFQUVFQyxHQUFHLEVBQUU7QUFGUCxDQURxQixFQUtyQkwsV0FBVyxDQUFDTSxXQUFaLEdBQTBCQyw2QkFMTCxDQUF2QjtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBTUMsTUFBTSxHQUFHO0VBQ2JDLE9BQU8sRUFBRSxTQURJO0VBRWJDLFdBQVcsRUFBRSxhQUZBO0VBR2JDLGdCQUFnQixFQUFFLGtCQUhMO0VBSWJDLG1CQUFtQixFQUFFLHFCQUpSO0VBS2JDLGtCQUFrQixFQUFFLG9CQUxQO0VBTWJDLG1CQUFtQixFQUFFLHFCQU5SO0VBT2JDLFFBQVEsRUFBRSxVQVBHO0VBUWJDLE9BQU8sRUFBRTtBQVJJLENBQWY7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFNBQVNDLGlCQUFULENBQTRCQyxPQUE1QixFQUFxQ0MsUUFBckMsRUFBK0M7RUFDN0NyQixFQUFFLENBQUNzQixJQUFILENBQVFGLE9BQVIsRUFBaUIsVUFBVUcsS0FBVixFQUFpQkQsSUFBakIsRUFBdUI7SUFDdEMsSUFBSUMsS0FBSixFQUFXO01BQ1RGLFFBQVEsQ0FBQyxLQUFELENBQVI7SUFDRCxDQUZELE1BRU87TUFDTEEsUUFBUSxDQUFDLElBQUQsRUFBT0MsSUFBSSxDQUFDRSxJQUFaLENBQVI7SUFDRDtFQUNGLENBTkQ7QUFPRDs7QUFFREMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0VBQ2ZQLGlCQUFpQixFQUFFQSxpQkFESjtFQUVmaEIsY0FBYyxFQUFFQSxjQUZEO0VBR2ZPLE1BQU0sRUFBRUE7QUFITyxDQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvZG93bmxvYWRzL2Rvd25sb2FkLWZpbGUtdXRpbC5qcz8xYjhlIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuY29uc3QgYXBwU2V0dGluZ3MgPSByZXF1aXJlKCcuLi9hcHAtc2V0dGluZ3MnKTtcblxuLyoqXG4gKlxuICogQHR5cGUge3tzdGFydDogbnVtYmVyLCBlbmQ6IG51bGx9fVxuICovXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oXG4gIHtcbiAgICBzdGFydDogMCxcbiAgICBlbmQ6IG51bGxcbiAgfSxcbiAgYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5kZWZhdWx0TWFuaWZlc3RSZXF1ZXN0T3B0aW9uc1xuKTtcblxuLyoqXG4gKlxuICogQHR5cGUge3tDSFVOS19FUlJPUjogc3RyaW5nLCBDSFVOS19TSVpFX0VSUk9SOiBzdHJpbmcsIEZJTEVfQ1JFQVRJTkdfRVJST1I6IHN0cmluZywgRklMRV9XUklUSU5HX0VSUk9SOiBzdHJpbmcsXG4gKiAgICAgQUJPUlRFRDogc3RyaW5nfX1cbiAqL1xuY29uc3QgZXJyb3JzID0ge1xuICBBQk9SVEVEOiBcIkFCT1JURURcIixcbiAgQ0hVTktfRVJST1I6IFwiQ0hVTktfRVJST1JcIixcbiAgQ0hVTktfU0laRV9FUlJPUjogXCJDSFVOS19TSVpFX0VSUk9SXCIsXG4gIEZJTEVfQ1JFQVRJTkdfRVJST1I6IFwiRklMRV9DUkVBVElOR19FUlJPUlwiLFxuICBGSUxFX1dSSVRJTkdfRVJST1I6IFwiRklMRV9XUklUSU5HX0VSUk9SXCIsXG4gIE5PX1NQQUNFX0xFRlRfRVJST1I6IFwiTk9fU1BBQ0VfTEVGVF9FUlJPUlwiLFxuICBJTlRFUk5FVDogXCJJTlRFUk5FVFwiLFxuICBUSU1FT1VUOiBcIlRJTUVPVVRcIixcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGZpbGVVcmwgLSBmaWxlIHVybFxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBjYWxsYmFjayB0byBiZSBpbnZva2VkIHdoZW4gY2hlY2sgZm9yIGZpbGUgaGFzIGJlZW4gZG9uZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIGNoZWNrRm9yTG9jYWxGaWxlIChmaWxlVXJsLCBjYWxsYmFjaykge1xuICBmcy5zdGF0KGZpbGVVcmwsIGZ1bmN0aW9uIChlcnJvciwgc3RhdCkge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgY2FsbGJhY2soZmFsc2UpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUsIHN0YXQuc2l6ZSk7XG4gICAgfVxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNoZWNrRm9yTG9jYWxGaWxlOiBjaGVja0ZvckxvY2FsRmlsZSxcbiAgZGVmYXVsdE9wdGlvbnM6IGRlZmF1bHRPcHRpb25zLFxuICBlcnJvcnM6IGVycm9yc1xufTtcbiJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJhcHBTZXR0aW5ncyIsImRlZmF1bHRPcHRpb25zIiwiT2JqZWN0IiwiYXNzaWduIiwic3RhcnQiLCJlbmQiLCJnZXRTZXR0aW5ncyIsImRlZmF1bHRNYW5pZmVzdFJlcXVlc3RPcHRpb25zIiwiZXJyb3JzIiwiQUJPUlRFRCIsIkNIVU5LX0VSUk9SIiwiQ0hVTktfU0laRV9FUlJPUiIsIkZJTEVfQ1JFQVRJTkdfRVJST1IiLCJGSUxFX1dSSVRJTkdfRVJST1IiLCJOT19TUEFDRV9MRUZUX0VSUk9SIiwiSU5URVJORVQiLCJUSU1FT1VUIiwiY2hlY2tGb3JMb2NhbEZpbGUiLCJmaWxlVXJsIiwiY2FsbGJhY2siLCJzdGF0IiwiZXJyb3IiLCJzaXplIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2777\n')},4959:(module,__unused_webpack_exports,__webpack_require__)=>{eval('var fs = __webpack_require__(7147);\n\nvar _require = __webpack_require__(7194),\n    net = _require.net;\n\nvar EventEmitter = (__webpack_require__(2361).EventEmitter);\n\nvar util = __webpack_require__(3837);\n\nvar downloadFileUtil = __webpack_require__(2777);\n\nvar DownloadFileChunk = __webpack_require__(6006);\n/**\n *\n * @param {string} url - remote url\n * @param {string} destFile - local url\n * @param {object} options - options\n * @constructor\n */\n\n\nfunction DownloadFile(url, destFile, options) {\n  this._url = url;\n  this._destFile = destFile;\n  this._options = options;\n\n  this._resetValues();\n}\n\nutil.inherits(DownloadFile, EventEmitter);\n/**\n *\n * @param {number} size - size of file\n * @private\n * @returns {*} - number of chunks\n */\n\nDownloadFile.prototype._calculateChunksNumber = function (size) {\n  var MB = 1024 * 1024;\n\n  for (var i = 0, j = this._options.threads.length; i < j; i++) {\n    if (size < this._options.threads[i].size * MB) {\n      return this._options.threads[i].number;\n    }\n  }\n\n  return 1;\n};\n/**\n * @private\n * @returns {void}\n */\n\n\nDownloadFile.prototype._concatChunks = function () {\n  var self = this;\n  var intervalTime = 500;\n  self._chunks[0].writeProgress = 1;\n\n  function countWriteProgress() {\n    self.writeProgress = self._chunks.reduce(function (a, b) {\n      return a + b.writeProgress;\n    }, 0) / self._chunksNumber;\n    self.emit("data");\n  }\n\n  function getWriteStream() {\n    return fs.createWriteStream(self._chunks[0].destFile, {\n      flags: "a"\n    });\n  }\n\n  function onInterval(writeStream, currentStream) {\n    self._chunks[currentStream].writeProgress = writeStream.bytesWritten / self._chunks[currentStream].available;\n\n    if (self._chunks[currentStream].writeProgress > 1) {\n      self._chunks[currentStream].writeProgress = 1;\n    }\n\n    countWriteProgress();\n  }\n\n  function pipeStream(writeStream, nextStreamNumber) {\n    var chunk = self._chunks[nextStreamNumber];\n\n    if (chunk) {\n      var interval = setInterval(function () {\n        onInterval(writeStream, nextStreamNumber);\n      }, intervalTime);\n      var readStream = fs.createReadStream(chunk.destFile);\n      readStream.pipe(writeStream);\n      writeStream.on("close", function () {\n        clearInterval(interval);\n        onInterval(writeStream, nextStreamNumber);\n        writeStream.removeAllListeners();\n        readStream.unpipe(writeStream);\n        readStream.destroy();\n        fs.unlink(chunk.destFile, function (err) {\n          if (err) {\n            self.emit("error", err);\n          } else {\n            writeStream.destroy();\n            pipeStream(getWriteStream(), nextStreamNumber + 1);\n          }\n        });\n      });\n    } else {\n      countWriteProgress();\n      writeStream.removeAllListeners();\n      writeStream.destroy();\n      fs.rename(self._chunks[0].destFile, self._destFile, function (err) {\n        if (err) {\n          self.emit("error", err);\n        } else {\n          self.emit("end");\n        }\n      });\n    }\n  }\n\n  if (self._chunks.length > 1) {\n    pipeStream(getWriteStream(), 1);\n  } else {\n    countWriteProgress();\n    self.emit("end");\n  }\n};\n/**\n *\n * @param {number} chunkNumber - chunk number\n * @private\n * @returns {void}\n */\n\n\nDownloadFile.prototype._initChunk = function (chunkNumber) {\n  var options = {};\n  options.bytesRangeNotAvailable = this._bytesRangeNotAvailable;\n  options.destFile = this._destFile;\n  options.maxDownloadRetry = this._options.maxDownloadChunkRetry;\n  options.maxDownloadInternetRetry = this._options.maxDownloadChunkInternetRetry;\n  options.timeout = this._options.timeout;\n  options.retryTimeout = this._options.retryTimeout;\n  options.useChunkedEncoding = this._options.useChunkedEncoding;\n  var size = this.file_size;\n\n  if (this._chunksNumber > 1) {\n    var chunkSize = parseInt(size / this._chunksNumber, 10);\n    options.startPosition = chunkNumber * chunkSize;\n    options.multiChunks = true;\n\n    if (chunkNumber === this._chunksNumber - 1) {\n      options.endPosition = size - 1;\n    } else {\n      options.endPosition = options.startPosition + chunkSize - 1;\n    }\n  } else {\n    options.startPosition = 0;\n    options.endPosition = size - 1;\n  }\n\n  var chunk = new DownloadFileChunk(this._url, options);\n  chunk.events.on("download", this._onChunkDownload.bind(this));\n\n  this._chunks.push(chunk);\n};\n/**\n *\n * @param {object} err - error\n * @param {boolean} aborted - if failure has been called because download was aborted\n * @private\n * @returns {void}\n */\n\n\nDownloadFile.prototype._onDownloadFailure = function (err, aborted) {\n  this._promises = null;\n\n  if (!aborted) {\n    this._errors = this._errors || 0;\n    this._errors++;\n\n    if (this._errors <= this._options.maxDownloadRetry) {\n      this._retryDownload();\n    } else {\n      this.emit("error", err);\n    }\n  } else {\n    var noSpaceLeft = false;\n\n    for (var i = 0, j = err.length; i < j; i++) {\n      if (err[i]) {\n        if (err[i] === downloadFileUtil.errors.NO_SPACE_LEFT_ERROR) {\n          noSpaceLeft = true;\n          break;\n        }\n      }\n    }\n\n    if (noSpaceLeft) {\n      err = {\n        message: downloadFileUtil.errors.NO_SPACE_LEFT_ERROR\n      };\n    }\n\n    this.emit("error", err);\n  }\n};\n/**\n *\n * @param {object} err - error\n * @private\n * @returns {void}\n */\n\n\nDownloadFile.prototype._onDownloadSuccess = function (err) {\n  var aborted, error;\n  this._promises = null;\n  err = err || [];\n\n  for (var i = 0, j = err.length; i < j; i++) {\n    if (err[i]) {\n      if (err[i] === downloadFileUtil.errors.ABORTED || err[i] === downloadFileUtil.errors.NO_SPACE_LEFT_ERROR) {\n        aborted = true;\n      }\n\n      error = true;\n    }\n  }\n\n  if (!error) {\n    this._concatChunks();\n  } else {\n    this._onDownloadFailure(err, aborted);\n  }\n};\n/**\n *\n * @param {number} downloaded - downloaded bytes\n * @private\n * @returns {void}\n */\n\n\nDownloadFile.prototype._onChunkDownload = function (downloaded) {\n  this.downloaded += downloaded;\n  this.available = this._chunks.reduce(function (a, b) {\n    return a + b.available;\n  }, 0);\n  this.emit("data");\n};\n\nDownloadFile.prototype._retryDownload = function () {\n  // console.log("retrying download", this._destFile);\n  this._resetValues();\n\n  this.start();\n};\n\nDownloadFile.prototype._resetValues = function () {\n  this.available = 0;\n  this.downloaded = 0;\n  this.progress = 0;\n  this.file_size = 0;\n  this.writeProgress = 0;\n  this._chunks = [];\n};\n/**\n * @private\n * @returns {void}\n */\n\n\nDownloadFile.prototype._startChunks = function () {\n  var promises = [];\n\n  for (var i = 0, j = this._chunks.length; i < j; i++) {\n    promises.push(this._chunks[i].start());\n  }\n\n  this._promises = promises;\n  Promise.all(this._promises).then(this._onDownloadSuccess.bind(this), this._onDownloadFailure.bind(this));\n};\n\nDownloadFile.prototype._startAllChunks = function () {\n  for (var i = 0, j = this._chunksNumber; i < j; i++) {\n    this._initChunk(i);\n  }\n\n  this._startChunks();\n};\n/**\n * starts download\n * @returns {void}\n */\n\n\nDownloadFile.prototype.start = function () {\n  var self = this;\n  var req_options = Object.assign({\n    url: this._url,\n    method: \'HEAD\'\n  }, downloadFileUtil.defaultOptions);\n\n  if (this._options.noCache) {\n    req_options.headers = req_options.headers || {};\n    req_options.headers[\'Cache-Control\'] = \'no-cache\';\n  }\n\n  var req = net.request(req_options);\n  req.chunkedEncoding = this._options.useChunkedEncoding;\n  req.on(\'response\', function (response) {\n    if (response && response.statusCode >= 400) {\n      var error = response.statusMessage;\n\n      if (error) {\n        self._onDownloadFailure(error, false);\n\n        return;\n      }\n    }\n\n    response.on("error", function (error) {\n      if (error) {\n        self._onDownloadFailure(error, false);\n      }\n    });\n    self._headers = response.headers;\n    self.file_size = Number(self._headers["content-length"]);\n    self._chunksNumber = self._calculateChunksNumber(self.file_size);\n    downloadFileUtil.checkForLocalFile(self._destFile, function (exists, fileSize) {\n      if (exists) {\n        if (fileSize === self.file_size) {\n          self.emit("end");\n        } else if (fileSize > self.file_size) {\n          fs.unlink(self._destFile, function (err) {\n            if (err) {\n              throw err;\n            }\n          });\n\n          self._startAllChunks();\n        } else if (fileSize < self.file_size && self._chunksNumber > 1) {\n          fs.unlink(self._destFile, function (err) {\n            if (err) {\n              throw err;\n            }\n          });\n\n          self._startAllChunks();\n        } else {\n          self._startAllChunks();\n        }\n      } else {\n        self._startAllChunks();\n      }\n    });\n  });\n  req.end();\n};\n/**\n * stops download\n * @returns {void}\n */\n\n\nDownloadFile.prototype.stop = function () {\n  var promises = [];\n\n  for (var i = 0, j = this._chunks.length; i < j; i++) {\n    this._chunks[i].stop();\n\n    if (this._chunks[i]._promise) {\n      promises.push(this._chunks[i]._promise);\n    }\n  }\n\n  function onStopped() {\n    this.emit("end", \'\');\n  }\n\n  if (!this._promises) {\n    Promise.all(promises).then(onStopped.bind(this), onStopped.bind(this));\n  }\n};\n\nmodule.exports = DownloadFile;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4959\n')},8158:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar _ = __webpack_require__(4952);\n\nvar domain = __webpack_require__(3639);\n\nvar DownloadFileNoHead = __webpack_require__(5979);\n\nvar DownloadFile = __webpack_require__(4959);\n\nvar mkdirp = __webpack_require__(9526);\n\nvar appSettings = __webpack_require__(9277);\n\nvar EventEmitter = (__webpack_require__(2361).EventEmitter);\n\nvar STATUSES = __webpack_require__(8255);\n/**\n *\n * @param {object} params - parameters connected with download like id, bandwidth, contentType, remoteUrl, localUrl\n * see util class {@link downloadUtil.getDownloadLinks}\n * @param {object} options - options chosen for whole manifest, like number of chunks, retry,\n * @constructor\n */\n\n\nfunction Download(params, options) {\n  this._defaults = {};\n  this._defaults.threads = appSettings.getSettings().downloadingThreadsRules.threads;\n  this.status = STATUSES.CREATED;\n  Object.assign(this, params);\n  this._options = Object.assign(this._defaults, options);\n  this._options.maxDownloadRetry = appSettings.getSettings().MAX_ERRORS_DOWNLOAD_RETRY;\n  this._options.maxDownloadChunkRetry = appSettings.getSettings().MAX_ERRORS_DOWNLOAD_CHUNK_RETRY;\n  this._options.maxDownloadChunkInternetRetry = appSettings.getSettings().MAX_INTERNET_ERRORS_DOWNLOAD_CHUNK_RETRY;\n  this._options.timeout = appSettings.getSettings().times.DOWNLOAD_TIMEOUT;\n  this._options.retryTimeout = appSettings.getSettings().times.RETRY_TIMEOUT;\n  this._options.useChunkedEncoding = appSettings.getSettings().useChunkedEncoding;\n  this._options.useHeadRequests = appSettings.getSettings().useHeadRequests;\n  this._options.noCache = appSettings.getSettings().noCache;\n  this.stats = {\n    available: 0,\n    downloaded: 0,\n    file_size: 0,\n    writeProgress: 0\n  };\n\n  _.bindAll(this, "_onError", "_onEnd", "_onData", "_updateStats", "_attachEvents", "_removeEvents", "_removeEventsOnStop");\n\n  this.events = new EventEmitter();\n}\n/**\n * @private\n * @returns {void}\n */\n\n\nDownload.prototype._attachEvents = function () {\n  this._dl.on(\'error\', this._onError);\n\n  this._dl.on(\'end\', this._onEnd);\n\n  this._dl.on(\'data\', this._onData);\n};\n/**\n *\n * @param {function} callback - callback to be invoked then local path is created\n * @private\n * @returns {void}\n */\n\n\nDownload.prototype._createLocalPath = function (callback) {\n  var folders = this.localUrl.split("/");\n  folders = folders.slice(0, folders.length - 1);\n  folders = folders.join("/");\n  mkdirp(folders).then(function () {\n    callback();\n  }, function (error) {\n    callback(error);\n  });\n};\n/**\n *\n * @private\n * @returns {void}\n */\n\n\nDownload.prototype._onData = function () {\n  this._updateStats();\n};\n/**\n * @private\n * @returns {void}\n */\n\n\nDownload.prototype._onEnd = function () {\n  this.status = STATUSES.FINISHED;\n\n  this._updateStats();\n\n  this._removeEvents();\n\n  this.events.emit("end", this);\n};\n/**\n *\n * @param {object} data - error data\n * @private\n * @returns {void}\n */\n\n\nDownload.prototype._onError = function (data) {\n  var self = this;\n  this.status = STATUSES.ERROR;\n  data = data || {};\n  var message = data.message || "";\n\n  self._removeEvents();\n\n  self._updateStats(); // notify only if there exists any error listener (from downloads controller)\n  // otherwise EventEmitter throws an error\n\n\n  if (self.events.listeners(\'error\').length) {\n    self.events.emit("error", self, message);\n  }\n};\n\nDownload.prototype._onDomainError = function (data) {\n  var self = this;\n  data = data || {};\n  var message = data.message || "";\n\n  if (self._dl) {\n    if (message === \'net::ERR_NETWORK_CHANGED\' || message === \'net::ERR_SPDY_PROTOCOL_ERROR\' || message === \'net::ERR_HTTP2_PROTOCOL_ERROR\') {\n      // network changed during download, retry download\n      self.stop(function () {\n        self.start();\n      });\n    } else {\n      // stop current download to release file stream and notify error\n      self.stop(function () {\n        self._onError(data);\n      });\n    }\n  } else {\n    self._onError(data);\n  }\n};\n/**\n * @private\n * @returns {void}\n */\n\n\nDownload.prototype._removeEvents = function () {\n  if (typeof this._dl.removeListener === "function") {\n    this._dl.removeListener(\'error\', this._onError);\n\n    this._dl.removeListener(\'end\', this._onEnd);\n\n    this._dl.removeListener(\'data\', this._onData);\n  }\n};\n/**\n * @private\n * @returns {void}\n */\n\n\nDownload.prototype._removeEventsOnStop = function () {\n  if (this._dl && typeof this._dl.removeListener === "function") {\n    this._dl.removeListener(\'error\', this._onError);\n\n    this._dl.removeListener(\'end\', this._onEnd);\n  }\n};\n/**\n * @private\n * @returns {void}\n */\n\n\nDownload.prototype._updateStats = function () {\n  if (this.status === STATUSES.FINISHED) {\n    this.stats.available = this._dl.file_size;\n    this.stats.writeProgress = 1;\n  } else {\n    this.stats.available = this._dl.available;\n    this.stats.writeProgress = this._dl.writeProgress;\n  }\n\n  this.stats.downloaded = this._dl.downloaded;\n  this.stats.file_size = this._dl.file_size;\n};\n/**\n * @returns {void}\n */\n\n\nDownload.prototype.start = function () {\n  var self = this;\n  this.status = STATUSES.STARTED;\n\n  this._createLocalPath(function (err) {\n    if (err) {\n      self._onError(err);\n\n      return;\n    } // NOTE: domain module is marked to be deprecated in the future,\n    //       we will use it until NodeJS will propose alternative or\n    //       rewrite with promises\n\n\n    var d = domain.create();\n    d.on(\'error\', function (err) {\n      var message = \'\';\n\n      if (err) {\n        message = err.code || err.message || "";\n      } // this needs to be disposed otherwise it might complain about unhandled error.\n\n\n      if (typeof d.dispose === "function") {\n        d.dispose();\n      }\n\n      self._onDomainError({\n        message: message\n      });\n    });\n    d.run(function () {\n      self._dl = self.createDownloader(self.remoteUrl, self.localUrl, self._options);\n\n      self._attachEvents();\n\n      self._dl.start();\n    });\n  });\n};\n/**\n * Creates file downloader\n * @param {string} [remoteUrl] - url of fragment\n * @param {string} [localUrl] - local url where to download fragment\n * @param {object} [options] - some options\n * @returns {void}\n */\n\n\nDownload.prototype.createDownloader = function (remoteUrl, localUrl, options) {\n  if (this._options.useHeadRequests) {\n    return new DownloadFile(remoteUrl, localUrl, options);\n  } else {\n    return new DownloadFileNoHead(remoteUrl, localUrl, options);\n  }\n};\n/**\n * @param {function} [resolve] - callback to be invoked when stop was successfully\n * @returns {void}\n */\n\n\nDownload.prototype.stop = function (resolve) {\n  var self = this;\n  this.status = STATUSES.STOPPED;\n\n  this._removeEventsOnStop();\n\n  if (typeof resolve !== "function") {\n    resolve = function resolve() {};\n  }\n\n  if (this._dl) {\n    var d = domain.create();\n    d.on(\'error\', function () {\n      resolve();\n    });\n    d.run(function () {\n      self._dl.on(\'error\', function () {\n        resolve();\n      });\n\n      self._dl.on(\'end\', function () {\n        resolve();\n      });\n\n      self._dl.stop();\n    });\n  } else {\n    resolve();\n  }\n};\n/**\n *\n * @returns {Promise} - promise\n */\n\n\nDownload.prototype.stopPromise = function () {\n  var self = this;\n  return new Promise(function (resolve) {\n    self.stop(function () {\n      resolve();\n    });\n  });\n};\n\nmodule.exports = Download;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8158\n')},1789:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar mkdirp = __webpack_require__(9526);\n\nvar appSettings = __webpack_require__(9277);\n\nvar jsonfile = __webpack_require__(3480);\n\nvar LinkSave = __webpack_require__(8798);\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {string} storageKey - storage key\n * @param {object} items - storage items\n * @constructor\n */\n\n\nfunction FlushItem(manifestId, storageKey, items) {\n  this.manifestId = manifestId;\n  this.storageKey = storageKey;\n  this.items = items;\n}\n/**\n *\n * @param {function} resolve - callback to be invoked when save was successful\n * @param {function} reject - callback to be invoked when save failed\n * @private\n * @returns {void}\n */\n\n\nFlushItem.prototype._saveToDisk = function (resolve, reject) {\n  var self = this;\n  var path = appSettings.getSettings().settingsFolder + this.manifestId + "/";\n  var file = "" + this.storageKey + ".json";\n  var fileUrl = path + file;\n  mkdirp(path).then(function () {\n    var data = convertStorage(self.storageKey, self.items);\n    jsonfile.writeFile(fileUrl, data, function (err) {\n      if (!err) {\n        resolve();\n      } else {\n        reject(err);\n      }\n    });\n  }, function (error) {\n    reject(error);\n  });\n};\n/**\n *\n * @returns {Promise} promise\n */\n\n\nFlushItem.prototype.save = function () {\n  return new Promise(this._saveToDisk.bind(this));\n};\n\nmodule.exports = FlushItem;\n/**\n * Helper function\n * @param {string} storageKey - storage key\n * @param {object} items - storage items\n * @returns {*} data to be stored\n */\n\nvar convertStorage = function convertStorage(storageKey, items) {\n  var itemsA = [];\n  var data; //only for downloading we want to have an array\n\n  if (storageKey === "downloading") {\n    itemsA = [];\n\n    for (var key in items) {\n      itemsA.push(items[key]);\n    }\n\n    items = itemsA;\n  }\n\n  if (items instanceof Array) {\n    data = [];\n\n    for (var i = 0, j = items.length; i < j; i++) {\n      data.push(new LinkSave(items[i]));\n    }\n  } else {\n    data = items;\n  }\n\n  return data;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUE4QztNQUM1Q2QsSUFBSSxDQUFDWSxJQUFMLENBQVUsSUFBSTVCLFFBQUosQ0FBYUksS0FBSyxDQUFDMEIsQ0FBRCxDQUFsQixDQUFWO0lBQ0Q7RUFDRixDQUxELE1BS087SUFDTGQsSUFBSSxHQUFHWixLQUFQO0VBQ0Q7O0VBQ0QsT0FBT1ksSUFBUDtBQUNELENBcEJEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9kb3dubG9hZHMvZmx1c2gtaXRlbS5qcz83MTRhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgbWtkaXJwID0gcmVxdWlyZSgnbWtkaXJwJyk7XG5cbmNvbnN0IGFwcFNldHRpbmdzID0gcmVxdWlyZSgnLi4vYXBwLXNldHRpbmdzJyk7XG5jb25zdCBqc29uZmlsZSA9IHJlcXVpcmUoJ2pzb25maWxlJyk7XG5jb25zdCBMaW5rU2F2ZSA9IHJlcXVpcmUoJy4uL21hbmlmZXN0L2pzb24vbGluay1zYXZlJyk7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYW5pZmVzdElkIC0gbWFuaWZlc3QgaWRlbnRpZmllclxuICogQHBhcmFtIHtzdHJpbmd9IHN0b3JhZ2VLZXkgLSBzdG9yYWdlIGtleVxuICogQHBhcmFtIHtvYmplY3R9IGl0ZW1zIC0gc3RvcmFnZSBpdGVtc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEZsdXNoSXRlbSAobWFuaWZlc3RJZCwgc3RvcmFnZUtleSwgaXRlbXMpIHtcbiAgdGhpcy5tYW5pZmVzdElkID0gbWFuaWZlc3RJZDtcbiAgdGhpcy5zdG9yYWdlS2V5ID0gc3RvcmFnZUtleTtcbiAgdGhpcy5pdGVtcyA9IGl0ZW1zO1xufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSByZXNvbHZlIC0gY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIHNhdmUgd2FzIHN1Y2Nlc3NmdWxcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHJlamVjdCAtIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgd2hlbiBzYXZlIGZhaWxlZFxuICogQHByaXZhdGVcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5GbHVzaEl0ZW0ucHJvdG90eXBlLl9zYXZlVG9EaXNrID0gZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICBjb25zdCBzZWxmID0gdGhpcztcbiAgY29uc3QgcGF0aCA9IGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkuc2V0dGluZ3NGb2xkZXIgKyB0aGlzLm1hbmlmZXN0SWQgKyBcIi9cIjtcbiAgY29uc3QgZmlsZSA9IFwiXCIgKyB0aGlzLnN0b3JhZ2VLZXkgKyBcIi5qc29uXCI7XG4gIGNvbnN0IGZpbGVVcmwgPSBwYXRoICsgZmlsZTtcbiAgbWtkaXJwKHBhdGgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgIGxldCBkYXRhID0gY29udmVydFN0b3JhZ2Uoc2VsZi5zdG9yYWdlS2V5LCBzZWxmLml0ZW1zKTtcbiAgICBqc29uZmlsZS53cml0ZUZpbGUoZmlsZVVybCwgZGF0YSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgIHJlamVjdChlcnJvcik7XG4gIH0pO1xufTtcblxuLyoqXG4gKlxuICogQHJldHVybnMge1Byb21pc2V9IHByb21pc2VcbiAqL1xuRmx1c2hJdGVtLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IFByb21pc2UodGhpcy5fc2F2ZVRvRGlzay5iaW5kKHRoaXMpKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRmx1c2hJdGVtO1xuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHN0b3JhZ2VLZXkgLSBzdG9yYWdlIGtleVxuICogQHBhcmFtIHtvYmplY3R9IGl0ZW1zIC0gc3RvcmFnZSBpdGVtc1xuICogQHJldHVybnMgeyp9IGRhdGEgdG8gYmUgc3RvcmVkXG4gKi9cbmNvbnN0IGNvbnZlcnRTdG9yYWdlID0gZnVuY3Rpb24gY29udmVydFN0b3JhZ2UgKHN0b3JhZ2VLZXksIGl0ZW1zKSB7XG4gIGxldCBpdGVtc0EgPSBbXTtcbiAgbGV0IGRhdGE7XG4gIC8vb25seSBmb3IgZG93bmxvYWRpbmcgd2Ugd2FudCB0byBoYXZlIGFuIGFycmF5XG4gIGlmIChzdG9yYWdlS2V5ID09PSBcImRvd25sb2FkaW5nXCIpIHtcbiAgICBpdGVtc0EgPSBbXTtcbiAgICBmb3IgKGxldCBrZXkgaW4gaXRlbXMpIHtcbiAgICAgIGl0ZW1zQS5wdXNoKGl0ZW1zW2tleV0pO1xuICAgIH1cbiAgICBpdGVtcyA9IGl0ZW1zQTtcbiAgfVxuICBpZiAoaXRlbXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIGRhdGEgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgZGF0YS5wdXNoKG5ldyBMaW5rU2F2ZShpdGVtc1tpXSkpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBkYXRhID0gaXRlbXM7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59O1xuXG4iXSwibmFtZXMiOlsibWtkaXJwIiwicmVxdWlyZSIsImFwcFNldHRpbmdzIiwianNvbmZpbGUiLCJMaW5rU2F2ZSIsIkZsdXNoSXRlbSIsIm1hbmlmZXN0SWQiLCJzdG9yYWdlS2V5IiwiaXRlbXMiLCJwcm90b3R5cGUiLCJfc2F2ZVRvRGlzayIsInJlc29sdmUiLCJyZWplY3QiLCJzZWxmIiwicGF0aCIsImdldFNldHRpbmdzIiwic2V0dGluZ3NGb2xkZXIiLCJmaWxlIiwiZmlsZVVybCIsInRoZW4iLCJkYXRhIiwiY29udmVydFN0b3JhZ2UiLCJ3cml0ZUZpbGUiLCJlcnIiLCJlcnJvciIsInNhdmUiLCJQcm9taXNlIiwiYmluZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJpdGVtc0EiLCJrZXkiLCJwdXNoIiwiQXJyYXkiLCJpIiwiaiIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1789\n')},3812:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar jsonfile = __webpack_require__(3480);\n\nvar path = __webpack_require__(1017);\n\nvar appSettings = __webpack_require__(9277);\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {string} itemName - item name\n * @returns {Promise} promise\n * @constructor\n */\n\n\nfunction ReadItem(manifestId, itemName) {\n  if (!manifestId) {\n    throw new Error("manifestId is missing");\n  }\n\n  this._manifestId = manifestId;\n  this._itemName = itemName;\n  return new Promise(this._read.bind(this));\n}\n/**\n *\n * @param {function} resolve - callback to be invoked on finish\n * @private\n * @returns {void}\n */\n\n\nReadItem.prototype._read = function (resolve) {\n  var fileUrl = path.resolve(appSettings.getSettings().settingsFolder + "/" + this._manifestId + "/" + this._itemName + ".json");\n  jsonfile.readFile(fileUrl, function (err, data) {\n    if (err) {\n      resolve();\n    } else {\n      resolve(data);\n    }\n  });\n};\n\nmodule.exports = ReadItem;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzgxMi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxRQUFRLEdBQUdDLG1CQUFPLENBQUMsSUFBRCxDQUF4Qjs7QUFDQSxJQUFNQyxJQUFJLEdBQUdELG1CQUFPLENBQUMsSUFBRCxDQUFwQjs7QUFFQSxJQUFNRSxXQUFXLEdBQUdGLG1CQUFPLENBQUMsSUFBRCxDQUEzQjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxTQUFTRyxRQUFULENBQW1CQyxVQUFuQixFQUErQkMsUUFBL0IsRUFBeUM7RUFDdkMsSUFBSSxDQUFDRCxVQUFMLEVBQWlCO0lBQ2YsTUFBTSxJQUFJRSxLQUFKLENBQVUsdUJBQVYsQ0FBTjtFQUNEOztFQUNELEtBQUtDLFdBQUwsR0FBbUJILFVBQW5CO0VBQ0EsS0FBS0ksU0FBTCxHQUFpQkgsUUFBakI7RUFDQSxPQUFPLElBQUlJLE9BQUosQ0FBWSxLQUFLQyxLQUFMLENBQVdDLElBQVgsQ0FBZ0IsSUFBaEIsQ0FBWixDQUFQO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBUixRQUFRLENBQUNTLFNBQVQsQ0FBbUJGLEtBQW5CLEdBQTJCLFVBQVVHLE9BQVYsRUFBbUI7RUFDNUMsSUFBTUMsT0FBTyxHQUFHYixJQUFJLENBQUNZLE9BQUwsQ0FBYVgsV0FBVyxDQUFDYSxXQUFaLEdBQTBCQyxjQUExQixHQUEyQyxHQUEzQyxHQUFpRCxLQUFLVCxXQUF0RCxHQUFvRSxHQUFwRSxHQUEwRSxLQUFLQyxTQUEvRSxHQUEyRixPQUF4RyxDQUFoQjtFQUNBVCxRQUFRLENBQUNrQixRQUFULENBQWtCSCxPQUFsQixFQUEyQixVQUFVSSxHQUFWLEVBQWVDLElBQWYsRUFBcUI7SUFDOUMsSUFBSUQsR0FBSixFQUFTO01BQ1BMLE9BQU87SUFDUixDQUZELE1BRU87TUFDTEEsT0FBTyxDQUFDTSxJQUFELENBQVA7SUFDRDtFQUNGLENBTkQ7QUFPRCxDQVREOztBQVdBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJsQixRQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvZG93bmxvYWRzL3JlYWQtaXRlbS5qcz9kMWExIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QganNvbmZpbGUgPSByZXF1aXJlKCdqc29uZmlsZScpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuXG5jb25zdCBhcHBTZXR0aW5ncyA9IHJlcXVpcmUoJy4uL2FwcC1zZXR0aW5ncycpO1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFuaWZlc3RJZCAtIG1hbmlmZXN0IGlkZW50aWZpZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBpdGVtTmFtZSAtIGl0ZW0gbmFtZVxuICogQHJldHVybnMge1Byb21pc2V9IHByb21pc2VcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBSZWFkSXRlbSAobWFuaWZlc3RJZCwgaXRlbU5hbWUpIHtcbiAgaWYgKCFtYW5pZmVzdElkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwibWFuaWZlc3RJZCBpcyBtaXNzaW5nXCIpO1xuICB9XG4gIHRoaXMuX21hbmlmZXN0SWQgPSBtYW5pZmVzdElkO1xuICB0aGlzLl9pdGVtTmFtZSA9IGl0ZW1OYW1lO1xuICByZXR1cm4gbmV3IFByb21pc2UodGhpcy5fcmVhZC5iaW5kKHRoaXMpKTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gcmVzb2x2ZSAtIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZmluaXNoXG4gKiBAcHJpdmF0ZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblJlYWRJdGVtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gIGNvbnN0IGZpbGVVcmwgPSBwYXRoLnJlc29sdmUoYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5zZXR0aW5nc0ZvbGRlciArIFwiL1wiICsgdGhpcy5fbWFuaWZlc3RJZCArIFwiL1wiICsgdGhpcy5faXRlbU5hbWUgKyBcIi5qc29uXCIpO1xuICBqc29uZmlsZS5yZWFkRmlsZShmaWxlVXJsLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNvbHZlKGRhdGEpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRJdGVtOyJdLCJuYW1lcyI6WyJqc29uZmlsZSIsInJlcXVpcmUiLCJwYXRoIiwiYXBwU2V0dGluZ3MiLCJSZWFkSXRlbSIsIm1hbmlmZXN0SWQiLCJpdGVtTmFtZSIsIkVycm9yIiwiX21hbmlmZXN0SWQiLCJfaXRlbU5hbWUiLCJQcm9taXNlIiwiX3JlYWQiLCJiaW5kIiwicHJvdG90eXBlIiwicmVzb2x2ZSIsImZpbGVVcmwiLCJnZXRTZXR0aW5ncyIsInNldHRpbmdzRm9sZGVyIiwicmVhZEZpbGUiLCJlcnIiLCJkYXRhIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3812\n')},8255:module=>{"use strict";eval('\n\nvar STATUSES = {\n  "CREATED": "CREATED",\n  "STARTED": "STARTED",\n  "ERROR": "ERROR",\n  "STOPPED": "STOPPED",\n  "FINISHED": "FINISHED",\n  "BROKEN": "BROKEN",\n  "QUEUED": "QUEUED"\n};\nmodule.exports = STATUSES;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI1NS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxRQUFRLEdBQUc7RUFDZixXQUFXLFNBREk7RUFFZixXQUFXLFNBRkk7RUFHZixTQUFTLE9BSE07RUFJZixXQUFXLFNBSkk7RUFLZixZQUFZLFVBTEc7RUFNZixVQUFVLFFBTks7RUFPZixVQUFVO0FBUEssQ0FBakI7QUFVQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCRixRQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvZG93bmxvYWRzL3N0YXR1c2VzLmpzPzljNTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBTVEFUVVNFUyA9IHtcbiAgXCJDUkVBVEVEXCI6IFwiQ1JFQVRFRFwiLFxuICBcIlNUQVJURURcIjogXCJTVEFSVEVEXCIsXG4gIFwiRVJST1JcIjogXCJFUlJPUlwiLFxuICBcIlNUT1BQRURcIjogXCJTVE9QUEVEXCIsXG4gIFwiRklOSVNIRURcIjogXCJGSU5JU0hFRFwiLFxuICBcIkJST0tFTlwiOiBcIkJST0tFTlwiLFxuICBcIlFVRVVFRFwiOiBcIlFVRVVFRFwiXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNUQVRVU0VTOyJdLCJuYW1lcyI6WyJTVEFUVVNFUyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8255\n')},6716:module=>{"use strict";eval("\n\nfunction SyncItem(resolve, reject, manifestId, storageKeys) {\n  this.resolve = resolve;\n  this.reject = reject;\n  this.manifestId = manifestId;\n  this.storageKeys = storageKeys;\n}\n\nmodule.exports = SyncItem;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjcxNi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixTQUFTQSxRQUFULENBQW1CQyxPQUFuQixFQUE0QkMsTUFBNUIsRUFBb0NDLFVBQXBDLEVBQWdEQyxXQUFoRCxFQUE2RDtFQUMzRCxLQUFLSCxPQUFMLEdBQWVBLE9BQWY7RUFDQSxLQUFLQyxNQUFMLEdBQWNBLE1BQWQ7RUFDQSxLQUFLQyxVQUFMLEdBQWtCQSxVQUFsQjtFQUNBLEtBQUtDLFdBQUwsR0FBbUJBLFdBQW5CO0FBQ0Q7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQk4sUUFBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2Rvd25sb2Fkcy9zeW5jLWl0ZW0uanM/OGIxYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gU3luY0l0ZW0gKHJlc29sdmUsIHJlamVjdCwgbWFuaWZlc3RJZCwgc3RvcmFnZUtleXMpIHtcbiAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgdGhpcy5yZWplY3QgPSByZWplY3Q7XG4gIHRoaXMubWFuaWZlc3RJZCA9IG1hbmlmZXN0SWQ7XG4gIHRoaXMuc3RvcmFnZUtleXMgPSBzdG9yYWdlS2V5cztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTeW5jSXRlbTtcbiJdLCJuYW1lcyI6WyJTeW5jSXRlbSIsInJlc29sdmUiLCJyZWplY3QiLCJtYW5pZmVzdElkIiwic3RvcmFnZUtleXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6716\n")},588:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('/*eslint no-console: ["error", { allow: ["warn", "error", "info"] }] */\n\n\nvar _ = __webpack_require__(4952);\n\nvar Snowflake = __webpack_require__(9499);\n\nvar appSettings = __webpack_require__(9277);\n\nvar beMethods = __webpack_require__(9097);\n\nvar DownloadsController = __webpack_require__(4612);\n\nvar ManifestController = __webpack_require__(42);\n\nvar OfflineController = __webpack_require__(7094);\n\nvar SubscribersController = __webpack_require__(9256);\n\nvar Server = __webpack_require__(9837);\n\nvar DownstreamElectronBE;\n\nfunction deserialize(serializedJavascript) {\n  try {\n    return JSON.parse(serializedJavascript);\n  } catch (err) {\n    return {};\n  }\n}\n/**\n * @constructor\n * @namespace DownstreamElectronBE\n * @param {object} configParams - configuration\n * @property {DownstreamElectronBE.init} init - initialize api in main process\n * @description\n * During initialization you can configure your app, [click here]{@link DownstreamElectronBE.configuration}\n *\n * @example\n * //somewhere in the main process\n * const { BrowserWindow, app } = require(\'electron\');\n * const downstreamElectron = require(\'downstream-electron\');\n *\n * const userSettings = {\n *   "appDir": "/Users/admin/myApp",\n *   "settingsName": "settings",\n *   "publicName": "public",\n *   "downloadsName": "movies"\n * };\n *\n * let downstreamInstance;\n * function createWindow() {\n *   downstreamInstance = downstreamElectron.init(userSettings);\n *   const win = new BrowserWindow({\n *     width: 1200,\n *     height: 700,\n *     resizable: true,\n *     webPreferences: {\n *       plugins: true,\n *       nodeIntegration: true\n *     }\n *   });\n *   win.loadURL(\'file://index.html\');\n *   win.webContents.openDevTools();\n * }\n *\n * function onWillQuit() {\n *  downstreamInstance.stop();\n * }\n *\n * app.on(\'ready\', createWindow);\n * app.on(\'will-quit\', onWillQuit);\n * app.on(\'window-all-closed\', function () {\n *  console.log("window-all-closed");\n *  app.quit();\n * });\n */\n\n\nDownstreamElectronBE = function DownstreamElectronBE() {\n  this._offlineContentPort = appSettings.getSettings().offlineContentPortStart;\n\n  _.bindAll(this, "_onApiRequest", "processSubscriber");\n\n  this._createControllers();\n\n  this._serveOfflineContent();\n\n  this._attachEvents(); // this.offlineController.restoreLocalManifest("6163760572308389888");\n\n};\n\nDownstreamElectronBE.prototype.stop = function () {\n  this.server.stop();\n};\n/**\n *\n * @param {string} methodName - api function\n * @param {string} promiseId - promise identifier\n * @param {object} args - arguments\n * @param {number} target - target window id\n * @private\n * @returns {void}\n */\n\n\nDownstreamElectronBE.prototype._apiMethods = function (methodName, promiseId, args, target) {\n  var self = this;\n  var manifestId = args[0];\n  var response = {};\n  response.promiseId = promiseId;\n\n  var onSuccess = function onSuccess(result, subscribersId) {\n    response.subscribersId = subscribersId;\n    response.status = "OK";\n    response.result = result;\n    response.manifestId = manifestId;\n\n    self._send(response, target);\n  };\n\n  var onFailure = function onFailure(err, internalError) {\n    var errorId = String(Snowflake.SnowflakeId.getUUID());\n\n    var errorInfo = _.clone({\n      errorId: errorId,\n      methodName: methodName,\n      args: args.slice(4),\n      err: err,\n      internalError: internalError\n    });\n\n    response.manifestId = manifestId;\n    response.status = "ERROR";\n    response.error = err || {};\n    response.error.errorId = errorId;\n    response.error.details = internalError;\n\n    self._send(response, target); // @TODO log all errors that user have seen, the errorId will help to find stack\n\n\n    try {\n      console.error(new Date(), "Error occurred", JSON.stringify(errorInfo));\n    } catch (e) {//do nothing\n    }\n  };\n\n  args = args || [];\n  args.unshift(target);\n  args.unshift(onFailure);\n  args.unshift(onSuccess);\n  args.unshift(this);\n\n  var method = this._getMethod(methodName);\n\n  if (typeof method === "function") {\n    method.apply(null, args);\n  } else {\n    response.status = "ERROR";\n    response.error = "Provided method \'" + methodName + "\' doesn\'t exists";\n\n    this._send(response, target);\n\n    console.error("ERROR", "Provided method \'" + methodName + "\' doesn\'t exists");\n  }\n};\n/**\n *\n * @private\n * @returns {void}\n */\n\n\nDownstreamElectronBE.prototype._attachEvents = function () {\n  var ipcMain = (__webpack_require__(7194).ipcMain);\n\n  ipcMain.on("downstreamElectronBE", this._onApiRequest);\n};\n/**\n *\n * @private\n * @returns {void}\n */\n\n\nDownstreamElectronBE.prototype._createControllers = function () {\n  this.manifestController = new ManifestController();\n  this.offlineController = new OfflineController(this.manifestController);\n  this.downloadsController = new DownloadsController(this.manifestController, this.offlineController);\n  this.subscribersController = new SubscribersController();\n};\n/**\n *\n * @param {string} methodName - method name\n * @returns {*} - method\n * @private\n */\n\n\nDownstreamElectronBE.prototype._getMethod = function (methodName) {\n  var names = methodName.split(".");\n  var i, j, method;\n  method = beMethods[names[0]];\n\n  for (i = 1, j = names.length; i < j; i++) {\n    method = method[names[i]];\n  }\n\n  return method;\n};\n/**\n *\n * @param {object} evt - event\n * @param {object} data - data from renderer\n * @param {number} target - target window id\n * @private\n * @returns {void}\n */\n\n\nDownstreamElectronBE.prototype._onApiRequest = function (evt, data, target) {\n  var promiseId = data.promiseId;\n  var argsObj = deserialize(data.args) || {};\n  var method = data.method;\n  var windowId = data.windowId;\n  target = windowId;\n  var args = [];\n  var i = 0;\n\n  while (argsObj.hasOwnProperty(i)) {\n    args.push(argsObj[i]);\n    i++;\n  }\n\n  this._apiMethods(method, promiseId, args, target);\n};\n/**\n * @private\n * @param {object} response - response\n * @param {number} target - window target id\n * @returns {void}\n */\n\n\nDownstreamElectronBE.prototype._send = function (response, target) {\n  try {\n    var windows = (__webpack_require__(7194).BrowserWindow.getAllWindows)();\n\n    for (var i = 0, j = windows.length; i < j; i++) {\n      if (windows[i].id === target) {\n        windows[i].webContents.send(\'downstreamElectronFE\', response);\n        break;\n      }\n    }\n  } catch (err) {\n    console.error("internal error ocurred", err);\n  }\n};\n/**\n * @private\n * @returns {void}\n */\n\n\nDownstreamElectronBE.prototype._serveOfflineContent = function () {\n  var self = this;\n  var maxOfflineContentPortRange = appSettings.getSettings().maxOfflineContentPortRange;\n  this.server = new Server(this.offlineController, this.downloadsController, maxOfflineContentPortRange, this._offlineContentPort);\n  this.server.serveOfflineContent(function (offlinePort) {\n    self._offlineContentPort = offlinePort;\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {string} - offline path\n */\n\n\nDownstreamElectronBE.prototype.getOfflinePath = function (manifestId) {\n  var offlinePath = appSettings.getSettings().offlineDomain;\n  var offlineContentPort = this._offlineContentPort;\n\n  if (offlineContentPort) {\n    offlinePath += ":" + offlineContentPort;\n  }\n\n  offlinePath += "/" + encodeURIComponent(appSettings.getSettings().downloadsName) + "/" + encodeURIComponent(manifestId) + "/";\n  return offlinePath;\n};\n/**\n *\n * @param {string} subscriberId - subscriber identifier\n * @param {object} err - error\n * @param {object} result - result\n * @param {number} target - window target id\n * @param {boolean} subscriberFinished - download finished\n * @returns {void}\n */\n\n\nDownstreamElectronBE.prototype.processSubscriber = function (subscriberId, err, result, target, subscriberFinished) {\n  var response = {};\n  response.subscriberId = subscriberId;\n  response.status = err ? "ERROR" : "OK";\n  response.err = err;\n  response.result = result;\n  response.subscriberFinished = subscriberFinished;\n\n  this._send(response, target);\n\n  if (subscriberFinished) {\n    this.subscribersController.removeAllManifestSubscribersById(subscriberId);\n  }\n}; //---------------------------\n\n\nmodule.exports = {\n  init: function init(userSettings) {\n    appSettings.load(userSettings);\n    return new DownstreamElectronBE();\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///588\n')},7258:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar fieldsPicker = __webpack_require__(9241);\n\nmodule.exports = function AudioRepresentation(attr) {\n  fieldsPicker(this, ["audioSamplingRate", "bandwidth", "id", "lang", "durationInS"], attr);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzI1OC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMsSUFBRCxDQUE1Qjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLG1CQUFULENBQThCQyxJQUE5QixFQUFvQztFQUNuREwsWUFBWSxDQUFDLElBQUQsRUFBTyxDQUNqQixtQkFEaUIsRUFFakIsV0FGaUIsRUFHakIsSUFIaUIsRUFJakIsTUFKaUIsRUFLakIsYUFMaUIsQ0FBUCxFQU1USyxJQU5TLENBQVo7QUFPRCxDQVJEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9tYW5pZmVzdC9qc29uL2F1ZGlvLXJlcHJlc2VudGF0aW9uLmpzP2UzMzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBmaWVsZHNQaWNrZXIgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9maWVsZHMtcGlja2VyXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEF1ZGlvUmVwcmVzZW50YXRpb24gKGF0dHIpIHtcbiAgZmllbGRzUGlja2VyKHRoaXMsIFtcbiAgICBcImF1ZGlvU2FtcGxpbmdSYXRlXCIsXG4gICAgXCJiYW5kd2lkdGhcIixcbiAgICBcImlkXCIsXG4gICAgXCJsYW5nXCIsXG4gICAgXCJkdXJhdGlvbkluU1wiXG4gIF0sIGF0dHIpO1xufTtcbiJdLCJuYW1lcyI6WyJmaWVsZHNQaWNrZXIiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIkF1ZGlvUmVwcmVzZW50YXRpb24iLCJhdHRyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7258\n')},8798:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar fieldsPicker = __webpack_require__(9241);\n\nmodule.exports = function LinkSave(attr) {\n  fieldsPicker(this, ["id", "contentType", "bandwidth", "remoteUrl", "stats", "localUrl"], attr);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODc5OC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMsSUFBRCxDQUE1Qjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLFFBQVQsQ0FBbUJDLElBQW5CLEVBQXlCO0VBQ3hDTCxZQUFZLENBQUMsSUFBRCxFQUFPLENBQ2pCLElBRGlCLEVBRWpCLGFBRmlCLEVBR2pCLFdBSGlCLEVBSWpCLFdBSmlCLEVBS2pCLE9BTGlCLEVBTWpCLFVBTmlCLENBQVAsRUFPVEssSUFQUyxDQUFaO0FBUUQsQ0FURCIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvbWFuaWZlc3QvanNvbi9saW5rLXNhdmUuanM/MWEwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGZpZWxkc1BpY2tlciA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2ZpZWxkcy1waWNrZXJcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gTGlua1NhdmUgKGF0dHIpIHtcbiAgZmllbGRzUGlja2VyKHRoaXMsIFtcbiAgICBcImlkXCIsXG4gICAgXCJjb250ZW50VHlwZVwiLFxuICAgIFwiYmFuZHdpZHRoXCIsXG4gICAgXCJyZW1vdGVVcmxcIixcbiAgICBcInN0YXRzXCIsXG4gICAgXCJsb2NhbFVybFwiXG4gIF0sIGF0dHIpO1xufTsiXSwibmFtZXMiOlsiZmllbGRzUGlja2VyIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJMaW5rU2F2ZSIsImF0dHIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8798\n')},6092:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar fieldsPicker = __webpack_require__(9241);\n\nmodule.exports = function TextRepresentation(attr) {\n  fieldsPicker(this, ["bandwidth", "id", "lang", "durationInS"], attr);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjA5Mi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMsSUFBRCxDQUE1Qjs7QUFDQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLGtCQUFULENBQTZCQyxJQUE3QixFQUFtQztFQUNsREwsWUFBWSxDQUFDLElBQUQsRUFBTyxDQUNqQixXQURpQixFQUVqQixJQUZpQixFQUdqQixNQUhpQixFQUlqQixhQUppQixDQUFQLEVBS1RLLElBTFMsQ0FBWjtBQU1ELENBUEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL21hbmlmZXN0L2pzb24vdGV4dC1yZXByZXNlbnRhdGlvbi5qcz9lMDBiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgZmllbGRzUGlja2VyID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvZmllbGRzLXBpY2tlclwiKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVGV4dFJlcHJlc2VudGF0aW9uIChhdHRyKSB7XG4gIGZpZWxkc1BpY2tlcih0aGlzLCBbXG4gICAgXCJiYW5kd2lkdGhcIixcbiAgICBcImlkXCIsXG4gICAgXCJsYW5nXCIsXG4gICAgXCJkdXJhdGlvbkluU1wiXG4gIF0sIGF0dHIpO1xufTtcbiJdLCJuYW1lcyI6WyJmaWVsZHNQaWNrZXIiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIlRleHRSZXByZXNlbnRhdGlvbiIsImF0dHIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6092\n')},5533:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar fieldsPicker = __webpack_require__(9241);\n\nmodule.exports = function VideoRepresentation(attr) {\n  fieldsPicker(this, ["bandwidth", "id", "height", "lang", "width", "durationInS"], attr);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTUzMy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMsSUFBRCxDQUE1Qjs7QUFDQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLG1CQUFULENBQThCQyxJQUE5QixFQUFvQztFQUNuREwsWUFBWSxDQUFDLElBQUQsRUFBTyxDQUNqQixXQURpQixFQUVqQixJQUZpQixFQUdqQixRQUhpQixFQUlqQixNQUppQixFQUtqQixPQUxpQixFQU1qQixhQU5pQixDQUFQLEVBT1RLLElBUFMsQ0FBWjtBQVFELENBVEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL21hbmlmZXN0L2pzb24vdmlkZW8tcmVwcmVzZW50YXRpb24uanM/NTFhOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGZpZWxkc1BpY2tlciA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2ZpZWxkcy1waWNrZXJcIik7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFZpZGVvUmVwcmVzZW50YXRpb24gKGF0dHIpIHtcbiAgZmllbGRzUGlja2VyKHRoaXMsIFtcbiAgICBcImJhbmR3aWR0aFwiLFxuICAgIFwiaWRcIixcbiAgICBcImhlaWdodFwiLFxuICAgIFwibGFuZ1wiLFxuICAgIFwid2lkdGhcIixcbiAgICBcImR1cmF0aW9uSW5TXCJcbiAgXSwgYXR0cik7XG59O1xuIl0sIm5hbWVzIjpbImZpZWxkc1BpY2tlciIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiVmlkZW9SZXByZXNlbnRhdGlvbiIsImF0dHIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5533\n')},2927:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nvar _require = __webpack_require__(7194),\n    net = _require.net;\n\nvar appSettings = __webpack_require__(9277);\n\nvar ManifestLoader = function () {\n  function ManifestLoader() {}\n\n  ManifestLoader.prototype.load = function (url) {\n    return this.sendXMLHttpRequest(url);\n  };\n\n  ManifestLoader.prototype.sendXMLHttpRequest = function (url) {\n    var req_options = Object.assign({\n      url: url,\n      method: 'GET'\n    }, appSettings.getSettings().defaultManifestRequestOptions);\n    return new Promise(function (resolve, reject) {\n      var req = net.request(req_options);\n      req.chunkedEncoding = appSettings.getSettings().useChunkedEncoding;\n      req.on('error', function (err) {\n        reject(err);\n      });\n      req.on('response', function (response) {\n        response.on(\"error\", function (error) {\n          reject(new Error(\"MANIFEST LOAD FAILURE \" + error));\n        });\n        var error;\n\n        if (response.statusCode >= 400) {\n          error = response.statusMessage;\n        }\n\n        if (!error) {\n          var body = [];\n          response.on('data', function (chunk) {\n            body.push(chunk);\n          }).on('end', function () {\n            body = Buffer.concat(body);\n            resolve({\n              response: body,\n              url: url\n            });\n          });\n        } else {\n          reject(new Error(\"MANIFEST LOAD FAILURE \" + error));\n        }\n      });\n      req.end();\n    });\n  };\n\n  return ManifestLoader;\n}();\n\nexports.ManifestLoader = ManifestLoader;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkyNy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixlQUFjQSxtQkFBTyxDQUFDLElBQUQsQ0FBckI7QUFBQSxJQUFPQyxHQUFQLFlBQU9BLEdBQVA7O0FBQ0EsSUFBTUMsV0FBVyxHQUFHRixtQkFBTyxDQUFDLElBQUQsQ0FBM0I7O0FBRUEsSUFBTUcsY0FBYyxHQUFJLFlBQVk7RUFDbEMsU0FBU0EsY0FBVCxHQUEyQixDQUFFOztFQUU3QkEsY0FBYyxDQUFDQyxTQUFmLENBQXlCQyxJQUF6QixHQUFnQyxVQUFVQyxHQUFWLEVBQWU7SUFDN0MsT0FBTyxLQUFLQyxrQkFBTCxDQUF3QkQsR0FBeEIsQ0FBUDtFQUNELENBRkQ7O0VBR0FILGNBQWMsQ0FBQ0MsU0FBZixDQUF5Qkcsa0JBQXpCLEdBQThDLFVBQVVELEdBQVYsRUFBZTtJQUMzRCxJQUFNRSxXQUFXLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjO01BQ2hDSixHQUFHLEVBQUVBLEdBRDJCO01BRWhDSyxNQUFNLEVBQUU7SUFGd0IsQ0FBZCxFQUdqQlQsV0FBVyxDQUFDVSxXQUFaLEdBQTBCQyw2QkFIVCxDQUFwQjtJQUtBLE9BQU8sSUFBSUMsT0FBSixDQUFZLFVBQVVDLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO01BQzVDLElBQUlDLEdBQUcsR0FBR2hCLEdBQUcsQ0FBQ2lCLE9BQUosQ0FBWVYsV0FBWixDQUFWO01BQ0FTLEdBQUcsQ0FBQ0UsZUFBSixHQUFzQmpCLFdBQVcsQ0FBQ1UsV0FBWixHQUEwQlEsa0JBQWhEO01BRUFILEdBQUcsQ0FBQ0ksRUFBSixDQUFPLE9BQVAsRUFBZ0IsVUFBQ0MsR0FBRCxFQUFTO1FBQ3ZCTixNQUFNLENBQUNNLEdBQUQsQ0FBTjtNQUNELENBRkQ7TUFJQUwsR0FBRyxDQUFDSSxFQUFKLENBQU8sVUFBUCxFQUFtQixVQUFDRSxRQUFELEVBQWM7UUFFL0JBLFFBQVEsQ0FBQ0YsRUFBVCxDQUFZLE9BQVosRUFBcUIsVUFBVUcsS0FBVixFQUFpQjtVQUNwQ1IsTUFBTSxDQUFDLElBQUlTLEtBQUosQ0FBVSwyQkFBMkJELEtBQXJDLENBQUQsQ0FBTjtRQUNELENBRkQ7UUFJQSxJQUFJQSxLQUFKOztRQUNBLElBQUlELFFBQVEsQ0FBQ0csVUFBVCxJQUF1QixHQUEzQixFQUFnQztVQUM1QkYsS0FBSyxHQUFHRCxRQUFRLENBQUNJLGFBQWpCO1FBQ0g7O1FBRUQsSUFBSSxDQUFDSCxLQUFMLEVBQVk7VUFDVixJQUFJSSxJQUFJLEdBQUcsRUFBWDtVQUNBTCxRQUFRLENBQUNGLEVBQVQsQ0FBWSxNQUFaLEVBQW9CLFVBQUNRLEtBQUQsRUFBVztZQUM3QkQsSUFBSSxDQUFDRSxJQUFMLENBQVVELEtBQVY7VUFDRCxDQUZELEVBRUdSLEVBRkgsQ0FFTSxLQUZOLEVBRWEsWUFBTTtZQUNqQk8sSUFBSSxHQUFHRyxNQUFNLENBQUNDLE1BQVAsQ0FBY0osSUFBZCxDQUFQO1lBQ0FiLE9BQU8sQ0FBQztjQUFDUSxRQUFRLEVBQUVLLElBQVg7Y0FBaUJ0QixHQUFHLEVBQUVBO1lBQXRCLENBQUQsQ0FBUDtVQUNELENBTEQ7UUFNRCxDQVJELE1BUU87VUFDSFUsTUFBTSxDQUFDLElBQUlTLEtBQUosQ0FBVSwyQkFBMkJELEtBQXJDLENBQUQsQ0FBTjtRQUNIO01BQ0YsQ0F0QkQ7TUF1QkFQLEdBQUcsQ0FBQ2dCLEdBQUo7SUFDRCxDQWhDTSxDQUFQO0VBaUNELENBdkNEOztFQXdDQSxPQUFPOUIsY0FBUDtBQUNELENBL0N1QixFQUF4Qjs7QUFnREErQixzQkFBQSxHQUF5Qi9CLGNBQXpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9tYW5pZmVzdC9sb2FkZXIvbWFuaWZlc3QtbG9hZGVyLmpzPzk1NDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB7bmV0fSA9IHJlcXVpcmUoJ2VsZWN0cm9uJyk7XG5jb25zdCBhcHBTZXR0aW5ncyA9IHJlcXVpcmUoJy4uLy4uL2FwcC1zZXR0aW5ncycpO1xuXG5jb25zdCBNYW5pZmVzdExvYWRlciA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1hbmlmZXN0TG9hZGVyICgpIHt9XG5cbiAgTWFuaWZlc3RMb2FkZXIucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VuZFhNTEh0dHBSZXF1ZXN0KHVybCk7XG4gIH07XG4gIE1hbmlmZXN0TG9hZGVyLnByb3RvdHlwZS5zZW5kWE1MSHR0cFJlcXVlc3QgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgY29uc3QgcmVxX29wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIHVybDogdXJsLFxuICAgICAgbWV0aG9kOiAnR0VUJ1xuICAgIH0sIGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkuZGVmYXVsdE1hbmlmZXN0UmVxdWVzdE9wdGlvbnMpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGxldCByZXEgPSBuZXQucmVxdWVzdChyZXFfb3B0aW9ucyk7XG4gICAgICByZXEuY2h1bmtlZEVuY29kaW5nID0gYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS51c2VDaHVua2VkRW5jb2Rpbmc7XG5cbiAgICAgIHJlcS5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG5cbiAgICAgIHJlcS5vbigncmVzcG9uc2UnLCAocmVzcG9uc2UpID0+IHtcblxuICAgICAgICByZXNwb25zZS5vbihcImVycm9yXCIsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJNQU5JRkVTVCBMT0FEIEZBSUxVUkUgXCIgKyBlcnJvcikpO1xuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgZXJyb3I7XG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlID49IDQwMCkge1xuICAgICAgICAgICAgZXJyb3IgPSByZXNwb25zZS5zdGF0dXNNZXNzYWdlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgIGxldCBib2R5ID0gW107XG4gICAgICAgICAgcmVzcG9uc2Uub24oJ2RhdGEnLCAoY2h1bmspID0+IHtcbiAgICAgICAgICAgIGJvZHkucHVzaChjaHVuayk7XG4gICAgICAgICAgfSkub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgIGJvZHkgPSBCdWZmZXIuY29uY2F0KGJvZHkpO1xuICAgICAgICAgICAgcmVzb2x2ZSh7cmVzcG9uc2U6IGJvZHksIHVybDogdXJsfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiTUFOSUZFU1QgTE9BRCBGQUlMVVJFIFwiICsgZXJyb3IpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXEuZW5kKCk7XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBNYW5pZmVzdExvYWRlcjtcbn0oKSk7XG5leHBvcnRzLk1hbmlmZXN0TG9hZGVyID0gTWFuaWZlc3RMb2FkZXI7XG4iXSwibmFtZXMiOlsicmVxdWlyZSIsIm5ldCIsImFwcFNldHRpbmdzIiwiTWFuaWZlc3RMb2FkZXIiLCJwcm90b3R5cGUiLCJsb2FkIiwidXJsIiwic2VuZFhNTEh0dHBSZXF1ZXN0IiwicmVxX29wdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJtZXRob2QiLCJnZXRTZXR0aW5ncyIsImRlZmF1bHRNYW5pZmVzdFJlcXVlc3RPcHRpb25zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXEiLCJyZXF1ZXN0IiwiY2h1bmtlZEVuY29kaW5nIiwidXNlQ2h1bmtlZEVuY29kaW5nIiwib24iLCJlcnIiLCJyZXNwb25zZSIsImVycm9yIiwiRXJyb3IiLCJzdGF0dXNDb2RlIiwic3RhdHVzTWVzc2FnZSIsImJvZHkiLCJjaHVuayIsInB1c2giLCJCdWZmZXIiLCJjb25jYXQiLCJlbmQiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2927\n")},3895:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar fs = __webpack_require__(7147);\n\nvar path = __webpack_require__(1017);\n/**\n * @param {string} url - local url\n * @returns {Promise} promise\n * @constructor\n */\n\n\nfunction ManifestLocalLoader(url) {\n  return new Promise(function (resolve, reject) {\n    fs.readFile(path.resolve(url), "utf-8", function (err, content) {\n      if (!err) {\n        resolve(content);\n      } else {\n        reject(err);\n      }\n    });\n  });\n}\n\nmodule.exports = ManifestLocalLoader;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg5NS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxFQUFFLEdBQUdDLG1CQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxJQUFNQyxJQUFJLEdBQUdELG1CQUFPLENBQUMsSUFBRCxDQUFwQjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFNBQVNFLG1CQUFULENBQThCQyxHQUE5QixFQUFtQztFQUNqQyxPQUFPLElBQUlDLE9BQUosQ0FBWSxVQUFVQyxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtJQUM1Q1AsRUFBRSxDQUFDUSxRQUFILENBQVlOLElBQUksQ0FBQ0ksT0FBTCxDQUFhRixHQUFiLENBQVosRUFBK0IsT0FBL0IsRUFBd0MsVUFBVUssR0FBVixFQUFlQyxPQUFmLEVBQXdCO01BQzlELElBQUksQ0FBQ0QsR0FBTCxFQUFVO1FBQ1JILE9BQU8sQ0FBQ0ksT0FBRCxDQUFQO01BQ0QsQ0FGRCxNQUVPO1FBQ0xILE1BQU0sQ0FBQ0UsR0FBRCxDQUFOO01BQ0Q7SUFDRixDQU5EO0VBT0QsQ0FSTSxDQUFQO0FBU0Q7O0FBQ0RFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlQsbUJBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9tYW5pZmVzdC9sb2FkZXIvbWFuaWZlc3QtbG9jYWwtbG9hZGVyLmpzP2YzNjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBsb2NhbCB1cmxcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBwcm9taXNlXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTWFuaWZlc3RMb2NhbExvYWRlciAodXJsKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZnMucmVhZEZpbGUocGF0aC5yZXNvbHZlKHVybCksIFwidXRmLThcIiwgZnVuY3Rpb24gKGVyciwgY29udGVudCkge1xuICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgcmVzb2x2ZShjb250ZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gTWFuaWZlc3RMb2NhbExvYWRlcjtcbiJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwYXRoIiwiTWFuaWZlc3RMb2NhbExvYWRlciIsInVybCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVhZEZpbGUiLCJlcnIiLCJjb250ZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3895\n')},1269:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nvar ManifestLoader = __webpack_require__(2927);\n\nvar ManifestLocalLoader = __webpack_require__(3895); // const ManifestXML_1 = require(\"./../parser/manifest-xml\");\n\n\nvar ManifestXML_1 = __webpack_require__(4624);\n\nvar AllAdaptationSets_1 = __webpack_require__(7936);\n\nvar SnowflakeId_1 = __webpack_require__(9499);\n\nvar jsonRepresentation = __webpack_require__(1700);\n\nvar jsonRepresentationWithProtection = __webpack_require__(4723);\n\nvar manifestLoader = new ManifestLoader.ManifestLoader();\n\nvar urlParse = __webpack_require__(3720);\n\nvar encoding = __webpack_require__(5169);\n\nvar Manifest = function () {\n  function Manifest(id) {\n    if (!id) {\n      this.id = String(SnowflakeId_1.SnowflakeId.getUUID());\n    } else {\n      this.id = id;\n    }\n  }\n\n  Manifest.prototype._setUpUrl = function (url) {\n    var pathName = urlParse(url).pathname;\n    this.url = url;\n    this.url_domain = url.substring(0, url.lastIndexOf('/') + 1);\n    this.manifest_name = pathName.substring(pathName.lastIndexOf('/') + 1, pathName.length);\n  };\n\n  Manifest.prototype.load = function (url) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this._setUpUrl(url);\n\n      var p = manifestLoader.load(url);\n      p.then(function (v) {\n        var isEncodingUTF16 = encoding.isUTF16(v.response);\n        v.response = v.response.toString(isEncodingUTF16 ? 'utf16le' : 'utf-8');\n        var xml = v.response;\n        _this.manifestXML = new ManifestXML_1.ManifestXML();\n\n        _this.manifestXML.parse(xml, function () {\n          resolve();\n        }, function (e) {\n          reject(e);\n          throw new Error(\"Manifest parsing error\");\n        });\n      }, function (e) {\n        reject(e);\n      });\n    });\n  };\n\n  Manifest.prototype.loadWithManifest = function (url, manifest) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this._setUpUrl(url);\n\n      _this.manifestXML = new ManifestXML_1.ManifestXML();\n\n      _this.manifestXML.parse(manifest, function () {\n        resolve();\n      }, function (e) {\n        reject(e);\n        throw new Error(\"Manifest parsing error\");\n      });\n    });\n  };\n\n  Manifest.prototype.loadFromLocal = function (localPath, url) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      if (!url || !localPath) {\n        reject('wrong parameter');\n        return;\n      }\n\n      ManifestLocalLoader(localPath).then(function (str) {\n        _this._setUpUrl(url);\n\n        _this.manifestXML = new ManifestXML_1.ManifestXML();\n\n        _this.manifestXML.parse(str, function () {\n          resolve();\n        }, function (e) {\n          reject(e);\n        });\n      }, function (e) {\n        reject(e);\n      });\n    });\n  };\n\n  Manifest.prototype.loadFromStr = function (str, url) {\n    this.url_domain = url.substring(0, url.lastIndexOf('/') + 1);\n    this.manifest_name = url.substring(url.lastIndexOf('/') + 1, url.length);\n    this.manifestXML = new ManifestXML_1.ManifestXML();\n    this.manifestXML.parse(str);\n  };\n\n  Manifest.prototype.getAdaptationSets = function () {\n    var vid = this.manifestXML.getVideoAdaptation();\n    var audio = this.manifestXML.getAudioAdaptation();\n    var text = this.manifestXML.getTextAdaptation();\n    var all = new AllAdaptationSets_1.AllAdaptationSets(vid, audio, text);\n    return all;\n  };\n\n  Manifest.prototype.getVideoRepresentations = function () {\n    return this.manifestXML.getVideoAdaptation();\n  };\n\n  Manifest.prototype.getAudioRepresentations = function () {\n    return this.manifestXML.getAudioAdaptation();\n  };\n\n  Manifest.prototype.getTextRepresentations = function () {\n    return this.manifestXML.getTextAdaptation();\n  };\n\n  Manifest.prototype.getProtections = function () {\n    var protections = {};\n    protections.video = jsonRepresentationWithProtection(this.getVideoRepresentations());\n    protections.audio = jsonRepresentationWithProtection(this.getAudioRepresentations());\n    protections.text = jsonRepresentationWithProtection(this.getTextRepresentations());\n    return protections;\n  };\n\n  Manifest.prototype.getRemoteDomain = function () {\n    return this.url_domain;\n  };\n\n  Manifest.prototype.getManifestName = function () {\n    return this.manifest_name;\n  };\n\n  Manifest.prototype.getManifestUrl = function () {\n    return this.url;\n  };\n\n  Manifest.prototype.getManifestXML = function () {\n    return this.manifestXML.getManifestXML();\n  };\n\n  Manifest.prototype.removeNode = function () {\n    this.manifestXML.removeNode();\n  };\n\n  Manifest.prototype.getJsonInfo = function () {\n    var json = {};\n    json.id = this.id;\n    json.audio = jsonRepresentation(this.getAudioRepresentations());\n    json.video = jsonRepresentation(this.getVideoRepresentations());\n    json.text = jsonRepresentation(this.getTextRepresentations());\n    json.protections = this.getProtections();\n    return json;\n  };\n\n  return Manifest;\n}();\n\nexports.G = Manifest;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1269\n")},4872:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\nvar BASE64 = __webpack_require__(7769);\n\nvar pssh = __webpack_require__(2310);\n\nvar MPEG_DASH_PROTECTION_SCHEME_ID_URI = 'urn:mpeg:dash:mp4protection:2011';\nvar WIDEVINE_SCHEME_ID_URI = 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) {\n      d[p] = b[p];\n    }\n  }\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar ManifestNode_1 = __webpack_require__(2167);\n\nvar RepresentationNode_1 = __webpack_require__(3188);\n\nvar AdaptationSetNode = function (_super) {\n  __extends(AdaptationSetNode, _super);\n\n  function AdaptationSetNode(node, xml) {\n    _super.call(this, node, xml);\n\n    this.representationColl = [];\n    this.contentProtections = [];\n    this.parse();\n  }\n\n  AdaptationSetNode.prototype.parse = function () {\n    var rep = this.currentNode.getElementsByTagName('Representation');\n\n    for (var i = 0; i < rep.length; i++) {\n      var repNode = new RepresentationNode_1.RepresentationNode(rep[i], this.xml);\n      this.representationColl[i] = repNode;\n\n      if (this.representationColl[0].hasMimeType()) {\n        {\n          this.attributeList['mimeType'] = this.representationColl[0].getMimeType();\n        }\n      }\n    }\n\n    var contentProtections = this.currentNode.getElementsByTagName('ContentProtection');\n    var KID; // find CENC KEY ID if there is some\n\n    for (var _i = 0; _i < contentProtections.length; _i++) {\n      var attrs = contentProtections[_i].attributes;\n      var schemeIdUri = attrs.getNamedItem(\"schemeIdUri\");\n\n      if (schemeIdUri && schemeIdUri.value.toLowerCase() === MPEG_DASH_PROTECTION_SCHEME_ID_URI) {\n        if (attrs.getNamedItem(\"cenc:default_KID\")) {\n          KID = attrs.getNamedItem(\"cenc:default_KID\").value; // Get KID (base64 decoded) as byte array\n\n          KID = BASE64.toByteArray(KID);\n          break;\n        }\n      }\n    }\n\n    for (var _i2 = 0; _i2 < contentProtections.length; _i2++) {\n      var _attrs = contentProtections[_i2].attributes;\n\n      if (_attrs.getNamedItem(\"schemeIdUri\")) {\n        var scheme = _attrs.getNamedItem(\"schemeIdUri\").value.toLowerCase();\n\n        var cenc = contentProtections[_i2].getElementsByTagName(\"cenc:pssh\");\n\n        if (cenc.length) {\n          var contentProtection = {\n            schemeIdUri: scheme,\n            cencPSSH: cenc[0].childNodes[0].data\n          };\n          this.contentProtections.push(contentProtection);\n        } else if (KID && scheme === WIDEVINE_SCHEME_ID_URI) {\n          var psshWV = pssh.createWidevinePssh(KID);\n          var _contentProtection = {\n            schemeIdUri: scheme,\n            cencPSSH: psshWV\n          };\n          this.contentProtections.push(_contentProtection);\n        }\n      }\n    }\n  };\n\n  AdaptationSetNode.prototype.getContentProtections = function () {\n    return this.contentProtections;\n  };\n\n  AdaptationSetNode.prototype.getWidevineProtection = function () {\n    return this.contentProtections.filter(function (item) {\n      return item.schemeIdUri && item.schemeIdUri.toLowerCase() === WIDEVINE_SCHEME_ID_URI;\n    });\n  };\n\n  AdaptationSetNode.prototype.isMimeType = function (str) {\n    return this.attributeList['mimeType'].indexOf(str) != -1 ? true : false;\n  };\n\n  AdaptationSetNode.prototype.isContentType = function (str) {\n    return this.attributeList['contentType'] && this.attributeList['contentType'].indexOf(str) != -1 ? true : false;\n  };\n\n  return AdaptationSetNode;\n}(ManifestNode_1.ManifestNode);\n\nexports.AdaptationSetNode = AdaptationSetNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4872\n")},7936:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nvar AllAdaptationSets = function () {\n  function AllAdaptationSets(vid, audio, text) {\n    this.videoAdaptation = vid;\n\n    if (audio) {\n      this.audioAdaptation = audio;\n    }\n\n    if (text) {\n      this.textAdaptation = text;\n    }\n  }\n\n  return AllAdaptationSets;\n}();\n\nexports.AllAdaptationSets = AllAdaptationSets;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzkzNi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxpQkFBaUIsR0FBSSxZQUFZO0VBQ3JDLFNBQVNBLGlCQUFULENBQTRCQyxHQUE1QixFQUFpQ0MsS0FBakMsRUFBd0NDLElBQXhDLEVBQThDO0lBQzVDLEtBQUtDLGVBQUwsR0FBdUJILEdBQXZCOztJQUNBLElBQUlDLEtBQUosRUFBVztNQUNULEtBQUtHLGVBQUwsR0FBdUJILEtBQXZCO0lBQ0Q7O0lBQ0QsSUFBSUMsSUFBSixFQUFVO01BQ1IsS0FBS0csY0FBTCxHQUFzQkgsSUFBdEI7SUFDRDtFQUNGOztFQUVELE9BQU9ILGlCQUFQO0FBQ0QsQ0FaMEIsRUFBM0I7O0FBYUFPLHlCQUFBLEdBQTRCUCxpQkFBNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL21hbmlmZXN0L3BhcnNlci9hbGwtYWRhcHRhdGlvbi1zZXRzLmpzPzU3ZWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBBbGxBZGFwdGF0aW9uU2V0cyA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEFsbEFkYXB0YXRpb25TZXRzICh2aWQsIGF1ZGlvLCB0ZXh0KSB7XG4gICAgdGhpcy52aWRlb0FkYXB0YXRpb24gPSB2aWQ7XG4gICAgaWYgKGF1ZGlvKSB7XG4gICAgICB0aGlzLmF1ZGlvQWRhcHRhdGlvbiA9IGF1ZGlvO1xuICAgIH1cbiAgICBpZiAodGV4dCkge1xuICAgICAgdGhpcy50ZXh0QWRhcHRhdGlvbiA9IHRleHQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIEFsbEFkYXB0YXRpb25TZXRzO1xufSgpKTtcbmV4cG9ydHMuQWxsQWRhcHRhdGlvblNldHMgPSBBbGxBZGFwdGF0aW9uU2V0cztcbiJdLCJuYW1lcyI6WyJBbGxBZGFwdGF0aW9uU2V0cyIsInZpZCIsImF1ZGlvIiwidGV4dCIsInZpZGVvQWRhcHRhdGlvbiIsImF1ZGlvQWRhcHRhdGlvbiIsInRleHRBZGFwdGF0aW9uIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7936\n")},4723:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar AudioRepresentation = __webpack_require__(7258);\n\nvar VideoRepresentation = __webpack_require__(5533);\n\nvar TextRepresentation = __webpack_require__(6092);\n\nmodule.exports = function jsonRepresentation(representations) {\n  var reprObj = [];\n\n  for (var i = 0, j = representations.length; i < j; i++) {\n    var cols = representations[i].representationColl;\n\n    for (var k = 0, l = cols.length; k < l; k++) {\n      var attr = cols[k].attributeList;\n      var contentType = attr.contentType || attr.mimeType;\n\n      if (contentType.indexOf("video") >= 0) {\n        contentType = "video";\n      } else if (contentType.indexOf("audio") >= 0) {\n        contentType = "audio";\n      } else {\n        contentType = "text";\n      }\n\n      switch (contentType) {\n        case "audio":\n          reprObj.push(new AudioRepresentation(attr));\n          break;\n\n        case "video":\n          reprObj.push(new VideoRepresentation(attr));\n          break;\n\n        default:\n          reprObj.push(new TextRepresentation(attr));\n      }\n\n      reprObj[k].protections = representations[i].contentProtections.slice();\n    }\n  }\n\n  return reprObj;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDcyMy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxtQkFBbUIsR0FBR0MsbUJBQU8sQ0FBQyxJQUFELENBQW5DOztBQUNBLElBQU1DLG1CQUFtQixHQUFHRCxtQkFBTyxDQUFDLElBQUQsQ0FBbkM7O0FBQ0EsSUFBTUUsa0JBQWtCLEdBQUdGLG1CQUFPLENBQUMsSUFBRCxDQUFsQzs7QUFFQUcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLGtCQUFULENBQTZCQyxlQUE3QixFQUE4QztFQUM3RCxJQUFJQyxPQUFPLEdBQUcsRUFBZDs7RUFDQSxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFSLEVBQVdDLENBQUMsR0FBR0gsZUFBZSxDQUFDSSxNQUFwQyxFQUE0Q0YsQ0FBQyxHQUFHQyxDQUFoRCxFQUFtREQsQ0FBQyxFQUFwRCxFQUF3RDtJQUN0RCxJQUFNRyxJQUFJLEdBQUdMLGVBQWUsQ0FBQ0UsQ0FBRCxDQUFmLENBQW1CSSxrQkFBaEM7O0lBQ0EsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBUixFQUFXQyxDQUFDLEdBQUdILElBQUksQ0FBQ0QsTUFBekIsRUFBaUNHLENBQUMsR0FBR0MsQ0FBckMsRUFBd0NELENBQUMsRUFBekMsRUFBNkM7TUFDM0MsSUFBTUUsSUFBSSxHQUFHSixJQUFJLENBQUNFLENBQUQsQ0FBSixDQUFRRyxhQUFyQjtNQUNBLElBQUlDLFdBQVcsR0FBR0YsSUFBSSxDQUFDRSxXQUFMLElBQW9CRixJQUFJLENBQUNHLFFBQTNDOztNQUNBLElBQUlELFdBQVcsQ0FBQ0UsT0FBWixDQUFvQixPQUFwQixLQUFnQyxDQUFwQyxFQUF1QztRQUNyQ0YsV0FBVyxHQUFHLE9BQWQ7TUFDRCxDQUZELE1BRU8sSUFBSUEsV0FBVyxDQUFDRSxPQUFaLENBQW9CLE9BQXBCLEtBQWdDLENBQXBDLEVBQXVDO1FBQzVDRixXQUFXLEdBQUcsT0FBZDtNQUNELENBRk0sTUFFQTtRQUNMQSxXQUFXLEdBQUcsTUFBZDtNQUNEOztNQUNELFFBQVFBLFdBQVI7UUFDRSxLQUFLLE9BQUw7VUFDRVYsT0FBTyxDQUFDYSxJQUFSLENBQWEsSUFBSXJCLG1CQUFKLENBQXdCZ0IsSUFBeEIsQ0FBYjtVQUNBOztRQUVGLEtBQUssT0FBTDtVQUNFUixPQUFPLENBQUNhLElBQVIsQ0FBYSxJQUFJbkIsbUJBQUosQ0FBd0JjLElBQXhCLENBQWI7VUFDQTs7UUFFRjtVQUNFUixPQUFPLENBQUNhLElBQVIsQ0FBYSxJQUFJbEIsa0JBQUosQ0FBdUJhLElBQXZCLENBQWI7TUFWSjs7TUFZQVIsT0FBTyxDQUFDTSxDQUFELENBQVAsQ0FBV1EsV0FBWCxHQUF5QmYsZUFBZSxDQUFDRSxDQUFELENBQWYsQ0FBbUJjLGtCQUFuQixDQUFzQ0MsS0FBdEMsRUFBekI7SUFDRDtFQUVGOztFQUNELE9BQU9oQixPQUFQO0FBQ0QsQ0EvQkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL21hbmlmZXN0L3BhcnNlci9qc29uLXJlcHJlc2VudGF0aW9uLXdpdGgtcHJvdGVjdGlvbi5qcz81MTRiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgQXVkaW9SZXByZXNlbnRhdGlvbiA9IHJlcXVpcmUoXCIuLi9qc29uL2F1ZGlvLXJlcHJlc2VudGF0aW9uXCIpO1xuY29uc3QgVmlkZW9SZXByZXNlbnRhdGlvbiA9IHJlcXVpcmUoXCIuLi9qc29uL3ZpZGVvLXJlcHJlc2VudGF0aW9uXCIpO1xuY29uc3QgVGV4dFJlcHJlc2VudGF0aW9uID0gcmVxdWlyZShcIi4uL2pzb24vdGV4dC1yZXByZXNlbnRhdGlvblwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBqc29uUmVwcmVzZW50YXRpb24gKHJlcHJlc2VudGF0aW9ucykge1xuICBsZXQgcmVwck9iaiA9IFtdO1xuICBmb3IgKGxldCBpID0gMCwgaiA9IHJlcHJlc2VudGF0aW9ucy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICBjb25zdCBjb2xzID0gcmVwcmVzZW50YXRpb25zW2ldLnJlcHJlc2VudGF0aW9uQ29sbDtcbiAgICBmb3IgKGxldCBrID0gMCwgbCA9IGNvbHMubGVuZ3RoOyBrIDwgbDsgaysrKSB7XG4gICAgICBjb25zdCBhdHRyID0gY29sc1trXS5hdHRyaWJ1dGVMaXN0O1xuICAgICAgbGV0IGNvbnRlbnRUeXBlID0gYXR0ci5jb250ZW50VHlwZSB8fCBhdHRyLm1pbWVUeXBlO1xuICAgICAgaWYgKGNvbnRlbnRUeXBlLmluZGV4T2YoXCJ2aWRlb1wiKSA+PSAwKSB7XG4gICAgICAgIGNvbnRlbnRUeXBlID0gXCJ2aWRlb1wiO1xuICAgICAgfSBlbHNlIGlmIChjb250ZW50VHlwZS5pbmRleE9mKFwiYXVkaW9cIikgPj0gMCkge1xuICAgICAgICBjb250ZW50VHlwZSA9IFwiYXVkaW9cIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRlbnRUeXBlID0gXCJ0ZXh0XCI7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGNvbnRlbnRUeXBlKSB7XG4gICAgICAgIGNhc2UgXCJhdWRpb1wiOlxuICAgICAgICAgIHJlcHJPYmoucHVzaChuZXcgQXVkaW9SZXByZXNlbnRhdGlvbihhdHRyKSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcInZpZGVvXCI6XG4gICAgICAgICAgcmVwck9iai5wdXNoKG5ldyBWaWRlb1JlcHJlc2VudGF0aW9uKGF0dHIpKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJlcHJPYmoucHVzaChuZXcgVGV4dFJlcHJlc2VudGF0aW9uKGF0dHIpKTtcbiAgICAgIH1cbiAgICAgIHJlcHJPYmpba10ucHJvdGVjdGlvbnMgPSByZXByZXNlbnRhdGlvbnNbaV0uY29udGVudFByb3RlY3Rpb25zLnNsaWNlKCk7XG4gICAgfVxuXG4gIH1cbiAgcmV0dXJuIHJlcHJPYmo7XG59O1xuIl0sIm5hbWVzIjpbIkF1ZGlvUmVwcmVzZW50YXRpb24iLCJyZXF1aXJlIiwiVmlkZW9SZXByZXNlbnRhdGlvbiIsIlRleHRSZXByZXNlbnRhdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJqc29uUmVwcmVzZW50YXRpb24iLCJyZXByZXNlbnRhdGlvbnMiLCJyZXByT2JqIiwiaSIsImoiLCJsZW5ndGgiLCJjb2xzIiwicmVwcmVzZW50YXRpb25Db2xsIiwiayIsImwiLCJhdHRyIiwiYXR0cmlidXRlTGlzdCIsImNvbnRlbnRUeXBlIiwibWltZVR5cGUiLCJpbmRleE9mIiwicHVzaCIsInByb3RlY3Rpb25zIiwiY29udGVudFByb3RlY3Rpb25zIiwic2xpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4723\n')},1700:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar AudioRepresentation = __webpack_require__(7258);\n\nvar VideoRepresentation = __webpack_require__(5533);\n\nvar TextRepresentation = __webpack_require__(6092);\n\nmodule.exports = function jsonRepresentation(representations) {\n  var reprObj = [];\n\n  for (var i = 0, j = representations.length; i < j; i++) {\n    var cols = representations[i].representationColl;\n\n    for (var k = 0, l = cols.length; k < l; k++) {\n      var attr = cols[k].attributeList;\n      var contentType = attr.contentType || attr.mimeType;\n\n      if (contentType.indexOf("video") >= 0) {\n        contentType = "video";\n      } else if (contentType.indexOf("audio") >= 0) {\n        contentType = "audio";\n      } else {\n        contentType = "text";\n      }\n\n      switch (contentType) {\n        case "audio":\n          reprObj.push(new AudioRepresentation(attr));\n          break;\n\n        case "video":\n          reprObj.push(new VideoRepresentation(attr));\n          break;\n\n        default:\n          reprObj.push(new TextRepresentation(attr));\n      }\n    }\n  }\n\n  return reprObj;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcwMC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxtQkFBbUIsR0FBR0MsbUJBQU8sQ0FBQyxJQUFELENBQW5DOztBQUNBLElBQU1DLG1CQUFtQixHQUFHRCxtQkFBTyxDQUFDLElBQUQsQ0FBbkM7O0FBQ0EsSUFBTUUsa0JBQWtCLEdBQUdGLG1CQUFPLENBQUMsSUFBRCxDQUFsQzs7QUFFQUcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLGtCQUFULENBQTZCQyxlQUE3QixFQUE4QztFQUM3RCxJQUFJQyxPQUFPLEdBQUcsRUFBZDs7RUFDQSxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFSLEVBQVdDLENBQUMsR0FBR0gsZUFBZSxDQUFDSSxNQUFwQyxFQUE0Q0YsQ0FBQyxHQUFHQyxDQUFoRCxFQUFtREQsQ0FBQyxFQUFwRCxFQUF3RDtJQUN0RCxJQUFNRyxJQUFJLEdBQUdMLGVBQWUsQ0FBQ0UsQ0FBRCxDQUFmLENBQW1CSSxrQkFBaEM7O0lBQ0EsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBUixFQUFXQyxDQUFDLEdBQUdILElBQUksQ0FBQ0QsTUFBekIsRUFBaUNHLENBQUMsR0FBR0MsQ0FBckMsRUFBd0NELENBQUMsRUFBekMsRUFBNkM7TUFDM0MsSUFBTUUsSUFBSSxHQUFHSixJQUFJLENBQUNFLENBQUQsQ0FBSixDQUFRRyxhQUFyQjtNQUNBLElBQUlDLFdBQVcsR0FBR0YsSUFBSSxDQUFDRSxXQUFMLElBQW9CRixJQUFJLENBQUNHLFFBQTNDOztNQUNBLElBQUlELFdBQVcsQ0FBQ0UsT0FBWixDQUFvQixPQUFwQixLQUFnQyxDQUFwQyxFQUF1QztRQUNyQ0YsV0FBVyxHQUFHLE9BQWQ7TUFDRCxDQUZELE1BRU8sSUFBSUEsV0FBVyxDQUFDRSxPQUFaLENBQW9CLE9BQXBCLEtBQWdDLENBQXBDLEVBQXVDO1FBQzVDRixXQUFXLEdBQUcsT0FBZDtNQUNELENBRk0sTUFFQTtRQUNMQSxXQUFXLEdBQUcsTUFBZDtNQUNEOztNQUNELFFBQVFBLFdBQVI7UUFDRSxLQUFLLE9BQUw7VUFDRVYsT0FBTyxDQUFDYSxJQUFSLENBQWEsSUFBSXJCLG1CQUFKLENBQXdCZ0IsSUFBeEIsQ0FBYjtVQUNBOztRQUVGLEtBQUssT0FBTDtVQUNFUixPQUFPLENBQUNhLElBQVIsQ0FBYSxJQUFJbkIsbUJBQUosQ0FBd0JjLElBQXhCLENBQWI7VUFDQTs7UUFFRjtVQUNFUixPQUFPLENBQUNhLElBQVIsQ0FBYSxJQUFJbEIsa0JBQUosQ0FBdUJhLElBQXZCLENBQWI7TUFWSjtJQVlEO0VBQ0Y7O0VBQ0QsT0FBT1IsT0FBUDtBQUNELENBN0JEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9tYW5pZmVzdC9wYXJzZXIvanNvbi1yZXByZXNlbnRhdGlvbi5qcz8xYzg4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgQXVkaW9SZXByZXNlbnRhdGlvbiA9IHJlcXVpcmUoXCIuLi9qc29uL2F1ZGlvLXJlcHJlc2VudGF0aW9uXCIpO1xuY29uc3QgVmlkZW9SZXByZXNlbnRhdGlvbiA9IHJlcXVpcmUoXCIuLi9qc29uL3ZpZGVvLXJlcHJlc2VudGF0aW9uXCIpO1xuY29uc3QgVGV4dFJlcHJlc2VudGF0aW9uID0gcmVxdWlyZShcIi4uL2pzb24vdGV4dC1yZXByZXNlbnRhdGlvblwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBqc29uUmVwcmVzZW50YXRpb24gKHJlcHJlc2VudGF0aW9ucykge1xuICBsZXQgcmVwck9iaiA9IFtdO1xuICBmb3IgKGxldCBpID0gMCwgaiA9IHJlcHJlc2VudGF0aW9ucy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICBjb25zdCBjb2xzID0gcmVwcmVzZW50YXRpb25zW2ldLnJlcHJlc2VudGF0aW9uQ29sbDtcbiAgICBmb3IgKGxldCBrID0gMCwgbCA9IGNvbHMubGVuZ3RoOyBrIDwgbDsgaysrKSB7XG4gICAgICBjb25zdCBhdHRyID0gY29sc1trXS5hdHRyaWJ1dGVMaXN0O1xuICAgICAgbGV0IGNvbnRlbnRUeXBlID0gYXR0ci5jb250ZW50VHlwZSB8fCBhdHRyLm1pbWVUeXBlO1xuICAgICAgaWYgKGNvbnRlbnRUeXBlLmluZGV4T2YoXCJ2aWRlb1wiKSA+PSAwKSB7XG4gICAgICAgIGNvbnRlbnRUeXBlID0gXCJ2aWRlb1wiO1xuICAgICAgfSBlbHNlIGlmIChjb250ZW50VHlwZS5pbmRleE9mKFwiYXVkaW9cIikgPj0gMCkge1xuICAgICAgICBjb250ZW50VHlwZSA9IFwiYXVkaW9cIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRlbnRUeXBlID0gXCJ0ZXh0XCI7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGNvbnRlbnRUeXBlKSB7XG4gICAgICAgIGNhc2UgXCJhdWRpb1wiOlxuICAgICAgICAgIHJlcHJPYmoucHVzaChuZXcgQXVkaW9SZXByZXNlbnRhdGlvbihhdHRyKSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcInZpZGVvXCI6XG4gICAgICAgICAgcmVwck9iai5wdXNoKG5ldyBWaWRlb1JlcHJlc2VudGF0aW9uKGF0dHIpKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJlcHJPYmoucHVzaChuZXcgVGV4dFJlcHJlc2VudGF0aW9uKGF0dHIpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcHJPYmo7XG59O1xuIl0sIm5hbWVzIjpbIkF1ZGlvUmVwcmVzZW50YXRpb24iLCJyZXF1aXJlIiwiVmlkZW9SZXByZXNlbnRhdGlvbiIsIlRleHRSZXByZXNlbnRhdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJqc29uUmVwcmVzZW50YXRpb24iLCJyZXByZXNlbnRhdGlvbnMiLCJyZXByT2JqIiwiaSIsImoiLCJsZW5ndGgiLCJjb2xzIiwicmVwcmVzZW50YXRpb25Db2xsIiwiayIsImwiLCJhdHRyIiwiYXR0cmlidXRlTGlzdCIsImNvbnRlbnRUeXBlIiwibWltZVR5cGUiLCJpbmRleE9mIiwicHVzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1700\n')},2167:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nvar SnowflakeId_1 = __webpack_require__(9499);\n\nvar ManifestNode = function () {\n  function ManifestNode(node, xml) {\n    this.childCollection = [];\n    this.attributeList = {};\n    this.setCurrentNode(node);\n    this.setChildCollection(node.childNodes);\n    this.buildAttributeList(node, this.attributeList);\n    this.setParentNode(node.parentNode);\n    this.xml = xml;\n    this.id = SnowflakeId_1.SnowflakeId.getUUID();\n  }\n\n  ManifestNode.prototype.setParentNode = function (node) {\n    this.parentNode = node;\n  };\n\n  ManifestNode.prototype.setChildCollection = function (coll) {\n    this.childCollection = coll;\n  };\n\n  ManifestNode.prototype.setCurrentNode = function (node) {\n    this.currentNode = node;\n  };\n\n  ManifestNode.prototype.buildAttributeList = function (node, list) {\n    this.writeAttributesToList(node, list);\n  };\n\n  ManifestNode.prototype.writeAttributesToList = function (node, list) {\n    var attrList = node.attributes;\n\n    for (var attr in attrList) {\n      if (!list[attrList[attr].nodeName]) {\n        list[attrList[attr].nodeName] = attrList[attr].nodeValue;\n      }\n    }\n\n    if (node.parentNode !== null) {\n      this.buildAttributeList(node.parentNode, list);\n    }\n  };\n\n  ManifestNode.prototype.getCurrentNode = function () {\n    return this.currentNode;\n  };\n\n  ManifestNode.prototype.markNodeForDownload = function (value) {\n    var newAtt = this.xml.createAttribute('markForDownload');\n\n    if (!value) {\n      this.currentNode.removeAttribute('markForDownload');\n    } else {\n      newAtt.value = value.toString();\n      this.currentNode.setAttributeNode(newAtt);\n    }\n  };\n\n  ManifestNode.prototype.getAttributeList = function () {\n    return this.attributeList;\n  };\n\n  return ManifestNode;\n}();\n\nexports.ManifestNode = ManifestNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNwRCxPQUFPLEtBQUs1QixhQUFaO0VBQ0QsQ0FGRDs7RUFHQSxPQUFPSixZQUFQO0FBQ0QsQ0FuRHFCLEVBQXRCOztBQW9EQWlDLG9CQUFBLEdBQXVCakMsWUFBdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL21hbmlmZXN0L3BhcnNlci9tYW5pZmVzdC1ub2RlLmpzPzMxYjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBTbm93Zmxha2VJZF8xID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvc25vd2ZsYWtlLWlkXCIpO1xuY29uc3QgTWFuaWZlc3ROb2RlID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTWFuaWZlc3ROb2RlIChub2RlLCB4bWwpIHtcbiAgICB0aGlzLmNoaWxkQ29sbGVjdGlvbiA9IFtdO1xuICAgIHRoaXMuYXR0cmlidXRlTGlzdCA9IHt9O1xuICAgIHRoaXMuc2V0Q3VycmVudE5vZGUobm9kZSk7XG4gICAgdGhpcy5zZXRDaGlsZENvbGxlY3Rpb24obm9kZS5jaGlsZE5vZGVzKTtcbiAgICB0aGlzLmJ1aWxkQXR0cmlidXRlTGlzdChub2RlLCB0aGlzLmF0dHJpYnV0ZUxpc3QpO1xuICAgIHRoaXMuc2V0UGFyZW50Tm9kZShub2RlLnBhcmVudE5vZGUpO1xuICAgIHRoaXMueG1sID0geG1sO1xuICAgIHRoaXMuaWQgPSBTbm93Zmxha2VJZF8xLlNub3dmbGFrZUlkLmdldFVVSUQoKTtcbiAgfVxuXG4gIE1hbmlmZXN0Tm9kZS5wcm90b3R5cGUuc2V0UGFyZW50Tm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdGhpcy5wYXJlbnROb2RlID0gbm9kZTtcbiAgfTtcbiAgTWFuaWZlc3ROb2RlLnByb3RvdHlwZS5zZXRDaGlsZENvbGxlY3Rpb24gPSBmdW5jdGlvbiAoY29sbCkge1xuICAgIHRoaXMuY2hpbGRDb2xsZWN0aW9uID0gY29sbDtcbiAgfTtcbiAgTWFuaWZlc3ROb2RlLnByb3RvdHlwZS5zZXRDdXJyZW50Tm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdGhpcy5jdXJyZW50Tm9kZSA9IG5vZGU7XG4gIH07XG4gIE1hbmlmZXN0Tm9kZS5wcm90b3R5cGUuYnVpbGRBdHRyaWJ1dGVMaXN0ID0gZnVuY3Rpb24gKG5vZGUsIGxpc3QpIHtcbiAgICB0aGlzLndyaXRlQXR0cmlidXRlc1RvTGlzdChub2RlLCBsaXN0KTtcbiAgfTtcbiAgTWFuaWZlc3ROb2RlLnByb3RvdHlwZS53cml0ZUF0dHJpYnV0ZXNUb0xpc3QgPSBmdW5jdGlvbiAobm9kZSwgbGlzdCkge1xuICAgIGNvbnN0IGF0dHJMaXN0ID0gbm9kZS5hdHRyaWJ1dGVzO1xuICAgIGZvciAobGV0IGF0dHIgaW4gYXR0ckxpc3QpIHtcbiAgICAgIGlmICghbGlzdFthdHRyTGlzdFthdHRyXS5ub2RlTmFtZV0pIHtcbiAgICAgICAgbGlzdFthdHRyTGlzdFthdHRyXS5ub2RlTmFtZV0gPSBhdHRyTGlzdFthdHRyXS5ub2RlVmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChub2RlLnBhcmVudE5vZGUgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuYnVpbGRBdHRyaWJ1dGVMaXN0KG5vZGUucGFyZW50Tm9kZSwgbGlzdCk7XG4gICAgfVxuICB9O1xuICBNYW5pZmVzdE5vZGUucHJvdG90eXBlLmdldEN1cnJlbnROb2RlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnROb2RlO1xuICB9O1xuICBNYW5pZmVzdE5vZGUucHJvdG90eXBlLm1hcmtOb2RlRm9yRG93bmxvYWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBjb25zdCBuZXdBdHQgPSB0aGlzLnhtbC5jcmVhdGVBdHRyaWJ1dGUoJ21hcmtGb3JEb3dubG9hZCcpO1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHRoaXMuY3VycmVudE5vZGUucmVtb3ZlQXR0cmlidXRlKCdtYXJrRm9yRG93bmxvYWQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3QXR0LnZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgIHRoaXMuY3VycmVudE5vZGUuc2V0QXR0cmlidXRlTm9kZShuZXdBdHQpO1xuICAgIH1cbiAgfTtcbiAgTWFuaWZlc3ROb2RlLnByb3RvdHlwZS5nZXRBdHRyaWJ1dGVMaXN0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZUxpc3Q7XG4gIH07XG4gIHJldHVybiBNYW5pZmVzdE5vZGU7XG59KCkpO1xuZXhwb3J0cy5NYW5pZmVzdE5vZGUgPSBNYW5pZmVzdE5vZGU7XG4iXSwibmFtZXMiOlsiU25vd2ZsYWtlSWRfMSIsInJlcXVpcmUiLCJNYW5pZmVzdE5vZGUiLCJub2RlIiwieG1sIiwiY2hpbGRDb2xsZWN0aW9uIiwiYXR0cmlidXRlTGlzdCIsInNldEN1cnJlbnROb2RlIiwic2V0Q2hpbGRDb2xsZWN0aW9uIiwiY2hpbGROb2RlcyIsImJ1aWxkQXR0cmlidXRlTGlzdCIsInNldFBhcmVudE5vZGUiLCJwYXJlbnROb2RlIiwiaWQiLCJTbm93Zmxha2VJZCIsImdldFVVSUQiLCJwcm90b3R5cGUiLCJjb2xsIiwiY3VycmVudE5vZGUiLCJsaXN0Iiwid3JpdGVBdHRyaWJ1dGVzVG9MaXN0IiwiYXR0ckxpc3QiLCJhdHRyaWJ1dGVzIiwiYXR0ciIsIm5vZGVOYW1lIiwibm9kZVZhbHVlIiwiZ2V0Q3VycmVudE5vZGUiLCJtYXJrTm9kZUZvckRvd25sb2FkIiwidmFsdWUiLCJuZXdBdHQiLCJjcmVhdGVBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJ0b1N0cmluZyIsInNldEF0dHJpYnV0ZU5vZGUiLCJnZXRBdHRyaWJ1dGVMaXN0IiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2167\n")},9559:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nvar AdaptationSetNode_1 = __webpack_require__(4872);\n\nvar DOMParser = (__webpack_require__(678).DOMParser);\n\nvar ManifestXML = function () {\n  function ManifestXML() {}\n\n  ManifestXML.prototype.parse = function (str, onSuccess, onError) {\n    var parser;\n\n    if (typeof onSuccess === \"function\" && typeof onError === \"function\") {\n      parser = new DOMParser({\n        errorHandler: {\n          warning: function warning() {},\n          error: onError,\n          fatalError: onError\n        }\n      });\n    } else {\n      parser = new DOMParser();\n    }\n\n    this.adaptationSetColl = [];\n    this.xml = parser.parseFromString(str, \"application/xml\");\n    this.parseAdaptations();\n\n    if (typeof onSuccess === \"function\") {\n      onSuccess();\n    }\n  };\n\n  ManifestXML.prototype.getAdaptationSetNodeName = function () {\n    return 'AdaptationSet';\n  };\n\n  ManifestXML.prototype.getRepresentationNodeName = function () {\n    return 'Representation';\n  };\n\n  ManifestXML.prototype.parseAdaptations = function () {\n    var adaptations = this.xml.getElementsByTagName('AdaptationSet');\n\n    for (var i = 0; i < adaptations.length; i++) {\n      var adaptNode = new AdaptationSetNode_1.AdaptationSetNode(adaptations[i], this.xml);\n      this.adaptationSetColl[i] = adaptNode;\n    }\n  };\n\n  ManifestXML.prototype.getVideoAdaptation = function () {\n    return this.getAdaptations('video');\n  };\n\n  ManifestXML.prototype.getAudioAdaptation = function () {\n    return this.getAdaptations('audio');\n  };\n\n  ManifestXML.prototype.getTextAdaptation = function () {\n    return this.getAdaptations('text');\n  };\n\n  ManifestXML.prototype.getManifestXML = function () {\n    return this.xml;\n  };\n\n  ManifestXML.prototype.getAdaptations = function (which) {\n    var adaptations = this.adaptationSetColl.map(function (item) {\n      return item;\n    }).filter(function (item) {\n      if (item.isMimeType(which) || item.isContentType(which)) {\n        return true;\n      }\n    });\n    return adaptations;\n  };\n\n  ManifestXML.cloneXML = function (xml) {\n    var newDocument = xml.implementation.createDocument(xml.namespaceURI, null, null);\n    var newNode = newDocument.importNode(xml.documentElement, true);\n    newDocument.appendChild(newNode);\n    return newDocument;\n  };\n\n  ManifestXML.prototype.removeNode = function () {\n    var self = this;\n    var representationCollection = this.xml.documentElement.getElementsByTagName(this.getRepresentationNodeName());\n    var adaptationCollection = this.xml.documentElement.getElementsByTagName(this.getAdaptationSetNodeName());\n    var repArray = [];\n    var adaptationArray = [];\n\n    for (var i = 0; i < representationCollection.length; i++) {\n      repArray[i] = representationCollection[i];\n    }\n\n    repArray.forEach(function (item) {\n      var markForDownload = item.attributes.getNamedItem(\"markForDownload\") && item.attributes.getNamedItem(\"markForDownload\").value == 'true' ? true : false;\n\n      if (!markForDownload) {\n        item.parentNode.removeChild(item);\n      }\n\n      item.removeAttribute('markForDownload');\n    }, this);\n\n    for (var _i = 0; _i < adaptationCollection.length; _i++) {\n      adaptationArray[_i] = adaptationCollection[_i];\n    }\n\n    adaptationArray.forEach(function (item) {\n      if (!item.getElementsByTagName(self.getRepresentationNodeName()).length) {\n        item.parentNode.removeChild(item);\n      }\n    });\n  };\n\n  return ManifestXML;\n}();\n\nexports.ManifestXML = ManifestXML;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9559\n")},9786:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nvar MediaUrl = function () {\n  function MediaUrl(baseURL, mediaFile, mimeType, url_domain) {\n    if (url_domain === void 0) {\n      url_domain = '';\n    }\n\n    this.baseURL = '';\n\n    if (baseURL.startsWith('http') === false) {\n      this.baseURL = baseURL;\n    }\n\n    this.mediaFile = mediaFile.indexOf('/') !== -1 ? this.truncateMediaFilePath(mediaFile) : mediaFile;\n    this.url_domain = url_domain;\n    this.mimeType = mimeType;\n  }\n\n  MediaUrl.prototype.truncateMediaFilePath = function (mediaFile) {\n    var startIndex = mediaFile.lastIndexOf('/');\n    var front = mediaFile.substring(0, startIndex);\n    var end = mediaFile.substring(startIndex + 1, mediaFile.length);\n    this.baseURL += front;\n    return end;\n  };\n\n  MediaUrl.prototype.getFileAddress = function () {\n    return this.baseURL + this.mediaFile;\n  };\n\n  return MediaUrl;\n}();\n\nexports.MediaUrl = MediaUrl;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTc4Ni5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxRQUFRLEdBQUksWUFBWTtFQUM1QixTQUFTQSxRQUFULENBQW1CQyxPQUFuQixFQUE0QkMsU0FBNUIsRUFBdUNDLFFBQXZDLEVBQWlEQyxVQUFqRCxFQUE2RDtJQUMzRCxJQUFJQSxVQUFVLEtBQUssS0FBSyxDQUF4QixFQUEyQjtNQUN6QkEsVUFBVSxHQUFHLEVBQWI7SUFDRDs7SUFDRCxLQUFLSCxPQUFMLEdBQWUsRUFBZjs7SUFDQSxJQUFJQSxPQUFPLENBQUNJLFVBQVIsQ0FBbUIsTUFBbkIsTUFBK0IsS0FBbkMsRUFBMEM7TUFDeEMsS0FBS0osT0FBTCxHQUFlQSxPQUFmO0lBQ0Q7O0lBQ0QsS0FBS0MsU0FBTCxHQUFrQkEsU0FBUyxDQUFDSSxPQUFWLENBQWtCLEdBQWxCLE1BQTJCLENBQUMsQ0FBN0IsR0FBa0MsS0FBS0MscUJBQUwsQ0FBMkJMLFNBQTNCLENBQWxDLEdBQTBFQSxTQUEzRjtJQUNBLEtBQUtFLFVBQUwsR0FBa0JBLFVBQWxCO0lBQ0EsS0FBS0QsUUFBTCxHQUFnQkEsUUFBaEI7RUFDRDs7RUFFREgsUUFBUSxDQUFDUSxTQUFULENBQW1CRCxxQkFBbkIsR0FBMkMsVUFBVUwsU0FBVixFQUFxQjtJQUM5RCxJQUFNTyxVQUFVLEdBQUdQLFNBQVMsQ0FBQ1EsV0FBVixDQUFzQixHQUF0QixDQUFuQjtJQUNBLElBQU1DLEtBQUssR0FBR1QsU0FBUyxDQUFDVSxTQUFWLENBQW9CLENBQXBCLEVBQXVCSCxVQUF2QixDQUFkO0lBQ0EsSUFBTUksR0FBRyxHQUFHWCxTQUFTLENBQUNVLFNBQVYsQ0FBb0JILFVBQVUsR0FBRyxDQUFqQyxFQUFvQ1AsU0FBUyxDQUFDWSxNQUE5QyxDQUFaO0lBQ0EsS0FBS2IsT0FBTCxJQUFnQlUsS0FBaEI7SUFDQSxPQUFPRSxHQUFQO0VBQ0QsQ0FORDs7RUFPQWIsUUFBUSxDQUFDUSxTQUFULENBQW1CTyxjQUFuQixHQUFvQyxZQUFZO0lBQzlDLE9BQU8sS0FBS2QsT0FBTCxHQUFlLEtBQUtDLFNBQTNCO0VBQ0QsQ0FGRDs7RUFHQSxPQUFPRixRQUFQO0FBQ0QsQ0F6QmlCLEVBQWxCOztBQTBCQWdCLGdCQUFBLEdBQW1CaEIsUUFBbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL21hbmlmZXN0L3BhcnNlci9tZWRpYS11cmwuanM/MTE3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IE1lZGlhVXJsID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTWVkaWFVcmwgKGJhc2VVUkwsIG1lZGlhRmlsZSwgbWltZVR5cGUsIHVybF9kb21haW4pIHtcbiAgICBpZiAodXJsX2RvbWFpbiA9PT0gdm9pZCAwKSB7XG4gICAgICB1cmxfZG9tYWluID0gJyc7XG4gICAgfVxuICAgIHRoaXMuYmFzZVVSTCA9ICcnO1xuICAgIGlmIChiYXNlVVJMLnN0YXJ0c1dpdGgoJ2h0dHAnKSA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuYmFzZVVSTCA9IGJhc2VVUkw7XG4gICAgfVxuICAgIHRoaXMubWVkaWFGaWxlID0gKG1lZGlhRmlsZS5pbmRleE9mKCcvJykgIT09IC0xKSA/IHRoaXMudHJ1bmNhdGVNZWRpYUZpbGVQYXRoKG1lZGlhRmlsZSkgOiBtZWRpYUZpbGU7XG4gICAgdGhpcy51cmxfZG9tYWluID0gdXJsX2RvbWFpbjtcbiAgICB0aGlzLm1pbWVUeXBlID0gbWltZVR5cGU7XG4gIH1cblxuICBNZWRpYVVybC5wcm90b3R5cGUudHJ1bmNhdGVNZWRpYUZpbGVQYXRoID0gZnVuY3Rpb24gKG1lZGlhRmlsZSkge1xuICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBtZWRpYUZpbGUubGFzdEluZGV4T2YoJy8nKTtcbiAgICBjb25zdCBmcm9udCA9IG1lZGlhRmlsZS5zdWJzdHJpbmcoMCwgc3RhcnRJbmRleCk7XG4gICAgY29uc3QgZW5kID0gbWVkaWFGaWxlLnN1YnN0cmluZyhzdGFydEluZGV4ICsgMSwgbWVkaWFGaWxlLmxlbmd0aCk7XG4gICAgdGhpcy5iYXNlVVJMICs9IGZyb250O1xuICAgIHJldHVybiBlbmQ7XG4gIH07XG4gIE1lZGlhVXJsLnByb3RvdHlwZS5nZXRGaWxlQWRkcmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5iYXNlVVJMICsgdGhpcy5tZWRpYUZpbGU7XG4gIH07XG4gIHJldHVybiBNZWRpYVVybDtcbn0oKSk7XG5leHBvcnRzLk1lZGlhVXJsID0gTWVkaWFVcmw7XG4iXSwibmFtZXMiOlsiTWVkaWFVcmwiLCJiYXNlVVJMIiwibWVkaWFGaWxlIiwibWltZVR5cGUiLCJ1cmxfZG9tYWluIiwic3RhcnRzV2l0aCIsImluZGV4T2YiLCJ0cnVuY2F0ZU1lZGlhRmlsZVBhdGgiLCJwcm90b3R5cGUiLCJzdGFydEluZGV4IiwibGFzdEluZGV4T2YiLCJmcm9udCIsInN1YnN0cmluZyIsImVuZCIsImxlbmd0aCIsImdldEZpbGVBZGRyZXNzIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9786\n")},3515:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) {\n      d[p] = b[p];\n    }\n  }\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar MediaUrl_1 = __webpack_require__(9786);\n\nvar SegmentInformation_1 = __webpack_require__(4749);\n\nvar FragmentInformation = function (_super) {\n  __extends(FragmentInformation, _super);\n\n  function FragmentInformation(presentationDuration, bandwidth, baseUrl, representationID, mimeType, segmentTemplate) {\n    _super.call(this, presentationDuration, bandwidth, baseUrl, representationID, mimeType);\n\n    if (segmentTemplate) {\n      this.segmentTemplate = segmentTemplate;\n      this.mediaTemplate = this.segmentTemplate.media;\n      this.mediaTemplate = this.replace$Bandwidth$(this.mediaTemplate, this.bandwidth);\n    }\n\n    if (this.segmentTemplate.media) {\n      this.timelineItemList = this.segmentTemplate.SegmentTimeline;\n    }\n\n    this.createFragmentUrlsFromTimeline(this.timelineItemList);\n  }\n\n  FragmentInformation.prototype.createFragmentUrlsFromTimeline = function (segmentNodes) {\n    for (var i = 0; i < segmentNodes.S.length; i++) {\n      var fragment = this.mediaTemplate;\n      fragment = this.replace$Time$(fragment, segmentNodes.S[i].t);\n      this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, fragment, this.mimeType));\n    }\n  };\n\n  return FragmentInformation;\n}(SegmentInformation_1.SegmentInformation);\n\nexports.FragmentInformation = FragmentInformation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzUxNS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxTQUFTLEdBQUksUUFBUSxLQUFLQSxTQUFkLElBQTRCLFVBQVVDLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtFQUN4RCxLQUFLLElBQUlDLENBQVQsSUFBY0QsQ0FBZCxFQUFpQjtJQUNmLElBQUlBLENBQUMsQ0FBQ0UsY0FBRixDQUFpQkQsQ0FBakIsQ0FBSixFQUF5QjtNQUN2QkYsQ0FBQyxDQUFDRSxDQUFELENBQUQsR0FBT0QsQ0FBQyxDQUFDQyxDQUFELENBQVI7SUFDRDtFQUNGOztFQUNELFNBQVNFLEVBQVQsR0FBZTtJQUNiLEtBQUtDLFdBQUwsR0FBbUJMLENBQW5CO0VBQ0Q7O0VBRURBLENBQUMsQ0FBQ00sU0FBRixHQUFjTCxDQUFDLEtBQUssSUFBTixHQUFhTSxNQUFNLENBQUNDLE1BQVAsQ0FBY1AsQ0FBZCxDQUFiLElBQWlDRyxFQUFFLENBQUNFLFNBQUgsR0FBZUwsQ0FBQyxDQUFDSyxTQUFqQixFQUE0QixJQUFJRixFQUFKLEVBQTdELENBQWQ7QUFDRCxDQVhMOztBQVlBLElBQU1LLFVBQVUsR0FBR0MsbUJBQU8sQ0FBQyxJQUFELENBQTFCOztBQUNBLElBQU1DLG9CQUFvQixHQUFHRCxtQkFBTyxDQUFDLElBQUQsQ0FBcEM7O0FBQ0EsSUFBTUUsbUJBQW1CLEdBQUksVUFBVUMsTUFBVixFQUFrQjtFQUM3Q2QsU0FBUyxDQUFDYSxtQkFBRCxFQUFzQkMsTUFBdEIsQ0FBVDs7RUFDQSxTQUFTRCxtQkFBVCxDQUE4QkUsb0JBQTlCLEVBQW9EQyxTQUFwRCxFQUErREMsT0FBL0QsRUFBd0VDLGdCQUF4RSxFQUEwRkMsUUFBMUYsRUFBb0dDLGVBQXBHLEVBQXFIO0lBQ25ITixNQUFNLENBQUNPLElBQVAsQ0FBWSxJQUFaLEVBQWtCTixvQkFBbEIsRUFBd0NDLFNBQXhDLEVBQW1EQyxPQUFuRCxFQUE0REMsZ0JBQTVELEVBQThFQyxRQUE5RTs7SUFDQSxJQUFJQyxlQUFKLEVBQXFCO01BQ25CLEtBQUtBLGVBQUwsR0FBdUJBLGVBQXZCO01BQ0EsS0FBS0UsYUFBTCxHQUFxQixLQUFLRixlQUFMLENBQXFCRyxLQUExQztNQUNBLEtBQUtELGFBQUwsR0FBcUIsS0FBS0Usa0JBQUwsQ0FBd0IsS0FBS0YsYUFBN0IsRUFBNEMsS0FBS04sU0FBakQsQ0FBckI7SUFDRDs7SUFDRCxJQUFJLEtBQUtJLGVBQUwsQ0FBcUJHLEtBQXpCLEVBQWdDO01BQzlCLEtBQUtFLGdCQUFMLEdBQXdCLEtBQUtMLGVBQUwsQ0FBcUJNLGVBQTdDO0lBQ0Q7O0lBQ0QsS0FBS0MsOEJBQUwsQ0FBb0MsS0FBS0YsZ0JBQXpDO0VBQ0Q7O0VBRURaLG1CQUFtQixDQUFDTixTQUFwQixDQUE4Qm9CLDhCQUE5QixHQUErRCxVQUFVQyxZQUFWLEVBQXdCO0lBQ3JGLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0QsWUFBWSxDQUFDRSxDQUFiLENBQWVDLE1BQW5DLEVBQTJDRixDQUFDLEVBQTVDLEVBQWdEO01BQzlDLElBQUlHLFFBQVEsR0FBRyxLQUFLVixhQUFwQjtNQUNBVSxRQUFRLEdBQUcsS0FBS0MsYUFBTCxDQUFtQkQsUUFBbkIsRUFBNkJKLFlBQVksQ0FBQ0UsQ0FBYixDQUFlRCxDQUFmLEVBQWtCSyxDQUEvQyxDQUFYO01BRUEsS0FBS0MsU0FBTCxDQUFlQyxJQUFmLENBQW9CLElBQUkxQixVQUFVLENBQUMyQixRQUFmLENBQXdCLEtBQUtwQixPQUE3QixFQUFzQ2UsUUFBdEMsRUFBZ0QsS0FBS2IsUUFBckQsQ0FBcEI7SUFDRDtFQUNGLENBUEQ7O0VBUUEsT0FBT04sbUJBQVA7QUFDRCxDQXhCNEIsQ0F3QjNCRCxvQkFBb0IsQ0FBQzBCLGtCQXhCTSxDQUE3Qjs7QUF5QkFDLDJCQUFBLEdBQThCMUIsbUJBQTlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9tYW5pZmVzdC9wYXJzZXIvbXNzL2ZyYWdtZW50LWluZm9ybWF0aW9uLmpzP2I4MTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgIGZvciAobGV0IHAgaW4gYikge1xuICAgICAgICBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkge1xuICAgICAgICAgIGRbcF0gPSBiW3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBfXyAoKSB7XG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IgPSBkO1xuICAgICAgfVxuXG4gICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbmNvbnN0IE1lZGlhVXJsXzEgPSByZXF1aXJlKFwiLi4vbWVkaWEtdXJsXCIpO1xuY29uc3QgU2VnbWVudEluZm9ybWF0aW9uXzEgPSByZXF1aXJlKFwiLi4vc2VnbWVudC1pbmZvcm1hdGlvblwiKTtcbmNvbnN0IEZyYWdtZW50SW5mb3JtYXRpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICBfX2V4dGVuZHMoRnJhZ21lbnRJbmZvcm1hdGlvbiwgX3N1cGVyKTtcbiAgZnVuY3Rpb24gRnJhZ21lbnRJbmZvcm1hdGlvbiAocHJlc2VudGF0aW9uRHVyYXRpb24sIGJhbmR3aWR0aCwgYmFzZVVybCwgcmVwcmVzZW50YXRpb25JRCwgbWltZVR5cGUsIHNlZ21lbnRUZW1wbGF0ZSkge1xuICAgIF9zdXBlci5jYWxsKHRoaXMsIHByZXNlbnRhdGlvbkR1cmF0aW9uLCBiYW5kd2lkdGgsIGJhc2VVcmwsIHJlcHJlc2VudGF0aW9uSUQsIG1pbWVUeXBlKTtcbiAgICBpZiAoc2VnbWVudFRlbXBsYXRlKSB7XG4gICAgICB0aGlzLnNlZ21lbnRUZW1wbGF0ZSA9IHNlZ21lbnRUZW1wbGF0ZTtcbiAgICAgIHRoaXMubWVkaWFUZW1wbGF0ZSA9IHRoaXMuc2VnbWVudFRlbXBsYXRlLm1lZGlhO1xuICAgICAgdGhpcy5tZWRpYVRlbXBsYXRlID0gdGhpcy5yZXBsYWNlJEJhbmR3aWR0aCQodGhpcy5tZWRpYVRlbXBsYXRlLCB0aGlzLmJhbmR3aWR0aCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnNlZ21lbnRUZW1wbGF0ZS5tZWRpYSkge1xuICAgICAgdGhpcy50aW1lbGluZUl0ZW1MaXN0ID0gdGhpcy5zZWdtZW50VGVtcGxhdGUuU2VnbWVudFRpbWVsaW5lO1xuICAgIH1cbiAgICB0aGlzLmNyZWF0ZUZyYWdtZW50VXJsc0Zyb21UaW1lbGluZSh0aGlzLnRpbWVsaW5lSXRlbUxpc3QpO1xuICB9XG5cbiAgRnJhZ21lbnRJbmZvcm1hdGlvbi5wcm90b3R5cGUuY3JlYXRlRnJhZ21lbnRVcmxzRnJvbVRpbWVsaW5lID0gZnVuY3Rpb24gKHNlZ21lbnROb2Rlcykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VnbWVudE5vZGVzLlMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBmcmFnbWVudCA9IHRoaXMubWVkaWFUZW1wbGF0ZTtcbiAgICAgIGZyYWdtZW50ID0gdGhpcy5yZXBsYWNlJFRpbWUkKGZyYWdtZW50LCBzZWdtZW50Tm9kZXMuU1tpXS50KTtcblxuICAgICAgdGhpcy5tZWRpYVVybHMucHVzaChuZXcgTWVkaWFVcmxfMS5NZWRpYVVybCh0aGlzLmJhc2VVcmwsIGZyYWdtZW50LCB0aGlzLm1pbWVUeXBlKSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gRnJhZ21lbnRJbmZvcm1hdGlvbjtcbn0oU2VnbWVudEluZm9ybWF0aW9uXzEuU2VnbWVudEluZm9ybWF0aW9uKSk7XG5leHBvcnRzLkZyYWdtZW50SW5mb3JtYXRpb24gPSBGcmFnbWVudEluZm9ybWF0aW9uOyJdLCJuYW1lcyI6WyJfX2V4dGVuZHMiLCJkIiwiYiIsInAiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJNZWRpYVVybF8xIiwicmVxdWlyZSIsIlNlZ21lbnRJbmZvcm1hdGlvbl8xIiwiRnJhZ21lbnRJbmZvcm1hdGlvbiIsIl9zdXBlciIsInByZXNlbnRhdGlvbkR1cmF0aW9uIiwiYmFuZHdpZHRoIiwiYmFzZVVybCIsInJlcHJlc2VudGF0aW9uSUQiLCJtaW1lVHlwZSIsInNlZ21lbnRUZW1wbGF0ZSIsImNhbGwiLCJtZWRpYVRlbXBsYXRlIiwibWVkaWEiLCJyZXBsYWNlJEJhbmR3aWR0aCQiLCJ0aW1lbGluZUl0ZW1MaXN0IiwiU2VnbWVudFRpbWVsaW5lIiwiY3JlYXRlRnJhZ21lbnRVcmxzRnJvbVRpbWVsaW5lIiwic2VnbWVudE5vZGVzIiwiaSIsIlMiLCJsZW5ndGgiLCJmcmFnbWVudCIsInJlcGxhY2UkVGltZSQiLCJ0IiwibWVkaWFVcmxzIiwicHVzaCIsIk1lZGlhVXJsIiwiU2VnbWVudEluZm9ybWF0aW9uIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3515\n")},4624:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nvar ManifestXML_1 = __webpack_require__(9559);\n\nvar StreamIndexNode_1 = __webpack_require__(3605);\n\nManifestXML_1.ManifestXML.prototype.getManifestType = function (xml) {\n  return xml.getElementsByTagName('SmoothStreamingMedia').length !== 0 ? 'MSS' : 'DASH';\n};\n\nManifestXML_1.ManifestXML.prototype.getAdaptationSetNodeName = function () {\n  return this.manifestType === 'MSS' ? 'StreamIndex' : 'AdaptationSet';\n};\n\nManifestXML_1.ManifestXML.prototype.getRepresentationNodeName = function () {\n  return this.manifestType === 'MSS' ? 'QualityLevel' : 'Representation';\n};\n\nManifestXML_1.ManifestXML.prototype.parseStreams = function () {\n  var streams = this.xml.getElementsByTagName('StreamIndex');\n\n  for (var i = 0; i < streams.length; i++) {\n    var streamNode = new StreamIndexNode_1.StreamIndexNode(streams[i], this.xml);\n    this.adaptationSetColl[i] = streamNode;\n  }\n};\n\nManifestXML_1.ManifestXML.prototype._parseAdaptations = ManifestXML_1.ManifestXML.prototype.parseAdaptations;\n\nManifestXML_1.ManifestXML.prototype.parseAdaptations = function () {\n  // Manifest type detection\n  this.manifestType = this.getManifestType(this.xml);\n\n  if (this.manifestType === 'MSS') {\n    return this.parseStreams();\n  } else {\n    return this._parseAdaptations();\n  }\n};\n\nexports.ManifestXML = ManifestXML_1.ManifestXML;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDYyNC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxhQUFhLEdBQUdDLG1CQUFPLENBQUMsSUFBRCxDQUE3Qjs7QUFDQSxJQUFNQyxpQkFBaUIsR0FBR0QsbUJBQU8sQ0FBQyxJQUFELENBQWpDOztBQUdBRCxhQUFhLENBQUNHLFdBQWQsQ0FBMEJDLFNBQTFCLENBQW9DQyxlQUFwQyxHQUFzRCxVQUFVQyxHQUFWLEVBQWU7RUFDbkUsT0FBT0EsR0FBRyxDQUFDQyxvQkFBSixDQUF5QixzQkFBekIsRUFBaURDLE1BQWpELEtBQTRELENBQTVELEdBQWdFLEtBQWhFLEdBQXdFLE1BQS9FO0FBQ0QsQ0FGRDs7QUFJQVIsYUFBYSxDQUFDRyxXQUFkLENBQTBCQyxTQUExQixDQUFvQ0ssd0JBQXBDLEdBQStELFlBQVk7RUFDekUsT0FBUSxLQUFLQyxZQUFMLEtBQXNCLEtBQXZCLEdBQWdDLGFBQWhDLEdBQWdELGVBQXZEO0FBQ0QsQ0FGRDs7QUFHQVYsYUFBYSxDQUFDRyxXQUFkLENBQTBCQyxTQUExQixDQUFvQ08seUJBQXBDLEdBQWdFLFlBQVk7RUFDMUUsT0FBUSxLQUFLRCxZQUFMLEtBQXNCLEtBQXZCLEdBQWdDLGNBQWhDLEdBQWlELGdCQUF4RDtBQUNELENBRkQ7O0FBR0FWLGFBQWEsQ0FBQ0csV0FBZCxDQUEwQkMsU0FBMUIsQ0FBb0NRLFlBQXBDLEdBQW1ELFlBQVk7RUFDN0QsSUFBTUMsT0FBTyxHQUFHLEtBQUtQLEdBQUwsQ0FBU0Msb0JBQVQsQ0FBOEIsYUFBOUIsQ0FBaEI7O0VBQ0EsS0FBSyxJQUFJTyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRCxPQUFPLENBQUNMLE1BQTVCLEVBQW9DTSxDQUFDLEVBQXJDLEVBQXlDO0lBQ3ZDLElBQU1DLFVBQVUsR0FBRyxJQUFJYixpQkFBaUIsQ0FBQ2MsZUFBdEIsQ0FBc0NILE9BQU8sQ0FBQ0MsQ0FBRCxDQUE3QyxFQUFrRCxLQUFLUixHQUF2RCxDQUFuQjtJQUNBLEtBQUtXLGlCQUFMLENBQXVCSCxDQUF2QixJQUE0QkMsVUFBNUI7RUFDRDtBQUNGLENBTkQ7O0FBT0FmLGFBQWEsQ0FBQ0csV0FBZCxDQUEwQkMsU0FBMUIsQ0FBb0NjLGlCQUFwQyxHQUF3RGxCLGFBQWEsQ0FBQ0csV0FBZCxDQUEwQkMsU0FBMUIsQ0FBb0NlLGdCQUE1Rjs7QUFDQW5CLGFBQWEsQ0FBQ0csV0FBZCxDQUEwQkMsU0FBMUIsQ0FBb0NlLGdCQUFwQyxHQUF1RCxZQUFZO0VBQ2pFO0VBQ0EsS0FBS1QsWUFBTCxHQUFvQixLQUFLTCxlQUFMLENBQXFCLEtBQUtDLEdBQTFCLENBQXBCOztFQUVBLElBQUksS0FBS0ksWUFBTCxLQUFzQixLQUExQixFQUFpQztJQUMvQixPQUFPLEtBQUtFLFlBQUwsRUFBUDtFQUNELENBRkQsTUFFTztJQUNMLE9BQU8sS0FBS00saUJBQUwsRUFBUDtFQUNEO0FBQ0YsQ0FURDs7QUFXQUUsbUJBQUEsR0FBc0JwQixhQUFhLENBQUNHLFdBQXBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9tYW5pZmVzdC9wYXJzZXIvbXNzL21hbmlmZXN0LXhtbC5qcz82NWQwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgTWFuaWZlc3RYTUxfMSA9IHJlcXVpcmUoJy4uL21hbmlmZXN0LXhtbCcpO1xuY29uc3QgU3RyZWFtSW5kZXhOb2RlXzEgPSByZXF1aXJlKCcuL3N0cmVhbUluZGV4LW5vZGUnKTtcblxuXG5NYW5pZmVzdFhNTF8xLk1hbmlmZXN0WE1MLnByb3RvdHlwZS5nZXRNYW5pZmVzdFR5cGUgPSBmdW5jdGlvbiAoeG1sKSB7XG4gIHJldHVybiB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ1Ntb290aFN0cmVhbWluZ01lZGlhJykubGVuZ3RoICE9PSAwID8gJ01TUycgOiAnREFTSCc7XG59O1xuXG5NYW5pZmVzdFhNTF8xLk1hbmlmZXN0WE1MLnByb3RvdHlwZS5nZXRBZGFwdGF0aW9uU2V0Tm9kZU5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAodGhpcy5tYW5pZmVzdFR5cGUgPT09ICdNU1MnKSA/ICdTdHJlYW1JbmRleCcgOiAnQWRhcHRhdGlvblNldCc7XG59O1xuTWFuaWZlc3RYTUxfMS5NYW5pZmVzdFhNTC5wcm90b3R5cGUuZ2V0UmVwcmVzZW50YXRpb25Ob2RlTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICh0aGlzLm1hbmlmZXN0VHlwZSA9PT0gJ01TUycpID8gJ1F1YWxpdHlMZXZlbCcgOiAnUmVwcmVzZW50YXRpb24nO1xufTtcbk1hbmlmZXN0WE1MXzEuTWFuaWZlc3RYTUwucHJvdG90eXBlLnBhcnNlU3RyZWFtcyA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qgc3RyZWFtcyA9IHRoaXMueG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdTdHJlYW1JbmRleCcpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0cmVhbXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBzdHJlYW1Ob2RlID0gbmV3IFN0cmVhbUluZGV4Tm9kZV8xLlN0cmVhbUluZGV4Tm9kZShzdHJlYW1zW2ldLCB0aGlzLnhtbCk7XG4gICAgdGhpcy5hZGFwdGF0aW9uU2V0Q29sbFtpXSA9IHN0cmVhbU5vZGU7XG4gIH1cbn07XG5NYW5pZmVzdFhNTF8xLk1hbmlmZXN0WE1MLnByb3RvdHlwZS5fcGFyc2VBZGFwdGF0aW9ucyA9IE1hbmlmZXN0WE1MXzEuTWFuaWZlc3RYTUwucHJvdG90eXBlLnBhcnNlQWRhcHRhdGlvbnM7XG5NYW5pZmVzdFhNTF8xLk1hbmlmZXN0WE1MLnByb3RvdHlwZS5wYXJzZUFkYXB0YXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAvLyBNYW5pZmVzdCB0eXBlIGRldGVjdGlvblxuICB0aGlzLm1hbmlmZXN0VHlwZSA9IHRoaXMuZ2V0TWFuaWZlc3RUeXBlKHRoaXMueG1sKTtcblxuICBpZiAodGhpcy5tYW5pZmVzdFR5cGUgPT09ICdNU1MnKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyc2VTdHJlYW1zKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRoaXMuX3BhcnNlQWRhcHRhdGlvbnMoKTtcbiAgfVxufTtcblxuZXhwb3J0cy5NYW5pZmVzdFhNTCA9IE1hbmlmZXN0WE1MXzEuTWFuaWZlc3RYTUw7XG4iXSwibmFtZXMiOlsiTWFuaWZlc3RYTUxfMSIsInJlcXVpcmUiLCJTdHJlYW1JbmRleE5vZGVfMSIsIk1hbmlmZXN0WE1MIiwicHJvdG90eXBlIiwiZ2V0TWFuaWZlc3RUeXBlIiwieG1sIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJsZW5ndGgiLCJnZXRBZGFwdGF0aW9uU2V0Tm9kZU5hbWUiLCJtYW5pZmVzdFR5cGUiLCJnZXRSZXByZXNlbnRhdGlvbk5vZGVOYW1lIiwicGFyc2VTdHJlYW1zIiwic3RyZWFtcyIsImkiLCJzdHJlYW1Ob2RlIiwiU3RyZWFtSW5kZXhOb2RlIiwiYWRhcHRhdGlvblNldENvbGwiLCJfcGFyc2VBZGFwdGF0aW9ucyIsInBhcnNlQWRhcHRhdGlvbnMiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4624\n")},5968:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) {\n      d[p] = b[p];\n    }\n  }\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar ManifestNode_1 = __webpack_require__(2167);\n\nvar IsoDurationParser_1 = __webpack_require__(6052);\n\nvar FragmentInformation_1 = __webpack_require__(3515);\n\nvar TIME_SCALE_100_NANOSECOND_UNIT = 10000000.0;\n\nvar QualityLevelNode = function (_super) {\n  __extends(QualityLevelNode, _super);\n\n  function QualityLevelNode(node, xml) {\n    _super.call(this, node, xml);\n  }\n\n  QualityLevelNode.prototype.createSegmentInformation = function () {\n    var presentationDuration = IsoDurationParser_1.IsoDurationParser.getDuration(parseFloat(this.attributeList['Duration'] / TIME_SCALE_100_NANOSECOND_UNIT));\n    var representationID = this.attributeList['id'];\n    this.bandwidth = this.attributeList['bandwidth'] ? parseInt(this.attributeList['bandwidth']) : -1;\n    this.segmentTemplate = this.mapMssSegmentTemplate();\n    this.segmentInformation = new FragmentInformation_1.FragmentInformation(presentationDuration, this.bandwidth, this.baseURL, representationID, this.attributeList['mimeType'], this.segmentTemplate);\n  };\n\n  QualityLevelNode.prototype.mapMssSegmentTemplate = function () {\n    var segmentTemplate = {};\n    var mediaUrl;\n    mediaUrl = this.attributeList['Url'].replace('{bitrate}', '$Bandwidth$');\n    mediaUrl = mediaUrl.replace('{start time}', '$Time$');\n    segmentTemplate.media = mediaUrl;\n    segmentTemplate.timescale = TIME_SCALE_100_NANOSECOND_UNIT;\n    segmentTemplate.SegmentTimeline = this.mapMssSegmentTimeline();\n    return segmentTemplate;\n  };\n\n  QualityLevelNode.prototype.mapMssSegmentTimeline = function () {\n    var segmentTimeline = {};\n    var chunks = this.currentNode.parentNode.getElementsByTagName('c');\n    var segments = [];\n    var segment;\n    var prevSegment;\n    var tManifest;\n    var i;\n    var duration = 0;\n\n    for (i = 0; i < chunks.length; i++) {\n      segment = {}; // Get time 't' attribute value\n\n      tManifest = chunks[i].getAttribute('t'); // => segment.tManifest = original timestamp value as a string (for constructing the fragment request url, see DashHandler)\n      // => segment.t = number value of timestamp (maybe rounded value, but only for 0.1 microsecond)\n\n      segment.tManifest = parseFloat(tManifest);\n      segment.t = parseFloat(tManifest); // Get duration 'd' attribute value\n\n      segment.d = parseFloat(chunks[i].getAttribute('d')); // If 't' not defined for first segment then t=0\n\n      if (i === 0 && !segment.t) {\n        segment.t = 0;\n      }\n\n      if (i > 0) {\n        prevSegment = segments[segments.length - 1]; // Update previous segment duration if not defined\n\n        if (!prevSegment.d) {\n          if (prevSegment.tManifest) {\n            prevSegment.d = parseFloat(tManifest) - parseFloat(prevSegment.tManifest);\n          } else {\n            prevSegment.d = segment.t - prevSegment.t;\n          }\n        } // Set segment absolute timestamp if not set in manifest\n\n\n        if (!segment.t) {\n          if (prevSegment.tManifest) {\n            segment.tManifest = parseFloat(prevSegment.tManifest) + prevSegment.d;\n            segment.t = parseFloat(segment.tManifest);\n          } else {\n            segment.t = prevSegment.t + prevSegment.d;\n          }\n        }\n      }\n\n      duration += segment.d; // Create new segment\n\n      segments.push(segment);\n    }\n\n    segmentTimeline.S = segments;\n    segmentTimeline.S_asArray = segments;\n    segmentTimeline.duration = duration / TIME_SCALE_100_NANOSECOND_UNIT;\n    return segmentTimeline;\n  };\n\n  QualityLevelNode.prototype.writeAttributesToList = function (node, list) {\n    var attrList = node.attributes;\n    var mimeTypeMap = {\n      'video': 'video/mp4',\n      'audio': 'audio/mp4',\n      'text': 'application/mp4'\n    };\n\n    for (var i = 0; i < node.childNodes.length; i++) {\n      if (!this.baseURL && node.childNodes[i].nodeName == 'BaseURL') {\n        this.baseURL = node.childNodes[i].firstChild.nodeValue;\n      }\n\n      if (!this.segmentBase && node.childNodes[i].nodeName == 'SegmentBase') {\n        this.segmentBase = node.childNodes[i];\n      }\n\n      if (!this.segmentTemplate && node.childNodes[i].nodeName == 'SegmentTemplate') {\n        this.segmentTemplate = node.childNodes[i];\n      }\n\n      if (!this.segmentList && node.childNodes[i].nodeName == 'SegmentList') {\n        this.segmentList = node.childNodes[i];\n      }\n    }\n\n    for (var attr in attrList) {\n      if (!list[attrList[attr].nodeName]) {\n        list[attrList[attr].nodeName] = attrList[attr].nodeValue;\n      }\n    }\n\n    if (list['Type'] !== undefined) {\n      list['contentType'] = list['Type'];\n      list['mimeType'] = mimeTypeMap[list['contentType']];\n      list['bandwidth'] = list['Bitrate'];\n      list['width'] = list['MaxWidth'];\n      list['height'] = list['MaxHeight'];\n      list.lang = list['Language'] || 'und';\n      var indexId = list['Name'] ? list['Name'] : list['Type']; // build id\n\n      list['id'] = indexId + '_' + list['Index'];\n\n      if (list['Type'] === 'audio') {\n        list.audioSamplingRate = list['SamplingRate'];\n      }\n    }\n\n    if (list['Duration'] !== undefined) {\n      list['durationInS'] = this.attributeList['Duration'] / TIME_SCALE_100_NANOSECOND_UNIT;\n    }\n\n    if (node.parentNode !== null) {\n      this.buildAttributeList(node.parentNode, list);\n    } else {\n      if (!this.segmentInformation) {\n        this.createSegmentInformation();\n      }\n    }\n\n    _super.prototype.writeAttributesToList.call(this, node, list);\n  };\n\n  QualityLevelNode.prototype.getMimeType = function () {\n    return this.attributeList['mimeType'];\n  };\n\n  QualityLevelNode.prototype.hasMimeType = function () {\n    return this.attributeList['mimeType'] ? true : false;\n  };\n\n  QualityLevelNode.prototype.getContentType = function () {\n    return this.attributeList['contentType'];\n  };\n\n  QualityLevelNode.prototype.hasContentType = function () {\n    return this.attributeList['contentType'] ? true : false;\n  };\n\n  return QualityLevelNode;\n}(ManifestNode_1.ManifestNode);\n\nexports.QualityLevelNode = QualityLevelNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5968\n")},3605:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\nvar BASE64 = __webpack_require__(7769);\n\nvar pssh = __webpack_require__(2310);\n\nvar DOMParser = (__webpack_require__(678).DOMParser);\n\nvar WIDEVINE_SCHEME_ID_URI = 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\nvar PLAYREADY_SCHEME_ID_URI = 'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95';\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) {\n      d[p] = b[p];\n    }\n  }\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar AdaptationSetNode_1 = __webpack_require__(4872);\n\nvar QualityLevelNode_1 = __webpack_require__(5968);\n\nvar StreamIndexNode = function (_super) {\n  __extends(StreamIndexNode, _super);\n\n  function StreamIndexNode(node, xml) {\n    _super.call(this, node, xml);\n  }\n\n  StreamIndexNode.prototype.parse = function () {\n    var qualityLevels = this.currentNode.getElementsByTagName('QualityLevel');\n\n    for (var i = 0; i < qualityLevels.length; i++) {\n      var qualityLevelNode = new QualityLevelNode_1.QualityLevelNode(qualityLevels[i], this.xml);\n      this.representationColl[i] = qualityLevelNode;\n\n      if (this.representationColl[0].hasMimeType()) {\n        this.attributeList['mimeType'] = this.representationColl[0].getMimeType();\n      }\n\n      if (this.representationColl[0].hasContentType()) {\n        this.attributeList['mimeType'] = this.representationColl[0].getContentType();\n      }\n    }\n\n    var protection = this.xml.getElementsByTagName('Protection')[0];\n\n    if (protection !== undefined) {\n      var protectionHeader = protection.getElementsByTagName('ProtectionHeader')[0]; // Some packagers put newlines into the ProtectionHeader base64 string, which is not good\n      // because this cannot be correctly parsed. Let's just filter out any newlines found in there.\n\n      var psshPR = protectionHeader.firstChild.data.replace(/\\n|\\r/g, ''); // Get KID (in CENC format) from protection header\n\n      var KID = this.getKIDFromProtectionHeader(protectionHeader); // Create ContentProtection for PlayReady\n\n      var cpPR = {\n        schemeIdUri: PLAYREADY_SCHEME_ID_URI,\n        cencPSSH: psshPR\n      };\n      this.contentProtections.push(cpPR); // Create ContentProtection for Widevine (as a CENC protection)\n\n      var psshWV = pssh.createWidevinePssh(KID);\n      var cpWV = {\n        schemeIdUri: WIDEVINE_SCHEME_ID_URI,\n        cencPSSH: psshWV\n      };\n      this.contentProtections.push(cpWV);\n    }\n  };\n\n  StreamIndexNode.prototype.getKIDFromProtectionHeader = function (protectionHeader) {\n    var prHeader, wrmHeader, xmlReader, KID; // Get PlayReady header as byte array (base64 decoded)\n\n    prHeader = BASE64.toByteArray(protectionHeader.firstChild.data); // Get Right Management header (WRMHEADER) from PlayReady header\n\n    wrmHeader = this.getWRMHeaderFromPRHeader(prHeader); // Convert from multi-byte to unicode\n\n    wrmHeader = new Uint16Array(wrmHeader.buffer); // Convert to string\n\n    wrmHeader = String.fromCharCode.apply(null, wrmHeader); // Parse <WRMHeader> to get KID field value\n\n    xmlReader = new DOMParser().parseFromString(wrmHeader, 'application/xml');\n    KID = xmlReader.getElementsByTagName('KID')[0].textContent; // Get KID (base64 decoded) as byte array\n\n    KID = BASE64.toByteArray(KID); // Convert UUID from little-endian to big-endian\n\n    this.convertUuidEndianness(KID);\n    return KID;\n  };\n\n  StreamIndexNode.prototype.convertUuidEndianness = function (uuid) {\n    this.swapBytes(uuid, 0, 3);\n    this.swapBytes(uuid, 1, 2);\n    this.swapBytes(uuid, 4, 5);\n    this.swapBytes(uuid, 6, 7);\n  };\n\n  StreamIndexNode.prototype.swapBytes = function (bytes, pos1, pos2) {\n    var temp = bytes[pos1];\n    bytes[pos1] = bytes[pos2];\n    bytes[pos2] = temp;\n  };\n\n  StreamIndexNode.prototype.getWRMHeaderFromPRHeader = function getWRMHeaderFromPRHeader(prHeader) {\n    var recordType, recordLength, recordValue;\n    var i = 0; // Parse PlayReady header\n    // Length - 32 bits (LE format)\n    // var length = (prHeader[i + 3] << 24) + (prHeader[i + 2] << 16) + (prHeader[i + 1] << 8) + prHeader[i];\n\n    i += 4; // Record count - 16 bits (LE format)\n    // var recordCount = (prHeader[i + 1] << 8) + prHeader[i];\n\n    i += 2; // Parse records\n\n    while (i < prHeader.length) {\n      // Record type - 16 bits (LE format)\n      recordType = prHeader[i + 1] * 256 + prHeader[i];\n      i += 2; // Check if Rights Management header (record type = 0x01)\n\n      if (recordType === 0x01) {\n        // Record length - 16 bits (LE format)\n        recordLength = prHeader[i + 1] * 256 + prHeader[i];\n        i += 2; // Record value => contains <WRMHEADER>\n\n        recordValue = new Uint8Array(recordLength);\n        recordValue.set(prHeader.subarray(i, i + recordLength));\n        return recordValue;\n      }\n    }\n\n    return null;\n  };\n\n  return StreamIndexNode;\n}(AdaptationSetNode_1.AdaptationSetNode);\n\nexports.StreamIndexNode = StreamIndexNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3605\n")},2310:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar BASE64 = __webpack_require__(7769);\n\nfunction createWidevinePssh(KID) {\n  // Create Widevine CENC header (Protocol Buffer) with KID value\n  var wvCencHeader = new Uint8Array(2 + KID.length);\n  wvCencHeader[0] = 0x12;\n  wvCencHeader[1] = 0x10;\n  wvCencHeader.set(KID, 2); // Create a pssh box\n\n  var length = 12\n  /* box length, type, version and flags */\n  + 16\n  /* SystemID */\n  + 4\n  /* data length */\n  + wvCencHeader.length,\n      pssh = new Uint8Array(length),\n      i = 0; // Set box length value (4 bytes)\n\n  pssh[i++] = 0;\n  pssh[i++] = 0;\n  pssh[i++] = 0;\n  pssh[i++] = length; // Set type ('pssh'), version (0) and flags (0)\n\n  pssh.set([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00], i);\n  i += 8; // Set SystemID ('edef8ba9-79d6-4ace-a3c8-27dcd51d21ed')\n\n  pssh.set([0xed, 0xef, 0x8b, 0xa9, 0x79, 0xd6, 0x4a, 0xce, 0xa3, 0xc8, 0x27, 0xdc, 0xd5, 0x1d, 0x21, 0xed], i);\n  i += 16; // Set data length value\n\n  pssh[i++] = 0;\n  pssh[i++] = 0;\n  pssh[i++] = 0;\n  pssh[i++] = wvCencHeader.length; // Copy Widevine CENC header\n\n  pssh.set(wvCencHeader, i); // Convert to BASE64 string\n\n  pssh = BASE64.fromByteArray(pssh);\n  return pssh;\n}\n\nmodule.exports = {\n  createWidevinePssh: createWidevinePssh\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMxMC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsSUFBRCxDQUF0Qjs7QUFFQSxTQUFTQyxrQkFBVCxDQUE2QkMsR0FBN0IsRUFBa0M7RUFDaEM7RUFDQSxJQUFJQyxZQUFZLEdBQUcsSUFBSUMsVUFBSixDQUFlLElBQUlGLEdBQUcsQ0FBQ0csTUFBdkIsQ0FBbkI7RUFDQUYsWUFBWSxDQUFDLENBQUQsQ0FBWixHQUFrQixJQUFsQjtFQUNBQSxZQUFZLENBQUMsQ0FBRCxDQUFaLEdBQWtCLElBQWxCO0VBQ0FBLFlBQVksQ0FBQ0csR0FBYixDQUFpQkosR0FBakIsRUFBc0IsQ0FBdEIsRUFMZ0MsQ0FPaEM7O0VBQ0EsSUFBSUcsTUFBTSxHQUFHO0VBQUc7RUFBSCxFQUErQztFQUFHO0VBQWxELEVBQW1FO0VBQUU7RUFBckUsRUFBeUZGLFlBQVksQ0FBQ0UsTUFBbkg7RUFBQSxJQUNJRSxJQUFJLEdBQUcsSUFBSUgsVUFBSixDQUFlQyxNQUFmLENBRFg7RUFBQSxJQUVJRyxDQUFDLEdBQUcsQ0FGUixDQVJnQyxDQVloQzs7RUFDQUQsSUFBSSxDQUFDQyxDQUFDLEVBQUYsQ0FBSixHQUFZLENBQVo7RUFDQUQsSUFBSSxDQUFDQyxDQUFDLEVBQUYsQ0FBSixHQUFZLENBQVo7RUFDQUQsSUFBSSxDQUFDQyxDQUFDLEVBQUYsQ0FBSixHQUFZLENBQVo7RUFDQUQsSUFBSSxDQUFDQyxDQUFDLEVBQUYsQ0FBSixHQUFZSCxNQUFaLENBaEJnQyxDQWtCaEM7O0VBQ0FFLElBQUksQ0FBQ0QsR0FBTCxDQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxJQUFiLEVBQW1CLElBQW5CLEVBQXlCLElBQXpCLEVBQStCLElBQS9CLEVBQXFDLElBQXJDLEVBQTJDLElBQTNDLENBQVQsRUFBMkRFLENBQTNEO0VBQ0FBLENBQUMsSUFBSSxDQUFMLENBcEJnQyxDQXNCaEM7O0VBQ0FELElBQUksQ0FBQ0QsR0FBTCxDQUFTLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxJQUFiLEVBQW1CLElBQW5CLEVBQTBCLElBQTFCLEVBQWdDLElBQWhDLEVBQXNDLElBQXRDLEVBQTRDLElBQTVDLEVBQWtELElBQWxELEVBQXdELElBQXhELEVBQThELElBQTlELEVBQW9FLElBQXBFLEVBQTBFLElBQTFFLEVBQWdGLElBQWhGLEVBQXNGLElBQXRGLEVBQTRGLElBQTVGLENBQVQsRUFBNEdFLENBQTVHO0VBQ0FBLENBQUMsSUFBSSxFQUFMLENBeEJnQyxDQTBCaEM7O0VBQ0FELElBQUksQ0FBQ0MsQ0FBQyxFQUFGLENBQUosR0FBWSxDQUFaO0VBQ0FELElBQUksQ0FBQ0MsQ0FBQyxFQUFGLENBQUosR0FBWSxDQUFaO0VBQ0FELElBQUksQ0FBQ0MsQ0FBQyxFQUFGLENBQUosR0FBWSxDQUFaO0VBQ0FELElBQUksQ0FBQ0MsQ0FBQyxFQUFGLENBQUosR0FBWUwsWUFBWSxDQUFDRSxNQUF6QixDQTlCZ0MsQ0FnQ2hDOztFQUNBRSxJQUFJLENBQUNELEdBQUwsQ0FBU0gsWUFBVCxFQUF1QkssQ0FBdkIsRUFqQ2dDLENBbUNoQzs7RUFDQUQsSUFBSSxHQUFHUixNQUFNLENBQUNVLGFBQVAsQ0FBcUJGLElBQXJCLENBQVA7RUFDQSxPQUFPQSxJQUFQO0FBQ0Q7O0FBRURHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtFQUNmVixrQkFBa0IsRUFBRUE7QUFETCxDQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvbWFuaWZlc3QvcGFyc2VyL3Bzc2guanM/ZTQ2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IEJBU0U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpO1xuXG5mdW5jdGlvbiBjcmVhdGVXaWRldmluZVBzc2ggKEtJRCkge1xuICAvLyBDcmVhdGUgV2lkZXZpbmUgQ0VOQyBoZWFkZXIgKFByb3RvY29sIEJ1ZmZlcikgd2l0aCBLSUQgdmFsdWVcbiAgdmFyIHd2Q2VuY0hlYWRlciA9IG5ldyBVaW50OEFycmF5KDIgKyBLSUQubGVuZ3RoKTtcbiAgd3ZDZW5jSGVhZGVyWzBdID0gMHgxMjtcbiAgd3ZDZW5jSGVhZGVyWzFdID0gMHgxMDtcbiAgd3ZDZW5jSGVhZGVyLnNldChLSUQsIDIpO1xuXG4gIC8vIENyZWF0ZSBhIHBzc2ggYm94XG4gIHZhciBsZW5ndGggPSAxMiAvKiBib3ggbGVuZ3RoLCB0eXBlLCB2ZXJzaW9uIGFuZCBmbGFncyAqLyArIDE2IC8qIFN5c3RlbUlEICovICsgNCAvKiBkYXRhIGxlbmd0aCAqLyArIHd2Q2VuY0hlYWRlci5sZW5ndGgsXG4gICAgICBwc3NoID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKSxcbiAgICAgIGkgPSAwO1xuXG4gIC8vIFNldCBib3ggbGVuZ3RoIHZhbHVlICg0IGJ5dGVzKVxuICBwc3NoW2krK10gPSAwO1xuICBwc3NoW2krK10gPSAwO1xuICBwc3NoW2krK10gPSAwO1xuICBwc3NoW2krK10gPSBsZW5ndGg7XG5cbiAgLy8gU2V0IHR5cGUgKCdwc3NoJyksIHZlcnNpb24gKDApIGFuZCBmbGFncyAoMClcbiAgcHNzaC5zZXQoWzB4NzAsIDB4NzMsIDB4NzMsIDB4NjgsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdLCBpKTtcbiAgaSArPSA4O1xuXG4gIC8vIFNldCBTeXN0ZW1JRCAoJ2VkZWY4YmE5LTc5ZDYtNGFjZS1hM2M4LTI3ZGNkNTFkMjFlZCcpXG4gIHBzc2guc2V0KFsweGVkLCAweGVmLCAweDhiLCAweGE5LCAgMHg3OSwgMHhkNiwgMHg0YSwgMHhjZSwgMHhhMywgMHhjOCwgMHgyNywgMHhkYywgMHhkNSwgMHgxZCwgMHgyMSwgMHhlZF0sIGkpO1xuICBpICs9IDE2O1xuXG4gIC8vIFNldCBkYXRhIGxlbmd0aCB2YWx1ZVxuICBwc3NoW2krK10gPSAwO1xuICBwc3NoW2krK10gPSAwO1xuICBwc3NoW2krK10gPSAwO1xuICBwc3NoW2krK10gPSB3dkNlbmNIZWFkZXIubGVuZ3RoO1xuXG4gIC8vIENvcHkgV2lkZXZpbmUgQ0VOQyBoZWFkZXJcbiAgcHNzaC5zZXQod3ZDZW5jSGVhZGVyLCBpKTtcblxuICAvLyBDb252ZXJ0IHRvIEJBU0U2NCBzdHJpbmdcbiAgcHNzaCA9IEJBU0U2NC5mcm9tQnl0ZUFycmF5KHBzc2gpO1xuICByZXR1cm4gcHNzaDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZVdpZGV2aW5lUHNzaDogY3JlYXRlV2lkZXZpbmVQc3NoXG59XG4iXSwibmFtZXMiOlsiQkFTRTY0IiwicmVxdWlyZSIsImNyZWF0ZVdpZGV2aW5lUHNzaCIsIktJRCIsInd2Q2VuY0hlYWRlciIsIlVpbnQ4QXJyYXkiLCJsZW5ndGgiLCJzZXQiLCJwc3NoIiwiaSIsImZyb21CeXRlQXJyYXkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2310\n")},3188:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) {\n      d[p] = b[p];\n    }\n  }\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar ManifestNode_1 = __webpack_require__(2167);\n\nvar SegmentInformation_1 = __webpack_require__(4749);\n\nvar IsoDurationParser_1 = __webpack_require__(6052);\n\nvar RepresentationNode = function (_super) {\n  __extends(RepresentationNode, _super);\n\n  function RepresentationNode(node, xml) {\n    _super.call(this, node, xml);\n\n    this.markNodeForDownload(false);\n  }\n\n  RepresentationNode.prototype.createSegmentInformation = function () {\n    var presentationDuration = IsoDurationParser_1.IsoDurationParser.getDuration(this.attributeList['mediaPresentationDuration']);\n    var segmentTimeline;\n    var timelineItemList;\n    var segmentUrlList;\n    var representationID = this.attributeList['id'];\n\n    if (this.segmentTemplate && this.segmentTemplate.hasChildNodes()) {\n      for (var i = 0; i < this.segmentTemplate.childNodes.length; i++) {\n        if (this.segmentTemplate.childNodes[i].nodeName == \"SegmentTimeline\") {\n          segmentTimeline = this.segmentTemplate.childNodes[i];\n        }\n      }\n    }\n\n    try {\n      timelineItemList = segmentTimeline.getElementsByTagName('S');\n    } catch (e) {}\n\n    try {\n      segmentUrlList = this.segmentList.getElementsByTagName('SegmentURL');\n    } catch (e) {}\n\n    this.bandwidth = this.attributeList['bandwidth'] ? parseInt(this.attributeList['bandwidth']) : -1;\n    this.segmentInformation = new SegmentInformation_1.SegmentInformation(presentationDuration, this.bandwidth, this.baseURL, representationID, this.attributeList['mimeType'], this.segmentBase, this.segmentTemplate, segmentTimeline, timelineItemList, this.segmentList, segmentUrlList);\n  };\n\n  RepresentationNode.prototype.writeAttributesToList = function (node, list) {\n    var attrList = node.attributes;\n\n    for (var i = 0; i < node.childNodes.length; i++) {\n      if (!this.baseURL && node.childNodes[i].nodeName == 'BaseURL') {\n        this.baseURL = node.childNodes[i].firstChild.nodeValue;\n      }\n\n      if (!this.segmentBase && node.childNodes[i].nodeName == 'SegmentBase') {\n        this.segmentBase = node.childNodes[i];\n      }\n\n      if (!this.segmentTemplate && node.childNodes[i].nodeName == 'SegmentTemplate') {\n        this.segmentTemplate = node.childNodes[i];\n      }\n\n      if (!this.segmentList && node.childNodes[i].nodeName == 'SegmentList') {\n        this.segmentList = node.childNodes[i];\n      }\n    }\n\n    for (var attr in attrList) {\n      if (!list[attrList[attr].nodeName]) {\n        list[attrList[attr].nodeName] = attrList[attr].nodeValue;\n      }\n    }\n\n    if (list['mediaPresentationDuration'] !== undefined) {\n      list['durationInS'] = IsoDurationParser_1.IsoDurationParser.getDurationAsS(this.attributeList['mediaPresentationDuration']);\n    }\n\n    if (node.parentNode !== null) {\n      this.buildAttributeList(node.parentNode, list);\n    } else {\n      if (!this.segmentInformation) {\n        this.createSegmentInformation();\n      }\n    }\n\n    _super.prototype.writeAttributesToList.call(this, node, list);\n  };\n\n  RepresentationNode.prototype.getMimeType = function () {\n    return this.attributeList['mimeType'] || this.attributeList['contentType'];\n  };\n\n  RepresentationNode.prototype.hasMimeType = function () {\n    return this.attributeList['mimeType'] || this.attributeList['contentType'] ? true : false;\n  };\n\n  RepresentationNode.prototype.getMediaUrlList = function () {\n    return this.segmentInformation.getMediaUrlList();\n  };\n\n  RepresentationNode.prototype.getRepresentationId = function () {\n    return this.id;\n  };\n\n  return RepresentationNode;\n}(ManifestNode_1.ManifestNode);\n\nexports.RepresentationNode = RepresentationNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3188\n")},4749:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nvar ZeroPadding_1 = __webpack_require__(9275);\n\nvar MediaUrl_1 = __webpack_require__(9786);\n\nvar CREATE_URL;\n\n(function (CREATE_URL) {\n  CREATE_URL[CREATE_URL["FROM_TEMPLATE"] = 0] = "FROM_TEMPLATE";\n  CREATE_URL[CREATE_URL["FROM_TIMELINE"] = 1] = "FROM_TIMELINE";\n  CREATE_URL[CREATE_URL["FROM_SEGMENTLIST"] = 2] = "FROM_SEGMENTLIST";\n  CREATE_URL[CREATE_URL["FROM_SEGMENT_BASE"] = 3] = "FROM_SEGMENT_BASE";\n})(CREATE_URL || (CREATE_URL = {}));\n\nvar SegmentInformation = function () {\n  function SegmentInformation(presentationDuration, bandwidth, baseUrl, representationID, mimeType, segmentBase, segmentTemplate, segmentTimeline, timelineItemList, segmentList, segmentUrlList) {\n    this.hasSegmentBase = false;\n    this.baseUrl = \'\';\n    this.presentationDuration = 0;\n    this.bandwidth = 0;\n    this.startNumber = 0;\n    this.mediaUrls = [];\n    this.whichUseCase = -1;\n    this.mimeType = \'\';\n    SegmentInformation.count += 1;\n    this.presentationDuration = presentationDuration;\n    this.mimeType = mimeType;\n\n    if (baseUrl) {\n      this.baseUrl = baseUrl;\n    }\n\n    if (bandwidth) {\n      this.bandwidth = bandwidth;\n    }\n\n    if (representationID) {\n      this.representationID = representationID;\n    }\n\n    if (segmentBase) {\n      this.segmentBase = segmentBase;\n      this.hasSegmentBase = true;\n      this.whichUseCase = CREATE_URL.FROM_SEGMENT_BASE;\n    }\n\n    if (segmentTemplate) {\n      this.segmentTemplate = segmentTemplate;\n      this.mediaTemplate = this.segmentTemplate.attributes.getNamedItem("media").nodeValue;\n      this.mediaTemplate = this.replace$RepresentationID$(this.mediaTemplate, this.representationID);\n      this.mediaTemplate = this.replace$Bandwidth$(this.mediaTemplate, this.bandwidth);\n      this.startNumber = this.segmentTemplate.attributes.getNamedItem("startNumber") ? parseInt(this.segmentTemplate.attributes.getNamedItem("startNumber").nodeValue) : 0;\n      this.whichUseCase = CREATE_URL.FROM_TEMPLATE;\n    }\n\n    if (segmentTimeline) {\n      this.segmentTimeline = segmentTimeline;\n    }\n\n    if (timelineItemList) {\n      this.timelineItemList = timelineItemList;\n      this.whichUseCase = CREATE_URL.FROM_TIMELINE;\n    }\n\n    if (segmentList) {\n      this.segmentList = segmentList;\n    }\n\n    if (segmentUrlList) {\n      this.segmentUrlList = segmentUrlList;\n      this.whichUseCase = CREATE_URL.FROM_SEGMENTLIST;\n    }\n\n    var hasFileExtension = false;\n    var initSegment = \'\';\n\n    switch (this.whichUseCase) {\n      case CREATE_URL.FROM_SEGMENTLIST:\n        this.createFragmentFromUrlList(this.segmentUrlList);\n        initSegment = this.createInitSegment(this.segmentList.getElementsByTagName(\'Initialization\')[0].attributes.getNamedItem("sourceURL").nodeValue);\n        this.mediaUrls.unshift(new MediaUrl_1.MediaUrl(this.baseUrl, initSegment, this.mimeType));\n\n        if (SegmentInformation.count == 0) {// console.log(\'CREATE_URL.FROM_SEGMENTLIST\', this.mediaUrls, this);\n        }\n\n        break;\n\n      case CREATE_URL.FROM_TIMELINE:\n        initSegment = this.createInitSegment(this.segmentTemplate.attributes.getNamedItem("initialization").nodeValue);\n        this.mediaUrls.unshift(new MediaUrl_1.MediaUrl(this.baseUrl, initSegment, this.mimeType));\n        this.createFragmentUrlsFromTimeline(this.timelineItemList);\n        break;\n\n      case CREATE_URL.FROM_SEGMENT_BASE:\n        try {\n          hasFileExtension = this.baseUrl.indexOf(\'.\') !== -1 ? true : false;\n        } catch (e) {}\n\n        if (hasFileExtension) {\n          this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, this.baseUrl, this.mimeType));\n        }\n\n        if (SegmentInformation.count == 0) {// console.log(\'CREATE_URL.FROM_SEGMENT_BASE\', this.mediaUrls, this);\n        }\n\n        break;\n\n      case CREATE_URL.FROM_TEMPLATE:\n        this.createFragmentsFromTemplate();\n        initSegment = this.createInitSegment(this.segmentTemplate.attributes.getNamedItem("initialization").nodeValue);\n        this.mediaUrls.unshift(new MediaUrl_1.MediaUrl(this.baseUrl, initSegment, this.mimeType));\n        break;\n\n      default:\n        try {\n          hasFileExtension = this.baseUrl.indexOf(\'.\') !== -1 ? true : false;\n        } catch (e) {}\n\n        if (hasFileExtension) {\n          this.mediaUrls.push(new MediaUrl_1.MediaUrl("", this.baseUrl, this.mimeType));\n        }\n\n    }\n  }\n\n  SegmentInformation.prototype.createFragmentUrlsFromTimeline = function (segmentNodes) {\n    var currentTime = this.segmentTemplate.attributes.getNamedItem("presentationTimeOffset");\n\n    if (currentTime) {\n      currentTime = parseInt(currentTime.nodeValue, 10);\n    } else {\n      currentTime = 0;\n    }\n\n    var hasCurrentTime = false;\n    var time = 0;\n\n    for (var i = 0; i < segmentNodes.length; i++) {\n      if (i > 0 && segmentNodes[i].attributes.getNamedItem("t") && segmentNodes[i].attributes.getNamedItem("t").nodeValue !== undefined) {\n        hasCurrentTime = true;\n        time = parseInt(segmentNodes[i].attributes.getNamedItem("t").nodeValue);\n      } else {\n        hasCurrentTime = false;\n      }\n\n      var duration = segmentNodes[i].attributes.getNamedItem("d") && segmentNodes[i].attributes.getNamedItem("d").nodeValue !== undefined ? parseInt(segmentNodes[i].attributes.getNamedItem("d").nodeValue) : 0;\n      var repeat = segmentNodes[i].attributes.getNamedItem("r") && segmentNodes[i].attributes.getNamedItem("r").nodeValue !== undefined ? parseInt(segmentNodes[i].attributes.getNamedItem("r").nodeValue) : 0;\n\n      for (var k = 1; k <= repeat; k++) {\n        var fragment_1 = this.segmentTemplate.attributes.getNamedItem("media").nodeValue;\n        fragment_1 = this.replace$RepresentationID$(fragment_1, this.representationID);\n        fragment_1 = this.replace$Time$(fragment_1, currentTime);\n        fragment_1 = this.replace$Bandwidth$(fragment_1, this.bandwidth);\n        this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, fragment_1, this.mimeType));\n\n        if (!hasCurrentTime) {\n          currentTime += duration;\n        } else {\n          currentTime = time;\n        }\n      }\n\n      var fragment = this.segmentTemplate.attributes.getNamedItem("media").nodeValue;\n      fragment = this.replace$RepresentationID$(fragment, this.representationID);\n      fragment = this.replace$Time$(fragment, currentTime);\n      fragment = this.replace$Bandwidth$(fragment, this.bandwidth);\n      this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, fragment, this.mimeType));\n\n      if (!hasCurrentTime) {\n        currentTime += duration;\n      } else {\n        currentTime = time;\n      }\n    }\n  };\n\n  SegmentInformation.prototype.createFragmentFromUrlList = function (urlListNodes) {\n    for (var i = 0; i < urlListNodes.length; i++) {\n      var fragment = urlListNodes[i].attributes.getNamedItem("media").nodeValue;\n      this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, fragment, this.mimeType));\n    }\n  };\n\n  SegmentInformation.prototype.createFragmentsFromTemplate = function () {\n    var segmentDuration = parseInt(this.segmentTemplate.attributes.getNamedItem("duration").nodeValue);\n    var segmentTimescale = this.segmentTemplate.attributes.getNamedItem("timescale") ? parseInt(this.segmentTemplate.attributes.getNamedItem("timescale").nodeValue) : 1;\n    var numSegments = Math.ceil(this.presentationDuration / (segmentDuration / segmentTimescale) / 1000);\n    var mediaTemplateStringSegment = this.mediaTemplate.split(\'$\');\n    var templateReplaceableIndex;\n    var startNumber = this.startNumber || 0;\n\n    for (var k = 0; k < mediaTemplateStringSegment.length; k++) {\n      if (mediaTemplateStringSegment[k].indexOf(\'Number\') != -1) {\n        templateReplaceableIndex = \'$\' + mediaTemplateStringSegment[k] + \'$\';\n      }\n    }\n\n    var paddingAmount = ZeroPadding_1.ZeroPadding.getPaddingAmount(templateReplaceableIndex);\n\n    for (var i = startNumber; i < numSegments + startNumber; i++) {\n      var segmentIndex = ZeroPadding_1.ZeroPadding.addPadding(i, paddingAmount);\n      var fragment = void 0;\n\n      if (paddingAmount === 0) {\n        fragment = this.replace$Number$(this.mediaTemplate, i);\n      } else {\n        fragment = this.mediaTemplate.replace(templateReplaceableIndex, segmentIndex);\n      }\n\n      this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, fragment, this.mimeType));\n    }\n  };\n\n  SegmentInformation.prototype.replace$RepresentationID$ = function (fragment, id) {\n    return fragment.replace(new RegExp(\'\\\\$RepresentationID\\\\$\', \'g\'), id);\n  };\n\n  SegmentInformation.prototype.replace$Number$ = function (fragment, num) {\n    return fragment.replace(new RegExp(\'\\\\$Number\\\\$\', \'g\'), num.toString());\n  };\n\n  SegmentInformation.prototype.replace$Bandwidth$ = function (fragment, bandwidth) {\n    return fragment.replace(new RegExp(\'\\\\$Bandwidth\\\\$\', \'g\'), bandwidth.toString());\n  };\n\n  SegmentInformation.prototype.replace$Time$ = function (fragment, currentIndex) {\n    return fragment.replace(new RegExp(\'\\\\$Time\\\\$\', \'g\'), currentIndex.toString());\n  };\n\n  SegmentInformation.prototype.createInitSegment = function (fragment) {\n    fragment = this.replace$Bandwidth$(fragment, this.bandwidth);\n    fragment = this.replace$RepresentationID$(fragment, this.representationID);\n    return fragment;\n  };\n\n  SegmentInformation.prototype.getMediaUrlList = function () {\n    return this.mediaUrls;\n  };\n\n  SegmentInformation.count = -1;\n  return SegmentInformation;\n}();\n\nexports.SegmentInformation = SegmentInformation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4749\n')},9837:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/*eslint no-console: [\"error\", { allow: [\"warn\", \"error\", \"info\", \"log\"] }] */\n\n/*eslint no-sync: [\"off\"]*/\n\n\nvar isPortTaken = __webpack_require__(3721);\n\nvar path = __webpack_require__(1017);\n\nvar fs = __webpack_require__(7147);\n\nvar fork = (__webpack_require__(2081).fork);\n\nvar appSettings = __webpack_require__(9277);\n\nvar _require = __webpack_require__(7194),\n    app = _require.app;\n\nvar CHILD_SCRIPT_FILENAME = 'startServer.js';\n/**\n * Offline content server\n * @param {object} offlineController : offline controller\n * @param {object} downloadController : download controller\n * @param {string} maxOfflineContentPortRange - max range for offline port to on which content can be served\n * @param {string} offlineContentPort - on which port offline content should be served, default is 3010\n * @constructor\n */\n\nfunction OfflineContentServer(offlineController, downloadController, maxOfflineContentPortRange, offlineContentPort) {\n  this._offlineController = offlineController;\n  this._downloadController = downloadController;\n  this._maxOfflineContentPortRange = maxOfflineContentPortRange;\n  this._offlineContentPort = offlineContentPort;\n  this.childProcess = undefined;\n}\n/**\n * Start http server in a child_process\n * @param {object} port : on which port offline content should be served, default is 3010\n * @param {object} callback : a callback function to get listen port (if default is already taken)\n * @constructor\n */\n\n\nOfflineContentServer.prototype._startServer = function (port, callback) {\n  var self = this; // NOTE: this is so ugly FIXME\n\n  var serverPath = path.join(app.getAppPath(), 'node_modules/downstream-electron');\n\n  if (!fs.existsSync(path.join(serverPath, CHILD_SCRIPT_FILENAME))) {\n    serverPath = path.join(app.getAppPath(), 'node_modules/downstream-electron/api/server');\n\n    if (!fs.existsSync(path.join(serverPath, CHILD_SCRIPT_FILENAME))) {\n      serverPath = app.getAppPath();\n\n      if (!fs.existsSync(path.join(serverPath, CHILD_SCRIPT_FILENAME))) {\n        serverPath = __dirname;\n      }\n    }\n  }\n\n  console.log('Server Path:', serverPath);\n  var script = path.join(serverPath, CHILD_SCRIPT_FILENAME);\n  console.log('Script for server:', script); //  FOR DEBUG PURPOSE self.childProcess = fork(script ,[],{execArgv:['--inspect=5860']});\n\n  self.childProcess = fork(script, []);\n  var routeName = appSettings.getSettings().downloadsName; // send init data for http server\n\n  var data = {\n    cmd: 'init',\n    routeName: routeName,\n    port: port\n  };\n  self.childProcess.send(data);\n  self.childProcess.on('error', function (err) {\n    console.error(err);\n  }); // handles message from child process\n\n  self.childProcess.on('message', function (data) {\n    if (data.cmd === 'log') {\n      // http server wants to log some data\n      console.log(data.log);\n    }\n\n    if (data.cmd === 'listening_port') {\n      // http server is listening => notify application for listen port\n      callback(data.port);\n    }\n\n    if (data.cmd === 'get_info') {\n      var requestId = data.requestId; // http server asks data folder for manifest id\n\n      var manifestId = data.args.manifest;\n\n      self._offlineController.getManifestInfo(manifestId, function (err, info) {\n        if (err) {\n          return self.childProcess.send({\n            error: err,\n            requestId: requestId\n          });\n        }\n\n        var downloadFolder = info.manifest.folder;\n\n        if (!downloadFolder) {\n          // try to serve from default download folder\n          downloadFolder = appSettings.getSettings().downloadsFolderPath;\n        } // send response back\n\n\n        return self.childProcess.send({\n          status: 'OK',\n          requestId: requestId,\n          result: {\n            folder: downloadFolder,\n            status: info.status\n          }\n        });\n      });\n    }\n\n    if (data.cmd === 'is_downloading') {\n      var _requestId = data.requestId;\n      var _manifestId = data.args.manifest;\n      var file = data.args.file;\n\n      var download = self._downloadController.getDownloading(_manifestId, file);\n\n      var downloadedCallback = function downloadedCallback(err) {\n        if (err) {\n          return self.childProcess.send({\n            error: err,\n            requestId: _requestId\n          });\n        }\n\n        return self.childProcess.send({\n          status: 'OK',\n          requestId: _requestId\n        });\n      };\n\n      if (download) {\n        // file is created but being downloading => wait for download before sending result\n        self._downloadController.waitForDownload(download, downloadedCallback);\n      } else {\n        return downloadedCallback();\n      }\n    }\n\n    if (data.cmd === 'perform_seek') {\n      var _requestId2 = data.requestId;\n      var _manifestId2 = data.args.manifest;\n      var _file = data.args.file;\n\n      var _downloadedCallback = function _downloadedCallback(err) {\n        if (err) {\n          return self.childProcess.send({\n            error: err,\n            requestId: _requestId2\n          });\n        }\n\n        return self.childProcess.send({\n          status: 'OK',\n          requestId: _requestId2\n        });\n      };\n\n      self._downloadController.performSeek(_manifestId2, _file, _downloadedCallback);\n    }\n  });\n  self.childProcess.on('close', function (code, signal) {\n    // child has closed\n    if (code == null) {\n      console.log('Child process closed with signal:', signal);\n    } else {\n      console.log('Child process closed with code:', code);\n    }\n  });\n};\n/**\n * @param {Function} callback - a callback function to get listen port (if default is taken)\n * @constructor\n */\n\n\nOfflineContentServer.prototype.serveOfflineContent = function (callback) {\n  var self = this;\n\n  function startOnPort(port) {\n    if (port > self._maxOfflineContentPortRange) {\n      return;\n    }\n\n    isPortTaken(port, function (err) {\n      if (err) {\n        port++;\n        startOnPort(port);\n      } else {\n        console.log('Port found:', port);\n\n        self._startServer(port, function () {\n          self._offlineContentPort = port;\n          callback(self._offlineContentPort);\n          console.info('Offline content served on port:', port);\n        });\n      }\n    });\n  }\n\n  startOnPort(this._offlineContentPort);\n};\n/*\n * Stop server process\n * @returns\n */\n\n\nOfflineContentServer.prototype.stop = function () {\n  this.childProcess.kill('SIGTERM');\n};\n\nmodule.exports = OfflineContentServer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9837\n")},2197:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar _ = __webpack_require__(4952);\n/**\n * how much of progress should be connected with writing chunks to a hard drive (1 - 100%)\n * @type {number}\n */\n\n\nvar writeProgressUsage = 0.1;\n/**\n *\n * @param {DownloadsStorageController} storage - downloads storage controller\n * @constructor\n */\n\nfunction DownloadStats(storage) {\n  this._storage = storage;\n  this._stats = {};\n  this._statsPrevious = {};\n  this._STATS_TIME_GENERATION = 1000;\n\n  _.bindAll(this, "_generate");\n}\n/**\n * @param {number} value - bytes\n * @param {number} precision - precision for kilobytes\n * @param {number=} precision2 - precision for megabytes\n * @param {number=} precision3 - precision for gigabytes\n * @returns {string} converted bytes to kb or mb or gb\n * @private\n */\n\n\nDownloadStats.prototype._convertToBytes = function (value, precision, precision2, precision3) {\n  precision2 = typeof precision2 !== "undefined" ? precision2 : precision;\n  precision3 = typeof precision3 !== "undefined" ? precision3 : precision;\n\n  if (value < 100000) {\n    return this._convertToKB(value, precision);\n  } else if (value < 1024 * 1024 * 1024) {\n    return this._convertToMB(value, precision2);\n  } else {\n    return this._convertToGB(value, precision3);\n  }\n};\n/**\n *\n * @param {number} value - bytes\n * @param {number} precision - precision\n * @returns {string} kilobytes\n * @private\n */\n\n\nDownloadStats.prototype._convertToKB = function (value, precision) {\n  precision = typeof precision !== "undefined" ? precision : 0;\n  var a = Math.pow(10, precision);\n  var oneKB = 1024;\n  return Math.round(value * a / oneKB) / a + "kB";\n};\n/**\n * @param {number} value - bytes\n * @param {number} precision - precision\n * @returns {string} - megabytes\n * @private\n */\n\n\nDownloadStats.prototype._convertToMB = function (value, precision) {\n  precision = typeof precision !== "undefined" ? precision : 0;\n  var a = Math.pow(10, precision);\n  var oneMB = 1024 * 1024;\n  return Math.round(value * a / oneMB) / a + "MB";\n};\n/**\n * @param {number} value - bytes\n * @param {number} precision - precision\n * @returns {string} gigabytes\n * @private\n */\n\n\nDownloadStats.prototype._convertToGB = function (value, precision) {\n  precision = typeof precision !== "undefined" ? precision : 0;\n  var a = Math.pow(10, precision);\n  var oneGB = 1024 * 1024 * 1024;\n  return Math.round(value * a / oneGB) / a + "GB";\n};\n\nDownloadStats.prototype._clearSpeed = function () {\n  var allManifestIds = Object.keys(this._stats) || [];\n\n  for (var i = 0, j = allManifestIds.length; i < j; i++) {\n    var manifestId = allManifestIds[i];\n\n    if (!this._storage.keyExists(manifestId) && this._stats[manifestId] && this._stats[manifestId].speed) {\n      this._stats[manifestId].speed = 0;\n      this._stats[manifestId].speedBytes = this._convertToBytes(this._stats[manifestId].speed, 3, 2);\n    }\n  }\n};\n/**\n * @param {boolean} refresh - decides if stats should be only calculated without setting previous stats\n * this is useful when downloads finishes and stats are being calculated one more time\n * @returns {void}\n * @private\n */\n\n\nDownloadStats.prototype._generate = function (refresh) {\n  var allStats = {};\n\n  var manifests = this._storage.getKeys();\n\n  this._clearSpeed();\n\n  function countParts(items) {\n    var parts = 0;\n\n    for (var k = 0, l = items.length; k < l; k++) {\n      var item = items[k];\n      parts += item.bandwidth || 1;\n    }\n\n    return parts;\n  }\n\n  function countPartsObj(items, withDownloadedOnly) {\n    var parts = 0;\n\n    for (var key in items) {\n      if (items.hasOwnProperty(key)) {\n        var item = items[key];\n        parts += (withDownloadedOnly ? item.stats.available / (item.stats.file_size || 1) : 1) * (item.bandwidth || 1);\n      }\n    }\n\n    return parts;\n  }\n\n  function toArray(obj) {\n    var arr = [];\n\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        var item = obj[key];\n        arr.push(item);\n      }\n    }\n\n    return arr;\n  }\n\n  var stats = {\n    downloading: 0,\n    downloaded: 0,\n    available: 0,\n    left: 0,\n    downloadingAvailableBytes: 0,\n    downloading_file_size: 0,\n    downloadingBytes: 0,\n    downloadedBytes: 0,\n    availableBytes: 0,\n    writeProgress: 0,\n    writeProgressDownloading: 0,\n    writeProgressDownloaded: 0,\n    errors: 0,\n    progress: 0,\n    speed: 0,\n    status: \'\'\n  }; //availableBytes - bates that has been already downloaded\n  //downloadedBytes - bytes used to calculate the current speed\n  //if for any reason the connection is broken or user stopped, then after resuming the available bytes are\n  //always bigger then the actual downloaded bytes.\n  //once the file is finished both values are equal and have the same value as file_size\n\n  var now = new Date().getTime();\n\n  if (!this._statsTime) {\n    this._statsTime = now;\n  }\n\n  for (var i = 0, j = manifests.length; i < j; i++) {\n    var manifestId = manifests[i];\n    allStats[manifestId] = _.clone(stats);\n    allStats[manifestId].left = this._storage.left.count(manifestId);\n    allStats[manifestId].leftI = this._storage.left.getItems(manifestId);\n    allStats[manifestId].errors = this._storage.errors.count(manifestId);\n    allStats[manifestId].errorsI = this._storage.errors.getItems(manifestId);\n\n    var items = this._storage.downloading.getKeys(manifestId);\n\n    allStats[manifestId].downloading = items.length;\n    allStats[manifestId].downloadingI = this._storage.downloading.getItems(manifestId);\n    var writeProgressDownloadingItemsLength = items.length;\n\n    for (var k = 0, l = items.length; k < l; k++) {\n      var item = this._storage.downloading.getItem(manifestId, items[k]);\n\n      allStats[manifestId].downloadingBytes += item.stats.downloaded;\n      allStats[manifestId].downloading_file_size += item.stats.file_size;\n      allStats[manifestId].downloadingAvailableBytes += item.stats.available;\n      allStats[manifestId].writeProgressDownloading += item.stats.writeProgress;\n    }\n\n    items = this._storage.downloaded.getItems(manifestId);\n    allStats[manifestId].downloaded = items.length;\n    allStats[manifestId].downloadedI = items;\n    var writeProgressItemsDownloadedLength = items.length;\n\n    for (var _k = 0, _l = items.length; _k < _l; _k++) {\n      var _item = items[_k];\n      allStats[manifestId].downloadedBytes += _item.stats.downloaded;\n      allStats[manifestId].writeProgressDownloaded += _item.stats.writeProgress;\n    } //need to calculate what percentage of bytes that are going to be written to hard drive are according the the whole\n    // size for example 5 files are being downloaded, 4 smaller are 100mb and one large 1,9GB. When the large file is\n    // being saved the write progress is basically 1900/2000 = 95% of all written bytes.\n\n\n    allStats[manifestId].writeProgressDownloading = allStats[manifestId].writeProgressDownloading * (allStats[manifestId].downloadingAvailableBytes / (allStats[manifestId].downloadedBytes + allStats[manifestId].downloading_file_size) || 1);\n    allStats[manifestId].writeProgressDownloading = allStats[manifestId].writeProgressDownloading / (writeProgressDownloadingItemsLength || 1);\n    allStats[manifestId].writeProgressDownloaded = allStats[manifestId].writeProgressDownloaded * (allStats[manifestId].downloadedBytes / (allStats[manifestId].downloadedBytes + allStats[manifestId].downloading_file_size) || 1);\n    allStats[manifestId].writeProgressDownloaded = allStats[manifestId].writeProgressDownloaded / (writeProgressItemsDownloadedLength || 1);\n    allStats[manifestId].writeProgress = allStats[manifestId].writeProgressDownloading + allStats[manifestId].writeProgressDownloaded;\n\n    var speed = this._getDiff("downloadingBytes", manifestId, allStats, this._statsPrevious);\n\n    speed += this._getDiff("downloadedBytes", manifestId, allStats, this._statsPrevious);\n    speed = speed * 1000 / (now - this._statsTime || 1);\n    allStats[manifestId].speed = speed;\n    allStats[manifestId].status = this._storage.status.getItem(manifestId, "status");\n    allStats[manifestId].details = this._storage.status.getItem(manifestId, "details"); //progress for downloaded\n\n    var leftParts = countParts(allStats[manifestId].leftI);\n    var downloadedParts = countParts(allStats[manifestId].downloadedI);\n    var downloadingPartsSize = countPartsObj(allStats[manifestId].downloadingI);\n    var downloadingParts = countPartsObj(allStats[manifestId].downloadingI, true);\n    var errorParts = countPartsObj(allStats[manifestId].errorsI);\n    var allParts = leftParts + downloadedParts + downloadingPartsSize + errorParts;\n    allStats[manifestId].progress = (downloadedParts + downloadingParts) / (allParts || 1);\n    allStats[manifestId].progress = allStats[manifestId].progress * (1 - writeProgressUsage);\n    allStats[manifestId].progress += allStats[manifestId].writeProgress * writeProgressUsage;\n    allStats[manifestId].downloadedBytesTotal = Math.round(allStats[manifestId].progress * 10000) / 100;\n    allStats[manifestId].downloadedBytesTotal += "%"; // progress of each represention\n\n    var reduceFunc = function reduceFunc(map, obj) {\n      if (!map[obj.id]) {\n        map[obj.id] = [];\n      }\n\n      map[obj.id].push(obj);\n      return map;\n    };\n\n    var downloadedById = allStats[manifestId].downloadedI.reduce(reduceFunc, {});\n    var downloadingArray = toArray(allStats[manifestId].downloadingI);\n    var downloadingById = downloadingArray.reduce(reduceFunc, {});\n    var leftById = allStats[manifestId].leftI.reduce(reduceFunc, {});\n    var errorArray = toArray(allStats[manifestId].errorsI);\n    var errorsById = errorArray.reduce(reduceFunc, {});\n\n    var extend = function extend(obj, src) {\n      for (var key in src) {\n        if (src.hasOwnProperty(key)) {\n          if (!obj[key]) {\n            obj[key] = [];\n          }\n\n          obj[key] = obj[key].concat(src[key]);\n        }\n      }\n\n      return obj;\n    };\n\n    var allPartsById = {};\n    extend(allPartsById, downloadedById);\n    extend(allPartsById, downloadingById);\n    extend(allPartsById, leftById);\n    extend(allPartsById, errorsById); // compute progres for each id\n\n    var progressById = {};\n    var key = void 0;\n\n    for (key in allPartsById) {\n      if (allPartsById.hasOwnProperty(key)) {\n        progressById[key] = countPartsObj(downloadedById[key]) / (countPartsObj(allPartsById[key]) || 1);\n      }\n    }\n\n    var progressByIdPercent = {};\n\n    for (key in progressById) {\n      if (progressById.hasOwnProperty(key)) {\n        progressByIdPercent[key] = Math.round(progressById[key] * 10000) / 100 + "%";\n      }\n    }\n\n    allStats[manifestId].progressById = progressById;\n    allStats[manifestId].progressByIdPercent = progressByIdPercent;\n  }\n\n  var showStats = {};\n\n  for (var _i = 0, _j = manifests.length; _i < _j; _i++) {\n    var _manifestId = manifests[_i];\n    showStats[_manifestId] = {};\n    var downloadedBytesTotal = allStats[_manifestId].downloadedBytes + allStats[_manifestId].downloadingAvailableBytes;\n    showStats[_manifestId].progress = allStats[_manifestId].progress;\n    showStats[_manifestId].progressPercentage = allStats[_manifestId].downloadedBytesTotal;\n    showStats[_manifestId].progressById = allStats[_manifestId].progressById;\n    showStats[_manifestId].progressByIdPercent = allStats[_manifestId].progressByIdPercent;\n    showStats[_manifestId].downloadedBytesTotal = this._convertToBytes(downloadedBytesTotal, 1, 2, 2);\n    showStats[_manifestId].downloaded = allStats[_manifestId].downloaded;\n    showStats[_manifestId].left = allStats[_manifestId].left;\n    showStats[_manifestId].errors = allStats[_manifestId].errors;\n\n    if (allStats[_manifestId].speed < 0) {\n      allStats[_manifestId].speed = 0;\n    }\n\n    showStats[_manifestId].speed = allStats[_manifestId].speed;\n    showStats[_manifestId].speedBytes = this._convertToBytes(allStats[_manifestId].speed, 3, 2);\n    showStats[_manifestId].status = allStats[_manifestId].status;\n    showStats[_manifestId].details = allStats[_manifestId].details;\n  }\n\n  for (var _key in showStats) {\n    if (showStats.hasOwnProperty(_key)) {\n      this._stats[_key] = showStats[_key];\n    }\n  }\n\n  if (!refresh) {\n    this._statsTime = now;\n\n    for (var _key2 in allStats) {\n      if (allStats.hasOwnProperty(_key2)) {\n        this._statsPrevious[_key2] = allStats[_key2];\n      }\n    }\n  }\n};\n/**\n * @param {string} key - key stats identifier\n * @param {string} manifestId - manifest identifier\n * @param {number} current - current value\n * @param {number} previous - previous value\n * @returns {number} - difference between current and previous value\n * @private\n */\n\n\nDownloadStats.prototype._getDiff = function (key, manifestId, current, previous) {\n  var currentValue = current[manifestId] && current[manifestId][key] || 0;\n  var previousValue = previous[manifestId] && previous[manifestId][key] || 0;\n  return currentValue - previousValue;\n};\n/**\n *\n * @param {string|array} manifestIds - manifest identifier or array of manifests identifier\n * @returns {*} stats for certain download or array of stats for downloads\n */\n\n\nDownloadStats.prototype.getStats = function (manifestIds) {\n  var stats;\n\n  if (this._stats) {\n    if (typeof manifestIds === \'string\') {\n      stats = this._stats[manifestIds];\n    } else {\n      stats = [];\n\n      for (var i = 0, j = manifestIds.length; i < j; i++) {\n        var stat = this._stats[manifestIds[i]];\n\n        if (stat) {\n          stats.push(stat);\n        }\n      }\n    }\n  }\n\n  return stats;\n};\n\nDownloadStats.prototype.refresh = function () {\n  this._generate(true);\n};\n\nDownloadStats.prototype.start = function () {\n  if (!this._interval) {\n    this._interval = setInterval(this._generate, this._STATS_TIME_GENERATION);\n\n    this._generate();\n  }\n};\n\nDownloadStats.prototype.stop = function () {\n  clearInterval(this._interval);\n  this._interval = null;\n\n  this._generate();\n\n  this._statsPrevious = {};\n};\n\nmodule.exports = DownloadStats;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2197\n')},7314:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar CODES = __webpack_require__(6999);\n\nvar translationErrors = {\n  downloads: {\n    _GENERAL: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Sorry we are unable to process your request - some internal error occurred"\n    },\n    ALREADY_FINISHED: {\n      code: CODES.ERRORS.FINISHED,\n      msg: "This download \'%manifestId%\' has been already finished."\n    },\n    ALREADY_REMOVED_ALL_UNFINISHED: {\n      code: CODES.ERRORS.REMOVED,\n      msg: "All unfinished downloads have been already removed, nothing left."\n    },\n    ALREADY_RESUMED: {\n      code: CODES.ERRORS.RESUMED,\n      msg: "This download \'%manifestId%\' has been already resumed."\n    },\n    ALREADY_STOPPED: {\n      code: CODES.ERRORS.STOPPED,\n      msg: "This download \'%manifestId%\' has been already stopped or has been already downloaded."\n    },\n    ALREADY_STOPPED_ALL: {\n      code: CODES.ERRORS.STOPPED,\n      msg: "There are no downloads to be stopped."\n    },\n    ALREADY_STARTED: {\n      code: CODES.ERRORS.STARTED,\n      msg: "This download \'%manifestId%\' has been already started."\n    },\n    BROKEN_CANNOT_BE_RESUMED: {\n      code: CODES.ERRORS.BROKEN,\n      msg: "This download \'%manifestId%\' is broken and cannot be resumed."\n    },\n    INFO_FAILED: {\n      code: CODES.ERRORS.INFO,\n      msg: "Gettting info of download \'%manifestId%\' failed."\n    },\n    REMOVING_ALL_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Removing of all downloads failed."\n    },\n    REMOVING_ALL_UNFINISHED_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Removing of all unfinished downloads failed."\n    },\n    REMOVING_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Removing of download \'%manifestId%\' failed."\n    },\n    RESUMING_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Resuming of download \'%manifestId%\' failed."\n    },\n    UPDATE_DOWNLOAD_FOLDER_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Updating of download folder for \'%manifestId%\' failed."\n    },\n    STOPPING_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Stopping of download \'%manifestId%\' failed."\n    },\n    SAVING_PERSISTENT_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Saving persistent info for download \'%manifestId%\' failed."\n    },\n    SAVING_DATA_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Saving data for download \'%manifestId%\' failed."\n    },\n    STOPPING_ALL_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Stopping all downloads failed."\n    },\n    UNFINISHED: {\n      code: CODES.ERRORS.UNFINISHED,\n      msg: "This download is not ready yet."\n    }\n  },\n  manifests: {\n    NOT_FOUND: {\n      code: CODES.ERRORS.NOT_FOUND,\n      msg: "Manifest with id=\'%manifestId%\' not found."\n    },\n    LOADING_FAILED: {\n      code: CODES.ERRORS.LOADING,\n      msg: "Could not load manifest from url \'%manifestUrl%\'."\n    },\n    LIST_LOADING_FAILED: {\n      code: CODES.ERRORS.LOADING,\n      msg: "Could not load list of manifests."\n    },\n    FOLDER_ALREADY_EXISTS: {\n      code: CODES.ERRORS.EXISTS,\n      msg: "Folder for manifest with id =\'%manifestId%\' already exists."\n    },\n    INVALID_ID: {\n      code: CODES.ERRORS.BROKEN,\n      msg: "Provided custom id for manifest is not valid: (\'%invalid%\')"\n    }\n  }\n};\nmodule.exports = translationErrors;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7314\n')},9278:module=>{"use strict";eval('\n\nmodule.exports = {\n  test: "Hello world"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTI3OC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0VBQ2ZDLElBQUksRUFBRTtBQURTLENBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS90cmFuc2xhdGlvbi9fdHJhbnNsYXRpb25zLmpzPzZlYjAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB0ZXN0OiBcIkhlbGxvIHdvcmxkXCJcbn07Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ0ZXN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9278\n')},817:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\n\nvar errors = __webpack_require__(7314);\n\nvar translations = __webpack_require__(9278);\n\nvar CODES = __webpack_require__(6999);\n\nvar REGEXP_KEYS = /%[A-Za-z0-9_-]+%/g;\n/**\n * @namespace <global>\n * @module util/translation\n * @property {translationErrors} e - {@link translationErrors}\n */\n\nvar translation = {};\n/**\n *\n * @param {object} key - translation object\n * @returns {*} key from translation object\n * @private\n */\n\nfunction _getCode(key) {\n  key = key || {};\n  var code = key.code;\n\n  if (!code) {\n    code = CODES.GENERAL;\n  }\n\n  return code;\n}\n/**\n *\n * @param {object} key - translation object\n * @param {array|object|string|number|boolean} values - translation values\n * @returns {*} all key values\n * @private\n */\n\n\nfunction _getKeyValues(key, values) {\n  var translation = key;\n  var keyValues = [];\n\n  if (_typeof(translation) === "object") {\n    translation = translation.msg;\n  }\n\n  if (translation) {\n    if (values instanceof Array) {\n      var groups = _getUniqueKeys(translation.match(REGEXP_KEYS));\n\n      for (var i = 0, j = Math.min(groups.length, values.length); i < j; i++) {\n        var keyValue = {};\n        keyValue[groups[i].replace(/%/g, "")] = values[i];\n        keyValues.push(keyValue);\n      }\n    } else if (_typeof(values) === "object") {\n      for (var _key in values) {\n        if (values.hasOwnProperty(_key)) {\n          var _keyValue = {};\n          _keyValue[_key] = values[_key];\n          keyValues.push(_keyValue);\n        }\n      }\n    } else if (typeof values === "string" || typeof values === "number" || typeof values === "boolean") {\n      var _groups = translation.match(REGEXP_KEYS) || [];\n\n      for (var _i = 0, _j = _groups.length; _i < _j; _i++) {\n        var _keyValue2 = {};\n        _keyValue2[_groups[_i].replace(/%/g, "")] = values;\n        keyValues.push(_keyValue2);\n      }\n    }\n  }\n\n  if (keyValues && !keyValues.length) {\n    keyValues = undefined;\n  }\n\n  return keyValues;\n}\n/**\n *\n * @param {object} key - translation object\n * @param {array|object|string|number|boolean} values - translation values\n * @returns {*} translated message with attached values\n * @private\n */\n\n\nfunction _getTranslation(key, values) {\n  var translation = key;\n\n  if (_typeof(translation) === "object") {\n    translation = translation.msg;\n  }\n\n  if (translation) {\n    translation = _parseValues(translation, values);\n  } else {\n    translation = "Internal Error";\n  }\n\n  return translation;\n}\n/**\n *\n * @param {array} args - arguments\n * @returns {array} array of all values except 1st one\n * @private\n */\n\n\nfunction _getValues(args) {\n  var values = [];\n\n  for (var i = 1, j = args.length; i < j; i++) {\n    values.push(args[i]);\n  }\n\n  if (values.length === 0) {\n    values = undefined;\n  } else if (values.length === 1) {\n    values = values[0];\n  }\n\n  return values;\n}\n/**\n *\n * @param {array} groups - matched groups\n * @returns {array} unique names\n * @private\n */\n\n\nfunction _getUniqueKeys(groups) {\n  var hashKey = {};\n  var uniqueNames = [];\n  groups = groups || [];\n\n  for (var i = 0, j = groups.length; i < j; i++) {\n    if (!hashKey[groups[i]]) {\n      hashKey[groups[i]] = true;\n      uniqueNames.push(groups[i]);\n    }\n  }\n\n  return uniqueNames;\n}\n/**\n *\n * @param {string} translation - text to be translated\n * @param {array|object|string|number|boolean} values - values to be parsed with translation\n * @returns {*} translation\n * @private\n */\n\n\nfunction _parseValues(translation, values) {\n  values = values || \'\';\n\n  if (values instanceof Array) {\n    var groups = _getUniqueKeys(translation.match(REGEXP_KEYS));\n\n    for (var i = 0, j = Math.min(groups.length, values.length); i < j; i++) {\n      translation = translation.replace(new RegExp(groups[i], "g"), values[i]);\n    }\n  } else if (_typeof(values) === "object") {\n    for (var key in values) {\n      if (values.hasOwnProperty(key)) {\n        translation = translation.replace(new RegExp("%" + key + "%", "g"), values[key]);\n      }\n    }\n\n    translation = translation.replace(REGEXP_KEYS, values);\n  } else if (typeof values === "string" || typeof values === "number" || typeof values === "boolean") {\n    translation = translation.replace(REGEXP_KEYS, values);\n  }\n\n  return translation;\n}\n/**\n * @alias module:util/translation.getError\n * @param {object} key - translation object\n * @returns {{code: *, msg: *, keys: *}} - error object with code, msg and keys\n */\n\n\nfunction getError(key) {\n  var values = _getValues(arguments);\n\n  var keyValues = _getKeyValues(key, values);\n\n  var msg = _getTranslation(key, values);\n\n  var code = _getCode(key);\n\n  return {\n    code: code,\n    msg: msg,\n    keys: keyValues\n  };\n}\n/**\n * @alias module:util/translation.getTranslation\n * @static\n * @param {object} key - translation object\n * @returns {*} - return translated string with correctly applied values\n */\n\n\nfunction getTranslation(key) {\n  var values = _getValues(arguments);\n\n  return _getTranslation(key, values);\n}\n\ntranslation.getError = getError;\ntranslation.getTranslation = getTranslation;\ntranslation.e = errors;\ntranslation.t = translations;\nmodule.exports = translation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///817\n')},6052:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nvar moment = __webpack_require__(1908);\n\nvar IsoDurationParser = function () {\n  function IsoDurationParser() {}\n\n  IsoDurationParser.getDuration = function (val) {\n    var dur = moment.duration(val);\n    return dur.asMilliseconds();\n  };\n\n  IsoDurationParser.getDurationAsS = function (val) {\n    var dur = moment.duration(val);\n    return dur.asSeconds();\n  };\n\n  IsoDurationParser.getMoment = function () {\n    return moment;\n  };\n\n  return IsoDurationParser;\n}();\n\nexports.IsoDurationParser = IsoDurationParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjA1Mi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsSUFBRCxDQUF0Qjs7QUFDQSxJQUFNQyxpQkFBaUIsR0FBSSxZQUFZO0VBQ3JDLFNBQVNBLGlCQUFULEdBQThCLENBQzdCOztFQUVEQSxpQkFBaUIsQ0FBQ0MsV0FBbEIsR0FBZ0MsVUFBVUMsR0FBVixFQUFlO0lBQzdDLElBQU1DLEdBQUcsR0FBR0wsTUFBTSxDQUFDTSxRQUFQLENBQWdCRixHQUFoQixDQUFaO0lBQ0EsT0FBT0MsR0FBRyxDQUFDRSxjQUFKLEVBQVA7RUFDRCxDQUhEOztFQUlBTCxpQkFBaUIsQ0FBQ00sY0FBbEIsR0FBbUMsVUFBVUosR0FBVixFQUFlO0lBQ2hELElBQU1DLEdBQUcsR0FBR0wsTUFBTSxDQUFDTSxRQUFQLENBQWdCRixHQUFoQixDQUFaO0lBQ0EsT0FBT0MsR0FBRyxDQUFDSSxTQUFKLEVBQVA7RUFDRCxDQUhEOztFQUlBUCxpQkFBaUIsQ0FBQ1EsU0FBbEIsR0FBOEIsWUFBWTtJQUN4QyxPQUFPVixNQUFQO0VBQ0QsQ0FGRDs7RUFHQSxPQUFPRSxpQkFBUDtBQUNELENBaEIwQixFQUEzQjs7QUFpQkFTLHlCQUFBLEdBQTRCVCxpQkFBNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3V0aWwvSXNvLWR1cmF0aW9uLXBhcnNlci5qcz9jYzgwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgbW9tZW50ID0gcmVxdWlyZShcIm1vbWVudC9tb21lbnRcIik7XG5jb25zdCBJc29EdXJhdGlvblBhcnNlciA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIElzb0R1cmF0aW9uUGFyc2VyICgpIHtcbiAgfVxuXG4gIElzb0R1cmF0aW9uUGFyc2VyLmdldER1cmF0aW9uID0gZnVuY3Rpb24gKHZhbCkge1xuICAgIGNvbnN0IGR1ciA9IG1vbWVudC5kdXJhdGlvbih2YWwpO1xuICAgIHJldHVybiBkdXIuYXNNaWxsaXNlY29uZHMoKTtcbiAgfTtcbiAgSXNvRHVyYXRpb25QYXJzZXIuZ2V0RHVyYXRpb25Bc1MgPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgY29uc3QgZHVyID0gbW9tZW50LmR1cmF0aW9uKHZhbCk7XG4gICAgcmV0dXJuIGR1ci5hc1NlY29uZHMoKTtcbiAgfTtcbiAgSXNvRHVyYXRpb25QYXJzZXIuZ2V0TW9tZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtb21lbnQ7XG4gIH07XG4gIHJldHVybiBJc29EdXJhdGlvblBhcnNlcjtcbn0oKSk7XG5leHBvcnRzLklzb0R1cmF0aW9uUGFyc2VyID0gSXNvRHVyYXRpb25QYXJzZXI7XG4iXSwibmFtZXMiOlsibW9tZW50IiwicmVxdWlyZSIsIklzb0R1cmF0aW9uUGFyc2VyIiwiZ2V0RHVyYXRpb24iLCJ2YWwiLCJkdXIiLCJkdXJhdGlvbiIsImFzTWlsbGlzZWNvbmRzIiwiZ2V0RHVyYXRpb25Bc1MiLCJhc1NlY29uZHMiLCJnZXRNb21lbnQiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6052\n")},8048:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar ArrayStorage = __webpack_require__(9567);\n\nvar createBridgeMethods = __webpack_require__(9921);\n/**\n * @param {DownloadsStorageController} parent - reference to parent object\n * @param {string} storageKey - storage key\n * @constructor\n */\n\n\nfunction ArrayStorageBridge(parent, storageKey) {\n  this._parent = parent;\n  this._storageKey = storageKey;\n  createBridgeMethods(this, ArrayStorage);\n}\n\nmodule.exports = ArrayStorageBridge;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODA0OC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMsSUFBRCxDQUE1Qjs7QUFDQSxJQUFNQyxtQkFBbUIsR0FBR0QsbUJBQU8sQ0FBQyxJQUFELENBQW5DO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsU0FBU0Usa0JBQVQsQ0FBNkJDLE1BQTdCLEVBQXFDQyxVQUFyQyxFQUFpRDtFQUMvQyxLQUFLQyxPQUFMLEdBQWVGLE1BQWY7RUFDQSxLQUFLRyxXQUFMLEdBQW1CRixVQUFuQjtFQUNBSCxtQkFBbUIsQ0FBQyxJQUFELEVBQU9GLFlBQVAsQ0FBbkI7QUFDRDs7QUFFRFEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCTixrQkFBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3V0aWwvYXJyYXktc3RvcmFnZS1icmlkZ2UuanM/YzcxNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IEFycmF5U3RvcmFnZSA9IHJlcXVpcmUoXCIuL2FycmF5LXN0b3JhZ2VcIik7XG5jb25zdCBjcmVhdGVCcmlkZ2VNZXRob2RzID0gcmVxdWlyZShcIi4vY3JlYXRlLWJyaWRnZS1tZXRob2RzXCIpO1xuXG4vKipcbiAqIEBwYXJhbSB7RG93bmxvYWRzU3RvcmFnZUNvbnRyb2xsZXJ9IHBhcmVudCAtIHJlZmVyZW5jZSB0byBwYXJlbnQgb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gc3RvcmFnZUtleSAtIHN0b3JhZ2Uga2V5XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQXJyYXlTdG9yYWdlQnJpZGdlIChwYXJlbnQsIHN0b3JhZ2VLZXkpIHtcbiAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICB0aGlzLl9zdG9yYWdlS2V5ID0gc3RvcmFnZUtleTtcbiAgY3JlYXRlQnJpZGdlTWV0aG9kcyh0aGlzLCBBcnJheVN0b3JhZ2UpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5U3RvcmFnZUJyaWRnZTsiXSwibmFtZXMiOlsiQXJyYXlTdG9yYWdlIiwicmVxdWlyZSIsImNyZWF0ZUJyaWRnZU1ldGhvZHMiLCJBcnJheVN0b3JhZ2VCcmlkZ2UiLCJwYXJlbnQiLCJzdG9yYWdlS2V5IiwiX3BhcmVudCIsIl9zdG9yYWdlS2V5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8048\n")},9567:module=>{"use strict";eval("\n/**\n * @constructor\n */\n\nfunction ArrayStorage() {\n  this._items = [];\n}\n/**\n * @returns {void}\n */\n\n\nArrayStorage.prototype.clear = function () {\n  this._items = [];\n};\n/**\n *\n * @param {array} items - array items\n * @returns {void}\n */\n\n\nArrayStorage.prototype.concat = function (items) {\n  this._items = this._items.concat(items);\n};\n/**\n *\n * @returns {number} - number of items\n */\n\n\nArrayStorage.prototype.count = function () {\n  return this._items.length;\n};\n/**\n *\n * @returns {array} - items\n */\n\n\nArrayStorage.prototype.getItems = function () {\n  return this._items;\n};\n/**\n *\n * @param {object} item - new item\n * @returns {void}\n */\n\n\nArrayStorage.prototype.push = function (item) {\n  this._items.push(item);\n};\n/**\n * removes first element and returns it\n * @returns {*} - item\n */\n\n\nArrayStorage.prototype.shift = function () {\n  return this._items.shift();\n};\n/**\n * add elements to the beginning of array\n * @returns {*} - new length of an array\n */\n\n\nArrayStorage.prototype.unshift = function () {\n  return this._items.unshift.apply(this, arguments);\n};\n\nmodule.exports = ArrayStorage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTU2Ny5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViO0FBQ0E7QUFDQTs7QUFDQSxTQUFTQSxZQUFULEdBQXlCO0VBQ3ZCLEtBQUtDLE1BQUwsR0FBYyxFQUFkO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7OztBQUNBRCxZQUFZLENBQUNFLFNBQWIsQ0FBdUJDLEtBQXZCLEdBQStCLFlBQVk7RUFDekMsS0FBS0YsTUFBTCxHQUFjLEVBQWQ7QUFDRCxDQUZEO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FELFlBQVksQ0FBQ0UsU0FBYixDQUF1QkUsTUFBdkIsR0FBZ0MsVUFBVUMsS0FBVixFQUFpQjtFQUMvQyxLQUFLSixNQUFMLEdBQWMsS0FBS0EsTUFBTCxDQUFZRyxNQUFaLENBQW1CQyxLQUFuQixDQUFkO0FBQ0QsQ0FGRDtBQUlBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQUwsWUFBWSxDQUFDRSxTQUFiLENBQXVCSSxLQUF2QixHQUErQixZQUFZO0VBQ3pDLE9BQU8sS0FBS0wsTUFBTCxDQUFZTSxNQUFuQjtBQUNELENBRkQ7QUFJQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FQLFlBQVksQ0FBQ0UsU0FBYixDQUF1Qk0sUUFBdkIsR0FBa0MsWUFBWTtFQUM1QyxPQUFPLEtBQUtQLE1BQVo7QUFDRCxDQUZEO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FELFlBQVksQ0FBQ0UsU0FBYixDQUF1Qk8sSUFBdkIsR0FBOEIsVUFBVUMsSUFBVixFQUFnQjtFQUM1QyxLQUFLVCxNQUFMLENBQVlRLElBQVosQ0FBaUJDLElBQWpCO0FBQ0QsQ0FGRDtBQUlBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQVYsWUFBWSxDQUFDRSxTQUFiLENBQXVCUyxLQUF2QixHQUErQixZQUFZO0VBQ3pDLE9BQU8sS0FBS1YsTUFBTCxDQUFZVSxLQUFaLEVBQVA7QUFDRCxDQUZEO0FBSUE7QUFDQTtBQUNBO0FBQ0E7OztBQUNBWCxZQUFZLENBQUNFLFNBQWIsQ0FBdUJVLE9BQXZCLEdBQWlDLFlBQVk7RUFDM0MsT0FBTyxLQUFLWCxNQUFMLENBQVlXLE9BQVosQ0FBb0JDLEtBQXBCLENBQTBCLElBQTFCLEVBQWdDQyxTQUFoQyxDQUFQO0FBQ0QsQ0FGRDs7QUFJQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCaEIsWUFBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3V0aWwvYXJyYXktc3RvcmFnZS5qcz83NThiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBBcnJheVN0b3JhZ2UgKCkge1xuICB0aGlzLl9pdGVtcyA9IFtdO1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5BcnJheVN0b3JhZ2UucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9pdGVtcyA9IFtdO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHthcnJheX0gaXRlbXMgLSBhcnJheSBpdGVtc1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbkFycmF5U3RvcmFnZS5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gKGl0ZW1zKSB7XG4gIHRoaXMuX2l0ZW1zID0gdGhpcy5faXRlbXMuY29uY2F0KGl0ZW1zKTtcbn07XG5cbi8qKlxuICpcbiAqIEByZXR1cm5zIHtudW1iZXJ9IC0gbnVtYmVyIG9mIGl0ZW1zXG4gKi9cbkFycmF5U3RvcmFnZS5wcm90b3R5cGUuY291bnQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9pdGVtcy5sZW5ndGg7XG59O1xuXG4vKipcbiAqXG4gKiBAcmV0dXJucyB7YXJyYXl9IC0gaXRlbXNcbiAqL1xuQXJyYXlTdG9yYWdlLnByb3RvdHlwZS5nZXRJdGVtcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2l0ZW1zO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGl0ZW0gLSBuZXcgaXRlbVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbkFycmF5U3RvcmFnZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHRoaXMuX2l0ZW1zLnB1c2goaXRlbSk7XG59O1xuXG4vKipcbiAqIHJlbW92ZXMgZmlyc3QgZWxlbWVudCBhbmQgcmV0dXJucyBpdFxuICogQHJldHVybnMgeyp9IC0gaXRlbVxuICovXG5BcnJheVN0b3JhZ2UucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5faXRlbXMuc2hpZnQoKTtcbn07XG5cbi8qKlxuICogYWRkIGVsZW1lbnRzIHRvIHRoZSBiZWdpbm5pbmcgb2YgYXJyYXlcbiAqIEByZXR1cm5zIHsqfSAtIG5ldyBsZW5ndGggb2YgYW4gYXJyYXlcbiAqL1xuQXJyYXlTdG9yYWdlLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5faXRlbXMudW5zaGlmdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheVN0b3JhZ2U7Il0sIm5hbWVzIjpbIkFycmF5U3RvcmFnZSIsIl9pdGVtcyIsInByb3RvdHlwZSIsImNsZWFyIiwiY29uY2F0IiwiaXRlbXMiLCJjb3VudCIsImxlbmd0aCIsImdldEl0ZW1zIiwicHVzaCIsIml0ZW0iLCJzaGlmdCIsInVuc2hpZnQiLCJhcHBseSIsImFyZ3VtZW50cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9567\n")},5079:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar fs = __webpack_require__(7147);\n\nvar path = __webpack_require__(1017);\n\nvar appSettings = __webpack_require__(9277);\n/**\n *\n * @param {string} manifestId - manifest Id\n * @param {string} downloadFolder - donwload folder\n * @returns {Promise} promise\n */\n\n\nmodule.exports = function (manifestId, downloadFolder) {\n  var settingsPath = path.resolve(appSettings.getSettings().settingsFolder + "/" + manifestId + "/");\n  var moviePath = path.resolve(appSettings.getSettings().downloadsFolderPath + "/" + manifestId + "/");\n\n  if (downloadFolder) {\n    moviePath = path.resolve(downloadFolder + "/" + manifestId + "/");\n  }\n\n  function dirNotExists(dirToCheck) {\n    return new Promise(function (resolve\n    /* , reject */\n    ) {\n      fs.stat(dirToCheck, function (er, stat) {\n        if (er) {\n          resolve();\n        } else {\n          if (stat.isDirectory()) {\n            resolve(\'Folder already exists\');\n          } else {\n            resolve();\n          }\n        }\n      });\n    });\n  }\n\n  return new Promise(function (resolve, reject) {\n    Promise.all([dirNotExists(settingsPath), dirNotExists(moviePath)]).then(function (results) {\n      results = results || [];\n      var errors = results.filter(function (result) {\n        return typeof result !== \'undefined\';\n      });\n\n      if (errors.length) {\n        reject(results);\n      } else {\n        resolve();\n      }\n    }, reject);\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTA3OS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxFQUFFLEdBQUdDLG1CQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxJQUFNQyxJQUFJLEdBQUdELG1CQUFPLENBQUMsSUFBRCxDQUFwQjs7QUFDQSxJQUFNRSxXQUFXLEdBQUdGLG1CQUFPLENBQUMsSUFBRCxDQUEzQjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixVQUFVQyxVQUFWLEVBQXNCQyxjQUF0QixFQUFzQztFQUNyRCxJQUFNQyxZQUFZLEdBQUdOLElBQUksQ0FBQ08sT0FBTCxDQUFhTixXQUFXLENBQUNPLFdBQVosR0FBMEJDLGNBQTFCLEdBQTJDLEdBQTNDLEdBQWlETCxVQUFqRCxHQUE4RCxHQUEzRSxDQUFyQjtFQUVBLElBQUlNLFNBQVMsR0FBR1YsSUFBSSxDQUFDTyxPQUFMLENBQWFOLFdBQVcsQ0FBQ08sV0FBWixHQUEwQkcsbUJBQTFCLEdBQWdELEdBQWhELEdBQXNEUCxVQUF0RCxHQUFtRSxHQUFoRixDQUFoQjs7RUFDQSxJQUFJQyxjQUFKLEVBQW9CO0lBQ2xCSyxTQUFTLEdBQUdWLElBQUksQ0FBQ08sT0FBTCxDQUFhRixjQUFjLEdBQUcsR0FBakIsR0FBdUJELFVBQXZCLEdBQW9DLEdBQWpELENBQVo7RUFDRDs7RUFFRCxTQUFTUSxZQUFULENBQXVCQyxVQUF2QixFQUFtQztJQUNqQyxPQUFPLElBQUlDLE9BQUosQ0FBWSxVQUFVUDtJQUFRO0lBQWxCLEVBQWtDO01BQ25EVCxFQUFFLENBQUNpQixJQUFILENBQVFGLFVBQVIsRUFBb0IsVUFBVUcsRUFBVixFQUFjRCxJQUFkLEVBQW9CO1FBQ3RDLElBQUlDLEVBQUosRUFBUTtVQUNOVCxPQUFPO1FBQ1IsQ0FGRCxNQUVPO1VBQ0wsSUFBSVEsSUFBSSxDQUFDRSxXQUFMLEVBQUosRUFBd0I7WUFDdEJWLE9BQU8sQ0FBQyx1QkFBRCxDQUFQO1VBQ0QsQ0FGRCxNQUVPO1lBQ0xBLE9BQU87VUFDUjtRQUNGO01BQ0YsQ0FWRDtJQVdELENBWk0sQ0FBUDtFQWFEOztFQUVELE9BQU8sSUFBSU8sT0FBSixDQUFZLFVBQVVQLE9BQVYsRUFBbUJXLE1BQW5CLEVBQTJCO0lBQzVDSixPQUFPLENBQUNLLEdBQVIsQ0FBWSxDQUNWUCxZQUFZLENBQUNOLFlBQUQsQ0FERixFQUVWTSxZQUFZLENBQUNGLFNBQUQsQ0FGRixDQUFaLEVBR0dVLElBSEgsQ0FHUSxVQUFVQyxPQUFWLEVBQW1CO01BQ3pCQSxPQUFPLEdBQUdBLE9BQU8sSUFBSSxFQUFyQjtNQUNBLElBQU1DLE1BQU0sR0FBR0QsT0FBTyxDQUFDRSxNQUFSLENBQWUsVUFBVUMsTUFBVixFQUFrQjtRQUM5QyxPQUFPLE9BQU9BLE1BQVAsS0FBa0IsV0FBekI7TUFDRCxDQUZjLENBQWY7O01BR0EsSUFBSUYsTUFBTSxDQUFDRyxNQUFYLEVBQW1CO1FBQ2pCUCxNQUFNLENBQUNHLE9BQUQsQ0FBTjtNQUNELENBRkQsTUFFTztRQUNMZCxPQUFPO01BQ1I7SUFDRixDQWJELEVBYUdXLE1BYkg7RUFjRCxDQWZNLENBQVA7QUFnQkQsQ0F4Q0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3V0aWwvY2FuLWNyZWF0ZS1tYW5pZmVzdC5qcz9iNzZlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5jb25zdCBhcHBTZXR0aW5ncyA9IHJlcXVpcmUoXCIuLi9hcHAtc2V0dGluZ3NcIik7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYW5pZmVzdElkIC0gbWFuaWZlc3QgSWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBkb3dubG9hZEZvbGRlciAtIGRvbndsb2FkIGZvbGRlclxuICogQHJldHVybnMge1Byb21pc2V9IHByb21pc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWFuaWZlc3RJZCwgZG93bmxvYWRGb2xkZXIpIHtcbiAgY29uc3Qgc2V0dGluZ3NQYXRoID0gcGF0aC5yZXNvbHZlKGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkuc2V0dGluZ3NGb2xkZXIgKyBcIi9cIiArIG1hbmlmZXN0SWQgKyBcIi9cIik7XG5cbiAgbGV0IG1vdmllUGF0aCA9IHBhdGgucmVzb2x2ZShhcHBTZXR0aW5ncy5nZXRTZXR0aW5ncygpLmRvd25sb2Fkc0ZvbGRlclBhdGggKyBcIi9cIiArIG1hbmlmZXN0SWQgKyBcIi9cIik7XG4gIGlmIChkb3dubG9hZEZvbGRlcikge1xuICAgIG1vdmllUGF0aCA9IHBhdGgucmVzb2x2ZShkb3dubG9hZEZvbGRlciArIFwiL1wiICsgbWFuaWZlc3RJZCArIFwiL1wiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpck5vdEV4aXN0cyAoZGlyVG9DaGVjaykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSAvKiAsIHJlamVjdCAqLykge1xuICAgICAgZnMuc3RhdChkaXJUb0NoZWNrLCBmdW5jdGlvbiAoZXIsIHN0YXQpIHtcbiAgICAgICAgaWYgKGVyKSB7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzdGF0LmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgICAgIHJlc29sdmUoJ0ZvbGRlciBhbHJlYWR5IGV4aXN0cycpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgUHJvbWlzZS5hbGwoW1xuICAgICAgZGlyTm90RXhpc3RzKHNldHRpbmdzUGF0aCksXG4gICAgICBkaXJOb3RFeGlzdHMobW92aWVQYXRoKVxuICAgIF0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgICAgIHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuICAgICAgY29uc3QgZXJyb3JzID0gcmVzdWx0cy5maWx0ZXIoZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHJlc3VsdCAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgICB9KTtcbiAgICAgIGlmIChlcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgIHJlamVjdChyZXN1bHRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH1cbiAgICB9LCByZWplY3QpO1xuICB9KTtcbn07XG4iXSwibmFtZXMiOlsiZnMiLCJyZXF1aXJlIiwicGF0aCIsImFwcFNldHRpbmdzIiwibW9kdWxlIiwiZXhwb3J0cyIsIm1hbmlmZXN0SWQiLCJkb3dubG9hZEZvbGRlciIsInNldHRpbmdzUGF0aCIsInJlc29sdmUiLCJnZXRTZXR0aW5ncyIsInNldHRpbmdzRm9sZGVyIiwibW92aWVQYXRoIiwiZG93bmxvYWRzRm9sZGVyUGF0aCIsImRpck5vdEV4aXN0cyIsImRpclRvQ2hlY2siLCJQcm9taXNlIiwic3RhdCIsImVyIiwiaXNEaXJlY3RvcnkiLCJyZWplY3QiLCJhbGwiLCJ0aGVuIiwicmVzdWx0cyIsImVycm9ycyIsImZpbHRlciIsInJlc3VsdCIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5079\n')},9921:module=>{"use strict";eval('\n/**\n * the idea is to copy the methods from storage so that they can be triggered from parent object and then propagated back\n * to the storage object.\n * for example:\n *    someController.storage.status.setItem(manifestId, someKey, someValue);\n *    someController.storage.downloads.setItem(manifestId, someKey, someValue);\n * @param {object} scope - parent object where the method "From" object will be bridged to\n * @param {object} From - object where the original method was declared\n * @returns {void}\n */\n\nfunction createBridgeMethods(scope, From) {\n  function action() {\n    var args = [],\n        i,\n        j;\n\n    for (i = 0, j = arguments.length; i < j; i++) {\n      args.push(arguments[i]);\n    }\n\n    args.unshift(this._storageKey);\n    return this._parent._itemAction.apply(this._parent, args);\n  }\n\n  for (var methodName in From.prototype) {\n    if (From.prototype.hasOwnProperty(methodName)) {\n      scope[methodName] = action.bind(scope, methodName);\n    }\n  }\n}\n\nmodule.exports = createBridgeMethods;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTkyMS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFNBQVNBLG1CQUFULENBQThCQyxLQUE5QixFQUFxQ0MsSUFBckMsRUFBMkM7RUFDekMsU0FBU0MsTUFBVCxHQUFtQjtJQUNqQixJQUFJQyxJQUFJLEdBQUcsRUFBWDtJQUFBLElBQWVDLENBQWY7SUFBQSxJQUFrQkMsQ0FBbEI7O0lBQ0EsS0FBS0QsQ0FBQyxHQUFHLENBQUosRUFBT0MsQ0FBQyxHQUFHQyxTQUFTLENBQUNDLE1BQTFCLEVBQWtDSCxDQUFDLEdBQUdDLENBQXRDLEVBQXlDRCxDQUFDLEVBQTFDLEVBQThDO01BQzVDRCxJQUFJLENBQUNLLElBQUwsQ0FBVUYsU0FBUyxDQUFDRixDQUFELENBQW5CO0lBQ0Q7O0lBQ0RELElBQUksQ0FBQ00sT0FBTCxDQUFhLEtBQUtDLFdBQWxCO0lBQ0EsT0FBTyxLQUFLQyxPQUFMLENBQWFDLFdBQWIsQ0FBeUJDLEtBQXpCLENBQStCLEtBQUtGLE9BQXBDLEVBQTZDUixJQUE3QyxDQUFQO0VBQ0Q7O0VBRUQsS0FBSyxJQUFJVyxVQUFULElBQXVCYixJQUFJLENBQUNjLFNBQTVCLEVBQXVDO0lBQ3JDLElBQUlkLElBQUksQ0FBQ2MsU0FBTCxDQUFlQyxjQUFmLENBQThCRixVQUE5QixDQUFKLEVBQStDO01BQzdDZCxLQUFLLENBQUNjLFVBQUQsQ0FBTCxHQUFvQlosTUFBTSxDQUFDZSxJQUFQLENBQVlqQixLQUFaLEVBQW1CYyxVQUFuQixDQUFwQjtJQUNEO0VBQ0Y7QUFDRjs7QUFFREksTUFBTSxDQUFDQyxPQUFQLEdBQWlCcEIsbUJBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS91dGlsL2NyZWF0ZS1icmlkZ2UtbWV0aG9kcy5qcz85NzA5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIHRoZSBpZGVhIGlzIHRvIGNvcHkgdGhlIG1ldGhvZHMgZnJvbSBzdG9yYWdlIHNvIHRoYXQgdGhleSBjYW4gYmUgdHJpZ2dlcmVkIGZyb20gcGFyZW50IG9iamVjdCBhbmQgdGhlbiBwcm9wYWdhdGVkIGJhY2tcbiAqIHRvIHRoZSBzdG9yYWdlIG9iamVjdC5cbiAqIGZvciBleGFtcGxlOlxuICogICAgc29tZUNvbnRyb2xsZXIuc3RvcmFnZS5zdGF0dXMuc2V0SXRlbShtYW5pZmVzdElkLCBzb21lS2V5LCBzb21lVmFsdWUpO1xuICogICAgc29tZUNvbnRyb2xsZXIuc3RvcmFnZS5kb3dubG9hZHMuc2V0SXRlbShtYW5pZmVzdElkLCBzb21lS2V5LCBzb21lVmFsdWUpO1xuICogQHBhcmFtIHtvYmplY3R9IHNjb3BlIC0gcGFyZW50IG9iamVjdCB3aGVyZSB0aGUgbWV0aG9kIFwiRnJvbVwiIG9iamVjdCB3aWxsIGJlIGJyaWRnZWQgdG9cbiAqIEBwYXJhbSB7b2JqZWN0fSBGcm9tIC0gb2JqZWN0IHdoZXJlIHRoZSBvcmlnaW5hbCBtZXRob2Qgd2FzIGRlY2xhcmVkXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnJpZGdlTWV0aG9kcyAoc2NvcGUsIEZyb20pIHtcbiAgZnVuY3Rpb24gYWN0aW9uICgpIHtcbiAgICBsZXQgYXJncyA9IFtdLCBpLCBqO1xuICAgIGZvciAoaSA9IDAsIGogPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG4gICAgYXJncy51bnNoaWZ0KHRoaXMuX3N0b3JhZ2VLZXkpO1xuICAgIHJldHVybiB0aGlzLl9wYXJlbnQuX2l0ZW1BY3Rpb24uYXBwbHkodGhpcy5fcGFyZW50LCBhcmdzKTtcbiAgfVxuXG4gIGZvciAobGV0IG1ldGhvZE5hbWUgaW4gRnJvbS5wcm90b3R5cGUpIHtcbiAgICBpZiAoRnJvbS5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkobWV0aG9kTmFtZSkpIHtcbiAgICAgIHNjb3BlW21ldGhvZE5hbWVdID0gYWN0aW9uLmJpbmQoc2NvcGUsIG1ldGhvZE5hbWUpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUJyaWRnZU1ldGhvZHM7Il0sIm5hbWVzIjpbImNyZWF0ZUJyaWRnZU1ldGhvZHMiLCJzY29wZSIsIkZyb20iLCJhY3Rpb24iLCJhcmdzIiwiaSIsImoiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwdXNoIiwidW5zaGlmdCIsIl9zdG9yYWdlS2V5IiwiX3BhcmVudCIsIl9pdGVtQWN0aW9uIiwiYXBwbHkiLCJtZXRob2ROYW1lIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJiaW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9921\n')},8494:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar fs = __webpack_require__(7147);\n\nvar path = __webpack_require__(1017);\n/**\n * @param {string} dir - folder path\n * @param {string} itemName - folder or file name\n * @param {boolean} includeFolders - if folders should be included\n * @param {boolean} includeFiles - if files should be included\n * @returns {Promise} promise\n */\n\n\nfunction filterDirItem(dir, itemName, includeFolders, includeFiles) {\n  var folderPath = path.resolve(dir + "/" + itemName);\n  return new Promise(function (resolve, reject) {\n    fs.stat(folderPath, function (err, stat) {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      if (stat.isDirectory()) {\n        if (!includeFolders) {\n          itemName = undefined;\n        }\n\n        resolve(itemName);\n      } else {\n        if (!includeFiles) {\n          itemName = undefined;\n        }\n\n        resolve(itemName);\n      }\n    });\n  });\n}\n/**\n * @param {string} dir - folder path\n * @param {boolean} includeFolders - if folders should be included\n * @param {boolean} includeFiles - if files should be included\n * @returns {Promise} promise\n */\n\n\nfunction dirList(dir, includeFolders, includeFiles) {\n  if (typeof includeFolders === "undefined") {\n    includeFolders = true;\n  }\n\n  if (typeof includeFiles === "undefined") {\n    includeFiles = true;\n  }\n\n  return new Promise(function (resolve, reject) {\n    fs.readdir(dir, function (err, folders) {\n      if (err) {\n        //not found return empty list, there was another error ENOTDIR but it seems like this is not a valid case anyway\n        if (err.code === "ENOENT" || err.code === "ENOTDIR") {\n          resolve([]);\n        } else {\n          reject(err.message);\n        }\n      } else {\n        var foldersPromises = [];\n\n        for (var i = 0, j = folders.length; i < j; i++) {\n          foldersPromises.push(filterDirItem(dir, folders[i], includeFolders, includeFiles));\n        }\n\n        Promise.all(foldersPromises).then(function (results) {\n          resolve(results.filter(function (folderName) {\n            return typeof folderName !== "undefined";\n          }));\n        }, function (promiseError) {\n          reject(promiseError);\n        });\n      }\n    });\n  });\n}\n\nmodule.exports = dirList;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QnBCLE1BQU0sQ0FBQ29CLFlBQUQsQ0FBTjtRQUNELENBTkQ7TUFPRDtJQUNGLENBckJEO0VBc0JELENBdkJNLENBQVA7QUF3QkQ7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmpCLE9BQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS91dGlsL2Rpci1saXN0LmpzPzJmMWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGRpciAtIGZvbGRlciBwYXRoXG4gKiBAcGFyYW0ge3N0cmluZ30gaXRlbU5hbWUgLSBmb2xkZXIgb3IgZmlsZSBuYW1lXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluY2x1ZGVGb2xkZXJzIC0gaWYgZm9sZGVycyBzaG91bGQgYmUgaW5jbHVkZWRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5jbHVkZUZpbGVzIC0gaWYgZmlsZXMgc2hvdWxkIGJlIGluY2x1ZGVkXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gcHJvbWlzZVxuICovXG5mdW5jdGlvbiBmaWx0ZXJEaXJJdGVtKGRpciwgaXRlbU5hbWUsIGluY2x1ZGVGb2xkZXJzLCBpbmNsdWRlRmlsZXMpIHtcbiAgY29uc3QgZm9sZGVyUGF0aCA9IHBhdGgucmVzb2x2ZShkaXIgKyBcIi9cIiArIGl0ZW1OYW1lKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmcy5zdGF0KGZvbGRlclBhdGgsIGZ1bmN0aW9uIChlcnIsIHN0YXQpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChzdGF0LmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgaWYgKCFpbmNsdWRlRm9sZGVycykge1xuICAgICAgICAgIGl0ZW1OYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUoaXRlbU5hbWUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWluY2x1ZGVGaWxlcykge1xuICAgICAgICAgIGl0ZW1OYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUoaXRlbU5hbWUpXG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXIgLSBmb2xkZXIgcGF0aFxuICogQHBhcmFtIHtib29sZWFufSBpbmNsdWRlRm9sZGVycyAtIGlmIGZvbGRlcnMgc2hvdWxkIGJlIGluY2x1ZGVkXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluY2x1ZGVGaWxlcyAtIGlmIGZpbGVzIHNob3VsZCBiZSBpbmNsdWRlZFxuICogQHJldHVybnMge1Byb21pc2V9IHByb21pc2VcbiAqL1xuZnVuY3Rpb24gZGlyTGlzdChkaXIsIGluY2x1ZGVGb2xkZXJzLCBpbmNsdWRlRmlsZXMpIHtcbiAgaWYgKHR5cGVvZiBpbmNsdWRlRm9sZGVycyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGluY2x1ZGVGb2xkZXJzID0gdHJ1ZTtcbiAgfVxuICBpZiAodHlwZW9mIGluY2x1ZGVGaWxlcyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGluY2x1ZGVGaWxlcyA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmcy5yZWFkZGlyKGRpciwgZnVuY3Rpb24gKGVyciwgZm9sZGVycykge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICAvL25vdCBmb3VuZCByZXR1cm4gZW1wdHkgbGlzdCwgdGhlcmUgd2FzIGFub3RoZXIgZXJyb3IgRU5PVERJUiBidXQgaXQgc2VlbXMgbGlrZSB0aGlzIGlzIG5vdCBhIHZhbGlkIGNhc2UgYW55d2F5XG4gICAgICAgIGlmIChlcnIuY29kZSA9PT0gXCJFTk9FTlRcIiB8fCBlcnIuY29kZSA9PT0gXCJFTk9URElSXCIpIHtcbiAgICAgICAgICByZXNvbHZlKFtdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoZXJyLm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgZm9sZGVyc1Byb21pc2VzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gZm9sZGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICBmb2xkZXJzUHJvbWlzZXMucHVzaChmaWx0ZXJEaXJJdGVtKGRpciwgZm9sZGVyc1tpXSwgaW5jbHVkZUZvbGRlcnMsIGluY2x1ZGVGaWxlcykpO1xuICAgICAgICB9XG4gICAgICAgIFByb21pc2UuYWxsKGZvbGRlcnNQcm9taXNlcykudGhlbihmdW5jdGlvbiAocmVzdWx0cykge1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0cy5maWx0ZXIoZnVuY3Rpb24gKGZvbGRlck5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgZm9sZGVyTmFtZSAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKHByb21pc2VFcnJvcikge1xuICAgICAgICAgIHJlamVjdChwcm9taXNlRXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGlyTGlzdDtcbiJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwYXRoIiwiZmlsdGVyRGlySXRlbSIsImRpciIsIml0ZW1OYW1lIiwiaW5jbHVkZUZvbGRlcnMiLCJpbmNsdWRlRmlsZXMiLCJmb2xkZXJQYXRoIiwicmVzb2x2ZSIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0IiwiZXJyIiwiaXNEaXJlY3RvcnkiLCJ1bmRlZmluZWQiLCJkaXJMaXN0IiwicmVhZGRpciIsImZvbGRlcnMiLCJjb2RlIiwibWVzc2FnZSIsImZvbGRlcnNQcm9taXNlcyIsImkiLCJqIiwibGVuZ3RoIiwicHVzaCIsImFsbCIsInRoZW4iLCJyZXN1bHRzIiwiZmlsdGVyIiwiZm9sZGVyTmFtZSIsInByb21pc2VFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8494\n')},957:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar constants = __webpack_require__(6953);\n\nvar utilUrl = __webpack_require__(8279);\n/**\n * @module\n * @namespace downloadUtil\n */\n\n\nvar downloadUtil = {};\n/**\n * @typedef {Link} Link\n * @property {string} id - identifier\n * @property {number} bandwidth - bandwidth\n * @property {string} contentType - content type [video, audio, text]\n * @property {string} remoteUrl - remote url\n * @property {string} localUrl - local url\n */\n\n/**\n * @typedef {Link} Link\n * @property {string} id - identifier\n * @property {number} bandwidth - bandwidth\n * @property {string} contentType - content type [video, audio, text]\n * @property {string} remoteUrl - remote url\n * @property {string} localUrl - local url\n */\n\n/**\n * @param {string} manifestId - manifest identifier\n * @param {string} localPath - local path\n * @param {string} remotePath - remote path\n * @param {Array} userRepresentations - representations chosen by a user\n * @param {Array} manifestRepresentations - all manifest representations\n * @param {object} downloadedHash - download unique identifier\n * @returns {Link[]} array of {@link Link}\n */\n\ndownloadUtil.getAllLinks = function getAllLinks(manifestId, localPath, remotePath, userRepresentations, manifestRepresentations) {\n  return downloadUtil.getDownloadLinks(manifestId, localPath, remotePath, userRepresentations, manifestRepresentations);\n};\n/**\n * @param {string} manifestId - manifest identifier\n * @param {string} localPath - local path\n * @param {string} remotePath - remote path\n * @param {Array} userRepresentations - representations chosen by a user\n * @param {Array} manifestRepresentations - all manifest representations\n * @param {object} downloadedHash - download unique identifier\n * @returns {Link[]} array of {@link Link}\n */\n\n\ndownloadUtil.getDownloadLinks = function getDownloadLinks(manifestId, localPath, remotePath, userRepresentations, manifestRepresentations, downloadedHash) {\n  var chosenRepresentations = downloadUtil.getChosenRepresentations(userRepresentations, manifestRepresentations);\n  var bandwidth, contentType, localUrl, i, id, j, k, l, links;\n  var mediaFile, mediaBaseUrl, mediaUrls, remoteUrl, segmentInformation;\n  links = [];\n  downloadedHash = downloadedHash || {};\n\n  for (i = 0, j = chosenRepresentations.length; i < j; i++) {\n    contentType = chosenRepresentations[i].attributeList.mimeType;\n    bandwidth = +chosenRepresentations[i].attributeList.bandwidth;\n\n    if (contentType.indexOf("video") === 0) {\n      contentType = "video";\n    } else if (contentType.indexOf("audio") === 0) {\n      contentType = "audio";\n    } else {\n      contentType = "text";\n    }\n\n    segmentInformation = chosenRepresentations[i].segmentInformation;\n    mediaUrls = segmentInformation.mediaUrls;\n    id = segmentInformation.representationID;\n\n    for (k = 0, l = mediaUrls.length; k < l; k++) {\n      mediaFile = mediaUrls[k].mediaFile;\n      mediaBaseUrl = mediaUrls[k].baseURL;\n      mediaBaseUrl = mediaBaseUrl.replace(/\\.\\.\\//g, "");\n      mediaBaseUrl = mediaBaseUrl.replace(/\\.\\./g, "");\n\n      if (mediaFile === mediaBaseUrl || remotePath === mediaBaseUrl) {\n        mediaBaseUrl = "";\n      } // remove http and https from mediaBaseUrl, this way it will create a correct folder structure\n\n\n      if (mediaBaseUrl.match(constants.regexpProtocolRemove)) {\n        remoteUrl = utilUrl.joinPathWithFile(mediaBaseUrl, mediaFile);\n        localUrl = utilUrl.joinPathWithFile(localPath, mediaBaseUrl.replace(constants.regexpProtocolRemove, ""), mediaFile);\n      } else {\n        remoteUrl = utilUrl.joinPathWithFile(remotePath, mediaBaseUrl, mediaFile);\n        localUrl = utilUrl.joinPathWithFile(localPath, mediaBaseUrl, mediaFile);\n      } // filter query string from localUrl\n\n\n      var index = localUrl.lastIndexOf(\'?\');\n\n      if (index > -1) {\n        localUrl = localUrl.substr(0, index);\n      }\n\n      if (!downloadedHash[localUrl] || !downloadedHash[localUrl] && downloadedHash[localUrl].remoteUrl !== remoteUrl) {\n        if (!links[k]) {\n          links[k] = [];\n        }\n\n        links[k].push({\n          id: id,\n          bandwidth: bandwidth,\n          contentType: contentType,\n          remoteUrl: remoteUrl,\n          localUrl: localUrl\n        });\n      }\n    }\n  } // NOTE: use links.flat() in the future\n\n\n  return links.reduce(function (acc, val) {\n    return acc.concat(val);\n  }, []);\n};\n/**\n *\n * @param {array} userChosenRepr - array of chosen representations ids by user\n * @param {array} manifestRepr - array of all manifest representations\n * @returns {array} chosen representations from manifest\n */\n\n\ndownloadUtil.getChosenRepresentations = function getChosenRepresentations(userChosenRepr, manifestRepr) {\n  var chosenRepresentations = [];\n  var userChosenReprObj = {};\n  userChosenRepr = userChosenRepr || [];\n  manifestRepr = manifestRepr || [];\n\n  for (var i = 0, j = userChosenRepr.length; i < j; i++) {\n    userChosenReprObj[String(userChosenRepr[i])] = true;\n  }\n\n  for (var _i = 0, _j = manifestRepr.length; _i < _j; _i++) {\n    var items = manifestRepr[_i].representationColl;\n\n    for (var k = 0, l = items.length; k < l; k++) {\n      var item = items[k];\n\n      if (userChosenReprObj[String(item.attributeList.id)]) {\n        chosenRepresentations.push(item);\n      }\n    }\n  }\n\n  return chosenRepresentations;\n};\n\nmodule.exports = downloadUtil;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///957\n')},5169:module=>{"use strict";eval("\n\nfunction isUTF16(data) {\n  var i = 0;\n  var len = data && data.length;\n  var pos = null;\n  var b1, b2, next, prev;\n\n  if (len < 2) {\n    if (data[0] > 0xFF) {\n      return false;\n    }\n  } else {\n    b1 = data[0];\n    b2 = data[1];\n\n    if (b1 === 0xFF && // BOM (little-endian)\n    b2 === 0xFE) {\n      return true;\n    }\n\n    if (b1 === 0xFE && // BOM (big-endian)\n    b2 === 0xFF) {\n      return true;\n    }\n\n    for (; i < len; i++) {\n      if (data[i] === 0x00) {\n        pos = i;\n        break;\n      } else if (data[i] > 0xFF) {\n        return false;\n      }\n    }\n\n    if (pos === null) {\n      return false; // Non ASCII\n    }\n\n    next = data[pos + 1]; // BE\n\n    if (next !== void 0 && next > 0x00 && next < 0x80) {\n      return true;\n    }\n\n    prev = data[pos - 1]; // LE\n\n    if (prev !== void 0 && prev > 0x00 && prev < 0x80) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nmodule.exports = {\n  isUTF16: isUTF16\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTE2OS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixTQUFTQSxPQUFULENBQWtCQyxJQUFsQixFQUF3QjtFQUN0QixJQUFJQyxDQUFDLEdBQUcsQ0FBUjtFQUNBLElBQUlDLEdBQUcsR0FBR0YsSUFBSSxJQUFJQSxJQUFJLENBQUNHLE1BQXZCO0VBQ0EsSUFBSUMsR0FBRyxHQUFHLElBQVY7RUFDQSxJQUFJQyxFQUFKLEVBQVFDLEVBQVIsRUFBWUMsSUFBWixFQUFrQkMsSUFBbEI7O0VBRUEsSUFBSU4sR0FBRyxHQUFHLENBQVYsRUFBYTtJQUNULElBQUlGLElBQUksQ0FBQyxDQUFELENBQUosR0FBVSxJQUFkLEVBQW9CO01BQ2hCLE9BQU8sS0FBUDtJQUNIO0VBQ0osQ0FKRCxNQUlPO0lBQ0hLLEVBQUUsR0FBR0wsSUFBSSxDQUFDLENBQUQsQ0FBVDtJQUNBTSxFQUFFLEdBQUdOLElBQUksQ0FBQyxDQUFELENBQVQ7O0lBQ0EsSUFBSUssRUFBRSxLQUFLLElBQVAsSUFBZTtJQUNmQyxFQUFFLEtBQUssSUFEWCxFQUNpQjtNQUNiLE9BQU8sSUFBUDtJQUNIOztJQUNELElBQUlELEVBQUUsS0FBSyxJQUFQLElBQWU7SUFDZkMsRUFBRSxLQUFLLElBRFgsRUFDaUI7TUFDYixPQUFPLElBQVA7SUFDSDs7SUFFRCxPQUFPTCxDQUFDLEdBQUdDLEdBQVgsRUFBZ0JELENBQUMsRUFBakIsRUFBcUI7TUFDakIsSUFBSUQsSUFBSSxDQUFDQyxDQUFELENBQUosS0FBWSxJQUFoQixFQUFzQjtRQUNsQkcsR0FBRyxHQUFHSCxDQUFOO1FBQ0E7TUFDSCxDQUhELE1BR08sSUFBSUQsSUFBSSxDQUFDQyxDQUFELENBQUosR0FBVSxJQUFkLEVBQW9CO1FBQ3ZCLE9BQU8sS0FBUDtNQUNIO0lBQ0o7O0lBRUQsSUFBSUcsR0FBRyxLQUFLLElBQVosRUFBa0I7TUFDZCxPQUFPLEtBQVAsQ0FEYyxDQUNBO0lBQ2pCOztJQUVERyxJQUFJLEdBQUdQLElBQUksQ0FBQ0ksR0FBRyxHQUFHLENBQVAsQ0FBWCxDQXpCRyxDQXlCbUI7O0lBQ3RCLElBQUlHLElBQUksS0FBSyxLQUFLLENBQWQsSUFBbUJBLElBQUksR0FBRyxJQUExQixJQUFrQ0EsSUFBSSxHQUFHLElBQTdDLEVBQW1EO01BQy9DLE9BQU8sSUFBUDtJQUNIOztJQUVEQyxJQUFJLEdBQUdSLElBQUksQ0FBQ0ksR0FBRyxHQUFHLENBQVAsQ0FBWCxDQTlCRyxDQThCbUI7O0lBQ3RCLElBQUlJLElBQUksS0FBSyxLQUFLLENBQWQsSUFBbUJBLElBQUksR0FBRyxJQUExQixJQUFrQ0EsSUFBSSxHQUFHLElBQTdDLEVBQW1EO01BQy9DLE9BQU8sSUFBUDtJQUNIO0VBQ0o7O0VBRUQsT0FBTyxLQUFQO0FBQ0Q7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtFQUNmWCxPQUFPLEVBQUVBO0FBRE0sQ0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3V0aWwvZW5jb2RpbmcuanM/ODgxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gaXNVVEYxNiAoZGF0YSkge1xuICB2YXIgaSA9IDA7XG4gIHZhciBsZW4gPSBkYXRhICYmIGRhdGEubGVuZ3RoO1xuICB2YXIgcG9zID0gbnVsbDtcbiAgdmFyIGIxLCBiMiwgbmV4dCwgcHJldjtcblxuICBpZiAobGVuIDwgMikge1xuICAgICAgaWYgKGRhdGFbMF0gPiAweEZGKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICB9IGVsc2Uge1xuICAgICAgYjEgPSBkYXRhWzBdO1xuICAgICAgYjIgPSBkYXRhWzFdO1xuICAgICAgaWYgKGIxID09PSAweEZGICYmIC8vIEJPTSAobGl0dGxlLWVuZGlhbilcbiAgICAgICAgICBiMiA9PT0gMHhGRSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGIxID09PSAweEZFICYmIC8vIEJPTSAoYmlnLWVuZGlhbilcbiAgICAgICAgICBiMiA9PT0gMHhGRikge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGRhdGFbaV0gPT09IDB4MDApIHtcbiAgICAgICAgICAgICAgcG9zID0gaTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIGlmIChkYXRhW2ldID4gMHhGRikge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocG9zID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBOb24gQVNDSUlcbiAgICAgIH1cblxuICAgICAgbmV4dCA9IGRhdGFbcG9zICsgMV07IC8vIEJFXG4gICAgICBpZiAobmV4dCAhPT0gdm9pZCAwICYmIG5leHQgPiAweDAwICYmIG5leHQgPCAweDgwKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHByZXYgPSBkYXRhW3BvcyAtIDFdOyAvLyBMRVxuICAgICAgaWYgKHByZXYgIT09IHZvaWQgMCAmJiBwcmV2ID4gMHgwMCAmJiBwcmV2IDwgMHg4MCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNVVEYxNjogaXNVVEYxNlxufSJdLCJuYW1lcyI6WyJpc1VURjE2IiwiZGF0YSIsImkiLCJsZW4iLCJsZW5ndGgiLCJwb3MiLCJiMSIsImIyIiwibmV4dCIsInByZXYiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5169\n")},9241:module=>{"use strict";eval('\n\nmodule.exports = function fieldsPicker(obj, fields, attr) {\n  if (typeof attr === "undefined") {\n    return;\n  }\n\n  for (var i = 0, j = fields.length; i < j; i++) {\n    var field = fields[i];\n    var defaultValue = field.defaultValue;\n    var name = field.name || field;\n    obj[name] = typeof attr[name] !== "undefined" ? attr[name] : defaultValue;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTI0MS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLFlBQVQsQ0FBdUJDLEdBQXZCLEVBQTRCQyxNQUE1QixFQUFvQ0MsSUFBcEMsRUFBMEM7RUFDekQsSUFBSSxPQUFPQSxJQUFQLEtBQWdCLFdBQXBCLEVBQWlDO0lBQy9CO0VBQ0Q7O0VBQ0QsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBUixFQUFXQyxDQUFDLEdBQUdILE1BQU0sQ0FBQ0ksTUFBM0IsRUFBbUNGLENBQUMsR0FBR0MsQ0FBdkMsRUFBMENELENBQUMsRUFBM0MsRUFBK0M7SUFDN0MsSUFBTUcsS0FBSyxHQUFHTCxNQUFNLENBQUNFLENBQUQsQ0FBcEI7SUFDQSxJQUFNSSxZQUFZLEdBQUdELEtBQUssQ0FBQ0MsWUFBM0I7SUFDQSxJQUFNQyxJQUFJLEdBQUdGLEtBQUssQ0FBQ0UsSUFBTixJQUFjRixLQUEzQjtJQUNBTixHQUFHLENBQUNRLElBQUQsQ0FBSCxHQUFZLE9BQU9OLElBQUksQ0FBQ00sSUFBRCxDQUFYLEtBQXNCLFdBQXRCLEdBQW9DTixJQUFJLENBQUNNLElBQUQsQ0FBeEMsR0FBaURELFlBQTdEO0VBQ0Q7QUFDRixDQVZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS91dGlsL2ZpZWxkcy1waWNrZXIuanM/MDYzZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWVsZHNQaWNrZXIgKG9iaiwgZmllbGRzLCBhdHRyKSB7XG4gIGlmICh0eXBlb2YgYXR0ciA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKGxldCBpID0gMCwgaiA9IGZpZWxkcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICBjb25zdCBmaWVsZCA9IGZpZWxkc1tpXTtcbiAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSBmaWVsZC5kZWZhdWx0VmFsdWU7XG4gICAgY29uc3QgbmFtZSA9IGZpZWxkLm5hbWUgfHwgZmllbGQ7XG4gICAgb2JqW25hbWVdID0gdHlwZW9mIGF0dHJbbmFtZV0gIT09IFwidW5kZWZpbmVkXCIgPyBhdHRyW25hbWVdIDogZGVmYXVsdFZhbHVlO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJmaWVsZHNQaWNrZXIiLCJvYmoiLCJmaWVsZHMiLCJhdHRyIiwiaSIsImoiLCJsZW5ndGgiLCJmaWVsZCIsImRlZmF1bHRWYWx1ZSIsIm5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9241\n')},7815:module=>{"use strict";eval('\n\nfunction removeCharacter(text, pos) {\n  var newText;\n  newText = text.substr(0, pos - 1);\n\n  if (text.length > pos) {\n    newText += text.substr(pos, text.length);\n  }\n\n  return newText;\n}\n\nfunction getInvalidDiff(text, regex, openingTag, closingTag) {\n  var value = String(text);\n  var check = true;\n  var i = 1;\n\n  while (check) {\n    var valueToCheck = value.substr(0, i);\n\n    if (!valueToCheck.match(regex)) {\n      value = removeCharacter(value, i);\n    } else {\n      i++;\n    }\n\n    if (i > value.length) {\n      check = false;\n    }\n  }\n\n  var arrValue = value.split("");\n\n  for (var _i = 0, j = text.length; _i < j; _i++) {\n    if (_i >= arrValue.length || text[_i] !== arrValue[_i]) {\n      arrValue.splice(_i, 0, openingTag + text[_i] + closingTag);\n    }\n  }\n\n  return arrValue.join("");\n}\n\nmodule.exports = getInvalidDiff;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzgxNS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixTQUFTQSxlQUFULENBQTBCQyxJQUExQixFQUFnQ0MsR0FBaEMsRUFBcUM7RUFDbkMsSUFBSUMsT0FBSjtFQUNBQSxPQUFPLEdBQUdGLElBQUksQ0FBQ0csTUFBTCxDQUFZLENBQVosRUFBZUYsR0FBRyxHQUFHLENBQXJCLENBQVY7O0VBQ0EsSUFBSUQsSUFBSSxDQUFDSSxNQUFMLEdBQWNILEdBQWxCLEVBQXVCO0lBQ3JCQyxPQUFPLElBQUlGLElBQUksQ0FBQ0csTUFBTCxDQUFZRixHQUFaLEVBQWlCRCxJQUFJLENBQUNJLE1BQXRCLENBQVg7RUFDRDs7RUFDRCxPQUFPRixPQUFQO0FBQ0Q7O0FBRUQsU0FBU0csY0FBVCxDQUF5QkwsSUFBekIsRUFBK0JNLEtBQS9CLEVBQXNDQyxVQUF0QyxFQUFrREMsVUFBbEQsRUFBOEQ7RUFDNUQsSUFBSUMsS0FBSyxHQUFHQyxNQUFNLENBQUNWLElBQUQsQ0FBbEI7RUFDQSxJQUFJVyxLQUFLLEdBQUcsSUFBWjtFQUNBLElBQUlDLENBQUMsR0FBRyxDQUFSOztFQUNBLE9BQU9ELEtBQVAsRUFBYztJQUNaLElBQUlFLFlBQVksR0FBR0osS0FBSyxDQUFDTixNQUFOLENBQWEsQ0FBYixFQUFnQlMsQ0FBaEIsQ0FBbkI7O0lBRUEsSUFBSSxDQUFDQyxZQUFZLENBQUNDLEtBQWIsQ0FBbUJSLEtBQW5CLENBQUwsRUFBZ0M7TUFDOUJHLEtBQUssR0FBR1YsZUFBZSxDQUFDVSxLQUFELEVBQVFHLENBQVIsQ0FBdkI7SUFDRCxDQUZELE1BRU87TUFDTEEsQ0FBQztJQUNGOztJQUNELElBQUlBLENBQUMsR0FBR0gsS0FBSyxDQUFDTCxNQUFkLEVBQXNCO01BQ3BCTyxLQUFLLEdBQUcsS0FBUjtJQUNEO0VBQ0Y7O0VBQ0QsSUFBSUksUUFBUSxHQUFHTixLQUFLLENBQUNPLEtBQU4sQ0FBWSxFQUFaLENBQWY7O0VBQ0EsS0FBSyxJQUFJSixFQUFDLEdBQUcsQ0FBUixFQUFXSyxDQUFDLEdBQUdqQixJQUFJLENBQUNJLE1BQXpCLEVBQWlDUSxFQUFDLEdBQUdLLENBQXJDLEVBQXdDTCxFQUFDLEVBQXpDLEVBQTZDO0lBQzNDLElBQUlBLEVBQUMsSUFBSUcsUUFBUSxDQUFDWCxNQUFkLElBQXdCSixJQUFJLENBQUNZLEVBQUQsQ0FBSixLQUFZRyxRQUFRLENBQUNILEVBQUQsQ0FBaEQsRUFBcUQ7TUFDbkRHLFFBQVEsQ0FBQ0csTUFBVCxDQUFnQk4sRUFBaEIsRUFBbUIsQ0FBbkIsRUFBc0JMLFVBQVUsR0FBR1AsSUFBSSxDQUFDWSxFQUFELENBQWpCLEdBQXVCSixVQUE3QztJQUNEO0VBQ0Y7O0VBQ0QsT0FBT08sUUFBUSxDQUFDSSxJQUFULENBQWMsRUFBZCxDQUFQO0FBQ0Q7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmhCLGNBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS91dGlsL2dldC1pbnZhbGlkLWRpZmYuanM/YmExZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gcmVtb3ZlQ2hhcmFjdGVyICh0ZXh0LCBwb3MpIHtcbiAgbGV0IG5ld1RleHQ7XG4gIG5ld1RleHQgPSB0ZXh0LnN1YnN0cigwLCBwb3MgLSAxKTtcbiAgaWYgKHRleHQubGVuZ3RoID4gcG9zKSB7XG4gICAgbmV3VGV4dCArPSB0ZXh0LnN1YnN0cihwb3MsIHRleHQubGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gbmV3VGV4dDtcbn1cblxuZnVuY3Rpb24gZ2V0SW52YWxpZERpZmYgKHRleHQsIHJlZ2V4LCBvcGVuaW5nVGFnLCBjbG9zaW5nVGFnKSB7XG4gIGxldCB2YWx1ZSA9IFN0cmluZyh0ZXh0KTtcbiAgbGV0IGNoZWNrID0gdHJ1ZTtcbiAgbGV0IGkgPSAxO1xuICB3aGlsZSAoY2hlY2spIHtcbiAgICBsZXQgdmFsdWVUb0NoZWNrID0gdmFsdWUuc3Vic3RyKDAsIGkpO1xuXG4gICAgaWYgKCF2YWx1ZVRvQ2hlY2subWF0Y2gocmVnZXgpKSB7XG4gICAgICB2YWx1ZSA9IHJlbW92ZUNoYXJhY3Rlcih2YWx1ZSwgaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGkrKztcbiAgICB9XG4gICAgaWYgKGkgPiB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgIGNoZWNrID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGxldCBhcnJWYWx1ZSA9IHZhbHVlLnNwbGl0KFwiXCIpO1xuICBmb3IgKGxldCBpID0gMCwgaiA9IHRleHQubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgaWYgKGkgPj0gYXJyVmFsdWUubGVuZ3RoIHx8IHRleHRbaV0gIT09IGFyclZhbHVlW2ldKSB7XG4gICAgICBhcnJWYWx1ZS5zcGxpY2UoaSwgMCwgb3BlbmluZ1RhZyArIHRleHRbaV0gKyBjbG9zaW5nVGFnKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFyclZhbHVlLmpvaW4oXCJcIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0SW52YWxpZERpZmY7Il0sIm5hbWVzIjpbInJlbW92ZUNoYXJhY3RlciIsInRleHQiLCJwb3MiLCJuZXdUZXh0Iiwic3Vic3RyIiwibGVuZ3RoIiwiZ2V0SW52YWxpZERpZmYiLCJyZWdleCIsIm9wZW5pbmdUYWciLCJjbG9zaW5nVGFnIiwidmFsdWUiLCJTdHJpbmciLCJjaGVjayIsImkiLCJ2YWx1ZVRvQ2hlY2siLCJtYXRjaCIsImFyclZhbHVlIiwic3BsaXQiLCJqIiwic3BsaWNlIiwiam9pbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7815\n')},3721:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar net = __webpack_require__(1808);\n\nmodule.exports = function (port, fn) {\n  var tester = net.createServer().once('error', function (err) {\n    if (err) {\n      return fn(err);\n    }\n\n    fn(null, true);\n  }).once('listening', function () {\n    tester.once('close', function () {\n      fn(null, false);\n    }).close();\n  }).listen(port);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcyMS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxHQUFHLEdBQUdDLG1CQUFPLENBQUMsSUFBRCxDQUFuQjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLElBQVYsRUFBZ0JDLEVBQWhCLEVBQW9CO0VBQ25DLElBQU1DLE1BQU0sR0FBR04sR0FBRyxDQUFDTyxZQUFKLEdBQW1CQyxJQUFuQixDQUF3QixPQUF4QixFQUFpQyxVQUFVQyxHQUFWLEVBQWU7SUFDN0QsSUFBSUEsR0FBSixFQUFTO01BQ1AsT0FBT0osRUFBRSxDQUFDSSxHQUFELENBQVQ7SUFDRDs7SUFDREosRUFBRSxDQUFDLElBQUQsRUFBTyxJQUFQLENBQUY7RUFDRCxDQUxjLEVBS1pHLElBTFksQ0FLUCxXQUxPLEVBS00sWUFBWTtJQUMvQkYsTUFBTSxDQUFDRSxJQUFQLENBQVksT0FBWixFQUFxQixZQUFZO01BQy9CSCxFQUFFLENBQUMsSUFBRCxFQUFPLEtBQVAsQ0FBRjtJQUNELENBRkQsRUFFR0ssS0FGSDtFQUdELENBVGMsRUFTWkMsTUFUWSxDQVNMUCxJQVRLLENBQWY7QUFVRCxDQVhEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS91dGlsL2lzLXBvcnQtdGFrZW4uanM/Y2RjNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgbmV0ID0gcmVxdWlyZSgnbmV0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHBvcnQsIGZuKSB7XG4gIGNvbnN0IHRlc3RlciA9IG5ldC5jcmVhdGVTZXJ2ZXIoKS5vbmNlKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICByZXR1cm4gZm4oZXJyKTtcbiAgICB9XG4gICAgZm4obnVsbCwgdHJ1ZSk7XG4gIH0pLm9uY2UoJ2xpc3RlbmluZycsIGZ1bmN0aW9uICgpIHtcbiAgICB0ZXN0ZXIub25jZSgnY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmbihudWxsLCBmYWxzZSk7XG4gICAgfSkuY2xvc2UoKTtcbiAgfSkubGlzdGVuKHBvcnQpO1xufTtcbiJdLCJuYW1lcyI6WyJuZXQiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInBvcnQiLCJmbiIsInRlc3RlciIsImNyZWF0ZVNlcnZlciIsIm9uY2UiLCJlcnIiLCJjbG9zZSIsImxpc3RlbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3721\n")},4803:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar constants = __webpack_require__(6953);\n\nvar Manifest = (__webpack_require__(1269)/* .Manifest */ .G);\n\nvar XMLSerializer = (__webpack_require__(678).XMLSerializer);\n\nfunction getMimeType(value) {\n  if (value.indexOf("video") !== -1) {\n    return "video";\n  } else if (value.indexOf("audio") !== -1) {\n    return "audio";\n  } else {\n    return "text";\n  }\n}\n\nfunction parseManifestWithChoosenRepresentations(manifest, representations) {\n  var manifestId = manifest.id;\n  var xmlSerializer = new XMLSerializer();\n  var manifestUrl = manifest.getManifestUrl();\n  var manifestString = xmlSerializer.serializeToString(manifest.getManifestXML());\n  manifest = new Manifest(manifestId);\n  manifest.loadFromStr(manifestString, manifestUrl);\n  var video = representations.video;\n  var audio = representations.audio;\n  var text = representations.text;\n  var chosenRepresentations = {};\n  chosenRepresentations["video"] = {};\n\n  for (var i = 0, j = video.length; i < j; i++) {\n    chosenRepresentations["video"][video[i]] = true;\n  }\n\n  chosenRepresentations["audio"] = {};\n\n  for (var _i = 0, _j = audio.length; _i < _j; _i++) {\n    chosenRepresentations["audio"][audio[_i]] = true;\n  }\n\n  chosenRepresentations["text"] = {};\n\n  for (var _i2 = 0, _j2 = text.length; _i2 < _j2; _i2++) {\n    chosenRepresentations["text"][text[_i2]] = true;\n  }\n\n  function markNodeForDownload(repr) {\n    for (var _i3 = 0, _j3 = repr.length; _i3 < _j3; _i3++) {\n      for (var k = 0, l = repr[_i3].representationColl.length; k < l; k++) {\n        var id = repr[_i3].representationColl[k].attributeList.id;\n        var mimeType = getMimeType(repr[_i3].representationColl[k].attributeList.mimeType);\n\n        if (chosenRepresentations[mimeType][id]) {\n          repr[_i3].representationColl[k].markNodeForDownload(true);\n        }\n      }\n    }\n  } // fix the baseURL by removing http and https the same is done when saving a file\n  // see api/util/downloads.js -> getDownloadLinks\n\n\n  function fixBaseURL(repr) {\n    for (var _i4 = 0, _j4 = repr.length; _i4 < _j4; _i4++) {\n      var baseURL = repr[_i4].currentNode.getElementsByTagName("BaseURL")[0];\n\n      if (baseURL && baseURL.textContent.match(constants.regexpProtocolRemove)) {\n        baseURL.textContent = baseURL.textContent.replace(constants.regexpProtocolRemove, "");\n      }\n    }\n  }\n\n  markNodeForDownload(manifest.getVideoRepresentations());\n  markNodeForDownload(manifest.getAudioRepresentations());\n  markNodeForDownload(manifest.getTextRepresentations());\n  fixBaseURL(manifest.getVideoRepresentations());\n  fixBaseURL(manifest.getAudioRepresentations());\n  fixBaseURL(manifest.getTextRepresentations());\n  manifest.removeNode();\n  return xmlSerializer.serializeToString(manifest.getManifestXML());\n}\n\nmodule.exports = parseManifestWithChoosenRepresentations;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4803\n')},6951:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('/*eslint no-console: ["error", { allow: ["warn", "error", "info"] }] */\n\n\nvar fs = __webpack_require__(7147);\n\nvar path = __webpack_require__(1017);\n\nvar downloadFileUtil = __webpack_require__(2777);\n\nfunction removeDir(dir, cb, ENOTEMPTY_attempts) {\n  ENOTEMPTY_attempts = ENOTEMPTY_attempts || 0;\n  var ENOTEMPTY_maxAttempts = 10;\n  var ENOTEMPTY_TIMEOUT = 500;\n\n  if (typeof dir !== \'string\') {\n    throw new Error(\'directory path required\');\n  }\n\n  if (cb !== undefined && typeof cb !== \'function\') {\n    throw new Error(\'callback must be function\');\n  }\n\n  var self = this;\n  var called, results;\n  downloadFileUtil.checkForLocalFile(dir, function existsCallback(exists) {\n    if (!exists) {\n      return removeDirCallback(null);\n    }\n\n    fs.stat(dir, function statCallback(err, stat) {\n      if (err) {\n        return removeDirCallback(err);\n      }\n\n      if (!stat.isDirectory()) {\n        return fs.unlink(dir, removeDirCallback);\n      }\n\n      fs.readdir(dir, readdirCallback);\n    });\n\n    function readdirCallback(err, files) {\n      if (err) {\n        return removeDirCallback(err);\n      }\n\n      var n = files.length;\n\n      if (n === 0) {\n        return fs.rmdir(dir, removeDirCallback);\n      }\n\n      files.forEach(function (name) {\n        removeDir(path.resolve(dir, name), function (err) {\n          if (err) {\n            return removeDirCallback(err);\n          }\n\n          if (--n === 0) {\n            return fs.rmdir(dir, removeDirCallback);\n          }\n        });\n      });\n    }\n  });\n\n  function removeDirCallback(err) {\n    if (err && err.code === "ENOTEMPTY") {\n      if (ENOTEMPTY_attempts < ENOTEMPTY_maxAttempts) {\n        ENOTEMPTY_attempts++;\n        console.error("ERROR ENOTEMPTY", dir, ENOTEMPTY_attempts);\n        setTimeout(function () {\n          removeDir(dir, cb, ENOTEMPTY_attempts);\n        }, ENOTEMPTY_TIMEOUT);\n        return;\n      }\n    }\n\n    if (err && err.code === \'ENOENT\') {\n      arguments[0] = null;\n    }\n\n    if (!results) {\n      results = arguments;\n    }\n\n    if (!cb || called) {\n      return;\n    }\n\n    called = true;\n    cb.apply(self, results);\n  }\n}\n\nmodule.exports = removeDir;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QWMsaUJBQWQsRUFBaUM5QixHQUFqQyxFQUFzQ0Usa0JBQXRDO1FBQ0E2QixVQUFVLENBQUMsWUFBWTtVQUNyQmhDLFNBQVMsQ0FBQ0MsR0FBRCxFQUFNQyxFQUFOLEVBQVVDLGtCQUFWLENBQVQ7UUFDRCxDQUZTLEVBRVBFLGlCQUZPLENBQVY7UUFHQTtNQUNEO0lBQ0Y7O0lBQ0QsSUFBSVksR0FBRyxJQUFJQSxHQUFHLENBQUNZLElBQUosS0FBYSxRQUF4QixFQUFrQztNQUNoQ0ksU0FBUyxDQUFDLENBQUQsQ0FBVCxHQUFlLElBQWY7SUFDRDs7SUFFRCxJQUFJLENBQUN2QixPQUFMLEVBQWM7TUFDWkEsT0FBTyxHQUFHdUIsU0FBVjtJQUNEOztJQUNELElBQUksQ0FBQy9CLEVBQUQsSUFBT08sTUFBWCxFQUFtQjtNQUNqQjtJQUNEOztJQUNEQSxNQUFNLEdBQUcsSUFBVDtJQUNBUCxFQUFFLENBQUNnQyxLQUFILENBQVMxQixJQUFULEVBQWVFLE9BQWY7RUFDRDtBQUNGOztBQUVEeUIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCcEMsU0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3V0aWwvcmVtb3ZlLWRpci5qcz9mMjk0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qZXNsaW50IG5vLWNvbnNvbGU6IFtcImVycm9yXCIsIHsgYWxsb3c6IFtcIndhcm5cIiwgXCJlcnJvclwiLCBcImluZm9cIl0gfV0gKi9cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IGRvd25sb2FkRmlsZVV0aWwgPSByZXF1aXJlKFwiLi4vZG93bmxvYWRzL2Rvd25sb2FkLWZpbGUtdXRpbFwiKTtcblxuZnVuY3Rpb24gcmVtb3ZlRGlyIChkaXIsIGNiLCBFTk9URU1QVFlfYXR0ZW1wdHMpIHtcbiAgRU5PVEVNUFRZX2F0dGVtcHRzID0gRU5PVEVNUFRZX2F0dGVtcHRzIHx8IDA7XG4gIGNvbnN0IEVOT1RFTVBUWV9tYXhBdHRlbXB0cyA9IDEwO1xuICBjb25zdCBFTk9URU1QVFlfVElNRU9VVCA9IDUwMDtcblxuICBpZiAodHlwZW9mIGRpciAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RpcmVjdG9yeSBwYXRoIHJlcXVpcmVkJyk7XG4gIH1cblxuICBpZiAoY2IgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhbGxiYWNrIG11c3QgYmUgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gIGxldCBjYWxsZWQsIHJlc3VsdHM7XG5cbiAgZG93bmxvYWRGaWxlVXRpbC5jaGVja0ZvckxvY2FsRmlsZShkaXIsIGZ1bmN0aW9uIGV4aXN0c0NhbGxiYWNrIChleGlzdHMpIHtcbiAgICBpZiAoIWV4aXN0cykge1xuICAgICAgcmV0dXJuIHJlbW92ZURpckNhbGxiYWNrKG51bGwpO1xuICAgIH1cbiAgICBmcy5zdGF0KGRpciwgZnVuY3Rpb24gc3RhdENhbGxiYWNrIChlcnIsIHN0YXQpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIHJlbW92ZURpckNhbGxiYWNrKGVycik7XG4gICAgICB9XG4gICAgICBpZiAoIXN0YXQuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICByZXR1cm4gZnMudW5saW5rKGRpciwgcmVtb3ZlRGlyQ2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgZnMucmVhZGRpcihkaXIsIHJlYWRkaXJDYWxsYmFjayk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiByZWFkZGlyQ2FsbGJhY2sgKGVyciwgZmlsZXMpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIHJlbW92ZURpckNhbGxiYWNrKGVycik7XG4gICAgICB9XG5cbiAgICAgIGxldCBuID0gZmlsZXMubGVuZ3RoO1xuICAgICAgaWYgKG4gPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZzLnJtZGlyKGRpciwgcmVtb3ZlRGlyQ2FsbGJhY2spO1xuICAgICAgfVxuXG4gICAgICBmaWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJlbW92ZURpcihwYXRoLnJlc29sdmUoZGlyLCBuYW1lKSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiByZW1vdmVEaXJDYWxsYmFjayhlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoLS1uID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZnMucm1kaXIoZGlyLCByZW1vdmVEaXJDYWxsYmFjayk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gcmVtb3ZlRGlyQ2FsbGJhY2sgKGVycikge1xuICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgPT09IFwiRU5PVEVNUFRZXCIpIHtcbiAgICAgIGlmIChFTk9URU1QVFlfYXR0ZW1wdHMgPCBFTk9URU1QVFlfbWF4QXR0ZW1wdHMpIHtcbiAgICAgICAgRU5PVEVNUFRZX2F0dGVtcHRzKys7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFUlJPUiBFTk9URU1QVFlcIiwgZGlyLCBFTk9URU1QVFlfYXR0ZW1wdHMpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZW1vdmVEaXIoZGlyLCBjYiwgRU5PVEVNUFRZX2F0dGVtcHRzKTtcbiAgICAgICAgfSwgRU5PVEVNUFRZX1RJTUVPVVQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgPT09ICdFTk9FTlQnKSB7XG4gICAgICBhcmd1bWVudHNbMF0gPSBudWxsO1xuICAgIH1cblxuICAgIGlmICghcmVzdWx0cykge1xuICAgICAgcmVzdWx0cyA9IGFyZ3VtZW50cztcbiAgICB9XG4gICAgaWYgKCFjYiB8fCBjYWxsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2FsbGVkID0gdHJ1ZTtcbiAgICBjYi5hcHBseShzZWxmLCByZXN1bHRzKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlbW92ZURpcjtcbiJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwYXRoIiwiZG93bmxvYWRGaWxlVXRpbCIsInJlbW92ZURpciIsImRpciIsImNiIiwiRU5PVEVNUFRZX2F0dGVtcHRzIiwiRU5PVEVNUFRZX21heEF0dGVtcHRzIiwiRU5PVEVNUFRZX1RJTUVPVVQiLCJFcnJvciIsInVuZGVmaW5lZCIsInNlbGYiLCJjYWxsZWQiLCJyZXN1bHRzIiwiY2hlY2tGb3JMb2NhbEZpbGUiLCJleGlzdHNDYWxsYmFjayIsImV4aXN0cyIsInJlbW92ZURpckNhbGxiYWNrIiwic3RhdCIsInN0YXRDYWxsYmFjayIsImVyciIsImlzRGlyZWN0b3J5IiwidW5saW5rIiwicmVhZGRpciIsInJlYWRkaXJDYWxsYmFjayIsImZpbGVzIiwibiIsImxlbmd0aCIsInJtZGlyIiwiZm9yRWFjaCIsIm5hbWUiLCJyZXNvbHZlIiwiY29kZSIsImNvbnNvbGUiLCJlcnJvciIsInNldFRpbWVvdXQiLCJhcmd1bWVudHMiLCJhcHBseSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6951\n')},1349:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar mkdirp = __webpack_require__(9526);\n\nvar fs = __webpack_require__(7147);\n\nvar path = __webpack_require__(1017);\n\nfunction saveFile(filePath, fileName, value, callback) {\n  mkdirp(filePath).then(function (success) {\n    var fileUrl = path.resolve(filePath + "/" + fileName);\n    fs.writeFile(fileUrl, value, "utf-8", callback);\n  }, function (error) {\n    callback(error);\n  });\n}\n\nmodule.exports = saveFile;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM0OS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsSUFBRCxDQUF0Qjs7QUFDQSxJQUFNQyxFQUFFLEdBQUdELG1CQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxJQUFNRSxJQUFJLEdBQUdGLG1CQUFPLENBQUMsSUFBRCxDQUFwQjs7QUFFQSxTQUFTRyxRQUFULENBQWtCQyxRQUFsQixFQUE0QkMsUUFBNUIsRUFBc0NDLEtBQXRDLEVBQTZDQyxRQUE3QyxFQUF1RDtFQUNyRFIsTUFBTSxDQUFDSyxRQUFELENBQU4sQ0FBaUJJLElBQWpCLENBQXNCLFVBQVVDLE9BQVYsRUFBbUI7SUFDdkMsSUFBTUMsT0FBTyxHQUFHUixJQUFJLENBQUNTLE9BQUwsQ0FBYVAsUUFBUSxHQUFHLEdBQVgsR0FBaUJDLFFBQTlCLENBQWhCO0lBQ0FKLEVBQUUsQ0FBQ1csU0FBSCxDQUFhRixPQUFiLEVBQXNCSixLQUF0QixFQUE2QixPQUE3QixFQUFzQ0MsUUFBdEM7RUFDRCxDQUhELEVBR0csVUFBVU0sS0FBVixFQUFpQjtJQUNsQk4sUUFBUSxDQUFDTSxLQUFELENBQVI7RUFDRCxDQUxEO0FBTUQ7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlosUUFBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3V0aWwvc2F2ZS1maWxlLmpzP2M5NWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBta2RpcnAgPSByZXF1aXJlKFwibWtkaXJwXCIpO1xuY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5cbmZ1bmN0aW9uIHNhdmVGaWxlKGZpbGVQYXRoLCBmaWxlTmFtZSwgdmFsdWUsIGNhbGxiYWNrKSB7XG4gIG1rZGlycChmaWxlUGF0aCkudGhlbihmdW5jdGlvbiAoc3VjY2Vzcykge1xuICAgIGNvbnN0IGZpbGVVcmwgPSBwYXRoLnJlc29sdmUoZmlsZVBhdGggKyBcIi9cIiArIGZpbGVOYW1lKTtcbiAgICBmcy53cml0ZUZpbGUoZmlsZVVybCwgdmFsdWUsIFwidXRmLThcIiwgY2FsbGJhY2spO1xuICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICBjYWxsYmFjayhlcnJvcik7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNhdmVGaWxlO1xuIl0sIm5hbWVzIjpbIm1rZGlycCIsInJlcXVpcmUiLCJmcyIsInBhdGgiLCJzYXZlRmlsZSIsImZpbGVQYXRoIiwiZmlsZU5hbWUiLCJ2YWx1ZSIsImNhbGxiYWNrIiwidGhlbiIsInN1Y2Nlc3MiLCJmaWxlVXJsIiwicmVzb2x2ZSIsIndyaXRlRmlsZSIsImVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1349\n')},9499:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nvar FlakeIdGen = __webpack_require__(1759);\n\nvar intFormat = __webpack_require__(1637);\n\nvar generator = new FlakeIdGen();\n\nvar SnowflakeId = function () {\n  function SnowflakeId() {}\n\n  SnowflakeId.getUUID = function () {\n    var id1 = generator.next();\n    var id3 = intFormat(id1, 'dec');\n    return id3;\n  };\n\n  return SnowflakeId;\n}();\n\nexports.SnowflakeId = SnowflakeId;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQ5OS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxVQUFVLEdBQUdDLG1CQUFPLENBQUMsSUFBRCxDQUExQjs7QUFDQSxJQUFNQyxTQUFTLEdBQUdELG1CQUFPLENBQUMsSUFBRCxDQUF6Qjs7QUFDQSxJQUFNRSxTQUFTLEdBQUcsSUFBSUgsVUFBSixFQUFsQjs7QUFDQSxJQUFNSSxXQUFXLEdBQUksWUFBWTtFQUMvQixTQUFTQSxXQUFULEdBQXdCLENBQ3ZCOztFQUVEQSxXQUFXLENBQUNDLE9BQVosR0FBc0IsWUFBWTtJQUNoQyxJQUFNQyxHQUFHLEdBQUdILFNBQVMsQ0FBQ0ksSUFBVixFQUFaO0lBQ0EsSUFBTUMsR0FBRyxHQUFHTixTQUFTLENBQUNJLEdBQUQsRUFBTSxLQUFOLENBQXJCO0lBQ0EsT0FBT0UsR0FBUDtFQUNELENBSkQ7O0VBS0EsT0FBT0osV0FBUDtBQUNELENBVm9CLEVBQXJCOztBQVdBSyxtQkFBQSxHQUFzQkwsV0FBdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3V0aWwvc25vd2ZsYWtlLWlkLmpzP2I2MzUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBGbGFrZUlkR2VuID0gcmVxdWlyZSgnZmxha2UtaWRnZW4nKTtcbmNvbnN0IGludEZvcm1hdCA9IHJlcXVpcmUoJ2JpZ3VpbnQtZm9ybWF0Jyk7XG5jb25zdCBnZW5lcmF0b3IgPSBuZXcgRmxha2VJZEdlbjtcbmNvbnN0IFNub3dmbGFrZUlkID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU25vd2ZsYWtlSWQgKCkge1xuICB9XG5cbiAgU25vd2ZsYWtlSWQuZ2V0VVVJRCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBpZDEgPSBnZW5lcmF0b3IubmV4dCgpO1xuICAgIGNvbnN0IGlkMyA9IGludEZvcm1hdChpZDEsICdkZWMnKTtcbiAgICByZXR1cm4gaWQzO1xuICB9O1xuICByZXR1cm4gU25vd2ZsYWtlSWQ7XG59KCkpO1xuZXhwb3J0cy5Tbm93Zmxha2VJZCA9IFNub3dmbGFrZUlkO1xuIl0sIm5hbWVzIjpbIkZsYWtlSWRHZW4iLCJyZXF1aXJlIiwiaW50Rm9ybWF0IiwiZ2VuZXJhdG9yIiwiU25vd2ZsYWtlSWQiLCJnZXRVVUlEIiwiaWQxIiwibmV4dCIsImlkMyIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9499\n")},3890:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar Storage = __webpack_require__(1396);\n\nvar createBridgeMethods = __webpack_require__(9921);\n/**\n * @param {DownloadsStorageController} parent - reference to parent object\n * @param {string} storageKey - storage key\n * @constructor\n */\n\n\nfunction StorageBridge(parent, storageKey) {\n  this._parent = parent;\n  this._storageKey = storageKey;\n  createBridgeMethods(this, Storage);\n}\n\nmodule.exports = StorageBridge;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg5MC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxPQUFPLEdBQUdDLG1CQUFPLENBQUMsSUFBRCxDQUF2Qjs7QUFDQSxJQUFNQyxtQkFBbUIsR0FBR0QsbUJBQU8sQ0FBQyxJQUFELENBQW5DO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsU0FBU0UsYUFBVCxDQUF3QkMsTUFBeEIsRUFBZ0NDLFVBQWhDLEVBQTRDO0VBQzFDLEtBQUtDLE9BQUwsR0FBZUYsTUFBZjtFQUNBLEtBQUtHLFdBQUwsR0FBbUJGLFVBQW5CO0VBQ0FILG1CQUFtQixDQUFDLElBQUQsRUFBT0YsT0FBUCxDQUFuQjtBQUNEOztBQUVEUSxNQUFNLENBQUNDLE9BQVAsR0FBaUJOLGFBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS91dGlsL3N0b3JhZ2UtYnJpZGdlLmpzPzVhMWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBTdG9yYWdlID0gcmVxdWlyZShcIi4vc3RvcmFnZVwiKTtcbmNvbnN0IGNyZWF0ZUJyaWRnZU1ldGhvZHMgPSByZXF1aXJlKFwiLi9jcmVhdGUtYnJpZGdlLW1ldGhvZHNcIik7XG5cbi8qKlxuICogQHBhcmFtIHtEb3dubG9hZHNTdG9yYWdlQ29udHJvbGxlcn0gcGFyZW50IC0gcmVmZXJlbmNlIHRvIHBhcmVudCBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdG9yYWdlS2V5IC0gc3RvcmFnZSBrZXlcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTdG9yYWdlQnJpZGdlIChwYXJlbnQsIHN0b3JhZ2VLZXkpIHtcbiAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICB0aGlzLl9zdG9yYWdlS2V5ID0gc3RvcmFnZUtleTtcbiAgY3JlYXRlQnJpZGdlTWV0aG9kcyh0aGlzLCBTdG9yYWdlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTdG9yYWdlQnJpZGdlOyJdLCJuYW1lcyI6WyJTdG9yYWdlIiwicmVxdWlyZSIsImNyZWF0ZUJyaWRnZU1ldGhvZHMiLCJTdG9yYWdlQnJpZGdlIiwicGFyZW50Iiwic3RvcmFnZUtleSIsIl9wYXJlbnQiLCJfc3RvcmFnZUtleSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3890\n")},1396:module=>{"use strict";eval('\n/**\n *\n * @constructor\n */\n\nfunction Storage() {\n  this._items = {};\n}\n/**\n * @returns {void}\n */\n\n\nStorage.prototype.clear = function () {\n  this._items = {};\n};\n/**\n * @returns {number} number of items\n */\n\n\nStorage.prototype.count = function () {\n  return this.getKeys().length;\n};\n/**\n * @param {string} id - item identifier\n * @returns {void}\n */\n\n\nStorage.prototype.decrease = function (id) {\n  if (typeof this._items[id] !== "number") {\n    this._items[id] = 0;\n  }\n\n  this._items[id]--;\n};\n/**\n * @param {string} id - item identifier\n * @returns {object} item\n */\n\n\nStorage.prototype.getItem = function (id) {\n  return this._items[id];\n};\n/**\n * @returns {object} items\n */\n\n\nStorage.prototype.getItems = function () {\n  return this._items;\n};\n/**\n * @returns {string[]} keys of all items\n */\n\n\nStorage.prototype.getKeys = function () {\n  return Object.keys(this._items);\n};\n/**\n * @param {string} id - item identifier\n * @returns {void}\n */\n\n\nStorage.prototype.increase = function (id) {\n  if (typeof this._items[id] !== "number") {\n    this._items[id] = 0;\n  }\n\n  this._items[id]++;\n};\n/**\n * @param {string} id - item identifier\n * @returns {void}\n */\n\n\nStorage.prototype.removeItem = function (id) {\n  delete this._items[id];\n};\n/**\n *\n * @param {string} id - item identifier\n * @param {object} item - item to be saved\n * @returns {void}\n */\n\n\nStorage.prototype.setItem = function (id, item) {\n  this._items[id] = item;\n};\n/**\n *\n * @param {object} items - items to be saved\n * @returns {void}\n */\n\n\nStorage.prototype.setItems = function (items) {\n  for (var key in items) {\n    if (items.hasOwnProperty(key)) {\n      this.setItem(key, items[key]);\n    }\n  }\n};\n\nmodule.exports = Storage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM5Ni5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFNBQVNBLE9BQVQsR0FBb0I7RUFDbEIsS0FBS0MsTUFBTCxHQUFjLEVBQWQ7QUFDRDtBQUVEO0FBQ0E7QUFDQTs7O0FBQ0FELE9BQU8sQ0FBQ0UsU0FBUixDQUFrQkMsS0FBbEIsR0FBMEIsWUFBWTtFQUNwQyxLQUFLRixNQUFMLEdBQWMsRUFBZDtBQUNELENBRkQ7QUFJQTtBQUNBO0FBQ0E7OztBQUNBRCxPQUFPLENBQUNFLFNBQVIsQ0FBa0JFLEtBQWxCLEdBQTBCLFlBQVk7RUFDcEMsT0FBTyxLQUFLQyxPQUFMLEdBQWVDLE1BQXRCO0FBQ0QsQ0FGRDtBQUlBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQU4sT0FBTyxDQUFDRSxTQUFSLENBQWtCSyxRQUFsQixHQUE2QixVQUFVQyxFQUFWLEVBQWM7RUFDekMsSUFBSSxPQUFPLEtBQUtQLE1BQUwsQ0FBWU8sRUFBWixDQUFQLEtBQTJCLFFBQS9CLEVBQXlDO0lBQ3ZDLEtBQUtQLE1BQUwsQ0FBWU8sRUFBWixJQUFrQixDQUFsQjtFQUNEOztFQUNELEtBQUtQLE1BQUwsQ0FBWU8sRUFBWjtBQUNELENBTEQ7QUFPQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FSLE9BQU8sQ0FBQ0UsU0FBUixDQUFrQk8sT0FBbEIsR0FBNEIsVUFBVUQsRUFBVixFQUFjO0VBQ3hDLE9BQU8sS0FBS1AsTUFBTCxDQUFZTyxFQUFaLENBQVA7QUFDRCxDQUZEO0FBSUE7QUFDQTtBQUNBOzs7QUFDQVIsT0FBTyxDQUFDRSxTQUFSLENBQWtCUSxRQUFsQixHQUE2QixZQUFZO0VBQ3ZDLE9BQU8sS0FBS1QsTUFBWjtBQUNELENBRkQ7QUFJQTtBQUNBO0FBQ0E7OztBQUNBRCxPQUFPLENBQUNFLFNBQVIsQ0FBa0JHLE9BQWxCLEdBQTRCLFlBQVk7RUFDdEMsT0FBT00sTUFBTSxDQUFDQyxJQUFQLENBQVksS0FBS1gsTUFBakIsQ0FBUDtBQUNELENBRkQ7QUFJQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FELE9BQU8sQ0FBQ0UsU0FBUixDQUFrQlcsUUFBbEIsR0FBNkIsVUFBVUwsRUFBVixFQUFjO0VBQ3pDLElBQUksT0FBTyxLQUFLUCxNQUFMLENBQVlPLEVBQVosQ0FBUCxLQUEyQixRQUEvQixFQUF5QztJQUN2QyxLQUFLUCxNQUFMLENBQVlPLEVBQVosSUFBa0IsQ0FBbEI7RUFDRDs7RUFDRCxLQUFLUCxNQUFMLENBQVlPLEVBQVo7QUFDRCxDQUxEO0FBT0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBUixPQUFPLENBQUNFLFNBQVIsQ0FBa0JZLFVBQWxCLEdBQStCLFVBQVVOLEVBQVYsRUFBYztFQUMzQyxPQUFPLEtBQUtQLE1BQUwsQ0FBWU8sRUFBWixDQUFQO0FBQ0QsQ0FGRDtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FSLE9BQU8sQ0FBQ0UsU0FBUixDQUFrQmEsT0FBbEIsR0FBNEIsVUFBVVAsRUFBVixFQUFjUSxJQUFkLEVBQW9CO0VBQzlDLEtBQUtmLE1BQUwsQ0FBWU8sRUFBWixJQUFrQlEsSUFBbEI7QUFDRCxDQUZEO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FoQixPQUFPLENBQUNFLFNBQVIsQ0FBa0JlLFFBQWxCLEdBQTZCLFVBQVVDLEtBQVYsRUFBaUI7RUFDNUMsS0FBSyxJQUFJQyxHQUFULElBQWdCRCxLQUFoQixFQUF1QjtJQUNyQixJQUFJQSxLQUFLLENBQUNFLGNBQU4sQ0FBcUJELEdBQXJCLENBQUosRUFBK0I7TUFDN0IsS0FBS0osT0FBTCxDQUFhSSxHQUFiLEVBQWtCRCxLQUFLLENBQUNDLEdBQUQsQ0FBdkI7SUFDRDtFQUNGO0FBQ0YsQ0FORDs7QUFRQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCdEIsT0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3V0aWwvc3RvcmFnZS5qcz80YmFiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gU3RvcmFnZSAoKSB7XG4gIHRoaXMuX2l0ZW1zID0ge307XG59XG5cbi8qKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblN0b3JhZ2UucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9pdGVtcyA9IHt9O1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBudW1iZXIgb2YgaXRlbXNcbiAqL1xuU3RvcmFnZS5wcm90b3R5cGUuY291bnQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmdldEtleXMoKS5sZW5ndGg7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIGl0ZW0gaWRlbnRpZmllclxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblN0b3JhZ2UucHJvdG90eXBlLmRlY3JlYXNlID0gZnVuY3Rpb24gKGlkKSB7XG4gIGlmICh0eXBlb2YgdGhpcy5faXRlbXNbaWRdICE9PSBcIm51bWJlclwiKSB7XG4gICAgdGhpcy5faXRlbXNbaWRdID0gMDtcbiAgfVxuICB0aGlzLl9pdGVtc1tpZF0tLTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIC0gaXRlbSBpZGVudGlmaWVyXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBpdGVtXG4gKi9cblN0b3JhZ2UucHJvdG90eXBlLmdldEl0ZW0gPSBmdW5jdGlvbiAoaWQpIHtcbiAgcmV0dXJuIHRoaXMuX2l0ZW1zW2lkXTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge29iamVjdH0gaXRlbXNcbiAqL1xuU3RvcmFnZS5wcm90b3R5cGUuZ2V0SXRlbXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9pdGVtcztcbn07XG5cbi8qKlxuICogQHJldHVybnMge3N0cmluZ1tdfSBrZXlzIG9mIGFsbCBpdGVtc1xuICovXG5TdG9yYWdlLnByb3RvdHlwZS5nZXRLZXlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5faXRlbXMpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBpdGVtIGlkZW50aWZpZXJcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5TdG9yYWdlLnByb3RvdHlwZS5pbmNyZWFzZSA9IGZ1bmN0aW9uIChpZCkge1xuICBpZiAodHlwZW9mIHRoaXMuX2l0ZW1zW2lkXSAhPT0gXCJudW1iZXJcIikge1xuICAgIHRoaXMuX2l0ZW1zW2lkXSA9IDA7XG4gIH1cbiAgdGhpcy5faXRlbXNbaWRdKys7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIGl0ZW0gaWRlbnRpZmllclxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblN0b3JhZ2UucHJvdG90eXBlLnJlbW92ZUl0ZW0gPSBmdW5jdGlvbiAoaWQpIHtcbiAgZGVsZXRlIHRoaXMuX2l0ZW1zW2lkXTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIGl0ZW0gaWRlbnRpZmllclxuICogQHBhcmFtIHtvYmplY3R9IGl0ZW0gLSBpdGVtIHRvIGJlIHNhdmVkXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuU3RvcmFnZS5wcm90b3R5cGUuc2V0SXRlbSA9IGZ1bmN0aW9uIChpZCwgaXRlbSkge1xuICB0aGlzLl9pdGVtc1tpZF0gPSBpdGVtO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGl0ZW1zIC0gaXRlbXMgdG8gYmUgc2F2ZWRcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5TdG9yYWdlLnByb3RvdHlwZS5zZXRJdGVtcyA9IGZ1bmN0aW9uIChpdGVtcykge1xuICBmb3IgKGxldCBrZXkgaW4gaXRlbXMpIHtcbiAgICBpZiAoaXRlbXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgdGhpcy5zZXRJdGVtKGtleSwgaXRlbXNba2V5XSlcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3RvcmFnZTsiXSwibmFtZXMiOlsiU3RvcmFnZSIsIl9pdGVtcyIsInByb3RvdHlwZSIsImNsZWFyIiwiY291bnQiLCJnZXRLZXlzIiwibGVuZ3RoIiwiZGVjcmVhc2UiLCJpZCIsImdldEl0ZW0iLCJnZXRJdGVtcyIsIk9iamVjdCIsImtleXMiLCJpbmNyZWFzZSIsInJlbW92ZUl0ZW0iLCJzZXRJdGVtIiwiaXRlbSIsInNldEl0ZW1zIiwiaXRlbXMiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1396\n')},6137:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar Snowflake = __webpack_require__(9499);\n\nvar _ = __webpack_require__(4952);\n/**\n *\n * @param {function} process - function to get the result from\n * @param {function} callback - callback to be invoked when "process" function returns anything\n * @param {number} target - window target id\n * @param {string} manifestId - manifest identifier\n * @param {number} time - time in miliseconds how often the callback should be invoked\n * @param {boolean} onceOnly - if set to true the callback will be invoked once only and subsriber will be removed\n * @constructor\n */\n\n\nfunction Subscriber(process, callback, target, manifestId, time, onceOnly) {\n  this._process = process;\n  this._callback = callback;\n  this._manifestId = manifestId;\n  this._id = String(Snowflake.SnowflakeId.getUUID());\n  this._onceOnly = onceOnly;\n  this._target = target;\n\n  this.onInterval = function () {\n    var result = this._process();\n\n    var self = this;\n\n    if (result) {\n      if (this._onceOnly) {\n        this.remove();\n\n        if (typeof this._callbackOnFinish === "function") {\n          this._callbackOnFinish(function (err, result) {\n            self._callback(self._id, err, result, self._target, true);\n          });\n        } else {\n          this._callback(this._id, null, result, self._target);\n        }\n      } else {\n        this._callback(this._id, null, result, self._target);\n      }\n    }\n  };\n\n  _.bindAll(this, "onInterval");\n\n  this._intervalTimer = setInterval(this.onInterval, time);\n}\n/**\n *\n * @returns {string} - subscriber identifier\n */\n\n\nSubscriber.prototype.getId = function () {\n  return this._id;\n};\n/**\n *\n * @returns {string} - manifest identifier\n */\n\n\nSubscriber.prototype.getManifestId = function () {\n  return this._manifestId;\n};\n/**\n * @param {function} callback - function to be invoked when "process" function returns anything\n * and when "onceOnly" is set to true\n * @returns {void}\n */\n\n\nSubscriber.prototype.onFinish = function (callback) {\n  this._callbackOnFinish = callback;\n};\n/**\n * @returns {void}\n */\n\n\nSubscriber.prototype.remove = function () {\n  clearInterval(this._intervalTimer);\n};\n\nmodule.exports = Subscriber;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjEzNy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxTQUFTLEdBQUdDLG1CQUFPLENBQUMsSUFBRCxDQUF6Qjs7QUFDQSxJQUFNQyxDQUFDLEdBQUdELG1CQUFPLENBQUMsSUFBRCxDQUFqQjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxTQUFTRSxVQUFULENBQXFCQyxPQUFyQixFQUE4QkMsUUFBOUIsRUFBd0NDLE1BQXhDLEVBQWdEQyxVQUFoRCxFQUE0REMsSUFBNUQsRUFBa0VDLFFBQWxFLEVBQTRFO0VBQzFFLEtBQUtDLFFBQUwsR0FBZ0JOLE9BQWhCO0VBQ0EsS0FBS08sU0FBTCxHQUFpQk4sUUFBakI7RUFDQSxLQUFLTyxXQUFMLEdBQW1CTCxVQUFuQjtFQUNBLEtBQUtNLEdBQUwsR0FBV0MsTUFBTSxDQUFDZCxTQUFTLENBQUNlLFdBQVYsQ0FBc0JDLE9BQXRCLEVBQUQsQ0FBakI7RUFDQSxLQUFLQyxTQUFMLEdBQWlCUixRQUFqQjtFQUNBLEtBQUtTLE9BQUwsR0FBZVosTUFBZjs7RUFDQSxLQUFLYSxVQUFMLEdBQWtCLFlBQVk7SUFDNUIsSUFBTUMsTUFBTSxHQUFHLEtBQUtWLFFBQUwsRUFBZjs7SUFDQSxJQUFNVyxJQUFJLEdBQUcsSUFBYjs7SUFDQSxJQUFJRCxNQUFKLEVBQVk7TUFDVixJQUFJLEtBQUtILFNBQVQsRUFBb0I7UUFDbEIsS0FBS0ssTUFBTDs7UUFDQSxJQUFJLE9BQU8sS0FBS0MsaUJBQVosS0FBa0MsVUFBdEMsRUFBa0Q7VUFDaEQsS0FBS0EsaUJBQUwsQ0FBdUIsVUFBVUMsR0FBVixFQUFlSixNQUFmLEVBQXVCO1lBQzVDQyxJQUFJLENBQUNWLFNBQUwsQ0FBZVUsSUFBSSxDQUFDUixHQUFwQixFQUF5QlcsR0FBekIsRUFBOEJKLE1BQTlCLEVBQXNDQyxJQUFJLENBQUNILE9BQTNDLEVBQW9ELElBQXBEO1VBQ0QsQ0FGRDtRQUdELENBSkQsTUFJTztVQUNMLEtBQUtQLFNBQUwsQ0FBZSxLQUFLRSxHQUFwQixFQUF5QixJQUF6QixFQUErQk8sTUFBL0IsRUFBdUNDLElBQUksQ0FBQ0gsT0FBNUM7UUFDRDtNQUNGLENBVEQsTUFTTztRQUNMLEtBQUtQLFNBQUwsQ0FBZSxLQUFLRSxHQUFwQixFQUF5QixJQUF6QixFQUErQk8sTUFBL0IsRUFBdUNDLElBQUksQ0FBQ0gsT0FBNUM7TUFDRDtJQUNGO0VBQ0YsQ0FqQkQ7O0VBa0JBaEIsQ0FBQyxDQUFDdUIsT0FBRixDQUFVLElBQVYsRUFBZ0IsWUFBaEI7O0VBQ0EsS0FBS0MsY0FBTCxHQUFzQkMsV0FBVyxDQUFDLEtBQUtSLFVBQU4sRUFBa0JYLElBQWxCLENBQWpDO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FMLFVBQVUsQ0FBQ3lCLFNBQVgsQ0FBcUJDLEtBQXJCLEdBQTZCLFlBQVk7RUFDdkMsT0FBTyxLQUFLaEIsR0FBWjtBQUNELENBRkQ7QUFJQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FWLFVBQVUsQ0FBQ3lCLFNBQVgsQ0FBcUJFLGFBQXJCLEdBQXFDLFlBQVk7RUFDL0MsT0FBTyxLQUFLbEIsV0FBWjtBQUNELENBRkQ7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQVQsVUFBVSxDQUFDeUIsU0FBWCxDQUFxQkcsUUFBckIsR0FBZ0MsVUFBVTFCLFFBQVYsRUFBb0I7RUFDbEQsS0FBS2tCLGlCQUFMLEdBQXlCbEIsUUFBekI7QUFDRCxDQUZEO0FBSUE7QUFDQTtBQUNBOzs7QUFDQUYsVUFBVSxDQUFDeUIsU0FBWCxDQUFxQk4sTUFBckIsR0FBOEIsWUFBWTtFQUN4Q1UsYUFBYSxDQUFDLEtBQUtOLGNBQU4sQ0FBYjtBQUNELENBRkQ7O0FBSUFPLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQi9CLFVBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS91dGlsL3N1YnNjcmliZXIuanM/MjUzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFNub3dmbGFrZSA9IHJlcXVpcmUoXCIuL3Nub3dmbGFrZS1pZFwiKTtcbmNvbnN0IF8gPSByZXF1aXJlKFwidW5kZXJzY29yZVwiKTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gcHJvY2VzcyAtIGZ1bmN0aW9uIHRvIGdldCB0aGUgcmVzdWx0IGZyb21cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIFwicHJvY2Vzc1wiIGZ1bmN0aW9uIHJldHVybnMgYW55dGhpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSB0YXJnZXQgLSB3aW5kb3cgdGFyZ2V0IGlkXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFuaWZlc3RJZCAtIG1hbmlmZXN0IGlkZW50aWZpZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lIC0gdGltZSBpbiBtaWxpc2Vjb25kcyBob3cgb2Z0ZW4gdGhlIGNhbGxiYWNrIHNob3VsZCBiZSBpbnZva2VkXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9uY2VPbmx5IC0gaWYgc2V0IHRvIHRydWUgdGhlIGNhbGxiYWNrIHdpbGwgYmUgaW52b2tlZCBvbmNlIG9ubHkgYW5kIHN1YnNyaWJlciB3aWxsIGJlIHJlbW92ZWRcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTdWJzY3JpYmVyIChwcm9jZXNzLCBjYWxsYmFjaywgdGFyZ2V0LCBtYW5pZmVzdElkLCB0aW1lLCBvbmNlT25seSkge1xuICB0aGlzLl9wcm9jZXNzID0gcHJvY2VzcztcbiAgdGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgdGhpcy5fbWFuaWZlc3RJZCA9IG1hbmlmZXN0SWQ7XG4gIHRoaXMuX2lkID0gU3RyaW5nKFNub3dmbGFrZS5Tbm93Zmxha2VJZC5nZXRVVUlEKCkpO1xuICB0aGlzLl9vbmNlT25seSA9IG9uY2VPbmx5O1xuICB0aGlzLl90YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMub25JbnRlcnZhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9wcm9jZXNzKCk7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgaWYgKHRoaXMuX29uY2VPbmx5KSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fY2FsbGJhY2tPbkZpbmlzaCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgdGhpcy5fY2FsbGJhY2tPbkZpbmlzaChmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgICAgIHNlbGYuX2NhbGxiYWNrKHNlbGYuX2lkLCBlcnIsIHJlc3VsdCwgc2VsZi5fdGFyZ2V0LCB0cnVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9jYWxsYmFjayh0aGlzLl9pZCwgbnVsbCwgcmVzdWx0LCBzZWxmLl90YXJnZXQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9jYWxsYmFjayh0aGlzLl9pZCwgbnVsbCwgcmVzdWx0LCBzZWxmLl90YXJnZXQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgXy5iaW5kQWxsKHRoaXMsIFwib25JbnRlcnZhbFwiKTtcbiAgdGhpcy5faW50ZXJ2YWxUaW1lciA9IHNldEludGVydmFsKHRoaXMub25JbnRlcnZhbCwgdGltZSk7XG59XG5cbi8qKlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gc3Vic2NyaWJlciBpZGVudGlmaWVyXG4gKi9cblN1YnNjcmliZXIucHJvdG90eXBlLmdldElkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5faWQ7XG59O1xuXG4vKipcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIG1hbmlmZXN0IGlkZW50aWZpZXJcbiAqL1xuU3Vic2NyaWJlci5wcm90b3R5cGUuZ2V0TWFuaWZlc3RJZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX21hbmlmZXN0SWQ7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gYmUgaW52b2tlZCB3aGVuIFwicHJvY2Vzc1wiIGZ1bmN0aW9uIHJldHVybnMgYW55dGhpbmdcbiAqIGFuZCB3aGVuIFwib25jZU9ubHlcIiBpcyBzZXQgdG8gdHJ1ZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblN1YnNjcmliZXIucHJvdG90eXBlLm9uRmluaXNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHRoaXMuX2NhbGxiYWNrT25GaW5pc2ggPSBjYWxsYmFjaztcbn07XG5cbi8qKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblN1YnNjcmliZXIucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbFRpbWVyKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3Vic2NyaWJlcjsiXSwibmFtZXMiOlsiU25vd2ZsYWtlIiwicmVxdWlyZSIsIl8iLCJTdWJzY3JpYmVyIiwicHJvY2VzcyIsImNhbGxiYWNrIiwidGFyZ2V0IiwibWFuaWZlc3RJZCIsInRpbWUiLCJvbmNlT25seSIsIl9wcm9jZXNzIiwiX2NhbGxiYWNrIiwiX21hbmlmZXN0SWQiLCJfaWQiLCJTdHJpbmciLCJTbm93Zmxha2VJZCIsImdldFVVSUQiLCJfb25jZU9ubHkiLCJfdGFyZ2V0Iiwib25JbnRlcnZhbCIsInJlc3VsdCIsInNlbGYiLCJyZW1vdmUiLCJfY2FsbGJhY2tPbkZpbmlzaCIsImVyciIsImJpbmRBbGwiLCJfaW50ZXJ2YWxUaW1lciIsInNldEludGVydmFsIiwicHJvdG90eXBlIiwiZ2V0SWQiLCJnZXRNYW5pZmVzdElkIiwib25GaW5pc2giLCJjbGVhckludGVydmFsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6137\n')},8279:module=>{"use strict";eval('\n\nfunction join() {\n  var pathString = "",\n      arg;\n\n  for (var i = 0, j = arguments.length; i < j; i++) {\n    arg = arguments[i].replace(/^\\.\\//g, "/"); // don\'t add to the last one\n\n    pathString += arg;\n\n    if (i < j - 1) {\n      pathString += "/";\n    }\n  }\n\n  pathString = pathString.replace(/\\/{2,}/g, "/");\n  pathString = pathString.replace("https:/", "https://");\n  pathString = pathString.replace("http:/", "http://");\n  pathString = pathString.replace("file:/", "file://");\n  return pathString;\n}\n\nfunction joinPath() {\n  return join.apply(null, arguments) + "/";\n}\n\nfunction joinPathWithFile() {\n  return join.apply(null, arguments);\n}\n\nmodule.exports = {\n  joinPath: joinPath,\n  joinPathWithFile: joinPathWithFile\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI3OS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixTQUFTQSxJQUFULEdBQWlCO0VBQ2YsSUFBSUMsVUFBVSxHQUFHLEVBQWpCO0VBQUEsSUFBcUJDLEdBQXJCOztFQUNBLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQVIsRUFBV0MsQ0FBQyxHQUFHQyxTQUFTLENBQUNDLE1BQTlCLEVBQXNDSCxDQUFDLEdBQUdDLENBQTFDLEVBQTZDRCxDQUFDLEVBQTlDLEVBQWtEO0lBQ2hERCxHQUFHLEdBQUdHLFNBQVMsQ0FBQ0YsQ0FBRCxDQUFULENBQWFJLE9BQWIsQ0FBcUIsUUFBckIsRUFBK0IsR0FBL0IsQ0FBTixDQURnRCxDQUVoRDs7SUFDQU4sVUFBVSxJQUFJQyxHQUFkOztJQUNBLElBQUlDLENBQUMsR0FBR0MsQ0FBQyxHQUFHLENBQVosRUFBZTtNQUNiSCxVQUFVLElBQUksR0FBZDtJQUNEO0VBQ0Y7O0VBQ0RBLFVBQVUsR0FBR0EsVUFBVSxDQUFDTSxPQUFYLENBQW1CLFNBQW5CLEVBQThCLEdBQTlCLENBQWI7RUFDQU4sVUFBVSxHQUFHQSxVQUFVLENBQUNNLE9BQVgsQ0FBbUIsU0FBbkIsRUFBOEIsVUFBOUIsQ0FBYjtFQUNBTixVQUFVLEdBQUdBLFVBQVUsQ0FBQ00sT0FBWCxDQUFtQixRQUFuQixFQUE2QixTQUE3QixDQUFiO0VBQ0FOLFVBQVUsR0FBR0EsVUFBVSxDQUFDTSxPQUFYLENBQW1CLFFBQW5CLEVBQTZCLFNBQTdCLENBQWI7RUFDQSxPQUFPTixVQUFQO0FBQ0Q7O0FBRUQsU0FBU08sUUFBVCxHQUFxQjtFQUNuQixPQUFPUixJQUFJLENBQUNTLEtBQUwsQ0FBVyxJQUFYLEVBQWlCSixTQUFqQixJQUE4QixHQUFyQztBQUNEOztBQUVELFNBQVNLLGdCQUFULEdBQTZCO0VBQzNCLE9BQU9WLElBQUksQ0FBQ1MsS0FBTCxDQUFXLElBQVgsRUFBaUJKLFNBQWpCLENBQVA7QUFDRDs7QUFFRE0sTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0VBQ2ZKLFFBQVEsRUFBRUEsUUFESztFQUVmRSxnQkFBZ0IsRUFBRUE7QUFGSCxDQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvdXRpbC91cmwuanM/NWFkOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gam9pbiAoKSB7XG4gIGxldCBwYXRoU3RyaW5nID0gXCJcIiwgYXJnO1xuICBmb3IgKGxldCBpID0gMCwgaiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICBhcmcgPSBhcmd1bWVudHNbaV0ucmVwbGFjZSgvXlxcLlxcLy9nLCBcIi9cIik7XG4gICAgLy8gZG9uJ3QgYWRkIHRvIHRoZSBsYXN0IG9uZVxuICAgIHBhdGhTdHJpbmcgKz0gYXJnO1xuICAgIGlmIChpIDwgaiAtIDEpIHtcbiAgICAgIHBhdGhTdHJpbmcgKz0gXCIvXCI7XG4gICAgfVxuICB9XG4gIHBhdGhTdHJpbmcgPSBwYXRoU3RyaW5nLnJlcGxhY2UoL1xcL3syLH0vZywgXCIvXCIpO1xuICBwYXRoU3RyaW5nID0gcGF0aFN0cmluZy5yZXBsYWNlKFwiaHR0cHM6L1wiLCBcImh0dHBzOi8vXCIpO1xuICBwYXRoU3RyaW5nID0gcGF0aFN0cmluZy5yZXBsYWNlKFwiaHR0cDovXCIsIFwiaHR0cDovL1wiKTtcbiAgcGF0aFN0cmluZyA9IHBhdGhTdHJpbmcucmVwbGFjZShcImZpbGU6L1wiLCBcImZpbGU6Ly9cIik7XG4gIHJldHVybiBwYXRoU3RyaW5nO1xufVxuXG5mdW5jdGlvbiBqb2luUGF0aCAoKSB7XG4gIHJldHVybiBqb2luLmFwcGx5KG51bGwsIGFyZ3VtZW50cykgKyBcIi9cIjtcbn1cblxuZnVuY3Rpb24gam9pblBhdGhXaXRoRmlsZSAoKSB7XG4gIHJldHVybiBqb2luLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBqb2luUGF0aDogam9pblBhdGgsXG4gIGpvaW5QYXRoV2l0aEZpbGU6IGpvaW5QYXRoV2l0aEZpbGVcbn07XG4iXSwibmFtZXMiOlsiam9pbiIsInBhdGhTdHJpbmciLCJhcmciLCJpIiwiaiIsImFyZ3VtZW50cyIsImxlbmd0aCIsInJlcGxhY2UiLCJqb2luUGF0aCIsImFwcGx5Iiwiam9pblBhdGhXaXRoRmlsZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8279\n')},9275:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nvar ZeroPadding = function () {\n  function ZeroPadding() {}\n\n  ZeroPadding.addPadding = function (num, howManyZeros) {\n    var result;\n    var numArr = num.toString().split('');\n\n    while (numArr.length < howManyZeros) {\n      numArr.unshift('0');\n    }\n\n    result = numArr.join('');\n    return result;\n  };\n\n  ZeroPadding.getPaddingAmount = function (inputStr) {\n    var startIndex = inputStr.indexOf('%');\n    var endIndex = inputStr.lastIndexOf('$');\n    var numPadding = parseInt(inputStr.substring(startIndex + 1, endIndex - 1));\n    numPadding = isNaN(numPadding) ? 0 : numPadding;\n    return numPadding;\n  };\n\n  return ZeroPadding;\n}();\n\nexports.ZeroPadding = ZeroPadding;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTI3NS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxXQUFXLEdBQUksWUFBWTtFQUMvQixTQUFTQSxXQUFULEdBQXdCLENBQ3ZCOztFQUVEQSxXQUFXLENBQUNDLFVBQVosR0FBeUIsVUFBVUMsR0FBVixFQUFlQyxZQUFmLEVBQTZCO0lBQ3BELElBQUlDLE1BQUo7SUFDQSxJQUFNQyxNQUFNLEdBQUdILEdBQUcsQ0FBQ0ksUUFBSixHQUFlQyxLQUFmLENBQXFCLEVBQXJCLENBQWY7O0lBQ0EsT0FBT0YsTUFBTSxDQUFDRyxNQUFQLEdBQWdCTCxZQUF2QixFQUFxQztNQUNuQ0UsTUFBTSxDQUFDSSxPQUFQLENBQWUsR0FBZjtJQUNEOztJQUNETCxNQUFNLEdBQUdDLE1BQU0sQ0FBQ0ssSUFBUCxDQUFZLEVBQVosQ0FBVDtJQUNBLE9BQU9OLE1BQVA7RUFDRCxDQVJEOztFQVNBSixXQUFXLENBQUNXLGdCQUFaLEdBQStCLFVBQVVDLFFBQVYsRUFBb0I7SUFDakQsSUFBTUMsVUFBVSxHQUFHRCxRQUFRLENBQUNFLE9BQVQsQ0FBaUIsR0FBakIsQ0FBbkI7SUFDQSxJQUFNQyxRQUFRLEdBQUdILFFBQVEsQ0FBQ0ksV0FBVCxDQUFxQixHQUFyQixDQUFqQjtJQUNBLElBQUlDLFVBQVUsR0FBR0MsUUFBUSxDQUFDTixRQUFRLENBQUNPLFNBQVQsQ0FBbUJOLFVBQVUsR0FBRyxDQUFoQyxFQUFtQ0UsUUFBUSxHQUFHLENBQTlDLENBQUQsQ0FBekI7SUFDQUUsVUFBVSxHQUFJRyxLQUFLLENBQUNILFVBQUQsQ0FBTixHQUFzQixDQUF0QixHQUEwQkEsVUFBdkM7SUFDQSxPQUFPQSxVQUFQO0VBQ0QsQ0FORDs7RUFPQSxPQUFPakIsV0FBUDtBQUNELENBckJvQixFQUFyQjs7QUFzQkFxQixtQkFBQSxHQUFzQnJCLFdBQXRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS91dGlsL3plcm8tcGFkZGluZy5qcz9kMjk0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgWmVyb1BhZGRpbmcgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBaZXJvUGFkZGluZyAoKSB7XG4gIH1cblxuICBaZXJvUGFkZGluZy5hZGRQYWRkaW5nID0gZnVuY3Rpb24gKG51bSwgaG93TWFueVplcm9zKSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBjb25zdCBudW1BcnIgPSBudW0udG9TdHJpbmcoKS5zcGxpdCgnJyk7XG4gICAgd2hpbGUgKG51bUFyci5sZW5ndGggPCBob3dNYW55WmVyb3MpIHtcbiAgICAgIG51bUFyci51bnNoaWZ0KCcwJyk7XG4gICAgfVxuICAgIHJlc3VsdCA9IG51bUFyci5qb2luKCcnKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBaZXJvUGFkZGluZy5nZXRQYWRkaW5nQW1vdW50ID0gZnVuY3Rpb24gKGlucHV0U3RyKSB7XG4gICAgY29uc3Qgc3RhcnRJbmRleCA9IGlucHV0U3RyLmluZGV4T2YoJyUnKTtcbiAgICBjb25zdCBlbmRJbmRleCA9IGlucHV0U3RyLmxhc3RJbmRleE9mKCckJyk7XG4gICAgbGV0IG51bVBhZGRpbmcgPSBwYXJzZUludChpbnB1dFN0ci5zdWJzdHJpbmcoc3RhcnRJbmRleCArIDEsIGVuZEluZGV4IC0gMSkpO1xuICAgIG51bVBhZGRpbmcgPSAoaXNOYU4obnVtUGFkZGluZykpID8gMCA6IG51bVBhZGRpbmc7XG4gICAgcmV0dXJuIG51bVBhZGRpbmc7XG4gIH07XG4gIHJldHVybiBaZXJvUGFkZGluZztcbn0oKSk7XG5leHBvcnRzLlplcm9QYWRkaW5nID0gWmVyb1BhZGRpbmc7XG4iXSwibmFtZXMiOlsiWmVyb1BhZGRpbmciLCJhZGRQYWRkaW5nIiwibnVtIiwiaG93TWFueVplcm9zIiwicmVzdWx0IiwibnVtQXJyIiwidG9TdHJpbmciLCJzcGxpdCIsImxlbmd0aCIsInVuc2hpZnQiLCJqb2luIiwiZ2V0UGFkZGluZ0Ftb3VudCIsImlucHV0U3RyIiwic3RhcnRJbmRleCIsImluZGV4T2YiLCJlbmRJbmRleCIsImxhc3RJbmRleE9mIiwibnVtUGFkZGluZyIsInBhcnNlSW50Iiwic3Vic3RyaW5nIiwiaXNOYU4iLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9275\n")},2081:Q=>{"use strict";Q.exports=require("child_process")},3639:Q=>{"use strict";Q.exports=require("domain")},2361:Q=>{"use strict";Q.exports=require("events")},7147:Q=>{"use strict";Q.exports=require("fs")},1808:Q=>{"use strict";Q.exports=require("net")},1017:Q=>{"use strict";Q.exports=require("path")},3837:Q=>{"use strict";Q.exports=require("util")},7769:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__7769__},1637:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__1637__},7194:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__7194__},1759:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__1759__},6838:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__6838__},3480:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__3480__},9526:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__9526__},1908:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__1908__},4952:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__4952__},3720:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__3720__},678:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__678__}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q].call(U.exports,U,U.exports,__webpack_require__),U.exports}var __webpack_exports__=__webpack_require__(588);return __webpack_exports__})()));