/*! For license information please see downstream-electron-be.js.LICENSE.txt */
!function(Q,U){if("object"==typeof exports&&"object"==typeof module)module.exports=U(require("base64-js"),require("biguint-format"),require("electron"),require("flake-idgen"),require("get-folder-size"),require("jsonfile"),require("mkdirp"),require("moment/moment"),require("underscore"),require("url-parse"),require("xmldom"));else if("function"==typeof define&&define.amd)define(["base64-js","biguint-format","electron","flake-idgen","get-folder-size","jsonfile","mkdirp","moment/moment","underscore","url-parse","xmldom"],U);else{var F="object"==typeof exports?U(require("base64-js"),require("biguint-format"),require("electron"),require("flake-idgen"),require("get-folder-size"),require("jsonfile"),require("mkdirp"),require("moment/moment"),require("underscore"),require("url-parse"),require("xmldom")):U(Q["base64-js"],Q["biguint-format"],Q.electron,Q["flake-idgen"],Q["get-folder-size"],Q.jsonfile,Q.mkdirp,Q["moment/moment"],Q.underscore,Q["url-parse"],Q.xmldom);for(var B in F)("object"==typeof exports?exports:Q)[B]=F[B]}}(global,((__WEBPACK_EXTERNAL_MODULE__7769__,__WEBPACK_EXTERNAL_MODULE__1637__,__WEBPACK_EXTERNAL_MODULE__7194__,__WEBPACK_EXTERNAL_MODULE__1759__,__WEBPACK_EXTERNAL_MODULE__6838__,__WEBPACK_EXTERNAL_MODULE__3480__,__WEBPACK_EXTERNAL_MODULE__9526__,__WEBPACK_EXTERNAL_MODULE__1908__,__WEBPACK_EXTERNAL_MODULE__4952__,__WEBPACK_EXTERNAL_MODULE__3720__,__WEBPACK_EXTERNAL_MODULE__678__)=>(()=>{var __webpack_modules__={2081:Q=>{"use strict";Q.exports=require("child_process")},3639:Q=>{"use strict";Q.exports=require("domain")},2361:Q=>{"use strict";Q.exports=require("events")},7147:Q=>{"use strict";Q.exports=require("fs")},1808:Q=>{"use strict";Q.exports=require("net")},1017:Q=>{"use strict";Q.exports=require("path")},3837:Q=>{"use strict";Q.exports=require("util")},7769:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__7769__},1637:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__1637__},7194:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__7194__},1759:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__1759__},6838:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__6838__},3480:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__3480__},9526:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__9526__},1908:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__1908__},4952:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__4952__},3720:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__3720__},678:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__678__},8557:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\n/**\n * @typedef Configuration\n * @property {string=} appDir main directory path, can be any valid path, default is electronApp.getPath(\'userData\')\n * @property {string=} settingsName - name of the folder in main directory path where to store settings\n * @property {string=} publicName - name of the folder in main directory path which will be served over http\n * @property {string=} downloadsName - name of the folder in main directory path and publicName where to store assets\n * @property {string=} offlineDomain - on which domain the content should be served, default is 127.0.0.1\n * @property {number=} offlineContentPortStart - on which port offline content should be served, default is 3010\n * @property {number=} maxOfflineContentPortRange - max range for offline port to on which content can be served\n *   It will try from {offlineContentPortStart} and if taken it will try next until it finds a free one\n * @property {number=} numberOfManifestsInParallel - max number of manifest that can be downloaded at the same time,\n *   the rest will go into queue.\n *   Be reasonable here, as it might slow down your computer, default value is 2. With 10 and very larges manifests\n *   it might go to hundreds of chunks (50 files can be downloaded at the same time per manifest). Also the highger number\n *   doesn\'t mean it will downloads all movies faster. You should find here some balance.\n *   Seems like 2-3 manifests gives the best results, 1 manifest limitation might work better for slower computers.\n * @property {regex | string=} customManifestIdFolderRegex - regex to use to validate custom manifest id - bear in mind that this\n * need to be also a valid folder name.<br>\n * By default it matches any letter or number or unicode characters (regional characters) or "-" or "_" as a first character<br>\n * Then it may have any letter or number or unicode characters (regional characters) or space or any of the following characters:\n * ,.;\'[]{}!@#$%&*()-_=+\n *\n * @property {string=} openingTagForInvalidCustomManifestIdCharacter - when customManifestId is being invalidated\n * against customManifestIdFolderRegex it will raise the error and include the customManifestId with marked invalid characters\n * this is the opening tag to be added before invalid character\n *\n * @property {string=} closingTagForInvalidCustomManifestIdCharacter - when customManifestId is being invalidated\n * against customManifestIdFolderRegex it will raise the error and include the customManifestId with marked invalid characters\n * this is the closing tag to be added after invalid character\n *\n * @namespace DownstreamElectronBE.configuration\n * @description\n * During initialization you can configure your app\n * @example\n * //somewhere in the main process\n * const downstreamElectron = require(\'downstream-electron\');\n * const userSettings = {\n *   appDir: "/Users/admin/myApp",\n *   settingsName: "settings",\n *   publicName: "public",\n *   downloadsName: "movies"\n *   numberOfManifestsInParallel: 3\n * };\n * function createWindow() {\n *   downstreamElectron.init(userSettings);\n *   const win = new BrowserWindow({\n *     width: 1200,\n *     height: 700,\n *     resizable: true,\n *     webPreferences: {\n *       plugins: true,\n *       nodeIntegration: true\n *     }\n *   });\n *   win.loadURL(\'file://index.html\');\n *   win.webContents.openDevTools();\n * }\n * app.on(\'ready\', createWindow);\n */\nvar electronApp = (__webpack_require__(7194).app);\nvar path = __webpack_require__(1017);\nvar settings = {\n  downloadingThreadsRules: {\n    items: [{\n      max: 10,\n      files: 5\n    }, {\n      max: 100,\n      files: 10\n    }, {\n      max: 1000,\n      files: 30\n    }, {\n      max: 100000,\n      files: 50\n    }],\n    threads: [{\n      size: 10,\n      number: 1\n    }, {\n      size: 100,\n      number: 3\n    }, {\n      size: 1000,\n      number: 4\n    }, {\n      size: 100000,\n      number: 5\n    }]\n  },\n  MAX_ERRORS_DOWNLOAD_RETRY: 5,\n  MAX_INTERNET_ERRORS_DOWNLOAD_CHUNK_RETRY: 100,\n  MAX_ERRORS_DOWNLOAD_CHUNK_RETRY: 5,\n  offlineDomain: "http://127.0.0.1",\n  offlineContentPortStart: 3010,\n  maxOfflineContentPortRange: 3030,\n  numberOfManifestsInParallel: 2,\n  stopOnError: false,\n  stores: {\n    DOWNLOADS: {\n      "LEFT": "left",\n      "DOWNLOADING": "downloading",\n      "DOWNLOADED": "downloaded",\n      "ERRORS": "errors"\n    },\n    STATUS: "status",\n    PARAMS: "params",\n    MANIFEST: "manifest",\n    PERSISTENT: "persistent",\n    DATA: "data"\n  },\n  saveToDisk: true,\n  times: {\n    DOWNLOAD_TIMEOUT: 5000,\n    RETRY_TIMEOUT: 5000\n  },\n  useChunkedEncoding: false,\n  useHeadRequests: true,\n  noCache: false,\n  defaultManifestRequestOptions: {\n    headers: {\n      "Accept": "*/*",\n      // \'Accept-Encoding\': \'gzip, deflate, br\', // gzip doesn\'t work\n      // \'Accept-Language\': \'en-US,en;q=0.8,pl;q=0.6\',\n      // \'Cache-Control\': \'no-cache\',\n      // \'Connection\': \'keep-alive\', // @TODO investigate it\n      // \'Pragma\': \'no-cache\',\n      "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Electron/1.8.6 Safari/537.36"\n    },\n    timeout: 5000\n  },\n  // matches any letter or number or unicode characters (regional characters) or "-" or "_" as a start\n  // then it may have any letter or number or unicode characters (regional characters) or space or any of the following characters\n  // ,.;\'[]{}!@#$%&*()-_=+\n  // and is all case insensitive\n  customManifestIdFolderRegex: /^([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|\\-|\\_){1,1}([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|\\ |\\,|\\.|\\;|\\\'|\\[|\\]|\\{|\\}|\\!|\\@|\\#|\\$|\\%|\\&|\\*|\\(|\\)|\\-|\\_|\\=|\\+?){0,49}$/i,\n  openingTagForInvalidCustomManifestIdCharacter: \'<span style=\\\'background-color:blue;\\\'>\',\n  closingTagForInvalidCustomManifestIdCharacter: \'</span>\'\n};\nfunction loadUserSettings(jsonSettings) {\n  var appDir = electronApp.getPath("userData");\n  var settingsName = "settings";\n  var publicName = "public";\n  var downloadsName = "movies";\n  if (jsonSettings) {\n    if (jsonSettings.appDir) {\n      appDir = jsonSettings.appDir;\n    }\n    if (jsonSettings.settingsName) {\n      settingsName = jsonSettings.settingsName;\n    }\n    if (jsonSettings.publicName) {\n      publicName = jsonSettings.publicName;\n    }\n    if (jsonSettings.downloadsName) {\n      downloadsName = jsonSettings.downloadsName;\n    }\n    if (jsonSettings.offlineDomain) {\n      settings.offlineDomain = jsonSettings.offlineDomain;\n    }\n    if (jsonSettings.offlineContentPortStart) {\n      settings.offlineContentPortStart = jsonSettings.offlineContentPortStart;\n    }\n    if (jsonSettings.maxOfflineContentPortRange) {\n      settings.maxOfflineContentPortRange = jsonSettings.maxOfflineContentPortRange;\n    }\n    if (jsonSettings.numberOfManifestsInParallel) {\n      settings.numberOfManifestsInParallel = jsonSettings.numberOfManifestsInParallel;\n    }\n    if (jsonSettings.stopOnError !== undefined) {\n      settings.stopOnError = jsonSettings.stopOnError;\n    }\n    if (jsonSettings.customManifestIdFolderRegex) {\n      settings.customManifestIdFolderRegex = jsonSettings.customManifestIdFolderRegex;\n    }\n    if (jsonSettings.openingTagForInvalidCustomManifestIdCharacter) {\n      settings.openingTagForInvalidCustomManifestIdCharacter = jsonSettings.openingTagForInvalidCustomManifestIdCharacter;\n    }\n    if (jsonSettings.closingTagForInvalidCustomManifestIdCharacter) {\n      settings.closingTagForInvalidCustomManifestIdCharacter = jsonSettings.closingTagForInvalidCustomManifestIdCharacter;\n    }\n    if (jsonSettings.useHeadRequests !== undefined) {\n      settings.useHeadRequests = jsonSettings.useHeadRequests;\n    }\n    if (jsonSettings.times && jsonSettings.times.RETRY_TIMEOUT) {\n      settings.times.RETRY_TIMEOUT = jsonSettings.times.RETRY_TIMEOUT;\n    }\n    if (jsonSettings.MAX_ERRORS_DOWNLOAD_RETRY) {\n      settings.MAX_ERRORS_DOWNLOAD_RETRY = jsonSettings.MAX_ERRORS_DOWNLOAD_RETRY;\n    }\n    if (jsonSettings.MAX_INTERNET_ERRORS_DOWNLOAD_CHUNK_RETRY) {\n      settings.MAX_INTERNET_ERRORS_DOWNLOAD_CHUNK_RETRY = jsonSettings.MAX_INTERNET_ERRORS_DOWNLOAD_CHUNK_RETRY;\n    }\n    if (jsonSettings.MAX_ERRORS_DOWNLOAD_CHUNK_RETRY) {\n      settings.MAX_ERRORS_DOWNLOAD_CHUNK_RETRY = jsonSettings.MAX_ERRORS_DOWNLOAD_CHUNK_RETRY;\n    }\n    if (jsonSettings.noCache) {\n      settings.noCache = jsonSettings.noCache;\n    }\n  }\n  appDir = path.join(path.resolve(appDir), "/");\n  var settingsFolder = path.join(path.resolve(appDir + settingsName) + "/", "/");\n  var publicFolderPath = path.join(path.resolve(appDir + publicName) + "/", "/");\n  var downloadsFolderPath = path.join(path.resolve(publicFolderPath + downloadsName) + "/", "/");\n  settings.appDir = appDir;\n  settings.downloadsFolderPath = downloadsFolderPath;\n  settings.downloadsName = downloadsName;\n  settings.publicFolderPath = publicFolderPath;\n  settings.settingsFolder = settingsFolder;\n\n  // console.log(\'appDir:\', appDir);\n}\n\nfunction getSettings() {\n  return settings;\n}\nexports.load = loadUserSettings;\nexports.getSettings = getSettings;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8557\n')},3274:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\n/**\n * @typedef manifestObject\n * @property {Object} video - video representations\n * @property {Object} audio - audio representations\n * @property {Object} text - text representations\n * @property {String} id - manifest id\n */\n\n/**\n * @memberOf DownstreamElectronFE\n * @namespace DownstreamElectronFE.downloads\n */\nvar downloads = {};\n\n/**\n * create a new download, if success the result will contain "id" which should be used for other calls\n * @method create\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestUrl - manifest url\n * @param {string} customManifestId - custom manifest id, if empty, null or \'\'\n * the id will be generated automatically.<br>\n * The manifestId is used to also store information about movie under the same folder so if you overwrite it,\n * it will be also used as a name for folder where movie content will be stored\n * customManifestId will be validated against default regex\n * {@link DownstreamElectronBE.configuration|customManifestIdFolderRegex}\n * @example\n * var url = "http://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd";\n * DownstreamElectronFE.downloads.create(url)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * DownstreamElectronFE.downloads.create(url, \'<myCustomId>\')\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.create = __webpack_require__(1539);\n\n/**\n * create a persistent session\n * @method createPersistent\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @param {PersistentConfig} config - persistent configuration\n * @param {boolean} [forced=false] - replace existing persistent session, if true\n * @example\n * var config = {\n *   licenseUrl: \'https://lic.staging.drmtoday.com/license-proxy-widevine/cenc/\',\n *   serverCertificate: new Uint8Array(<server_certificate>),\n *   customData: {\n *     userId: \'<user_id>\',\n *     sessionId: \'<session_id>\',\n *     merchant: \'<merchant>\'\n *   }\n * };\n * DownstreamElectronFE.downloads.createPersistent(manifestId, config)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.createPersistent = __webpack_require__(3761);\n\n/**\n * Get info about manifest folder\n * @method getFolderInfo\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.getFolderInfo()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.getFolderInfo = __webpack_require__(9500);\n\n/**\n * get ids of all downloads\n * @method getList\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.getList()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.getList = __webpack_require__(8831);\n\n/**\n * get list of all downloads with additional info {@link manifestObject}\n * @method getListWithInfo\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.getListWithInfo()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.getListWithInfo = __webpack_require__(2893);\n\n/**\n * get offline link for download which can be used by any player to play movie\n * @method getOfflineLink\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.getOfflineLink(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.getOfflineLink = __webpack_require__(1536);\n\n/**\n * get info for download\n * @method info\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.info(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.info = __webpack_require__(4134);\n\n/**\n * removes download\n * @method remove\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.remove(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.remove = __webpack_require__(9858);\n\n/**\n * removes all downloads\n * @method removeAll\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.removeAll()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.removeAll = __webpack_require__(1853);\n\n/**\n * removes all unfinished downloads\n * @method removeAllUnfinished\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.removeAllUnfinished()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.removeAllUnfinished = __webpack_require__(8663);\n\n/**\n * removes persistent information previously stored\n * @method removePersistent\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.removePersistent(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.removePersistent = __webpack_require__(5585);\n\n/**\n * resumes download which could be previously stopped or is broken\n * @method resume\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.resume(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.resume = __webpack_require__(179);\n\n/**\n * Saves some user data this might be a string or json object.\n * This data will be available as "data" property for info of download\n * @method saveData\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @param {string|json} data - user data\n * @example\n * DownstreamElectronFE.downloads.saveData(manifestId, data)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.saveData = __webpack_require__(6162);\n\n/**\n * saves persistent session identifier\n * @method savePersistent\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @param {string} persistentSessionId - persistent session identifier\n * @example\n * DownstreamElectronFE.downloads.savePersistent(manifestId, persistentSessionId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.savePersistent = __webpack_require__(3831);\n\n/**\n * starts download\n * @method start\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @param {object} representations - representations to be downloaded, available options: \'video\', \'audio\', \'text\'.\n * For each option please provide an array of representations id to be downloaded\n * @example\n * DownstreamElectronFE.downloads.start(manifestId, {video: [\'video=400000\', \'video=795000\'], audio: [\'audio=128000\']})\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.start = __webpack_require__(1714);\n\n/**\n * stops download\n * @method stop\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @example\n * DownstreamElectronFE.downloads.stop(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.stop = __webpack_require__(4573);\n\n/**\n * stops all downloads\n * @method stopAll\n * @memberOf DownstreamElectronFE.downloads\n * @example\n * DownstreamElectronFE.downloads.stopAll()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.stopAll = __webpack_require__(5984);\n\n/**\n * subscribe to download progress\n * @method subscribe\n * @memberOf DownstreamElectronFE.downloads\n * @param {string|array} manifestId - manifest identifier, or the array of the manifests identifier.\n * @param {number} interval - in milliseconds - how often callback onProgress should be invoked\n * @param {function} onProgress - callback to be invoked as often as defined by interval with [stats information]{@link DownloadStats}\n * @param {function} onFinish - callback to be invoked when download is finished\n * @example\n * function onProgress (err, stats) {\n *   if (err) {\n *     console.logs(stats);\n *   }\n * };\n * function onFinish (err, info) {\n *   if (err) {\n *     console.log("error", err);\n *   } else {\n *     console.log("success", info);\n *   }\n * };\n * DownstreamElectronFE.downloads.subscribe(manifestId, 1000, onProgress, onFinish)\n *    .then(\n *      function onSuccess() {console.log("subscribed successfully");},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.subscribe = __webpack_require__(8973);\n\n/**\n * removes callbacks from subscribe process\n * @method unsubscribe\n * @memberOf DownstreamElectronFE.downloads\n * @param {string|array} manifestId - manifest identifier, or the array of the manifests identifier.\n * @example\n * DownstreamElectronFE.downloads.unsubscribe(manifestId)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.unsubscribe = __webpack_require__(5934);\n\n/**\n * update download folder info for manifest id\n * this can be usefule when user has copied download folder\n * @method updateDownloadFolder\n * @memberOf DownstreamElectronFE.downloads\n * @param {string} manifestId - manifest identifier\n * @param {string} downloadFolder - new download folder path\n * @example\n * DownstreamElectronFE.downloads.updateDownloadFolder(manifestId, downloadFolder)\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\ndownloads.updateDownloadFolder = __webpack_require__(15);\n\n/**\n * remove all subscribers\n * @private\n * @method removeSubscribers\n * @memberOf DownstreamElectronFE\n * @example\n * DownstreamElectronFE.removeSubscribers()\n *    .then(\n *      function onSuccess(result) {console.log("success", result);},\n *      function onError(err) {console.log("error", err);\n *    })\n * @returns {Promise} - promise\n */\nvar removeSubscribers = __webpack_require__(3781);\nmodule.exports = {\n  downloads: downloads,\n  removeSubscribers: removeSubscribers\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3274\n')},1539:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar Manifest = (__webpack_require__(7151)/* .Manifest */ .G);\nvar translation = __webpack_require__(5847);\nvar canCreateManifest = __webpack_require__(1958);\nvar getInvalidDiff = __webpack_require__(7868);\nvar appSettings = __webpack_require__(8557);\nmodule.exports = function (api, onSuccess, onFailure, target, manifestUrl, customManifestId, manifestStr) {\n  var useCustomId = true;\n  if (typeof customManifestId === "undefined" || customManifestId === "" || customManifestId === null) {\n    useCustomId = false;\n  }\n  if (useCustomId) {\n    if (typeof customManifestId !== "undefined" && typeof customManifestId !== "number" && typeof customManifestId !== "string") {\n      onFailure(translation.getError(translation.e.manifests.INVALID_ID, customManifestId));\n      return;\n    }\n    var customManifestIdFolderRegex = appSettings.getSettings().customManifestIdFolderRegex;\n    if (!customManifestId.match(customManifestIdFolderRegex)) {\n      var invalid = getInvalidDiff(customManifestId, customManifestIdFolderRegex, appSettings.getSettings().openingTagForInvalidCustomManifestIdCharacter, appSettings.getSettings().closingTagForInvalidCustomManifestIdCharacter);\n      onFailure(translation.getError(translation.e.manifests.INVALID_ID, invalid));\n      return;\n    }\n  }\n  var manifest = new Manifest(customManifestId);\n  var promise;\n  if (manifestStr) {\n    promise = manifest.loadWithManifest(manifestUrl, manifestStr);\n  } else {\n    promise = manifest.load(manifestUrl);\n  }\n  promise.then(function () {\n    if (useCustomId) {\n      canCreateManifest(customManifestId).then(function () {\n        api.manifestController.cacheManifest(manifest);\n        onSuccess(manifest.getJsonInfo());\n      }, function (err) {\n        onFailure(translation.getError(translation.e.manifests.FOLDER_ALREADY_EXISTS, customManifestId), err);\n      });\n    } else {\n      api.manifestController.cacheManifest(manifest);\n      onSuccess(manifest.getJsonInfo());\n    }\n  }, function (err) {\n    onFailure(translation.getError(translation.e.manifests.LOADING_FAILED, manifestUrl), err);\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQUM7TUFDOUNqQixTQUFTLENBQUNpQixRQUFRLENBQUNPLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDbkM7RUFDRixDQUFDLEVBQUUsVUFBQ0MsR0FBRyxFQUFLO0lBQ1Z4QixTQUFTLENBQUNSLFdBQVcsQ0FBQ2MsUUFBUSxDQUFDZCxXQUFXLENBQUNlLENBQUMsQ0FBQ0MsU0FBUyxDQUFDa0IsY0FBYyxFQUFFeEIsV0FBVyxDQUFDLEVBQUVzQixHQUFHLENBQUM7RUFDM0YsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvY3JlYXRlLmpzP2VjMjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IE1hbmlmZXN0ID0gcmVxdWlyZShcIi4uLy4uL21hbmlmZXN0L2xvYWRlci9tYW5pZmVzdFwiKS5NYW5pZmVzdDtcbmNvbnN0IHRyYW5zbGF0aW9uID0gcmVxdWlyZShcIi4uLy4uL3RyYW5zbGF0aW9uL2luZGV4XCIpO1xuY29uc3QgY2FuQ3JlYXRlTWFuaWZlc3QgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9jYW4tY3JlYXRlLW1hbmlmZXN0XCIpO1xuY29uc3QgZ2V0SW52YWxpZERpZmYgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9nZXQtaW52YWxpZC1kaWZmXCIpO1xuY29uc3QgYXBwU2V0dGluZ3MgPSByZXF1aXJlKFwiLi4vLi4vYXBwLXNldHRpbmdzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlLCB0YXJnZXQsIG1hbmlmZXN0VXJsLCBjdXN0b21NYW5pZmVzdElkLCBtYW5pZmVzdFN0cikge1xuICB2YXIgdXNlQ3VzdG9tSWQgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgY3VzdG9tTWFuaWZlc3RJZCA9PT0gXCJ1bmRlZmluZWRcIiB8fFxuICAgIGN1c3RvbU1hbmlmZXN0SWQgPT09IFwiXCIgfHxcbiAgICBjdXN0b21NYW5pZmVzdElkID09PSBudWxsKSB7XG4gICAgdXNlQ3VzdG9tSWQgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh1c2VDdXN0b21JZCkge1xuICAgIGlmICh0eXBlb2YgY3VzdG9tTWFuaWZlc3RJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgdHlwZW9mIGN1c3RvbU1hbmlmZXN0SWQgIT09IFwibnVtYmVyXCIgJiZcbiAgICAgIHR5cGVvZiBjdXN0b21NYW5pZmVzdElkICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5tYW5pZmVzdHMuSU5WQUxJRF9JRCwgY3VzdG9tTWFuaWZlc3RJZCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjdXN0b21NYW5pZmVzdElkRm9sZGVyUmVnZXggPSBhcHBTZXR0aW5ncy5nZXRTZXR0aW5ncygpLmN1c3RvbU1hbmlmZXN0SWRGb2xkZXJSZWdleDtcblxuICAgIGlmICghY3VzdG9tTWFuaWZlc3RJZC5tYXRjaChjdXN0b21NYW5pZmVzdElkRm9sZGVyUmVnZXgpKSB7XG4gICAgICBjb25zdCBpbnZhbGlkID0gZ2V0SW52YWxpZERpZmYoXG4gICAgICAgIGN1c3RvbU1hbmlmZXN0SWQsXG4gICAgICAgIGN1c3RvbU1hbmlmZXN0SWRGb2xkZXJSZWdleCxcbiAgICAgICAgYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5vcGVuaW5nVGFnRm9ySW52YWxpZEN1c3RvbU1hbmlmZXN0SWRDaGFyYWN0ZXIsXG4gICAgICAgIGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkuY2xvc2luZ1RhZ0ZvckludmFsaWRDdXN0b21NYW5pZmVzdElkQ2hhcmFjdGVyKTtcbiAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLm1hbmlmZXN0cy5JTlZBTElEX0lELCBpbnZhbGlkKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgbGV0IG1hbmlmZXN0ID0gbmV3IE1hbmlmZXN0KGN1c3RvbU1hbmlmZXN0SWQpO1xuICBsZXQgcHJvbWlzZTtcbiAgaWYgKG1hbmlmZXN0U3RyKSB7XG4gICAgcHJvbWlzZSA9IG1hbmlmZXN0LmxvYWRXaXRoTWFuaWZlc3QobWFuaWZlc3RVcmwsIG1hbmlmZXN0U3RyKVxuICB9IGVsc2Uge1xuICAgIHByb21pc2UgPSBtYW5pZmVzdC5sb2FkKG1hbmlmZXN0VXJsKTtcbiAgfVxuXG4gIHByb21pc2UudGhlbigoKSA9PiB7XG4gICAgaWYgKHVzZUN1c3RvbUlkKSB7XG4gICAgICBjYW5DcmVhdGVNYW5pZmVzdChjdXN0b21NYW5pZmVzdElkKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXBpLm1hbmlmZXN0Q29udHJvbGxlci5jYWNoZU1hbmlmZXN0KG1hbmlmZXN0KTtcbiAgICAgICAgb25TdWNjZXNzKG1hbmlmZXN0LmdldEpzb25JbmZvKCkpO1xuICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5tYW5pZmVzdHMuRk9MREVSX0FMUkVBRFlfRVhJU1RTLCBjdXN0b21NYW5pZmVzdElkKSwgZXJyKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkubWFuaWZlc3RDb250cm9sbGVyLmNhY2hlTWFuaWZlc3QobWFuaWZlc3QpO1xuICAgICAgb25TdWNjZXNzKG1hbmlmZXN0LmdldEpzb25JbmZvKCkpO1xuICAgIH1cbiAgfSwgKGVycikgPT4ge1xuICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLm1hbmlmZXN0cy5MT0FESU5HX0ZBSUxFRCwgbWFuaWZlc3RVcmwpLCBlcnIpO1xuICB9KTtcbn07XG4iXSwibmFtZXMiOlsiTWFuaWZlc3QiLCJyZXF1aXJlIiwidHJhbnNsYXRpb24iLCJjYW5DcmVhdGVNYW5pZmVzdCIsImdldEludmFsaWREaWZmIiwiYXBwU2V0dGluZ3MiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBpIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwidGFyZ2V0IiwibWFuaWZlc3RVcmwiLCJjdXN0b21NYW5pZmVzdElkIiwibWFuaWZlc3RTdHIiLCJ1c2VDdXN0b21JZCIsImdldEVycm9yIiwiZSIsIm1hbmlmZXN0cyIsIklOVkFMSURfSUQiLCJjdXN0b21NYW5pZmVzdElkRm9sZGVyUmVnZXgiLCJnZXRTZXR0aW5ncyIsIm1hdGNoIiwiaW52YWxpZCIsIm9wZW5pbmdUYWdGb3JJbnZhbGlkQ3VzdG9tTWFuaWZlc3RJZENoYXJhY3RlciIsImNsb3NpbmdUYWdGb3JJbnZhbGlkQ3VzdG9tTWFuaWZlc3RJZENoYXJhY3RlciIsIm1hbmlmZXN0IiwicHJvbWlzZSIsImxvYWRXaXRoTWFuaWZlc3QiLCJsb2FkIiwidGhlbiIsIm1hbmlmZXN0Q29udHJvbGxlciIsImNhY2hlTWFuaWZlc3QiLCJnZXRKc29uSW5mbyIsImVyciIsIkZPTERFUl9BTFJFQURZX0VYSVNUUyIsIkxPQURJTkdfRkFJTEVEIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1539\n')},3761:module=>{"use strict";eval("\n\nmodule.exports = function (api, onSuccess /*, onFailure, target, manifestId */) {\n  onSuccess();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc2MS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLENBQUMsc0NBQXNDO0VBQzlFQSxTQUFTLENBQUMsQ0FBQztBQUNiLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2JlLW1ldGhvZHMvZG93bmxvYWRzL2NyZWF0ZVBlcnNpc3RlbnQuanM/ZWFkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MgLyosIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdElkICovKSB7XG4gIG9uU3VjY2VzcygpO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYXBpIiwib25TdWNjZXNzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3761\n")},9500:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(5847);\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId) {\n  api.offlineController.getManifestFolderInfo(manifestId, function (err, info) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.INFO_FAILED, manifestId), err);\n    } else {\n      onSuccess(info);\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTUwMC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsSUFBeUIsQ0FBQztBQUV0REMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxVQUFVLEVBQUU7RUFDeEVKLEdBQUcsQ0FBQ0ssaUJBQWlCLENBQUNDLHFCQUFxQixDQUFDRixVQUFVLEVBQUUsVUFBVUcsR0FBRyxFQUFFQyxJQUFJLEVBQUU7SUFDM0UsSUFBSUQsR0FBRyxFQUFFO01BQ1BMLFNBQVMsQ0FBQ04sV0FBVyxDQUFDYSxRQUFRLENBQUNiLFdBQVcsQ0FBQ2MsQ0FBQyxDQUFDQyxTQUFTLENBQUNDLFdBQVcsRUFBRVIsVUFBVSxDQUFDLEVBQUVHLEdBQUcsQ0FBQztJQUN2RixDQUFDLE1BQU07TUFDTE4sU0FBUyxDQUFDTyxJQUFJLENBQUM7SUFDakI7RUFDRixDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9iZS1tZXRob2RzL2Rvd25sb2Fkcy9mb2xkZXItaW5mby5qcz9lY2MyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3RyYW5zbGF0aW9uL2luZGV4Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgbWFuaWZlc3RJZCkge1xuICBhcGkub2ZmbGluZUNvbnRyb2xsZXIuZ2V0TWFuaWZlc3RGb2xkZXJJbmZvKG1hbmlmZXN0SWQsIGZ1bmN0aW9uIChlcnIsIGluZm8pIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5tYW5pZmVzdHMuSU5GT19GQUlMRUQsIG1hbmlmZXN0SWQpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvblN1Y2Nlc3MoaW5mbyk7XG4gICAgfVxuICB9KTtcbn07XG4iXSwibmFtZXMiOlsidHJhbnNsYXRpb24iLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsInRhcmdldCIsIm1hbmlmZXN0SWQiLCJvZmZsaW5lQ29udHJvbGxlciIsImdldE1hbmlmZXN0Rm9sZGVySW5mbyIsImVyciIsImluZm8iLCJnZXRFcnJvciIsImUiLCJtYW5pZmVzdHMiLCJJTkZPX0ZBSUxFRCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9500\n")},2893:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(5847);\nmodule.exports = function (api, onSuccess, onFailure, target, full) {\n  api.offlineController.getManifestsListWithInfo(function (err, list) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.LIST_LOADING_FAILED), err);\n    } else {\n      onSuccess(list);\n    }\n  }, full);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjg5My5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsSUFBeUIsQ0FBQztBQUV0REMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxJQUFJLEVBQUU7RUFDbEVKLEdBQUcsQ0FBQ0ssaUJBQWlCLENBQUNDLHdCQUF3QixDQUFDLFVBQVVDLEdBQUcsRUFBRUMsSUFBSSxFQUFFO0lBQ2xFLElBQUlELEdBQUcsRUFBRTtNQUNQTCxTQUFTLENBQUNOLFdBQVcsQ0FBQ2EsUUFBUSxDQUFDYixXQUFXLENBQUNjLENBQUMsQ0FBQ0MsU0FBUyxDQUFDQyxtQkFBbUIsQ0FBQyxFQUFFTCxHQUFHLENBQUM7SUFDbkYsQ0FBQyxNQUFNO01BQ0xOLFNBQVMsQ0FBQ08sSUFBSSxDQUFDO0lBQ2pCO0VBQ0YsQ0FBQyxFQUFFSixJQUFJLENBQUM7QUFDVixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9iZS1tZXRob2RzL2Rvd25sb2Fkcy9nZXQtbGlzdC13aXRoLWluZm8uanM/ZjQ4MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgdHJhbnNsYXRpb24gPSByZXF1aXJlKCcuLi8uLi90cmFuc2xhdGlvbi9pbmRleCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlLCB0YXJnZXQsIGZ1bGwpIHtcbiAgYXBpLm9mZmxpbmVDb250cm9sbGVyLmdldE1hbmlmZXN0c0xpc3RXaXRoSW5mbyhmdW5jdGlvbiAoZXJyLCBsaXN0KSB7XG4gICAgaWYgKGVycikge1xuICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUubWFuaWZlc3RzLkxJU1RfTE9BRElOR19GQUlMRUQpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvblN1Y2Nlc3MobGlzdCk7XG4gICAgfVxuICB9LCBmdWxsKTtcbn07XG4iXSwibmFtZXMiOlsidHJhbnNsYXRpb24iLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsInRhcmdldCIsImZ1bGwiLCJvZmZsaW5lQ29udHJvbGxlciIsImdldE1hbmlmZXN0c0xpc3RXaXRoSW5mbyIsImVyciIsImxpc3QiLCJnZXRFcnJvciIsImUiLCJtYW5pZmVzdHMiLCJMSVNUX0xPQURJTkdfRkFJTEVEIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2893\n")},8831:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(5847);\nmodule.exports = function (api, onSuccess, onFailure) {\n  api.offlineController.getManifestsList(function (err, list) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.LIST_LOADING_FAILED), err);\n    } else {\n      onSuccess(list);\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODgzMS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsSUFBeUIsQ0FBQztBQUV0REMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRTtFQUNwREYsR0FBRyxDQUFDRyxpQkFBaUIsQ0FBQ0MsZ0JBQWdCLENBQUMsVUFBVUMsR0FBRyxFQUFFQyxJQUFJLEVBQUU7SUFDMUQsSUFBSUQsR0FBRyxFQUFFO01BQ1BILFNBQVMsQ0FBQ04sV0FBVyxDQUFDVyxRQUFRLENBQUNYLFdBQVcsQ0FBQ1ksQ0FBQyxDQUFDQyxTQUFTLENBQUNDLG1CQUFtQixDQUFDLEVBQUVMLEdBQUcsQ0FBQztJQUNuRixDQUFDLE1BQU07TUFDTEosU0FBUyxDQUFDSyxJQUFJLENBQUM7SUFDakI7RUFDRixDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9iZS1tZXRob2RzL2Rvd25sb2Fkcy9nZXQtbGlzdC5qcz8zZmI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3RyYW5zbGF0aW9uL2luZGV4Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUpIHtcbiAgYXBpLm9mZmxpbmVDb250cm9sbGVyLmdldE1hbmlmZXN0c0xpc3QoZnVuY3Rpb24gKGVyciwgbGlzdCkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLm1hbmlmZXN0cy5MSVNUX0xPQURJTkdfRkFJTEVEKSwgZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb25TdWNjZXNzKGxpc3QpO1xuICAgIH1cbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbInRyYW5zbGF0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJvZmZsaW5lQ29udHJvbGxlciIsImdldE1hbmlmZXN0c0xpc3QiLCJlcnIiLCJsaXN0IiwiZ2V0RXJyb3IiLCJlIiwibWFuaWZlc3RzIiwiTElTVF9MT0FESU5HX0ZBSUxFRCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8831\n")},1536:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(5847);\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId) {\n  api.offlineController.getManifestInfo(manifestId, function (err, info) {\n    if (err) {\n      onFailure(translation.getError(translation.e.downloads._GENERAL), err);\n    } else {\n      onSuccess({\n        offlineLink: api.getOfflinePath(manifestId) + info.manifest.name,\n        persistent: info.persistent\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUzNi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsSUFBeUIsQ0FBQztBQUV0REMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxVQUFVLEVBQUU7RUFDeEVKLEdBQUcsQ0FBQ0ssaUJBQWlCLENBQUNDLGVBQWUsQ0FBQ0YsVUFBVSxFQUFFLFVBQVVHLEdBQUcsRUFBRUMsSUFBSSxFQUFFO0lBQ3JFLElBQUlELEdBQUcsRUFBRTtNQUNQTCxTQUFTLENBQUNOLFdBQVcsQ0FBQ2EsUUFBUSxDQUFDYixXQUFXLENBQUNjLENBQUMsQ0FBQ0MsU0FBUyxDQUFDQyxRQUFRLENBQUMsRUFBRUwsR0FBRyxDQUFDO0lBQ3hFLENBQUMsTUFBTTtNQUNMTixTQUFTLENBQUM7UUFDUlksV0FBVyxFQUFFYixHQUFHLENBQUNjLGNBQWMsQ0FBQ1YsVUFBVSxDQUFDLEdBQUdJLElBQUksQ0FBQ08sUUFBUSxDQUFDQyxJQUFJO1FBQ2hFQyxVQUFVLEVBQUVULElBQUksQ0FBQ1M7TUFDbkIsQ0FBQyxDQUFDO0lBQ0o7RUFDRixDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9iZS1tZXRob2RzL2Rvd25sb2Fkcy9nZXQtb2ZmbGluZS1saW5rLmpzP2Y0YzIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3RyYW5zbGF0aW9uL2luZGV4Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgbWFuaWZlc3RJZCkge1xuICBhcGkub2ZmbGluZUNvbnRyb2xsZXIuZ2V0TWFuaWZlc3RJbmZvKG1hbmlmZXN0SWQsIGZ1bmN0aW9uIChlcnIsIGluZm8pIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuX0dFTkVSQUwpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvblN1Y2Nlc3Moe1xuICAgICAgICBvZmZsaW5lTGluazogYXBpLmdldE9mZmxpbmVQYXRoKG1hbmlmZXN0SWQpICsgaW5mby5tYW5pZmVzdC5uYW1lLFxuICAgICAgICBwZXJzaXN0ZW50OiBpbmZvLnBlcnNpc3RlbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbInRyYW5zbGF0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJ0YXJnZXQiLCJtYW5pZmVzdElkIiwib2ZmbGluZUNvbnRyb2xsZXIiLCJnZXRNYW5pZmVzdEluZm8iLCJlcnIiLCJpbmZvIiwiZ2V0RXJyb3IiLCJlIiwiZG93bmxvYWRzIiwiX0dFTkVSQUwiLCJvZmZsaW5lTGluayIsImdldE9mZmxpbmVQYXRoIiwibWFuaWZlc3QiLCJuYW1lIiwicGVyc2lzdGVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1536\n")},4134:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(5847);\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, full) {\n  api.offlineController.getManifestInfo(manifestId, function (err, info) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.INFO_FAILED, manifestId), err);\n    } else {\n      onSuccess(info);\n    }\n  }, full);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEzNC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsSUFBeUIsQ0FBQztBQUV0REMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLElBQUksRUFBRTtFQUM5RUwsR0FBRyxDQUFDTSxpQkFBaUIsQ0FBQ0MsZUFBZSxDQUFDSCxVQUFVLEVBQUUsVUFBVUksR0FBRyxFQUFFQyxJQUFJLEVBQUU7SUFDckUsSUFBSUQsR0FBRyxFQUFFO01BQ1BOLFNBQVMsQ0FBQ04sV0FBVyxDQUFDYyxRQUFRLENBQUNkLFdBQVcsQ0FBQ2UsQ0FBQyxDQUFDQyxTQUFTLENBQUNDLFdBQVcsRUFBRVQsVUFBVSxDQUFDLEVBQUVJLEdBQUcsQ0FBQztJQUN2RixDQUFDLE1BQU07TUFDTFAsU0FBUyxDQUFDUSxJQUFJLENBQUM7SUFDakI7RUFDRixDQUFDLEVBQUVKLElBQUksQ0FBQztBQUNWLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2JlLW1ldGhvZHMvZG93bmxvYWRzL2luZm8uanM/NmRiNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgdHJhbnNsYXRpb24gPSByZXF1aXJlKCcuLi8uLi90cmFuc2xhdGlvbi9pbmRleCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlLCB0YXJnZXQsIG1hbmlmZXN0SWQsIGZ1bGwpIHtcbiAgYXBpLm9mZmxpbmVDb250cm9sbGVyLmdldE1hbmlmZXN0SW5mbyhtYW5pZmVzdElkLCBmdW5jdGlvbiAoZXJyLCBpbmZvKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUubWFuaWZlc3RzLklORk9fRkFJTEVELCBtYW5pZmVzdElkKSwgZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb25TdWNjZXNzKGluZm8pO1xuICAgIH1cbiAgfSwgZnVsbCk7XG59O1xuIl0sIm5hbWVzIjpbInRyYW5zbGF0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJ0YXJnZXQiLCJtYW5pZmVzdElkIiwiZnVsbCIsIm9mZmxpbmVDb250cm9sbGVyIiwiZ2V0TWFuaWZlc3RJbmZvIiwiZXJyIiwiaW5mbyIsImdldEVycm9yIiwiZSIsIm1hbmlmZXN0cyIsIklORk9fRkFJTEVEIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4134\n")},8663:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(5847);\nvar STATUSES = __webpack_require__(9773);\nmodule.exports = function (api, onSuccess, onFailure) {\n  api.offlineController.getManifestsListWithInfo(function (err, results) {\n    if (err) {\n      onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_UNFINISHED_FAILED), err);\n    } else {\n      var promises = [];\n      var manifestIds = [];\n      if (!results.length) {\n        onFailure(translation.getError(translation.e.downloads.ALREADY_REMOVED_ALL_UNFINISHED));\n        return;\n      }\n      for (var i = 0, j = results.length; i < j; i++) {\n        var status = results[i].status;\n        var manifestId = results[i].manifestInfo.id;\n        if (status !== STATUSES.FINISHED) {\n          manifestIds.push(manifestId);\n          promises.push(api.downloadsController.removePromise(manifestId));\n        }\n      }\n      Promise.all(promises).then(function () {\n        var promises = [];\n        for (var _i = 0, _j = manifestIds.length; _i < _j; _i++) {\n          promises.push(api.offlineController.removePromise(manifestIds[_i]));\n        }\n        Promise.all(promises).then(function () {\n          api.subscribersController.unsubscribe(manifestIds);\n          api.manifestController.removeFromCache(manifestIds);\n          onSuccess(manifestIds);\n        }, function (err) {\n          onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_UNFINISHED_FAILED), err);\n        });\n      }, function (err) {\n        onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_UNFINISHED_FAILED), err);\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUM7SUFDTjtFQUNGLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2JlLW1ldGhvZHMvZG93bmxvYWRzL3JlbW92ZS1hbGwtdW5maW5pc2hlZC5qcz83NzFkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgdHJhbnNsYXRpb24gPSByZXF1aXJlKCcuLi8uLi90cmFuc2xhdGlvbi9pbmRleCcpO1xuY29uc3QgU1RBVFVTRVMgPSByZXF1aXJlKFwiLi4vLi4vZG93bmxvYWRzL3N0YXR1c2VzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlKSB7XG4gIGFwaS5vZmZsaW5lQ29udHJvbGxlci5nZXRNYW5pZmVzdHNMaXN0V2l0aEluZm8oZnVuY3Rpb24gKGVyciwgcmVzdWx0cykge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5SRU1PVklOR19BTExfVU5GSU5JU0hFRF9GQUlMRUQpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcHJvbWlzZXMgPSBbXTtcbiAgICAgIGxldCBtYW5pZmVzdElkcyA9IFtdO1xuICAgICAgaWYgKCFyZXN1bHRzLmxlbmd0aCkge1xuICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuQUxSRUFEWV9SRU1PVkVEX0FMTF9VTkZJTklTSEVEKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gcmVzdWx0cy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgbGV0IHN0YXR1cyA9IHJlc3VsdHNbaV0uc3RhdHVzO1xuICAgICAgICBsZXQgbWFuaWZlc3RJZCA9IHJlc3VsdHNbaV0ubWFuaWZlc3RJbmZvLmlkO1xuICAgICAgICBpZiAoc3RhdHVzICE9PSBTVEFUVVNFUy5GSU5JU0hFRCkge1xuICAgICAgICAgIG1hbmlmZXN0SWRzLnB1c2gobWFuaWZlc3RJZCk7XG4gICAgICAgICAgcHJvbWlzZXMucHVzaChhcGkuZG93bmxvYWRzQ29udHJvbGxlci5yZW1vdmVQcm9taXNlKG1hbmlmZXN0SWQpKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGxldCBwcm9taXNlcyA9IFtdO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gbWFuaWZlc3RJZHMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgICBwcm9taXNlcy5wdXNoKGFwaS5vZmZsaW5lQ29udHJvbGxlci5yZW1vdmVQcm9taXNlKG1hbmlmZXN0SWRzW2ldKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBhcGkuc3Vic2NyaWJlcnNDb250cm9sbGVyLnVuc3Vic2NyaWJlKG1hbmlmZXN0SWRzKTtcbiAgICAgICAgICAgICAgYXBpLm1hbmlmZXN0Q29udHJvbGxlci5yZW1vdmVGcm9tQ2FjaGUobWFuaWZlc3RJZHMpO1xuICAgICAgICAgICAgICBvblN1Y2Nlc3MobWFuaWZlc3RJZHMpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuUkVNT1ZJTkdfQUxMX1VORklOSVNIRURfRkFJTEVEKSwgZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUuZG93bmxvYWRzLlJFTU9WSU5HX0FMTF9VTkZJTklTSEVEX0ZBSUxFRCksIGVycik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbInRyYW5zbGF0aW9uIiwicmVxdWlyZSIsIlNUQVRVU0VTIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsIm9mZmxpbmVDb250cm9sbGVyIiwiZ2V0TWFuaWZlc3RzTGlzdFdpdGhJbmZvIiwiZXJyIiwicmVzdWx0cyIsImdldEVycm9yIiwiZSIsImRvd25sb2FkcyIsIlJFTU9WSU5HX0FMTF9VTkZJTklTSEVEX0ZBSUxFRCIsInByb21pc2VzIiwibWFuaWZlc3RJZHMiLCJsZW5ndGgiLCJBTFJFQURZX1JFTU9WRURfQUxMX1VORklOSVNIRUQiLCJpIiwiaiIsInN0YXR1cyIsIm1hbmlmZXN0SWQiLCJtYW5pZmVzdEluZm8iLCJpZCIsIkZJTklTSEVEIiwicHVzaCIsImRvd25sb2Fkc0NvbnRyb2xsZXIiLCJyZW1vdmVQcm9taXNlIiwiUHJvbWlzZSIsImFsbCIsInRoZW4iLCJzdWJzY3JpYmVyc0NvbnRyb2xsZXIiLCJ1bnN1YnNjcmliZSIsIm1hbmlmZXN0Q29udHJvbGxlciIsInJlbW92ZUZyb21DYWNoZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8663\n")},1853:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(5847);\nmodule.exports = function (api, onSuccess, onFailure) {\n  api.offlineController.getManifestsListWithInfo(function (err, manifests) {\n    if (err) {\n      onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_FAILED), err);\n    } else {\n      var manifestIds = manifests.map(function (manifest) {\n        return manifest.manifestInfo.id;\n      });\n      var promises = [];\n      for (var i = 0, j = manifestIds.length; i < j; i++) {\n        promises.push(api.downloadsController.removePromise(manifestIds[i]));\n      }\n      Promise.all(promises).then(function () {\n        api.offlineController.removeAllPromise().then(function () {\n          api.subscribersController.unsubscribeAll();\n          api.manifestController.removeFromCacheAll();\n          onSuccess(manifests);\n        }, function (err) {\n          onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_FAILED), err);\n        });\n      }, function (err) {\n        onFailure(translation.getError(translation.e.downloads.REMOVING_ALL_FAILED), err);\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg1My5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsSUFBeUIsQ0FBQztBQUV0REMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRTtFQUNwREYsR0FBRyxDQUFDRyxpQkFBaUIsQ0FBQ0Msd0JBQXdCLENBQUMsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUU7SUFDdkUsSUFBSUQsR0FBRyxFQUFFO01BQ1BILFNBQVMsQ0FBQ04sV0FBVyxDQUFDVyxRQUFRLENBQUNYLFdBQVcsQ0FBQ1ksQ0FBQyxDQUFDQyxTQUFTLENBQUNDLG1CQUFtQixDQUFDLEVBQUVMLEdBQUcsQ0FBQztJQUNuRixDQUFDLE1BQU07TUFDTCxJQUFNTSxXQUFXLEdBQUdMLFNBQVMsQ0FBQ00sR0FBRyxDQUFDLFVBQVVDLFFBQVEsRUFBRTtRQUNwRCxPQUFPQSxRQUFRLENBQUNDLFlBQVksQ0FBQ0MsRUFBRTtNQUNqQyxDQUFDLENBQUM7TUFDRixJQUFJQyxRQUFRLEdBQUcsRUFBRTtNQUNqQixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVDLENBQUMsR0FBR1AsV0FBVyxDQUFDUSxNQUFNLEVBQUVGLENBQUMsR0FBR0MsQ0FBQyxFQUFFRCxDQUFDLEVBQUUsRUFBRTtRQUNsREQsUUFBUSxDQUFDSSxJQUFJLENBQUNwQixHQUFHLENBQUNxQixtQkFBbUIsQ0FBQ0MsYUFBYSxDQUFDWCxXQUFXLENBQUNNLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDdEU7TUFDQU0sT0FBTyxDQUFDQyxHQUFHLENBQUNSLFFBQVEsQ0FBQyxDQUNoQlMsSUFBSSxDQUFDLFlBQVk7UUFDaEJ6QixHQUFHLENBQUNHLGlCQUFpQixDQUFDdUIsZ0JBQWdCLENBQUMsQ0FBQyxDQUNuQ0QsSUFBSSxDQUFDLFlBQVk7VUFDaEJ6QixHQUFHLENBQUMyQixxQkFBcUIsQ0FBQ0MsY0FBYyxDQUFDLENBQUM7VUFDMUM1QixHQUFHLENBQUM2QixrQkFBa0IsQ0FBQ0Msa0JBQWtCLENBQUMsQ0FBQztVQUMzQzdCLFNBQVMsQ0FBQ0ssU0FBUyxDQUFDO1FBQ3RCLENBQUMsRUFBRSxVQUFVRCxHQUFHLEVBQUU7VUFDaEJILFNBQVMsQ0FBQ04sV0FBVyxDQUFDVyxRQUFRLENBQUNYLFdBQVcsQ0FBQ1ksQ0FBQyxDQUFDQyxTQUFTLENBQUNDLG1CQUFtQixDQUFDLEVBQUVMLEdBQUcsQ0FBQztRQUNuRixDQUFDLENBQUM7TUFDUixDQUFDLEVBQUUsVUFBVUEsR0FBRyxFQUFFO1FBQ2hCSCxTQUFTLENBQUNOLFdBQVcsQ0FBQ1csUUFBUSxDQUFDWCxXQUFXLENBQUNZLENBQUMsQ0FBQ0MsU0FBUyxDQUFDQyxtQkFBbUIsQ0FBQyxFQUFFTCxHQUFHLENBQUM7TUFDbkYsQ0FBQyxDQUFDO0lBQ1I7RUFDRixDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9iZS1tZXRob2RzL2Rvd25sb2Fkcy9yZW1vdmUtYWxsLmpzP2Y2NWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHRyYW5zbGF0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHJhbnNsYXRpb24vaW5kZXgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSkge1xuICBhcGkub2ZmbGluZUNvbnRyb2xsZXIuZ2V0TWFuaWZlc3RzTGlzdFdpdGhJbmZvKGZ1bmN0aW9uIChlcnIsIG1hbmlmZXN0cykge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5SRU1PVklOR19BTExfRkFJTEVEKSwgZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbWFuaWZlc3RJZHMgPSBtYW5pZmVzdHMubWFwKGZ1bmN0aW9uIChtYW5pZmVzdCkge1xuICAgICAgICByZXR1cm4gbWFuaWZlc3QubWFuaWZlc3RJbmZvLmlkO1xuICAgICAgfSk7XG4gICAgICBsZXQgcHJvbWlzZXMgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gbWFuaWZlc3RJZHMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgIHByb21pc2VzLnB1c2goYXBpLmRvd25sb2Fkc0NvbnRyb2xsZXIucmVtb3ZlUHJvbWlzZShtYW5pZmVzdElkc1tpXSkpO1xuICAgICAgfVxuICAgICAgUHJvbWlzZS5hbGwocHJvbWlzZXMpXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYXBpLm9mZmxpbmVDb250cm9sbGVyLnJlbW92ZUFsbFByb21pc2UoKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIGFwaS5zdWJzY3JpYmVyc0NvbnRyb2xsZXIudW5zdWJzY3JpYmVBbGwoKTtcbiAgICAgICAgICAgICAgICAgIGFwaS5tYW5pZmVzdENvbnRyb2xsZXIucmVtb3ZlRnJvbUNhY2hlQWxsKCk7XG4gICAgICAgICAgICAgICAgICBvblN1Y2Nlc3MobWFuaWZlc3RzKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuUkVNT1ZJTkdfQUxMX0ZBSUxFRCksIGVycik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUuZG93bmxvYWRzLlJFTU9WSU5HX0FMTF9GQUlMRUQpLCBlcnIpO1xuICAgICAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbInRyYW5zbGF0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJvZmZsaW5lQ29udHJvbGxlciIsImdldE1hbmlmZXN0c0xpc3RXaXRoSW5mbyIsImVyciIsIm1hbmlmZXN0cyIsImdldEVycm9yIiwiZSIsImRvd25sb2FkcyIsIlJFTU9WSU5HX0FMTF9GQUlMRUQiLCJtYW5pZmVzdElkcyIsIm1hcCIsIm1hbmlmZXN0IiwibWFuaWZlc3RJbmZvIiwiaWQiLCJwcm9taXNlcyIsImkiLCJqIiwibGVuZ3RoIiwicHVzaCIsImRvd25sb2Fkc0NvbnRyb2xsZXIiLCJyZW1vdmVQcm9taXNlIiwiUHJvbWlzZSIsImFsbCIsInRoZW4iLCJyZW1vdmVBbGxQcm9taXNlIiwic3Vic2NyaWJlcnNDb250cm9sbGVyIiwidW5zdWJzY3JpYmVBbGwiLCJtYW5pZmVzdENvbnRyb2xsZXIiLCJyZW1vdmVGcm9tQ2FjaGVBbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1853\n")},5585:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar appSettings = __webpack_require__(8557);\nvar translation = __webpack_require__(5847);\nvar removeDir = __webpack_require__(943);\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId) {\n  api.offlineController.getManifestInfo(manifestId, function (err, info) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId), err);\n    } else {\n      var file = appSettings.getSettings().settingsFolder + manifestId + "/" + appSettings.getSettings().stores.PERSISTENT + ".json";\n      removeDir(file, function (err) {\n        if (err && err.code !== "ENOENT") {\n          onFailure(translation.getError(translation.e.downloads.REMOVING_PERSISTENT_FAILED, manifestId), err);\n        } else {\n          onSuccess(info);\n        }\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTU4NS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsSUFBb0IsQ0FBQztBQUNqRCxJQUFNQyxXQUFXLEdBQUdELG1CQUFPLENBQUMsSUFBeUIsQ0FBQztBQUN0RCxJQUFNRSxTQUFTLEdBQUdGLG1CQUFPLENBQUMsR0FBdUIsQ0FBQztBQUVsREcsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxVQUFVLEVBQUU7RUFDeEVKLEdBQUcsQ0FBQ0ssaUJBQWlCLENBQUNDLGVBQWUsQ0FBQ0YsVUFBVSxFQUFFLFVBQVVHLEdBQUcsRUFBRUMsSUFBSSxFQUFFO0lBQ3JFLElBQUlELEdBQUcsRUFBRTtNQUNQTCxTQUFTLENBQUNOLFdBQVcsQ0FBQ2EsUUFBUSxDQUFDYixXQUFXLENBQUNjLENBQUMsQ0FBQ0MsU0FBUyxDQUFDQyxTQUFTLEVBQUVSLFVBQVUsQ0FBQyxFQUFFRyxHQUFHLENBQUM7SUFDckYsQ0FBQyxNQUFNO01BQ0wsSUFBTU0sSUFBSSxHQUFHbkIsV0FBVyxDQUFDb0IsV0FBVyxDQUFDLENBQUMsQ0FBQ0MsY0FBYyxHQUFHWCxVQUFVLEdBQUcsR0FBRyxHQUFHVixXQUFXLENBQUNvQixXQUFXLENBQUMsQ0FBQyxDQUFDRSxNQUFNLENBQUNDLFVBQVUsR0FBRyxPQUFPO01BRWhJcEIsU0FBUyxDQUFDZ0IsSUFBSSxFQUFFLFVBQVVOLEdBQUcsRUFBRTtRQUM3QixJQUFJQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ1csSUFBSSxLQUFLLFFBQVEsRUFBRTtVQUNoQ2hCLFNBQVMsQ0FBQ04sV0FBVyxDQUFDYSxRQUFRLENBQUNiLFdBQVcsQ0FBQ2MsQ0FBQyxDQUFDUyxTQUFTLENBQUNDLDBCQUEwQixFQUFFaEIsVUFBVSxDQUFDLEVBQUVHLEdBQUcsQ0FBQztRQUN0RyxDQUFDLE1BQU07VUFDTE4sU0FBUyxDQUFDTyxJQUFJLENBQUM7UUFDakI7TUFDRixDQUFDLENBQUM7SUFDSjtFQUNGLENBQUMsQ0FBQztBQUVKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2JlLW1ldGhvZHMvZG93bmxvYWRzL3JlbW92ZS1wZXJzaXN0ZW50LmpzPzc3NTkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBhcHBTZXR0aW5ncyA9IHJlcXVpcmUoJy4uLy4uL2FwcC1zZXR0aW5ncycpO1xuY29uc3QgdHJhbnNsYXRpb24gPSByZXF1aXJlKCcuLi8uLi90cmFuc2xhdGlvbi9pbmRleCcpO1xuY29uc3QgcmVtb3ZlRGlyID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvcmVtb3ZlLWRpclwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdElkKSB7XG4gIGFwaS5vZmZsaW5lQ29udHJvbGxlci5nZXRNYW5pZmVzdEluZm8obWFuaWZlc3RJZCwgZnVuY3Rpb24gKGVyciwgaW5mbykge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLm1hbmlmZXN0cy5OT1RfRk9VTkQsIG1hbmlmZXN0SWQpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBmaWxlID0gYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5zZXR0aW5nc0ZvbGRlciArIG1hbmlmZXN0SWQgKyBcIi9cIiArIGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkuc3RvcmVzLlBFUlNJU1RFTlQgKyBcIi5qc29uXCI7XG5cbiAgICAgIHJlbW92ZURpcihmaWxlLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgIT09IFwiRU5PRU5UXCIpIHtcbiAgICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuUkVNT1ZJTkdfUEVSU0lTVEVOVF9GQUlMRUQsIG1hbmlmZXN0SWQpLCBlcnIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9uU3VjY2VzcyhpbmZvKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxufTtcbiJdLCJuYW1lcyI6WyJhcHBTZXR0aW5ncyIsInJlcXVpcmUiLCJ0cmFuc2xhdGlvbiIsInJlbW92ZURpciIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJ0YXJnZXQiLCJtYW5pZmVzdElkIiwib2ZmbGluZUNvbnRyb2xsZXIiLCJnZXRNYW5pZmVzdEluZm8iLCJlcnIiLCJpbmZvIiwiZ2V0RXJyb3IiLCJlIiwibWFuaWZlc3RzIiwiTk9UX0ZPVU5EIiwiZmlsZSIsImdldFNldHRpbmdzIiwic2V0dGluZ3NGb2xkZXIiLCJzdG9yZXMiLCJQRVJTSVNURU5UIiwiY29kZSIsImRvd25sb2FkcyIsIlJFTU9WSU5HX1BFUlNJU1RFTlRfRkFJTEVEIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5585\n')},9858:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(5847);\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId) {\n  api.offlineController.getManifestInfo(manifestId, function (err, info) {\n    api.downloadsController.removePromise(manifestId).then(function () {\n      api.offlineController.removePromise(manifestId).then(function () {\n        api.subscribersController.unsubscribe(manifestId);\n        api.manifestController.removeFromCache(manifestId);\n        onSuccess(info);\n      }, function (err) {\n        onFailure(translation.getError(translation.e.downloads.REMOVING_FAILED, manifestId), err);\n      });\n    }, function (err) {\n      onFailure(translation.getError(translation.e.downloads.REMOVING_FAILED, manifestId), err);\n    });\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTg1OC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsSUFBeUIsQ0FBQztBQUV0REMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxVQUFVLEVBQUU7RUFDeEVKLEdBQUcsQ0FBQ0ssaUJBQWlCLENBQUNDLGVBQWUsQ0FBQ0YsVUFBVSxFQUFFLFVBQVVHLEdBQUcsRUFBRUMsSUFBSSxFQUFFO0lBQ3JFUixHQUFHLENBQUNTLG1CQUFtQixDQUFDQyxhQUFhLENBQUNOLFVBQVUsQ0FBQyxDQUM1Q08sSUFBSSxDQUFDLFlBQVk7TUFDaEJYLEdBQUcsQ0FBQ0ssaUJBQWlCLENBQUNLLGFBQWEsQ0FBQ04sVUFBVSxDQUFDLENBQzFDTyxJQUFJLENBQUMsWUFBWTtRQUNoQlgsR0FBRyxDQUFDWSxxQkFBcUIsQ0FBQ0MsV0FBVyxDQUFDVCxVQUFVLENBQUM7UUFDakRKLEdBQUcsQ0FBQ2Msa0JBQWtCLENBQUNDLGVBQWUsQ0FBQ1gsVUFBVSxDQUFDO1FBQ2xESCxTQUFTLENBQUNPLElBQUksQ0FBQztNQUNqQixDQUFDLEVBQUUsVUFBVUQsR0FBRyxFQUFFO1FBQ2hCTCxTQUFTLENBQUNOLFdBQVcsQ0FBQ29CLFFBQVEsQ0FBQ3BCLFdBQVcsQ0FBQ3FCLENBQUMsQ0FBQ0MsU0FBUyxDQUFDQyxlQUFlLEVBQUVmLFVBQVUsQ0FBQyxFQUFFRyxHQUFHLENBQUM7TUFDM0YsQ0FBQyxDQUFDO0lBQ1IsQ0FBQyxFQUFFLFVBQVVBLEdBQUcsRUFBRTtNQUNoQkwsU0FBUyxDQUFDTixXQUFXLENBQUNvQixRQUFRLENBQUNwQixXQUFXLENBQUNxQixDQUFDLENBQUNDLFNBQVMsQ0FBQ0MsZUFBZSxFQUFFZixVQUFVLENBQUMsRUFBRUcsR0FBRyxDQUFDO0lBQzNGLENBQUMsQ0FBQztFQUNSLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2JlLW1ldGhvZHMvZG93bmxvYWRzL3JlbW92ZS5qcz80M2E1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3RyYW5zbGF0aW9uL2luZGV4Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgbWFuaWZlc3RJZCkge1xuICBhcGkub2ZmbGluZUNvbnRyb2xsZXIuZ2V0TWFuaWZlc3RJbmZvKG1hbmlmZXN0SWQsIGZ1bmN0aW9uIChlcnIsIGluZm8pIHtcbiAgICBhcGkuZG93bmxvYWRzQ29udHJvbGxlci5yZW1vdmVQcm9taXNlKG1hbmlmZXN0SWQpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBhcGkub2ZmbGluZUNvbnRyb2xsZXIucmVtb3ZlUHJvbWlzZShtYW5pZmVzdElkKVxuICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgYXBpLnN1YnNjcmliZXJzQ29udHJvbGxlci51bnN1YnNjcmliZShtYW5pZmVzdElkKTtcbiAgICAgICAgICAgICAgICBhcGkubWFuaWZlc3RDb250cm9sbGVyLnJlbW92ZUZyb21DYWNoZShtYW5pZmVzdElkKTtcbiAgICAgICAgICAgICAgICBvblN1Y2Nlc3MoaW5mbyk7XG4gICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuUkVNT1ZJTkdfRkFJTEVELCBtYW5pZmVzdElkKSwgZXJyKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuUkVNT1ZJTkdfRkFJTEVELCBtYW5pZmVzdElkKSwgZXJyKTtcbiAgICAgICAgfSk7XG4gIH0pO1xufTtcbiJdLCJuYW1lcyI6WyJ0cmFuc2xhdGlvbiIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBpIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwidGFyZ2V0IiwibWFuaWZlc3RJZCIsIm9mZmxpbmVDb250cm9sbGVyIiwiZ2V0TWFuaWZlc3RJbmZvIiwiZXJyIiwiaW5mbyIsImRvd25sb2Fkc0NvbnRyb2xsZXIiLCJyZW1vdmVQcm9taXNlIiwidGhlbiIsInN1YnNjcmliZXJzQ29udHJvbGxlciIsInVuc3Vic2NyaWJlIiwibWFuaWZlc3RDb250cm9sbGVyIiwicmVtb3ZlRnJvbUNhY2hlIiwiZ2V0RXJyb3IiLCJlIiwiZG93bmxvYWRzIiwiUkVNT1ZJTkdfRkFJTEVEIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9858\n")},179:module=>{"use strict";eval("\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, representations) {\n  api.downloadsController.resume(manifestId, representations, onSuccess, onFailure);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxVQUFVQyxHQUFHLEVBQUVDLFNBQVMsRUFBRUMsU0FBUyxFQUFFQyxNQUFNLEVBQUVDLFVBQVUsRUFBRUMsZUFBZSxFQUFFO0VBQ3pGTCxHQUFHLENBQUNNLG1CQUFtQixDQUFDQyxNQUFNLENBQUNILFVBQVUsRUFBRUMsZUFBZSxFQUFFSixTQUFTLEVBQUVDLFNBQVMsQ0FBQztBQUNuRixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9iZS1tZXRob2RzL2Rvd25sb2Fkcy9yZXN1bWUuanM/ODM4OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdElkLCByZXByZXNlbnRhdGlvbnMpIHtcbiAgYXBpLmRvd25sb2Fkc0NvbnRyb2xsZXIucmVzdW1lKG1hbmlmZXN0SWQsIHJlcHJlc2VudGF0aW9ucywgb25TdWNjZXNzLCBvbkZhaWx1cmUpO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYXBpIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwidGFyZ2V0IiwibWFuaWZlc3RJZCIsInJlcHJlc2VudGF0aW9ucyIsImRvd25sb2Fkc0NvbnRyb2xsZXIiLCJyZXN1bWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///179\n")},6162:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar appSettings = __webpack_require__(8557);\nvar translation = __webpack_require__(5847);\nvar FlushItem = __webpack_require__(8381);\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, data) {\n  api.offlineController.getManifestInfo(manifestId, function (err) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId), err);\n    } else {\n      var flushItem = new FlushItem(manifestId, appSettings.getSettings().stores.DATA, data);\n      flushItem.save().then(function () {\n        onSuccess();\n      }, function (err) {\n        onFailure(translation.getError(translation.e.downloads.SAVING_DATA_FAILED, manifestId), err);\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjE2Mi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsSUFBb0IsQ0FBQztBQUNqRCxJQUFNQyxXQUFXLEdBQUdELG1CQUFPLENBQUMsSUFBeUIsQ0FBQztBQUN0RCxJQUFNRSxTQUFTLEdBQUdGLG1CQUFPLENBQUMsSUFBNEIsQ0FBQztBQUV2REcsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLElBQUksRUFBRTtFQUM5RUwsR0FBRyxDQUFDTSxpQkFBaUIsQ0FBQ0MsZUFBZSxDQUFDSCxVQUFVLEVBQUUsVUFBVUksR0FBRyxFQUFFO0lBQy9ELElBQUlBLEdBQUcsRUFBRTtNQUNQTixTQUFTLENBQUNOLFdBQVcsQ0FBQ2EsUUFBUSxDQUFDYixXQUFXLENBQUNjLENBQUMsQ0FBQ0MsU0FBUyxDQUFDQyxTQUFTLEVBQUVSLFVBQVUsQ0FBQyxFQUFFSSxHQUFHLENBQUM7SUFDckYsQ0FBQyxNQUFNO01BQ0wsSUFBTUssU0FBUyxHQUFHLElBQUloQixTQUFTLENBQUNPLFVBQVUsRUFBRVYsV0FBVyxDQUFDb0IsV0FBVyxDQUFDLENBQUMsQ0FBQ0MsTUFBTSxDQUFDQyxJQUFJLEVBQUVYLElBQUksQ0FBQztNQUN4RlEsU0FBUyxDQUFDSSxJQUFJLENBQUMsQ0FBQyxDQUNiQyxJQUFJLENBQUMsWUFBWTtRQUNoQmpCLFNBQVMsQ0FBQyxDQUFDO01BQ2IsQ0FBQyxFQUFFLFVBQVVPLEdBQUcsRUFBRTtRQUNoQk4sU0FBUyxDQUFDTixXQUFXLENBQUNhLFFBQVEsQ0FBQ2IsV0FBVyxDQUFDYyxDQUFDLENBQUNTLFNBQVMsQ0FBQ0Msa0JBQWtCLEVBQUVoQixVQUFVLENBQUMsRUFBRUksR0FBRyxDQUFDO01BQzlGLENBQUMsQ0FBQztJQUNOO0VBQ0YsQ0FBQyxDQUFDO0FBRUosQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvc2F2ZS1kYXRhLmpzPzgwYjEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBhcHBTZXR0aW5ncyA9IHJlcXVpcmUoJy4uLy4uL2FwcC1zZXR0aW5ncycpO1xuY29uc3QgdHJhbnNsYXRpb24gPSByZXF1aXJlKCcuLi8uLi90cmFuc2xhdGlvbi9pbmRleCcpO1xuY29uc3QgRmx1c2hJdGVtID0gcmVxdWlyZShcIi4uLy4uL2Rvd25sb2Fkcy9mbHVzaC1pdGVtXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlLCB0YXJnZXQsIG1hbmlmZXN0SWQsIGRhdGEpIHtcbiAgYXBpLm9mZmxpbmVDb250cm9sbGVyLmdldE1hbmlmZXN0SW5mbyhtYW5pZmVzdElkLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUubWFuaWZlc3RzLk5PVF9GT1VORCwgbWFuaWZlc3RJZCksIGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGZsdXNoSXRlbSA9IG5ldyBGbHVzaEl0ZW0obWFuaWZlc3RJZCwgYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5zdG9yZXMuREFUQSwgZGF0YSk7XG4gICAgICBmbHVzaEl0ZW0uc2F2ZSgpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBvblN1Y2Nlc3MoKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5TQVZJTkdfREFUQV9GQUlMRUQsIG1hbmlmZXN0SWQpLCBlcnIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG59O1xuIl0sIm5hbWVzIjpbImFwcFNldHRpbmdzIiwicmVxdWlyZSIsInRyYW5zbGF0aW9uIiwiRmx1c2hJdGVtIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsInRhcmdldCIsIm1hbmlmZXN0SWQiLCJkYXRhIiwib2ZmbGluZUNvbnRyb2xsZXIiLCJnZXRNYW5pZmVzdEluZm8iLCJlcnIiLCJnZXRFcnJvciIsImUiLCJtYW5pZmVzdHMiLCJOT1RfRk9VTkQiLCJmbHVzaEl0ZW0iLCJnZXRTZXR0aW5ncyIsInN0b3JlcyIsIkRBVEEiLCJzYXZlIiwidGhlbiIsImRvd25sb2FkcyIsIlNBVklOR19EQVRBX0ZBSUxFRCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6162\n")},3831:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar appSettings = __webpack_require__(8557);\nvar translation = __webpack_require__(5847);\nvar FlushItem = __webpack_require__(8381);\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, persistent) {\n  api.offlineController.getManifestInfo(manifestId, function (err) {\n    if (err) {\n      onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId), err);\n    } else {\n      var flushItem = new FlushItem(manifestId, appSettings.getSettings().stores.PERSISTENT, persistent);\n      flushItem.save().then(function () {\n        onSuccess();\n      }, function (err) {\n        onFailure(translation.getError(translation.e.downloads.SAVING_PERSISTENT_FAILED, manifestId), err);\n      });\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzgzMS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsSUFBb0IsQ0FBQztBQUNqRCxJQUFNQyxXQUFXLEdBQUdELG1CQUFPLENBQUMsSUFBeUIsQ0FBQztBQUN0RCxJQUFNRSxTQUFTLEdBQUdGLG1CQUFPLENBQUMsSUFBNEIsQ0FBQztBQUV2REcsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLFVBQVUsRUFBRTtFQUNwRkwsR0FBRyxDQUFDTSxpQkFBaUIsQ0FBQ0MsZUFBZSxDQUFDSCxVQUFVLEVBQUUsVUFBVUksR0FBRyxFQUFFO0lBQy9ELElBQUlBLEdBQUcsRUFBRTtNQUNQTixTQUFTLENBQUNOLFdBQVcsQ0FBQ2EsUUFBUSxDQUFDYixXQUFXLENBQUNjLENBQUMsQ0FBQ0MsU0FBUyxDQUFDQyxTQUFTLEVBQUVSLFVBQVUsQ0FBQyxFQUFFSSxHQUFHLENBQUM7SUFDckYsQ0FBQyxNQUFNO01BQ0wsSUFBTUssU0FBUyxHQUFHLElBQUloQixTQUFTLENBQUNPLFVBQVUsRUFBRVYsV0FBVyxDQUFDb0IsV0FBVyxDQUFDLENBQUMsQ0FBQ0MsTUFBTSxDQUFDQyxVQUFVLEVBQUVYLFVBQVUsQ0FBQztNQUNwR1EsU0FBUyxDQUFDSSxJQUFJLENBQUMsQ0FBQyxDQUNYQyxJQUFJLENBQUMsWUFBWTtRQUNoQmpCLFNBQVMsQ0FBQyxDQUFDO01BQ2IsQ0FBQyxFQUFFLFVBQVVPLEdBQUcsRUFBRTtRQUNoQk4sU0FBUyxDQUFDTixXQUFXLENBQUNhLFFBQVEsQ0FBQ2IsV0FBVyxDQUFDYyxDQUFDLENBQUNTLFNBQVMsQ0FBQ0Msd0JBQXdCLEVBQUVoQixVQUFVLENBQUMsRUFBRUksR0FBRyxDQUFDO01BQ3BHLENBQUMsQ0FBQztJQUNSO0VBQ0YsQ0FBQyxDQUFDO0FBRUosQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvc2F2ZS1wZXJzaXN0ZW50LmpzPzcyNTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBhcHBTZXR0aW5ncyA9IHJlcXVpcmUoJy4uLy4uL2FwcC1zZXR0aW5ncycpO1xuY29uc3QgdHJhbnNsYXRpb24gPSByZXF1aXJlKCcuLi8uLi90cmFuc2xhdGlvbi9pbmRleCcpO1xuY29uc3QgRmx1c2hJdGVtID0gcmVxdWlyZShcIi4uLy4uL2Rvd25sb2Fkcy9mbHVzaC1pdGVtXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlLCB0YXJnZXQsIG1hbmlmZXN0SWQsIHBlcnNpc3RlbnQpIHtcbiAgYXBpLm9mZmxpbmVDb250cm9sbGVyLmdldE1hbmlmZXN0SW5mbyhtYW5pZmVzdElkLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUubWFuaWZlc3RzLk5PVF9GT1VORCwgbWFuaWZlc3RJZCksIGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGZsdXNoSXRlbSA9IG5ldyBGbHVzaEl0ZW0obWFuaWZlc3RJZCwgYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5zdG9yZXMuUEVSU0lTVEVOVCwgcGVyc2lzdGVudCk7XG4gICAgICBmbHVzaEl0ZW0uc2F2ZSgpXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgb25TdWNjZXNzKCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUuZG93bmxvYWRzLlNBVklOR19QRVJTSVNURU5UX0ZBSUxFRCwgbWFuaWZlc3RJZCksIGVycik7XG4gICAgICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxufTtcbiJdLCJuYW1lcyI6WyJhcHBTZXR0aW5ncyIsInJlcXVpcmUiLCJ0cmFuc2xhdGlvbiIsIkZsdXNoSXRlbSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJ0YXJnZXQiLCJtYW5pZmVzdElkIiwicGVyc2lzdGVudCIsIm9mZmxpbmVDb250cm9sbGVyIiwiZ2V0TWFuaWZlc3RJbmZvIiwiZXJyIiwiZ2V0RXJyb3IiLCJlIiwibWFuaWZlc3RzIiwiTk9UX0ZPVU5EIiwiZmx1c2hJdGVtIiwiZ2V0U2V0dGluZ3MiLCJzdG9yZXMiLCJQRVJTSVNURU5UIiwic2F2ZSIsInRoZW4iLCJkb3dubG9hZHMiLCJTQVZJTkdfUEVSU0lTVEVOVF9GQUlMRUQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3831\n")},1714:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(5847);\nvar canCreateManifest = __webpack_require__(1958);\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, representations, downloadFolder) {\n  var manifest = api.manifestController.getManifestById(manifestId);\n  if (!manifest) {\n    onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n    return;\n  }\n  function start() {\n    api.downloadsController.storage.getItem(manifestId).then(function (result) {\n      if (result) {\n        onFailure(translation.getError(translation.e.downloads.ALREADY_STARTED, manifestId));\n      } else {\n        api.downloadsController.start(manifestId, representations, downloadFolder, onSuccess, function (err) {\n          onFailure(translation.getError(translation.e.downloads._GENERAL), err);\n        });\n      }\n    }, function (err) {\n      onFailure(translation.getError(translation.e.downloads._GENERAL), err);\n    });\n  }\n  canCreateManifest(manifestId, downloadFolder).then(function () {\n    start();\n  }, function (errors) {\n    errors = errors || [];\n    var movieFolderError = errors[1];\n    if (errors.length) {\n      if (movieFolderError) {\n        // if movie folder has been already created the we can't start as it might be either different folder\n        // or simply the resume should be used\n        onFailure(translation.getError(translation.e.manifests.FOLDER_ALREADY_EXISTS, manifestId));\n        return;\n      }\n    }\n    // if manifest exists physically on drive that means something is wrong and can't start the manifest\n    // the manifest is saved in method start so this cannot be overwritten here\n    api.offlineController.getManifestDataFile(manifestId, function (data) {\n      if (data) {\n        onFailure(translation.getError(translation.e.manifests.FOLDER_ALREADY_EXISTS, manifestId));\n      } else {\n        start();\n      }\n    });\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcxNC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsSUFBeUIsQ0FBQztBQUN0RCxJQUFNQyxpQkFBaUIsR0FBR0QsbUJBQU8sQ0FBQyxJQUFnQyxDQUFDO0FBRW5FRSxNQUFNLENBQUNDLE9BQU8sR0FBRyxVQUFVQyxHQUFHLEVBQUVDLFNBQVMsRUFBRUMsU0FBUyxFQUFFQyxNQUFNLEVBQUVDLFVBQVUsRUFBRUMsZUFBZSxFQUFFQyxjQUFjLEVBQUU7RUFDekcsSUFBTUMsUUFBUSxHQUFHUCxHQUFHLENBQUNRLGtCQUFrQixDQUFDQyxlQUFlLENBQUNMLFVBQVUsQ0FBQztFQUNuRSxJQUFJLENBQUNHLFFBQVEsRUFBRTtJQUNiTCxTQUFTLENBQUNQLFdBQVcsQ0FBQ2UsUUFBUSxDQUFDZixXQUFXLENBQUNnQixDQUFDLENBQUNDLFNBQVMsQ0FBQ0MsU0FBUyxFQUFFVCxVQUFVLENBQUMsQ0FBQztJQUM5RTtFQUNGO0VBRUEsU0FBU1UsS0FBS0EsQ0FBQSxFQUFJO0lBQ2hCZCxHQUFHLENBQUNlLG1CQUFtQixDQUFDQyxPQUFPLENBQUNDLE9BQU8sQ0FBQ2IsVUFBVSxDQUFDLENBQUNjLElBQUksQ0FBQyxVQUFVQyxNQUFNLEVBQUU7TUFDekUsSUFBSUEsTUFBTSxFQUFFO1FBQ1ZqQixTQUFTLENBQUNQLFdBQVcsQ0FBQ2UsUUFBUSxDQUFDZixXQUFXLENBQUNnQixDQUFDLENBQUNTLFNBQVMsQ0FBQ0MsZUFBZSxFQUFFakIsVUFBVSxDQUFDLENBQUM7TUFDdEYsQ0FBQyxNQUFNO1FBQ0xKLEdBQUcsQ0FBQ2UsbUJBQW1CLENBQUNELEtBQUssQ0FBQ1YsVUFBVSxFQUFFQyxlQUFlLEVBQUVDLGNBQWMsRUFBRUwsU0FBUyxFQUFFLFVBQVVxQixHQUFHLEVBQUU7VUFDbkdwQixTQUFTLENBQUNQLFdBQVcsQ0FBQ2UsUUFBUSxDQUFDZixXQUFXLENBQUNnQixDQUFDLENBQUNTLFNBQVMsQ0FBQ0csUUFBUSxDQUFDLEVBQUVELEdBQUcsQ0FBQztRQUN4RSxDQUFDLENBQUM7TUFDSjtJQUNGLENBQUMsRUFBRSxVQUFVQSxHQUFHLEVBQUU7TUFDaEJwQixTQUFTLENBQUNQLFdBQVcsQ0FBQ2UsUUFBUSxDQUFDZixXQUFXLENBQUNnQixDQUFDLENBQUNTLFNBQVMsQ0FBQ0csUUFBUSxDQUFDLEVBQUVELEdBQUcsQ0FBQztJQUN4RSxDQUFDLENBQUM7RUFDSjtFQUVBekIsaUJBQWlCLENBQUNPLFVBQVUsRUFBRUUsY0FBYyxDQUFDLENBQUNZLElBQUksQ0FBQyxZQUFZO0lBQzdESixLQUFLLENBQUMsQ0FBQztFQUNULENBQUMsRUFBRSxVQUFVVSxNQUFNLEVBQUU7SUFDbkJBLE1BQU0sR0FBR0EsTUFBTSxJQUFJLEVBQUU7SUFDckIsSUFBSUMsZ0JBQWdCLEdBQUdELE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDaEMsSUFBSUEsTUFBTSxDQUFDRSxNQUFNLEVBQUU7TUFDakIsSUFBSUQsZ0JBQWdCLEVBQUU7UUFDcEI7UUFDQTtRQUNBdkIsU0FBUyxDQUFDUCxXQUFXLENBQUNlLFFBQVEsQ0FBQ2YsV0FBVyxDQUFDZ0IsQ0FBQyxDQUFDQyxTQUFTLENBQUNlLHFCQUFxQixFQUFFdkIsVUFBVSxDQUFDLENBQUM7UUFDMUY7TUFDRjtJQUNGO0lBQ0E7SUFDQTtJQUNBSixHQUFHLENBQUM0QixpQkFBaUIsQ0FBQ0MsbUJBQW1CLENBQUN6QixVQUFVLEVBQUUsVUFBVTBCLElBQUksRUFBRTtNQUNwRSxJQUFJQSxJQUFJLEVBQUU7UUFDUjVCLFNBQVMsQ0FBQ1AsV0FBVyxDQUFDZSxRQUFRLENBQUNmLFdBQVcsQ0FBQ2dCLENBQUMsQ0FBQ0MsU0FBUyxDQUFDZSxxQkFBcUIsRUFBRXZCLFVBQVUsQ0FBQyxDQUFDO01BQzVGLENBQUMsTUFBTTtRQUNMVSxLQUFLLENBQUMsQ0FBQztNQUNUO0lBQ0YsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBRUosQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvc3RhcnQuanM/MmQ3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgdHJhbnNsYXRpb24gPSByZXF1aXJlKFwiLi4vLi4vdHJhbnNsYXRpb24vaW5kZXhcIik7XG5jb25zdCBjYW5DcmVhdGVNYW5pZmVzdCA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2Nhbi1jcmVhdGUtbWFuaWZlc3RcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgbWFuaWZlc3RJZCwgcmVwcmVzZW50YXRpb25zLCBkb3dubG9hZEZvbGRlcikge1xuICBjb25zdCBtYW5pZmVzdCA9IGFwaS5tYW5pZmVzdENvbnRyb2xsZXIuZ2V0TWFuaWZlc3RCeUlkKG1hbmlmZXN0SWQpO1xuICBpZiAoIW1hbmlmZXN0KSB7XG4gICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUubWFuaWZlc3RzLk5PVF9GT1VORCwgbWFuaWZlc3RJZCkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0ICgpIHtcbiAgICBhcGkuZG93bmxvYWRzQ29udHJvbGxlci5zdG9yYWdlLmdldEl0ZW0obWFuaWZlc3RJZCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5BTFJFQURZX1NUQVJURUQsIG1hbmlmZXN0SWQpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFwaS5kb3dubG9hZHNDb250cm9sbGVyLnN0YXJ0KG1hbmlmZXN0SWQsIHJlcHJlc2VudGF0aW9ucywgZG93bmxvYWRGb2xkZXIsIG9uU3VjY2VzcywgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5fR0VORVJBTCksIGVycik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5fR0VORVJBTCksIGVycik7XG4gICAgfSk7XG4gIH1cblxuICBjYW5DcmVhdGVNYW5pZmVzdChtYW5pZmVzdElkLCBkb3dubG9hZEZvbGRlcikudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgc3RhcnQoKTtcbiAgfSwgZnVuY3Rpb24gKGVycm9ycykge1xuICAgIGVycm9ycyA9IGVycm9ycyB8fCBbXTtcbiAgICB2YXIgbW92aWVGb2xkZXJFcnJvciA9IGVycm9yc1sxXTtcbiAgICBpZiAoZXJyb3JzLmxlbmd0aCkge1xuICAgICAgaWYgKG1vdmllRm9sZGVyRXJyb3IpIHtcbiAgICAgICAgLy8gaWYgbW92aWUgZm9sZGVyIGhhcyBiZWVuIGFscmVhZHkgY3JlYXRlZCB0aGUgd2UgY2FuJ3Qgc3RhcnQgYXMgaXQgbWlnaHQgYmUgZWl0aGVyIGRpZmZlcmVudCBmb2xkZXJcbiAgICAgICAgLy8gb3Igc2ltcGx5IHRoZSByZXN1bWUgc2hvdWxkIGJlIHVzZWRcbiAgICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUubWFuaWZlc3RzLkZPTERFUl9BTFJFQURZX0VYSVNUUywgbWFuaWZlc3RJZCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGlmIG1hbmlmZXN0IGV4aXN0cyBwaHlzaWNhbGx5IG9uIGRyaXZlIHRoYXQgbWVhbnMgc29tZXRoaW5nIGlzIHdyb25nIGFuZCBjYW4ndCBzdGFydCB0aGUgbWFuaWZlc3RcbiAgICAvLyB0aGUgbWFuaWZlc3QgaXMgc2F2ZWQgaW4gbWV0aG9kIHN0YXJ0IHNvIHRoaXMgY2Fubm90IGJlIG92ZXJ3cml0dGVuIGhlcmVcbiAgICBhcGkub2ZmbGluZUNvbnRyb2xsZXIuZ2V0TWFuaWZlc3REYXRhRmlsZShtYW5pZmVzdElkLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUubWFuaWZlc3RzLkZPTERFUl9BTFJFQURZX0VYSVNUUywgbWFuaWZlc3RJZCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhcnQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbn07XG4iXSwibmFtZXMiOlsidHJhbnNsYXRpb24iLCJyZXF1aXJlIiwiY2FuQ3JlYXRlTWFuaWZlc3QiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBpIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwidGFyZ2V0IiwibWFuaWZlc3RJZCIsInJlcHJlc2VudGF0aW9ucyIsImRvd25sb2FkRm9sZGVyIiwibWFuaWZlc3QiLCJtYW5pZmVzdENvbnRyb2xsZXIiLCJnZXRNYW5pZmVzdEJ5SWQiLCJnZXRFcnJvciIsImUiLCJtYW5pZmVzdHMiLCJOT1RfRk9VTkQiLCJzdGFydCIsImRvd25sb2Fkc0NvbnRyb2xsZXIiLCJzdG9yYWdlIiwiZ2V0SXRlbSIsInRoZW4iLCJyZXN1bHQiLCJkb3dubG9hZHMiLCJBTFJFQURZX1NUQVJURUQiLCJlcnIiLCJfR0VORVJBTCIsImVycm9ycyIsIm1vdmllRm9sZGVyRXJyb3IiLCJsZW5ndGgiLCJGT0xERVJfQUxSRUFEWV9FWElTVFMiLCJvZmZsaW5lQ29udHJvbGxlciIsImdldE1hbmlmZXN0RGF0YUZpbGUiLCJkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1714\n")},5984:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(5847);\nvar STATUSES = __webpack_require__(9773);\nmodule.exports = function (api, onSuccess, onFailure) {\n  api.offlineController.getManifestsListWithInfo(function (err, results) {\n    if (err) {\n      onFailure(translation.getError(translation.e.downloads.STOPPING_ALL_FAILED), err);\n    } else {\n      var promises = [];\n      var manifestIds = [];\n      for (var i = 0, j = results.length; i < j; i++) {\n        var status = results[i].status;\n        var manifestId = results[i].manifestInfo.id;\n        if (status !== STATUSES.FINISHED) {\n          manifestIds.push(manifestId);\n          promises.push(api.downloadsController.stopPromise(manifestId, true));\n        }\n      }\n      if (manifestIds.length > 0) {\n        Promise.all(promises).then(function () {\n          onSuccess(manifestIds);\n        }, function (err) {\n          onFailure(translation.getError(translation.e.downloads.STOPPING_ALL_FAILED), err);\n        });\n      } else {\n        onFailure(translation.getError(translation.e.downloads.ALREADY_STOPPED_ALL));\n      }\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTk4NC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsSUFBeUIsQ0FBQztBQUN0RCxJQUFNQyxRQUFRLEdBQUdELG1CQUFPLENBQUMsSUFBMEIsQ0FBQztBQUVwREUsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRTtFQUNwREYsR0FBRyxDQUFDRyxpQkFBaUIsQ0FBQ0Msd0JBQXdCLENBQUMsVUFBVUMsR0FBRyxFQUFFQyxPQUFPLEVBQUU7SUFDckUsSUFBSUQsR0FBRyxFQUFFO01BQ1BILFNBQVMsQ0FBQ1AsV0FBVyxDQUFDWSxRQUFRLENBQUNaLFdBQVcsQ0FBQ2EsQ0FBQyxDQUFDQyxTQUFTLENBQUNDLG1CQUFtQixDQUFDLEVBQUVMLEdBQUcsQ0FBQztJQUNuRixDQUFDLE1BQU07TUFDTCxJQUFJTSxRQUFRLEdBQUcsRUFBRTtNQUNqQixJQUFJQyxXQUFXLEdBQUcsRUFBRTtNQUNwQixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVDLENBQUMsR0FBR1IsT0FBTyxDQUFDUyxNQUFNLEVBQUVGLENBQUMsR0FBR0MsQ0FBQyxFQUFFRCxDQUFDLEVBQUUsRUFBRTtRQUM5QyxJQUFJRyxNQUFNLEdBQUdWLE9BQU8sQ0FBQ08sQ0FBQyxDQUFDLENBQUNHLE1BQU07UUFDOUIsSUFBSUMsVUFBVSxHQUFHWCxPQUFPLENBQUNPLENBQUMsQ0FBQyxDQUFDSyxZQUFZLENBQUNDLEVBQUU7UUFDM0MsSUFBSUgsTUFBTSxLQUFLbkIsUUFBUSxDQUFDdUIsUUFBUSxFQUFFO1VBQ2hDUixXQUFXLENBQUNTLElBQUksQ0FBQ0osVUFBVSxDQUFDO1VBQzVCTixRQUFRLENBQUNVLElBQUksQ0FBQ3JCLEdBQUcsQ0FBQ3NCLG1CQUFtQixDQUFDQyxXQUFXLENBQUNOLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN0RTtNQUNGO01BQ0EsSUFBSUwsV0FBVyxDQUFDRyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzFCUyxPQUFPLENBQUNDLEdBQUcsQ0FBQ2QsUUFBUSxDQUFDLENBQ2hCZSxJQUFJLENBQUMsWUFBWTtVQUNoQnpCLFNBQVMsQ0FBQ1csV0FBVyxDQUFDO1FBQ3hCLENBQUMsRUFBRSxVQUFVUCxHQUFHLEVBQUU7VUFDaEJILFNBQVMsQ0FBQ1AsV0FBVyxDQUFDWSxRQUFRLENBQUNaLFdBQVcsQ0FBQ2EsQ0FBQyxDQUFDQyxTQUFTLENBQUNDLG1CQUFtQixDQUFDLEVBQUVMLEdBQUcsQ0FBQztRQUNuRixDQUFDLENBQUM7TUFDUixDQUFDLE1BQU07UUFDTEgsU0FBUyxDQUFDUCxXQUFXLENBQUNZLFFBQVEsQ0FBQ1osV0FBVyxDQUFDYSxDQUFDLENBQUNDLFNBQVMsQ0FBQ2tCLG1CQUFtQixDQUFDLENBQUM7TUFDOUU7SUFDRjtFQUNGLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2JlLW1ldGhvZHMvZG93bmxvYWRzL3N0b3AtYWxsLmpzPzc3MGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHRyYW5zbGF0aW9uID0gcmVxdWlyZSgnLi4vLi4vdHJhbnNsYXRpb24vaW5kZXgnKTtcbmNvbnN0IFNUQVRVU0VTID0gcmVxdWlyZShcIi4uLy4uL2Rvd25sb2Fkcy9zdGF0dXNlc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSkge1xuICBhcGkub2ZmbGluZUNvbnRyb2xsZXIuZ2V0TWFuaWZlc3RzTGlzdFdpdGhJbmZvKGZ1bmN0aW9uIChlcnIsIHJlc3VsdHMpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuU1RPUFBJTkdfQUxMX0ZBSUxFRCksIGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwcm9taXNlcyA9IFtdO1xuICAgICAgbGV0IG1hbmlmZXN0SWRzID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMCwgaiA9IHJlc3VsdHMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgIGxldCBzdGF0dXMgPSByZXN1bHRzW2ldLnN0YXR1cztcbiAgICAgICAgbGV0IG1hbmlmZXN0SWQgPSByZXN1bHRzW2ldLm1hbmlmZXN0SW5mby5pZDtcbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gU1RBVFVTRVMuRklOSVNIRUQpIHtcbiAgICAgICAgICBtYW5pZmVzdElkcy5wdXNoKG1hbmlmZXN0SWQpO1xuICAgICAgICAgIHByb21pc2VzLnB1c2goYXBpLmRvd25sb2Fkc0NvbnRyb2xsZXIuc3RvcFByb21pc2UobWFuaWZlc3RJZCwgdHJ1ZSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWFuaWZlc3RJZHMubGVuZ3RoID4gMCkge1xuICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgb25TdWNjZXNzKG1hbmlmZXN0SWRzKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUuZG93bmxvYWRzLlNUT1BQSU5HX0FMTF9GQUlMRUQpLCBlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuQUxSRUFEWV9TVE9QUEVEX0FMTCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbInRyYW5zbGF0aW9uIiwicmVxdWlyZSIsIlNUQVRVU0VTIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsIm9mZmxpbmVDb250cm9sbGVyIiwiZ2V0TWFuaWZlc3RzTGlzdFdpdGhJbmZvIiwiZXJyIiwicmVzdWx0cyIsImdldEVycm9yIiwiZSIsImRvd25sb2FkcyIsIlNUT1BQSU5HX0FMTF9GQUlMRUQiLCJwcm9taXNlcyIsIm1hbmlmZXN0SWRzIiwiaSIsImoiLCJsZW5ndGgiLCJzdGF0dXMiLCJtYW5pZmVzdElkIiwibWFuaWZlc3RJbmZvIiwiaWQiLCJGSU5JU0hFRCIsInB1c2giLCJkb3dubG9hZHNDb250cm9sbGVyIiwic3RvcFByb21pc2UiLCJQcm9taXNlIiwiYWxsIiwidGhlbiIsIkFMUkVBRFlfU1RPUFBFRF9BTEwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5984\n")},4573:module=>{"use strict";eval("\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId) {\n  api.downloadsController.stop(manifestId, onSuccess, onFailure);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDU3My5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxVQUFVLEVBQUU7RUFDeEVKLEdBQUcsQ0FBQ0ssbUJBQW1CLENBQUNDLElBQUksQ0FBQ0YsVUFBVSxFQUFFSCxTQUFTLEVBQUVDLFNBQVMsQ0FBQztBQUNoRSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9iZS1tZXRob2RzL2Rvd25sb2Fkcy9zdG9wLmpzPzM0NjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgbWFuaWZlc3RJZCkge1xuICBhcGkuZG93bmxvYWRzQ29udHJvbGxlci5zdG9wKG1hbmlmZXN0SWQsIG9uU3VjY2Vzcywgb25GYWlsdXJlKTtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImFwaSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsInRhcmdldCIsIm1hbmlmZXN0SWQiLCJkb3dubG9hZHNDb250cm9sbGVyIiwic3RvcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4573\n")},8973:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(5847);\nvar Subscriber = __webpack_require__(2595);\nmodule.exports = function (api, onSuccess, onFailure, target, manifestIds, timeout) {\n  if (typeof manifestIds === 'string') {\n    subscribeSingle(api, onSuccess, onFailure, target, manifestIds, timeout);\n  } else {\n    subscribeMany(api, onSuccess, onFailure, target, manifestIds, timeout);\n  }\n};\nfunction subscribeMany(api, onSuccess, onFailure, target, manifestIds, timeout) {\n  var subscriber1, subscriber2, subscribersId;\n  var manifestId = manifestIds.sort().join(',');\n  subscribersId = [];\n  // callbackOnProgress\n  subscriber1 = new Subscriber(function () {\n    return api.downloadsController.downloadStats.getStats(manifestIds);\n  }, api.processSubscriber, target, manifestId, timeout);\n  subscribersId.push(api.subscribersController.addSubscriber(subscriber1));\n\n  // callbackOnFinish\n  subscriber2 = new Subscriber(function () {\n    var result = true;\n    for (var i = 0, j = manifestIds.length; i < j; i++) {\n      result = result && api.downloadsController.isDownloadFinishedAndSynced(manifestIds[i]);\n    }\n    return result;\n  }, api.processSubscriber, target, manifestId, timeout, true);\n  subscriber2.onFinish(function (callback) {\n    subscriber1.remove();\n    var items = [];\n    for (var i = 0, j = manifestIds.length; i < j; i++) {\n      items.push(api.offlineController.getManifestInfoPromise(manifestIds[i]));\n    }\n    Promise.all(items).then(function (results) {\n      callback(null, results);\n    }, function (err) {\n      callback(err);\n    });\n  });\n  subscribersId.push(api.subscribersController.addSubscriber(subscriber2));\n  onSuccess(null, subscribersId);\n}\nfunction subscribeSingle(api, onSuccess, onFailure, target, manifestId, timeout) {\n  var manifest = api.manifestController.getManifestById(manifestId);\n  var subscriber1, subscriber2, subscribersId;\n  if (manifest) {\n    subscribersId = [];\n\n    // callbackOnProgress\n    subscriber1 = new Subscriber(function () {\n      return api.downloadsController.downloadStats.getStats(manifestId);\n    }, api.processSubscriber, target, manifestId, timeout);\n    subscribersId.push(api.subscribersController.addSubscriber(subscriber1));\n\n    // callbackOnFinish\n    subscriber2 = new Subscriber(function () {\n      return api.downloadsController.isDownloadFinishedAndSynced(manifestId);\n    }, api.processSubscriber, target, manifestId, timeout, true);\n    subscriber2.onFinish(function (callback) {\n      subscriber1.remove();\n      api.offlineController.getManifestInfo(manifestId, function (err, result) {\n        callback(err, result);\n      });\n    });\n    subscribersId.push(api.subscribersController.addSubscriber(subscriber2));\n    onSuccess(manifest.getJsonInfo(), subscribersId);\n  } else {\n    onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8973\n")},5934:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar translation = __webpack_require__(5847);\nmodule.exports = function (api, onSuccess, onFailure, target, manifestIds) {\n  if (typeof manifestIds === 'string') {\n    unsubscribeSingle(api, onSuccess, onFailure, target, manifestIds);\n  } else {\n    api.subscribersController.unsubscribe(manifestIds);\n    api.subscribersController.unsubscribe(manifestIds.sort().join(','));\n  }\n};\nfunction unsubscribeSingle(api, onSuccess, onFailure, target, manifestId) {\n  var manifest = api.manifestController.getManifestById(manifestId);\n  if (manifest) {\n    api.subscribersController.unsubscribe(manifestId);\n    onSuccess();\n  } else {\n    onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTkzNC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsSUFBeUIsQ0FBQztBQUV0REMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxXQUFXLEVBQUU7RUFDekUsSUFBSSxPQUFPQSxXQUFXLEtBQUssUUFBUSxFQUFFO0lBQ25DQyxpQkFBaUIsQ0FBQ0wsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxXQUFXLENBQUM7RUFDbkUsQ0FBQyxNQUFNO0lBQ0xKLEdBQUcsQ0FBQ00scUJBQXFCLENBQUNDLFdBQVcsQ0FBQ0gsV0FBVyxDQUFDO0lBQ2xESixHQUFHLENBQUNNLHFCQUFxQixDQUFDQyxXQUFXLENBQUNILFdBQVcsQ0FBQ0ksSUFBSSxDQUFDLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ3JFO0FBQ0YsQ0FBQztBQUVELFNBQVNKLGlCQUFpQkEsQ0FBRUwsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFTyxVQUFVLEVBQUU7RUFDekUsSUFBTUMsUUFBUSxHQUFHWCxHQUFHLENBQUNZLGtCQUFrQixDQUFDQyxlQUFlLENBQUNILFVBQVUsQ0FBQztFQUNuRSxJQUFJQyxRQUFRLEVBQUU7SUFDWlgsR0FBRyxDQUFDTSxxQkFBcUIsQ0FBQ0MsV0FBVyxDQUFDRyxVQUFVLENBQUM7SUFDakRULFNBQVMsQ0FBQyxDQUFDO0VBQ2IsQ0FBQyxNQUFNO0lBQ0xDLFNBQVMsQ0FBQ04sV0FBVyxDQUFDa0IsUUFBUSxDQUFDbEIsV0FBVyxDQUFDbUIsQ0FBQyxDQUFDQyxTQUFTLENBQUNDLFNBQVMsRUFBRVAsVUFBVSxDQUFDLENBQUM7RUFDaEY7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvdW5zdWJzY3JpYmUuanM/MmQ4MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgdHJhbnNsYXRpb24gPSByZXF1aXJlKCcuLi8uLi90cmFuc2xhdGlvbi9pbmRleCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlLCB0YXJnZXQsIG1hbmlmZXN0SWRzKSB7XG4gIGlmICh0eXBlb2YgbWFuaWZlc3RJZHMgPT09ICdzdHJpbmcnKSB7XG4gICAgdW5zdWJzY3JpYmVTaW5nbGUoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBtYW5pZmVzdElkcyk7XG4gIH0gZWxzZSB7XG4gICAgYXBpLnN1YnNjcmliZXJzQ29udHJvbGxlci51bnN1YnNjcmliZShtYW5pZmVzdElkcyk7XG4gICAgYXBpLnN1YnNjcmliZXJzQ29udHJvbGxlci51bnN1YnNjcmliZShtYW5pZmVzdElkcy5zb3J0KCkuam9pbignLCcpKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gdW5zdWJzY3JpYmVTaW5nbGUgKGFwaSwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRhcmdldCwgbWFuaWZlc3RJZCkge1xuICBjb25zdCBtYW5pZmVzdCA9IGFwaS5tYW5pZmVzdENvbnRyb2xsZXIuZ2V0TWFuaWZlc3RCeUlkKG1hbmlmZXN0SWQpO1xuICBpZiAobWFuaWZlc3QpIHtcbiAgICBhcGkuc3Vic2NyaWJlcnNDb250cm9sbGVyLnVuc3Vic2NyaWJlKG1hbmlmZXN0SWQpO1xuICAgIG9uU3VjY2VzcygpO1xuICB9IGVsc2Uge1xuICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLm1hbmlmZXN0cy5OT1RfRk9VTkQsIG1hbmlmZXN0SWQpKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbInRyYW5zbGF0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJ0YXJnZXQiLCJtYW5pZmVzdElkcyIsInVuc3Vic2NyaWJlU2luZ2xlIiwic3Vic2NyaWJlcnNDb250cm9sbGVyIiwidW5zdWJzY3JpYmUiLCJzb3J0Iiwiam9pbiIsIm1hbmlmZXN0SWQiLCJtYW5pZmVzdCIsIm1hbmlmZXN0Q29udHJvbGxlciIsImdldE1hbmlmZXN0QnlJZCIsImdldEVycm9yIiwiZSIsIm1hbmlmZXN0cyIsIk5PVF9GT1VORCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5934\n")},15:module=>{"use strict";eval("\n\nmodule.exports = function (api, onSuccess, onFailure, target, manifestId, downloadFolder) {\n  api.downloadsController.updateDownloadFolder(manifestId, downloadFolder, onSuccess, onFailure);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFVBQVVDLEdBQUcsRUFBRUMsU0FBUyxFQUFFQyxTQUFTLEVBQUVDLE1BQU0sRUFBRUMsVUFBVSxFQUFFQyxjQUFjLEVBQUU7RUFDeEZMLEdBQUcsQ0FBQ00sbUJBQW1CLENBQUNDLG9CQUFvQixDQUFDSCxVQUFVLEVBQUVDLGNBQWMsRUFBRUosU0FBUyxFQUFFQyxTQUFTLENBQUM7QUFDaEcsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvYmUtbWV0aG9kcy9kb3dubG9hZHMvdXBkYXRlLWRvd25sb2FkLWZvbGRlci5qcz8zMjNmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcGksIG9uU3VjY2Vzcywgb25GYWlsdXJlLCB0YXJnZXQsIG1hbmlmZXN0SWQsIGRvd25sb2FkRm9sZGVyKSB7XG4gIGFwaS5kb3dubG9hZHNDb250cm9sbGVyLnVwZGF0ZURvd25sb2FkRm9sZGVyKG1hbmlmZXN0SWQsIGRvd25sb2FkRm9sZGVyLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSk7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJ0YXJnZXQiLCJtYW5pZmVzdElkIiwiZG93bmxvYWRGb2xkZXIiLCJkb3dubG9hZHNDb250cm9sbGVyIiwidXBkYXRlRG93bmxvYWRGb2xkZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///15\n")},3781:module=>{"use strict";eval("\n\nmodule.exports = function (api, onSuccess, onFailure, target, subscribers) {\n  api.subscribersController.removeSubscribersById(subscribers);\n  onSuccess();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc4MS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxXQUFXLEVBQUU7RUFDekVKLEdBQUcsQ0FBQ0sscUJBQXFCLENBQUNDLHFCQUFxQixDQUFDRixXQUFXLENBQUM7RUFDNURILFNBQVMsQ0FBQyxDQUFDO0FBQ2IsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvYmUtbWV0aG9kcy9yZW1vdmUtc3Vic2NyaWJlcnMuanM/NTMzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBpLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgdGFyZ2V0LCBzdWJzY3JpYmVycykge1xuICBhcGkuc3Vic2NyaWJlcnNDb250cm9sbGVyLnJlbW92ZVN1YnNjcmliZXJzQnlJZChzdWJzY3JpYmVycyk7XG4gIG9uU3VjY2VzcygpO1xufTtcblxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJhcGkiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJ0YXJnZXQiLCJzdWJzY3JpYmVycyIsInN1YnNjcmliZXJzQ29udHJvbGxlciIsInJlbW92ZVN1YnNjcmliZXJzQnlJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3781\n")},6557:module=>{"use strict";eval("\n\nmodule.exports = {\n  regexpProtocolRemove: /^https{0,1}\\:\\/\\//i\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjU1Ny5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZkMsb0JBQW9CLEVBQUU7QUFDeEIsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvY29uc3RhbnRzLmpzP2Q5OWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByZWdleHBQcm90b2NvbFJlbW92ZTogL15odHRwc3swLDF9XFw6XFwvXFwvL2lcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlZ2V4cFByb3RvY29sUmVtb3ZlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6557\n")},785:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('/*eslint no-console: ["error", { allow: ["warn", "error", "info"] }] */\n\n\nvar _ = __webpack_require__(4952);\nvar _require = __webpack_require__(9526),\n  mkdirp = _require.mkdirp;\nvar appSettings = __webpack_require__(8557);\nvar translation = __webpack_require__(5847);\nvar Download = __webpack_require__(8298);\nvar DownloadsStorageController = __webpack_require__(8910);\nvar downloadUtil = __webpack_require__(5237);\nvar DownloadStats = __webpack_require__(534);\nvar STATUSES = __webpack_require__(9773);\nvar CODES = __webpack_require__(3740);\nvar constants = __webpack_require__(6557);\nvar utilUrl = __webpack_require__(8167);\nvar path = __webpack_require__(1017);\nvar ReadItem = __webpack_require__(2144);\nvar FlushItem = __webpack_require__(8381);\nvar downloadFileUtil = __webpack_require__(6003);\n\n/**\n *\n * @param {ManifestController} manifestController - existing manifest controller\n * @param {OfflineController} offlineController - existing offline controller\n * @constructor\n */\nfunction DownloadsController(manifestController, offlineController) {\n  this._manifestsDownloadOrder = [];\n  this._manifestsDownloadOrderObj = {};\n  this._manifestController = manifestController;\n  this._offlineController = offlineController;\n  this.storage = new DownloadsStorageController();\n  this._offlineController.setDownloadStorage(this.storage);\n  this._names = {\n    downloadInProgress: "downloadInProgress",\n    options: "options",\n    maxDownloadInProgress: "maxDownloadInProgress"\n  };\n  this._STATS_TIME_GENERATION = 1000;\n  this.downloadStats = new DownloadStats(this.storage);\n  _.bindAll(this, "_onDownloadEnd", "_onDownloadError", "isDownloadFinished");\n}\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Array} videoLinks - video links to be downloaded\n * @param {Array} audioLinks - audio links to be downloaded\n * @param {Array} textLinks - text links to be downloaded\n * @returns {void}\n * @private\n */\nDownloadsController.prototype._addDownloads = function (manifestId, videoLinks, audioLinks, textLinks) {\n  var working = true;\n  this._prepareStartOptions(manifestId, videoLinks, audioLinks, textLinks);\n  while (working) {\n    var ratioAudioVideo = videoLinks.length ? Math.round(audioLinks.length / videoLinks.length) : 1;\n    var ratioTextVideo = videoLinks.length ? Math.round(textLinks.length / videoLinks.length) : 1;\n    this._addNextItemToQueue(manifestId, textLinks, ratioTextVideo);\n    this._addNextItemToQueue(manifestId, audioLinks, ratioAudioVideo);\n    this._addNextItemToQueue(manifestId, videoLinks);\n    working = !!(textLinks.length || videoLinks.length || audioLinks.length);\n  }\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Array} links - array of links to be downloaded\n * @param {number} nbItems - the rnumber of items to add to the queue\n * @private\n * @returns {void}\n */\nDownloadsController.prototype._addNextItemToQueue = function (manifestId, links, nbItems) {\n  var link;\n  if (!nbItems) {\n    nbItems = 1;\n  }\n  if (links.length) {\n    while (nbItems > 0) {\n      link = links.shift();\n      link.manifestId = manifestId;\n      this.storage.left.push(manifestId, link);\n      nbItems--;\n    }\n  }\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {boolean} asFirst - to force to download manifest without wiating in queue\n * @returns {boolean} - status if operation was successfully\n * @private\n */\nDownloadsController.prototype._downloadOrderAddManifest = function (manifestId, asFirst) {\n  if (!this._downloadOrderManifestExists(manifestId)) {\n    this._manifestsDownloadOrderObj[manifestId] = true;\n    if (asFirst) {\n      this._manifestsDownloadOrder.unshift(manifestId);\n    } else {\n      this._manifestsDownloadOrder.push(manifestId);\n    }\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/**\n *\n * @param {number} nextManifestPositionInArray - index number from array _manifestsDownloadOrder\n * @returns {manifestId} - manifest identifier\n * @private\n */\nDownloadsController.prototype._downloadOrderGetManifestId = function (nextManifestPositionInArray) {\n  return this._manifestsDownloadOrder[nextManifestPositionInArray];\n};\n\n/**\n *\n * @param {manifestId} manifestId -  manifest identifier\n * @returns {number} index number from array _manifestsDownloadOrder\n * @private\n */\nDownloadsController.prototype._indexOfManifest = function (manifestId) {\n  return this._manifestsDownloadOrder.indexOf(manifestId);\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {*} - if manifest has been already added to the queue\n * @private\n */\nDownloadsController.prototype._downloadOrderManifestExists = function (manifestId) {\n  return this._manifestsDownloadOrderObj[manifestId];\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {boolean} - status if manifest has been removed from queue\n * @private\n */\nDownloadsController.prototype._downloadOrderRemoveManifest = function (manifestId) {\n  var found = false,\n    i,\n    j;\n  delete this._manifestsDownloadOrderObj[manifestId];\n  for (i = 0, j = this._manifestsDownloadOrder.length; i < j; i++) {\n    if (this._manifestsDownloadOrder[i] === manifestId) {\n      this._manifestsDownloadOrder.splice(i, 1);\n      found = true;\n      break;\n    }\n  }\n  return found;\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {function} onSuccess - callback to be invoked when download finishes with success\n * @param {function} onFailure - callback to be invoked when download failed\n * @private\n * @returns {void}\n */\nDownloadsController.prototype._finish = function (manifestId, onSuccess, onFailure) {\n  this.downloadStats.refresh();\n  this._downloadOrderRemoveManifest(manifestId);\n  if (!this._manifestsDownloadOrder.length) {\n    this.downloadStats.stop();\n  }\n  this.storage.removeItem(manifestId).then(onSuccess, onFailure);\n};\n\n/**\n *\n * @param {object} link - link object which consist remote and local url\n * @private\n * @returns {string} - unique hash for download file based on local and remote url\n */\nDownloadsController.prototype._getDownloadHash = function (link) {\n  return link.remoteUrl + "-" + link.localUrl;\n};\n\n/**\n *\n * @param {Download} download - download class to be marked either with success or with error\n * @private\n * @returns {void}\n */\nDownloadsController.prototype._markDownloadItem = function (download) {\n  var self = this;\n  var manifestId = download.manifestId;\n  var downloadHash = self._getDownloadHash(download);\n  var syncStorageKeys = [];\n  var lastItem;\n  download.events.removeListener("end", self._onDownloadEnd);\n  download.events.removeListener("error", self._onDownloadError);\n\n  //refreshing stats for last time - to have correct stats for subscribers progress before it is removed\n  if (self.storage.downloading.count(manifestId) === 1 && self.storage.left.count(manifestId) === 0) {\n    this.downloadStats.refresh();\n    lastItem = true;\n  }\n  if (download.status === STATUSES.FINISHED) {\n    self.storage.downloaded.push(manifestId, download);\n    syncStorageKeys.push(this.storage.stores.DOWNLOADS.DOWNLOADED);\n  } else {\n    self.storage.errors.push(manifestId, download);\n  }\n  self.storage.downloading.removeItem(manifestId, downloadHash);\n  if (self.isDownloadFinished(manifestId)) {\n    if (self.storage.errors.count(manifestId) === 0) {\n      self.storage.status.setItem(manifestId, "status", STATUSES.FINISHED);\n    } else {\n      self.storage.status.setItem(manifestId, "status", STATUSES.ERROR);\n    }\n    syncStorageKeys.push(this.storage.stores.STATUS);\n  }\n  self.storage.sync(manifestId, syncStorageKeys).then(function () {\n    self.storage.params.decrease(manifestId, self._names.downloadInProgress);\n    if (lastItem) {\n      self._finish(manifestId, function () {\n        self.startQueue();\n        console.info("FINISHED", manifestId);\n      }, function () {\n        self.startQueue();\n      });\n    } else {\n      self.startQueue();\n    }\n  }, function (err) {\n    console.error("ERROR", err);\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {function} onSuccess - callback to be invoked when stop has been successfully\n * @param {function} onFailure - callback to be invoked when stop failed\n * @param {string} status - the status\n * @param {string} statusDetails - adds details about status (on errors for example)\n * @returns {void}\n */\nDownloadsController.prototype._stopWithStatus = function (manifestId, onSuccess, onFailure, status, statusDetails) {\n  var self = this;\n  self._downloadOrderRemoveManifest(manifestId);\n  self.storage.getItem(manifestId).then(function (result) {\n    if (!result) {\n      onFailure(translation.getError(translation.e.downloads.ALREADY_STOPPED, manifestId));\n      return;\n    }\n    var itemsToStop = self.storage.downloading.getKeys(manifestId);\n    var itemToStop;\n    console.info("STOPPING", manifestId, itemsToStop.length);\n    var promises = [];\n    for (var i = 0, j = itemsToStop.length; i < j; i++) {\n      itemToStop = self.storage.downloading.getItem(manifestId, itemsToStop[i]);\n      itemToStop.events.removeListener("end", self._onDownloadEnd);\n      itemToStop.events.removeListener("error", self._onDownloadError);\n      promises.push(itemToStop.stopPromise());\n    }\n    self.storage.status.setItem(manifestId, "status", status);\n    if (statusDetails) {\n      self.storage.status.setItem(manifestId, "details", statusDetails);\n    }\n    promises.push(self.storage.sync(manifestId, [self.storage.stores.DOWNLOADS.DOWNLOADED, self.storage.stores.STATUS]));\n    Promise.all(promises).then(function () {\n      self._finish(manifestId, onSuccess, onFailure);\n    }, function (err) {\n      onFailure(translation.getError(translation.e.downloads.STOPPING_FAILED, manifestId), err);\n    });\n  }, function (err) {\n    onFailure(translation.getError(translation.e.downloads.STOPPING_FAILED, manifestId), err);\n  });\n};\n/**\n * @param {Download} download - Download Class\n * @param {object} err - error object\n * @returns {void}\n * @private\n */\nDownloadsController.prototype._onDownloadError = function (download, err) {\n  console.error("ERROR", download.remoteUrl, err);\n  this._markDownloadItem(download);\n  if (err === downloadFileUtil.errors.NO_SPACE_LEFT_ERROR || appSettings.getSettings().stopOnError) {\n    // stop downloading => cannot write\n    this._stopWithStatus(download.manifestId, function () {\n      console.info(\'stopped\');\n    }, function (failure) {\n      console.info(failure);\n    }, STATUSES.ERROR, err);\n  }\n};\n\n/**\n *\n * @param {Download} download - Download Class\n * @returns {void}\n * @private\n */\nDownloadsController.prototype._onDownloadEnd = function (download) {\n  // console.log("FINISHED", download.remoteUrl, download.localUrl);\n  this._markDownloadItem(download);\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Array} videoLinks - video links to be downloaded\n * @param {Array} audioLinks - audio links to be downloaded\n * @param {Array} textLinks - text links to be downloaded\n * @returns {void}\n * @private\n */\nDownloadsController.prototype._prepareStartOptions = function (manifestId, videoLinks, audioLinks, textLinks) {\n  var count = videoLinks.length + audioLinks.length + textLinks.length;\n  console.info("ADDING ->>> ", manifestId + ",", count, "fragments");\n  var options = {};\n  this.storage.params.setItem(manifestId, this._names.downloadInProgress, 0);\n  var maxDownloadInProgress;\n  var threadRules = appSettings.getSettings().downloadingThreadsRules;\n  for (var i = 0, j = threadRules.items.length; i < j; i++) {\n    if (count <= threadRules.items[i].max) {\n      options[threadRules.threadName] = threadRules.items[i].threads;\n      maxDownloadInProgress = threadRules.items[i].files;\n      break;\n    }\n  }\n  this.storage.params.setItem(manifestId, this._names.options, options);\n  this.storage.params.setItem(manifestId, this._names.maxDownloadInProgress, maxDownloadInProgress);\n\n  //download order can help to stop download one manifest and download another or download them in parallel\n  this._downloadOrderAddManifest(manifestId);\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {boolean} - if download is finished\n */\nDownloadsController.prototype.isDownloadFinished = function (manifestId) {\n  return !this.storage.left.count(manifestId) && !this.storage.downloading.count(manifestId);\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {boolean} - if download is finished and synced (info written on disk)\n */\nDownloadsController.prototype.isDownloadFinishedAndSynced = function (manifestId) {\n  return !this.storage.left.count(manifestId) && !this.storage.downloading.count(manifestId) && !this.storage.keyExists(manifestId);\n};\nDownloadsController.prototype.getDownloading = function (manifestId, localFile) {\n  var items = this.storage.downloading.getItems(manifestId);\n  if (!items) {\n    return null;\n  }\n  for (var link in items) {\n    if (items.hasOwnProperty(link)) {\n      var download = items[link];\n      var downloadPath = path.normalize(download.localUrl);\n      var local = path.normalize(localFile);\n      if (downloadPath === local) {\n        return download;\n      }\n    }\n  }\n  return null;\n};\nDownloadsController.prototype.waitForDownload = function (download, callback) {\n  var _onDownloadEnd;\n  var _onDownloadError;\n  var removeListener = function removeListener(download) {\n    download.events.removeListener("end", _onDownloadEnd);\n    download.events.removeListener("error", _onDownloadError);\n  };\n  _onDownloadEnd = function _onDownloadEnd(download) {\n    removeListener(download);\n    callback();\n  };\n  _onDownloadError = function _onDownloadError(download, err) {\n    removeListener(download);\n    callback(err);\n  };\n  download.events.on("end", _onDownloadEnd);\n  download.events.on("error", _onDownloadError);\n};\n\n/**\n* Perform a seek - this changes order of fragment download for a manifest\n* @param {string} manifestId - manifest identifier\n* @param {string} localFile - local file\n* @param {function} callback - callback to get result\n* @returns {void}\n*/\nDownloadsController.prototype.performSeek = function (manifestId, localFile, callback) {\n  var self = this;\n  var download;\n  download = self.getDownloading(manifestId, localFile);\n  if (download) {\n    self.waitForDownload(download, callback);\n    return;\n  }\n  var items = self.storage.left.getItems(manifestId);\n  if (!items) {\n    callback(\'No download found\');\n    return;\n  }\n  var index = items.findIndex(function (download) {\n    var downloadPath = path.normalize(download.localUrl);\n    var local = path.normalize(localFile);\n    return downloadPath === local;\n  });\n  if (index > -1) {\n    var part1 = items.slice(0, index);\n    var part2 = items.slice(index);\n    self.storage.left.clear(manifestId);\n    self.storage.left.concat(manifestId, part2);\n    self.storage.left.concat(manifestId, part1);\n    items = self.storage.left.getItems(manifestId);\n    self.startQueue(self._indexOfManifest(manifestId), true);\n    download = self.getDownloading(manifestId, localFile);\n    if (download) {\n      self.waitForDownload(download, callback);\n    } else {\n      // if not queued, return an error\n      callback(\'No download found\');\n    }\n  } else {\n    callback(\'No download found\');\n  }\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {object} representations - object containing video, audio and text representations ids\n * @param {string} downloadFolder - download folder for video. If undefined, then default download folder is used\n * @param {function} onSuccess - callback to be invoked when start has been successfully\n * @param {function} onFailure - callback to be invoked when start failed\n * @param {boolean} fromResumed - if start has been called from resume api method\n * @param {string} oldstatus - if from resumed, then indicates the old status of download\n * @returns {void}\n */\nDownloadsController.prototype.start = function (manifestId, representations, downloadFolder, onSuccess, onFailure, fromResumed, oldstatus) {\n  var self = this;\n  this.downloadStats.start();\n  var manifest = this._manifestController.getManifestById(manifestId);\n  if (!manifest) {\n    onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n    return;\n  }\n  representations = representations || {};\n  var video = representations.video || [];\n  if (!Array.isArray(video)) {\n    video = [video];\n  }\n  var audio = representations.audio || [];\n  if (!Array.isArray(audio)) {\n    audio = [audio];\n  }\n  var text = representations.text || [];\n  if (!Array.isArray(text)) {\n    text = [text];\n  }\n  var videoR = manifest.getVideoRepresentations();\n  var audioR = manifest.getAudioRepresentations();\n  var textR = manifest.getTextRepresentations();\n  var localDownloadFolder = path.resolve(appSettings.getSettings().downloadsFolderPath);\n  if (downloadFolder) {\n    localDownloadFolder = path.resolve(downloadFolder);\n  }\n  var localPath = path.resolve(localDownloadFolder + "/" + manifestId + "/");\n  var manifestUrl = manifest.getManifestUrl();\n  var manifestName = manifest.getManifestName();\n  function getManifestBaseUrl(xml, manifestUrlDomain) {\n    var manifestBaseUrl;\n    var MPD = xml.getElementsByTagName("MPD")[0];\n    if (MPD) {\n      for (var i = 0, j = MPD.childNodes.length; i < j; i++) {\n        if (MPD.childNodes[i].nodeName === "BaseURL") {\n          manifestBaseUrl = MPD.childNodes[i].textContent;\n          if (!manifestBaseUrl.match(constants.regexpProtocolRemove)) {\n            manifestBaseUrl = utilUrl.joinPath(manifestUrlDomain, manifestBaseUrl);\n          }\n          break;\n        }\n      }\n    }\n    if (!manifestBaseUrl) {\n      manifestBaseUrl = manifestUrlDomain;\n    }\n    return manifestBaseUrl;\n  }\n  Promise.all([this._offlineController.getManifestInfoPromise(manifestId, true), this.storage.getItem(manifestId), mkdirp(localPath)]).then(function (results) {\n    var info = results[0];\n    var storageItem = results[1];\n    if (storageItem && !self.isDownloadFinished(manifestId)) {\n      if (fromResumed) {\n        onFailure(translation.getError(translation.e.downloads.ALREADY_RESUMED, manifestId));\n      } else {\n        onFailure(translation.getError(translation.e.downloads.ALREADY_STARTED, manifestId));\n      }\n      return;\n    }\n\n    //collect Links - start\n    if (info.manifest.video) {\n      video = _.union(video, info.manifest.video);\n    }\n    if (info.manifest.audio) {\n      audio = _.union(audio, info.manifest.audio);\n    }\n    if (info.manifest.text) {\n      text = _.union(text, info.manifest.text);\n    }\n    var downloaded = info.downloadedFiles || [];\n    var downloadedHash = {};\n    for (var i = 0, j = downloaded.length; i < j; i++) {\n      downloadedHash[downloaded[i].localUrl] = downloaded[i];\n    }\n    var remotePath = getManifestBaseUrl(manifest.manifestXML.xml, manifest.url_domain);\n    var videoLinks = downloadUtil.getDownloadLinks(manifestId, localPath, remotePath, video, videoR, downloadedHash);\n    var audioLinks = downloadUtil.getDownloadLinks(manifestId, localPath, remotePath, audio, audioR, downloadedHash);\n    var textLinks = downloadUtil.getDownloadLinks(manifestId, localPath, remotePath, text, textR, downloadedHash);\n    var allvideoLinks = downloadUtil.getAllLinks(manifestId, localPath, remotePath, video, videoR);\n    var allaudioLinks = downloadUtil.getAllLinks(manifestId, localPath, remotePath, audio, audioR);\n    var alltextLinks = downloadUtil.getAllLinks(manifestId, localPath, remotePath, text, textR);\n    var allFiles = allvideoLinks.concat(allaudioLinks, alltextLinks);\n\n    //collect Links - end\n\n    self.storage.createIfNotExists(manifestId).then(function () {\n      self.storage.manifest.setItem(manifestId, "ts", new Date().getTime());\n      self.storage.manifest.setItem(manifestId, "url", manifestUrl);\n      self.storage.manifest.setItem(manifestId, "name", manifestName);\n      self.storage.manifest.setItem(manifestId, "video", video);\n      self.storage.manifest.setItem(manifestId, "audio", audio);\n      self.storage.manifest.setItem(manifestId, "text", text);\n      self.storage.manifest.setItem(manifestId, "files", allFiles);\n      self.storage.manifest.setItem(manifestId, "folder", localDownloadFolder);\n      self.storage.downloaded.clear(manifestId);\n      self.storage.downloaded.concat(manifestId, downloaded);\n      self.storage.errors.clear(manifestId);\n      if (!fromResumed) {\n        // do not initialise state of manifest is start is from resume\n        // state must stay the last one\n        self.storage.status.setItem(manifestId, "status", STATUSES.CREATED);\n      } else {\n        // init status with last status\n        self.storage.status.setItem(manifestId, "status", oldstatus);\n      }\n      Promise.all([self.storage.sync(manifestId, [self.storage.stores.MANIFEST, self.storage.stores.STATUS]), self._manifestController.saveOriginalManifestOnceOnly(manifestId), self._manifestController.saveManifestWithChosenRepresentations(manifestId, {\n        video: video,\n        audio: audio,\n        text: text\n      }, localPath)]).then(function () {\n        self._addDownloads(manifestId, videoLinks, audioLinks, textLinks);\n        if (self._indexOfManifest(manifestId) > appSettings.getSettings().numberOfManifestsInParallel - 1) {\n          self.storage.status.setItem(manifestId, "status", STATUSES.QUEUED);\n        } else {\n          self.storage.status.setItem(manifestId, "status", STATUSES.STARTED);\n        }\n        self.storage.status.setItem(manifestId, "left", self.storage.left.count(manifestId));\n        self.storage.sync(manifestId, [self.storage.stores.DOWNLOADS.DOWNLOADED, self.storage.stores.STATUS]).then(function () {\n          self.downloadStats.refresh();\n          if (self.isDownloadFinished(manifestId)) {\n            self.storage.status.setItem(manifestId, "status", STATUSES.FINISHED);\n            self.storage.sync(manifestId, self.storage.stores.STATUS).then(function () {\n              self._finish(manifestId, onSuccess, onFailure);\n            }, onFailure);\n          } else {\n            self.downloadStats.start();\n            self.startQueue();\n            onSuccess();\n          }\n        }, onFailure);\n      }, onFailure);\n    }, onFailure);\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {object} representations - object containing video, audio and text representations ids\n * @param {function} onSuccess - callback to be invoked when start has been successfully\n * @param {function} onFailure - callback to be invoked when start failed\n * @returns {void}\n */\nDownloadsController.prototype.resume = function (manifestId, representations, onSuccess, onFailure) {\n  var self = this;\n  this._offlineController.getManifestInfo(manifestId, function (err, info) {\n    if (err) {\n      onFailure(translation.getError(translation.e.downloads.RESUMING_FAILED, manifestId), err);\n    } else {\n      var folder = info.manifest.folder;\n      if (!folder) {\n        // use default download folder path\n        folder = path.resolve(appSettings.getSettings().downloadsFolderPath);\n      }\n      self.start(manifestId, representations, folder, onSuccess, onFailure, true, info.status);\n    }\n  });\n};\n\n/**\n * Update download folder path\n * @param {string} manifestId - manifest identifier\n * @param {string} downloadFolder - new download folder\n * @param {function} onSuccess - callback to be invoked when start has been successfully\n * @param {function} onFailure - callback to be invoked when start failed\n * @returns {void}\n */\nDownloadsController.prototype.updateDownloadFolder = function (manifestId, downloadFolder, onSuccess, onFailure) {\n  Promise.all([new ReadItem(manifestId, appSettings.getSettings().stores.MANIFEST)]).then(function (results) {\n    var manifestSettings = results[0];\n    if (!manifestSettings) {\n      onFailure(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n      return;\n    }\n    manifestSettings.folder = downloadFolder;\n    var flushItem = new FlushItem(manifestId, appSettings.getSettings().stores.MANIFEST, manifestSettings);\n    flushItem.save().then(function () {\n      onSuccess();\n    }, function (err) {\n      onFailure(translation.getError(translation.e.downloads.SAVING_DATA_FAILED, manifestId), err);\n    });\n  }, function (err) {\n    onFailure(translation.getError(translation.e.downloads.UPDATE_DOWNLOAD_FOLDER_FAILED, manifestId), err);\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {function} onSuccess - callback to be invoked when stop has been successfully\n * @param {function} onFailure - callback to be invoked when stop failed\n * @returns {void}\n */\nDownloadsController.prototype.stop = function (manifestId, onSuccess, onFailure) {\n  this._stopWithStatus(manifestId, onSuccess, onFailure, STATUSES.STOPPED);\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {boolean} ignoreStopped - don\'t fail if download has been already stopped\n * @returns {Promise} - promise\n */\nDownloadsController.prototype.stopPromise = function (manifestId, ignoreStopped) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self.stop(manifestId, resolve, function (err) {\n      if (err) {\n        if (ignoreStopped && err.code === CODES.ERRORS.STOPPED) {\n          resolve();\n          return;\n        }\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} - promise\n */\nDownloadsController.prototype.removePromise = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self.stopPromise(manifestId).then(function () {\n      self.storage.removeItem(manifestId).then(resolve, reject);\n    }, function (err) {\n      //already stopped, continue\n      if (err && err.code === CODES.ERRORS.STOPPED) {\n        self.storage.removeItem(manifestId).then(resolve, reject);\n      } else {\n        reject(err);\n      }\n    });\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {object} link - object link to be downloaded\n * @private\n * @returns {void}\n */\nDownloadsController.prototype._addLinkToDownload = function (manifestId, link) {\n  var self = this;\n  var params = Object.assign({}, link);\n  var download = new Download(params, self.storage.params.getItem(manifestId, self._names.options));\n  var downloadHash = self._getDownloadHash(link);\n  self.storage.downloading.setItem(manifestId, downloadHash, download);\n  self.storage.status.setItem(manifestId, "left", self.storage.left.count(manifestId) + self.storage.errors.count(manifestId));\n  self.storage.sync(manifestId, self.storage.stores.STATUS);\n  download.events.on("end", self._onDownloadEnd);\n  download.events.on("error", self._onDownloadError);\n  download.start();\n  return download;\n};\n\n/**\n *\n * @param {number} [nextManifestPositionInArray] - index from array to decide which manifest should be downloaded next\n *   (queue)\n * @param {boolean} forceDownload true to force next download to be queued\n * @returns {void}\n */\nDownloadsController.prototype.startQueue = function (nextManifestPositionInArray, forceDownload) {\n  var count, downloadsInProgress, link, manifestId, maxDownloads;\n  if (typeof nextManifestPositionInArray === "undefined") {\n    nextManifestPositionInArray = 0;\n  }\n  manifestId = this._downloadOrderGetManifestId(nextManifestPositionInArray);\n  if (manifestId && this.isDownloadFinished(manifestId)) {\n    // the manifest id will be removed from queue, wait next time. Thus, do not change status\n    return;\n  }\n  if (nextManifestPositionInArray >= appSettings.getSettings().numberOfManifestsInParallel) {\n    if (manifestId) {\n      this.storage.status.setItem(manifestId, "status", STATUSES.QUEUED);\n    }\n    return;\n  } else {\n    this.storage.status.setItem(manifestId, "status", STATUSES.STARTED);\n  }\n  if (!manifestId) {\n    count = 0;\n    var i, j, items;\n    items = this.storage.getKeys();\n    for (i = 0, j = items.length; i < j; i++) {\n      count += this.storage.params.count(items[i], this._names.downloadInProgress);\n    }\n    if (count === 0) {\n      this.downloadStats.stop();\n    }\n    return;\n  }\n  downloadsInProgress = this.storage.params.getItem(manifestId, this._names.downloadInProgress);\n  maxDownloads = this.storage.params.getItem(manifestId, this._names.maxDownloadInProgress);\n  if (downloadsInProgress < maxDownloads - 1 || forceDownload) {\n    link = this.storage.left.shift(manifestId);\n    if (link) {\n      this.storage.params.increase(manifestId, this._names.downloadInProgress);\n      this._addLinkToDownload(manifestId, link);\n    } else {\n      //check next manifest\n      nextManifestPositionInArray++;\n    }\n    this.startQueue(nextManifestPositionInArray);\n  } else if (appSettings.getSettings().numberOfManifestsInParallel > 1 && nextManifestPositionInArray < appSettings.getSettings().numberOfManifestsInParallel) {\n    nextManifestPositionInArray++;\n    this.startQueue(nextManifestPositionInArray);\n  }\n};\nmodule.exports = DownloadsController;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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a0IsQ0FBQzFNLFVBQVUsRUFBRWMsSUFBSSxDQUFDO0lBQzNDLENBQUMsTUFBTTtNQUNMO01BQ0FTLDJCQUEyQixFQUFFO0lBQy9CO0lBQ0EsSUFBSSxDQUFDNEMsVUFBVSxDQUFDNUMsMkJBQTJCLENBQUM7RUFDOUMsQ0FBQyxNQUFNLElBQUl2RCxXQUFXLENBQUN5SCxXQUFXLENBQUMsQ0FBQyxDQUFDOEYsMkJBQTJCLEdBQUcsQ0FBQyxJQUFJaEssMkJBQTJCLEdBQUd2RCxXQUFXLENBQUN5SCxXQUFXLENBQUMsQ0FBQyxDQUFDOEYsMkJBQTJCLEVBQUU7SUFDM0poSywyQkFBMkIsRUFBRTtJQUM3QixJQUFJLENBQUM0QyxVQUFVLENBQUM1QywyQkFBMkIsQ0FBQztFQUM5QztBQUNGLENBQUM7QUFFRDBMLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHcE8sbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9jb250cm9sbGVycy9kb3dubG9hZHMtY29udHJvbGxlci5qcz9kMDBjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qZXNsaW50IG5vLWNvbnNvbGU6IFtcImVycm9yXCIsIHsgYWxsb3c6IFtcIndhcm5cIiwgXCJlcnJvclwiLCBcImluZm9cIl0gfV0gKi9cblwidXNlIHN0cmljdFwiO1xuY29uc3QgXyA9IHJlcXVpcmUoXCJ1bmRlcnNjb3JlXCIpO1xuY29uc3Qge21rZGlycH0gPSByZXF1aXJlKFwibWtkaXJwXCIpO1xuXG5jb25zdCBhcHBTZXR0aW5ncyA9IHJlcXVpcmUoXCIuLi9hcHAtc2V0dGluZ3NcIik7XG5jb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoXCIuLi90cmFuc2xhdGlvbi9pbmRleFwiKTtcbmNvbnN0IERvd25sb2FkID0gcmVxdWlyZShcIi4uL2Rvd25sb2Fkcy9kb3dubG9hZFwiKTtcbmNvbnN0IERvd25sb2Fkc1N0b3JhZ2VDb250cm9sbGVyID0gcmVxdWlyZShcIi4vZG93bmxvYWRzLXN0b3JhZ2UtY29udHJvbGxlclwiKTtcbmNvbnN0IGRvd25sb2FkVXRpbCA9IHJlcXVpcmUoXCIuLi91dGlsL2Rvd25sb2Fkc1wiKTtcbmNvbnN0IERvd25sb2FkU3RhdHMgPSByZXF1aXJlKFwiLi4vc3RhdHMvZG93bmxvYWRfc3RhdHNcIik7XG5jb25zdCBTVEFUVVNFUyA9IHJlcXVpcmUoXCIuLi9kb3dubG9hZHMvc3RhdHVzZXNcIik7XG5jb25zdCBDT0RFUyA9IHJlcXVpcmUoXCIuLi9kb3dubG9hZHMvY29kZXNcIik7XG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuY29uc3QgdXRpbFVybCA9IHJlcXVpcmUoXCIuLi91dGlsL3VybFwiKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcbmNvbnN0IFJlYWRJdGVtID0gcmVxdWlyZShcIi4uL2Rvd25sb2Fkcy9yZWFkLWl0ZW1cIik7XG5jb25zdCBGbHVzaEl0ZW0gPSByZXF1aXJlKFwiLi4vZG93bmxvYWRzL2ZsdXNoLWl0ZW1cIik7XG5jb25zdCBkb3dubG9hZEZpbGVVdGlsID0gcmVxdWlyZShcIi4uL2Rvd25sb2Fkcy9kb3dubG9hZC1maWxlLXV0aWxcIik7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7TWFuaWZlc3RDb250cm9sbGVyfSBtYW5pZmVzdENvbnRyb2xsZXIgLSBleGlzdGluZyBtYW5pZmVzdCBjb250cm9sbGVyXG4gKiBAcGFyYW0ge09mZmxpbmVDb250cm9sbGVyfSBvZmZsaW5lQ29udHJvbGxlciAtIGV4aXN0aW5nIG9mZmxpbmUgY29udHJvbGxlclxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIERvd25sb2Fkc0NvbnRyb2xsZXIgKG1hbmlmZXN0Q29udHJvbGxlciwgb2ZmbGluZUNvbnRyb2xsZXIpIHtcbiAgdGhpcy5fbWFuaWZlc3RzRG93bmxvYWRPcmRlciA9IFtdO1xuICB0aGlzLl9tYW5pZmVzdHNEb3dubG9hZE9yZGVyT2JqID0ge307XG4gIHRoaXMuX21hbmlmZXN0Q29udHJvbGxlciA9IG1hbmlmZXN0Q29udHJvbGxlcjtcbiAgdGhpcy5fb2ZmbGluZUNvbnRyb2xsZXIgPSBvZmZsaW5lQ29udHJvbGxlcjtcbiAgdGhpcy5zdG9yYWdlID0gbmV3IERvd25sb2Fkc1N0b3JhZ2VDb250cm9sbGVyKCk7XG4gIHRoaXMuX29mZmxpbmVDb250cm9sbGVyLnNldERvd25sb2FkU3RvcmFnZSh0aGlzLnN0b3JhZ2UpO1xuICB0aGlzLl9uYW1lcyA9IHtcbiAgICBkb3dubG9hZEluUHJvZ3Jlc3M6IFwiZG93bmxvYWRJblByb2dyZXNzXCIsXG4gICAgb3B0aW9uczogXCJvcHRpb25zXCIsXG4gICAgbWF4RG93bmxvYWRJblByb2dyZXNzOiBcIm1heERvd25sb2FkSW5Qcm9ncmVzc1wiXG4gIH07XG4gIHRoaXMuX1NUQVRTX1RJTUVfR0VORVJBVElPTiA9IDEwMDA7XG4gIHRoaXMuZG93bmxvYWRTdGF0cyA9IG5ldyBEb3dubG9hZFN0YXRzKHRoaXMuc3RvcmFnZSk7XG4gIF8uYmluZEFsbCh0aGlzLCBcIl9vbkRvd25sb2FkRW5kXCIsIFwiX29uRG93bmxvYWRFcnJvclwiLCBcImlzRG93bmxvYWRGaW5pc2hlZFwiKTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hbmlmZXN0SWQgLSBtYW5pZmVzdCBpZGVudGlmaWVyXG4gKiBAcGFyYW0ge0FycmF5fSB2aWRlb0xpbmtzIC0gdmlkZW8gbGlua3MgdG8gYmUgZG93bmxvYWRlZFxuICogQHBhcmFtIHtBcnJheX0gYXVkaW9MaW5rcyAtIGF1ZGlvIGxpbmtzIHRvIGJlIGRvd25sb2FkZWRcbiAqIEBwYXJhbSB7QXJyYXl9IHRleHRMaW5rcyAtIHRleHQgbGlua3MgdG8gYmUgZG93bmxvYWRlZFxuICogQHJldHVybnMge3ZvaWR9XG4gKiBAcHJpdmF0ZVxuICovXG5Eb3dubG9hZHNDb250cm9sbGVyLnByb3RvdHlwZS5fYWRkRG93bmxvYWRzID0gZnVuY3Rpb24gKG1hbmlmZXN0SWQsIHZpZGVvTGlua3MsIGF1ZGlvTGlua3MsIHRleHRMaW5rcykge1xuICBsZXQgd29ya2luZyA9IHRydWU7XG4gIHRoaXMuX3ByZXBhcmVTdGFydE9wdGlvbnMobWFuaWZlc3RJZCwgdmlkZW9MaW5rcywgYXVkaW9MaW5rcywgdGV4dExpbmtzKTtcbiAgd2hpbGUgKHdvcmtpbmcpIHtcbiAgICBsZXQgcmF0aW9BdWRpb1ZpZGVvID0gdmlkZW9MaW5rcy5sZW5ndGggPyBNYXRoLnJvdW5kKGF1ZGlvTGlua3MubGVuZ3RoIC8gdmlkZW9MaW5rcy5sZW5ndGgpIDogMTtcbiAgICBsZXQgcmF0aW9UZXh0VmlkZW8gPSB2aWRlb0xpbmtzLmxlbmd0aCA/IE1hdGgucm91bmQodGV4dExpbmtzLmxlbmd0aCAvIHZpZGVvTGlua3MubGVuZ3RoKSA6IDE7XG4gICAgdGhpcy5fYWRkTmV4dEl0ZW1Ub1F1ZXVlKG1hbmlmZXN0SWQsIHRleHRMaW5rcywgcmF0aW9UZXh0VmlkZW8pO1xuICAgIHRoaXMuX2FkZE5leHRJdGVtVG9RdWV1ZShtYW5pZmVzdElkLCBhdWRpb0xpbmtzLCByYXRpb0F1ZGlvVmlkZW8pO1xuICAgIHRoaXMuX2FkZE5leHRJdGVtVG9RdWV1ZShtYW5pZmVzdElkLCB2aWRlb0xpbmtzKTtcbiAgICB3b3JraW5nID0gISEodGV4dExpbmtzLmxlbmd0aCB8fCB2aWRlb0xpbmtzLmxlbmd0aCB8fCBhdWRpb0xpbmtzLmxlbmd0aCk7XG4gIH1cbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYW5pZmVzdElkIC0gbWFuaWZlc3QgaWRlbnRpZmllclxuICogQHBhcmFtIHtBcnJheX0gbGlua3MgLSBhcnJheSBvZiBsaW5rcyB0byBiZSBkb3dubG9hZGVkXG4gKiBAcGFyYW0ge251bWJlcn0gbmJJdGVtcyAtIHRoZSBybnVtYmVyIG9mIGl0ZW1zIHRvIGFkZCB0byB0aGUgcXVldWVcbiAqIEBwcml2YXRlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuRG93bmxvYWRzQ29udHJvbGxlci5wcm90b3R5cGUuX2FkZE5leHRJdGVtVG9RdWV1ZSA9IGZ1bmN0aW9uIChtYW5pZmVzdElkLCBsaW5rcywgbmJJdGVtcykge1xuICBsZXQgbGluaztcbiAgaWYgKCFuYkl0ZW1zKSB7XG4gICAgbmJJdGVtcyA9IDE7XG4gIH1cbiAgaWYgKGxpbmtzLmxlbmd0aCkge1xuICAgIHdoaWxlIChuYkl0ZW1zID4gMCkge1xuICAgICAgbGluayA9IGxpbmtzLnNoaWZ0KCk7XG4gICAgICBsaW5rLm1hbmlmZXN0SWQgPSBtYW5pZmVzdElkO1xuICAgICAgdGhpcy5zdG9yYWdlLmxlZnQucHVzaChtYW5pZmVzdElkLCBsaW5rKTtcbiAgICAgIG5iSXRlbXMtLTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYW5pZmVzdElkIC0gbWFuaWZlc3QgaWRlbnRpZmllclxuICogQHBhcmFtIHtib29sZWFufSBhc0ZpcnN0IC0gdG8gZm9yY2UgdG8gZG93bmxvYWQgbWFuaWZlc3Qgd2l0aG91dCB3aWF0aW5nIGluIHF1ZXVlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBzdGF0dXMgaWYgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsbHlcbiAqIEBwcml2YXRlXG4gKi9cbkRvd25sb2Fkc0NvbnRyb2xsZXIucHJvdG90eXBlLl9kb3dubG9hZE9yZGVyQWRkTWFuaWZlc3QgPSBmdW5jdGlvbiAobWFuaWZlc3RJZCwgYXNGaXJzdCkge1xuICBpZiAoIXRoaXMuX2Rvd25sb2FkT3JkZXJNYW5pZmVzdEV4aXN0cyhtYW5pZmVzdElkKSkge1xuICAgIHRoaXMuX21hbmlmZXN0c0Rvd25sb2FkT3JkZXJPYmpbbWFuaWZlc3RJZF0gPSB0cnVlO1xuICAgIGlmIChhc0ZpcnN0KSB7XG4gICAgICB0aGlzLl9tYW5pZmVzdHNEb3dubG9hZE9yZGVyLnVuc2hpZnQobWFuaWZlc3RJZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX21hbmlmZXN0c0Rvd25sb2FkT3JkZXIucHVzaChtYW5pZmVzdElkKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbmV4dE1hbmlmZXN0UG9zaXRpb25JbkFycmF5IC0gaW5kZXggbnVtYmVyIGZyb20gYXJyYXkgX21hbmlmZXN0c0Rvd25sb2FkT3JkZXJcbiAqIEByZXR1cm5zIHttYW5pZmVzdElkfSAtIG1hbmlmZXN0IGlkZW50aWZpZXJcbiAqIEBwcml2YXRlXG4gKi9cbkRvd25sb2Fkc0NvbnRyb2xsZXIucHJvdG90eXBlLl9kb3dubG9hZE9yZGVyR2V0TWFuaWZlc3RJZCA9IGZ1bmN0aW9uIChuZXh0TWFuaWZlc3RQb3NpdGlvbkluQXJyYXkpIHtcbiAgcmV0dXJuIHRoaXMuX21hbmlmZXN0c0Rvd25sb2FkT3JkZXJbbmV4dE1hbmlmZXN0UG9zaXRpb25JbkFycmF5XTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7bWFuaWZlc3RJZH0gbWFuaWZlc3RJZCAtICBtYW5pZmVzdCBpZGVudGlmaWVyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBpbmRleCBudW1iZXIgZnJvbSBhcnJheSBfbWFuaWZlc3RzRG93bmxvYWRPcmRlclxuICogQHByaXZhdGVcbiAqL1xuRG93bmxvYWRzQ29udHJvbGxlci5wcm90b3R5cGUuX2luZGV4T2ZNYW5pZmVzdCA9IGZ1bmN0aW9uIChtYW5pZmVzdElkKSB7XG4gIHJldHVybiB0aGlzLl9tYW5pZmVzdHNEb3dubG9hZE9yZGVyLmluZGV4T2YobWFuaWZlc3RJZCk7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYW5pZmVzdElkIC0gbWFuaWZlc3QgaWRlbnRpZmllclxuICogQHJldHVybnMgeyp9IC0gaWYgbWFuaWZlc3QgaGFzIGJlZW4gYWxyZWFkeSBhZGRlZCB0byB0aGUgcXVldWVcbiAqIEBwcml2YXRlXG4gKi9cbkRvd25sb2Fkc0NvbnRyb2xsZXIucHJvdG90eXBlLl9kb3dubG9hZE9yZGVyTWFuaWZlc3RFeGlzdHMgPSBmdW5jdGlvbiAobWFuaWZlc3RJZCkge1xuICByZXR1cm4gdGhpcy5fbWFuaWZlc3RzRG93bmxvYWRPcmRlck9ialttYW5pZmVzdElkXTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYW5pZmVzdElkIC0gbWFuaWZlc3QgaWRlbnRpZmllclxuICogQHJldHVybnMge2Jvb2xlYW59IC0gc3RhdHVzIGlmIG1hbmlmZXN0IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBxdWV1ZVxuICogQHByaXZhdGVcbiAqL1xuRG93bmxvYWRzQ29udHJvbGxlci5wcm90b3R5cGUuX2Rvd25sb2FkT3JkZXJSZW1vdmVNYW5pZmVzdCA9IGZ1bmN0aW9uIChtYW5pZmVzdElkKSB7XG4gIGxldCBmb3VuZCA9IGZhbHNlLCBpLCBqO1xuICBkZWxldGUgdGhpcy5fbWFuaWZlc3RzRG93bmxvYWRPcmRlck9ialttYW5pZmVzdElkXTtcbiAgZm9yIChpID0gMCwgaiA9IHRoaXMuX21hbmlmZXN0c0Rvd25sb2FkT3JkZXIubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgaWYgKHRoaXMuX21hbmlmZXN0c0Rvd25sb2FkT3JkZXJbaV0gPT09IG1hbmlmZXN0SWQpIHtcbiAgICAgIHRoaXMuX21hbmlmZXN0c0Rvd25sb2FkT3JkZXIuc3BsaWNlKGksIDEpO1xuICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3VuZDtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYW5pZmVzdElkIC0gbWFuaWZlc3QgaWRlbnRpZmllclxuICogQHBhcmFtIHtmdW5jdGlvbn0gb25TdWNjZXNzIC0gY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIGRvd25sb2FkIGZpbmlzaGVzIHdpdGggc3VjY2Vzc1xuICogQHBhcmFtIHtmdW5jdGlvbn0gb25GYWlsdXJlIC0gY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIGRvd25sb2FkIGZhaWxlZFxuICogQHByaXZhdGVcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5Eb3dubG9hZHNDb250cm9sbGVyLnByb3RvdHlwZS5fZmluaXNoID0gZnVuY3Rpb24gKG1hbmlmZXN0SWQsIG9uU3VjY2Vzcywgb25GYWlsdXJlKSB7XG4gIHRoaXMuZG93bmxvYWRTdGF0cy5yZWZyZXNoKCk7XG4gIHRoaXMuX2Rvd25sb2FkT3JkZXJSZW1vdmVNYW5pZmVzdChtYW5pZmVzdElkKTtcbiAgaWYgKCF0aGlzLl9tYW5pZmVzdHNEb3dubG9hZE9yZGVyLmxlbmd0aCkge1xuICAgIHRoaXMuZG93bmxvYWRTdGF0cy5zdG9wKCk7XG4gIH1cbiAgdGhpcy5zdG9yYWdlLnJlbW92ZUl0ZW0obWFuaWZlc3RJZClcbiAgICAudGhlbihvblN1Y2Nlc3MsIG9uRmFpbHVyZSk7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbGluayAtIGxpbmsgb2JqZWN0IHdoaWNoIGNvbnNpc3QgcmVtb3RlIGFuZCBsb2NhbCB1cmxcbiAqIEBwcml2YXRlXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIHVuaXF1ZSBoYXNoIGZvciBkb3dubG9hZCBmaWxlIGJhc2VkIG9uIGxvY2FsIGFuZCByZW1vdGUgdXJsXG4gKi9cbkRvd25sb2Fkc0NvbnRyb2xsZXIucHJvdG90eXBlLl9nZXREb3dubG9hZEhhc2ggPSBmdW5jdGlvbiAobGluaykge1xuICByZXR1cm4gbGluay5yZW1vdGVVcmwgKyBcIi1cIiArIGxpbmsubG9jYWxVcmw7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge0Rvd25sb2FkfSBkb3dubG9hZCAtIGRvd25sb2FkIGNsYXNzIHRvIGJlIG1hcmtlZCBlaXRoZXIgd2l0aCBzdWNjZXNzIG9yIHdpdGggZXJyb3JcbiAqIEBwcml2YXRlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuRG93bmxvYWRzQ29udHJvbGxlci5wcm90b3R5cGUuX21hcmtEb3dubG9hZEl0ZW0gPSBmdW5jdGlvbiAoZG93bmxvYWQpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gIGNvbnN0IG1hbmlmZXN0SWQgPSBkb3dubG9hZC5tYW5pZmVzdElkO1xuICBjb25zdCBkb3dubG9hZEhhc2ggPSBzZWxmLl9nZXREb3dubG9hZEhhc2goZG93bmxvYWQpO1xuICBsZXQgc3luY1N0b3JhZ2VLZXlzID0gW107XG4gIGxldCBsYXN0SXRlbTtcblxuICBkb3dubG9hZC5ldmVudHMucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIiwgc2VsZi5fb25Eb3dubG9hZEVuZCk7XG4gIGRvd25sb2FkLmV2ZW50cy5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsIHNlbGYuX29uRG93bmxvYWRFcnJvcik7XG5cbiAgLy9yZWZyZXNoaW5nIHN0YXRzIGZvciBsYXN0IHRpbWUgLSB0byBoYXZlIGNvcnJlY3Qgc3RhdHMgZm9yIHN1YnNjcmliZXJzIHByb2dyZXNzIGJlZm9yZSBpdCBpcyByZW1vdmVkXG4gIGlmIChzZWxmLnN0b3JhZ2UuZG93bmxvYWRpbmcuY291bnQobWFuaWZlc3RJZCkgPT09IDEgJiYgc2VsZi5zdG9yYWdlLmxlZnQuY291bnQobWFuaWZlc3RJZCkgPT09IDApIHtcbiAgICB0aGlzLmRvd25sb2FkU3RhdHMucmVmcmVzaCgpO1xuICAgIGxhc3RJdGVtID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChkb3dubG9hZC5zdGF0dXMgPT09IFNUQVRVU0VTLkZJTklTSEVEKSB7XG4gICAgc2VsZi5zdG9yYWdlLmRvd25sb2FkZWQucHVzaChtYW5pZmVzdElkLCBkb3dubG9hZCk7XG4gICAgc3luY1N0b3JhZ2VLZXlzLnB1c2godGhpcy5zdG9yYWdlLnN0b3Jlcy5ET1dOTE9BRFMuRE9XTkxPQURFRCk7XG4gIH0gZWxzZSB7XG4gICAgc2VsZi5zdG9yYWdlLmVycm9ycy5wdXNoKG1hbmlmZXN0SWQsIGRvd25sb2FkKTtcbiAgfVxuICBzZWxmLnN0b3JhZ2UuZG93bmxvYWRpbmcucmVtb3ZlSXRlbShtYW5pZmVzdElkLCBkb3dubG9hZEhhc2gpO1xuXG4gIGlmIChzZWxmLmlzRG93bmxvYWRGaW5pc2hlZChtYW5pZmVzdElkKSkge1xuICAgIGlmIChzZWxmLnN0b3JhZ2UuZXJyb3JzLmNvdW50KG1hbmlmZXN0SWQpID09PSAwKSB7XG4gICAgICBzZWxmLnN0b3JhZ2Uuc3RhdHVzLnNldEl0ZW0obWFuaWZlc3RJZCwgXCJzdGF0dXNcIiwgU1RBVFVTRVMuRklOSVNIRUQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLnN0b3JhZ2Uuc3RhdHVzLnNldEl0ZW0obWFuaWZlc3RJZCwgXCJzdGF0dXNcIiwgU1RBVFVTRVMuRVJST1IpO1xuICAgIH1cbiAgICBzeW5jU3RvcmFnZUtleXMucHVzaCh0aGlzLnN0b3JhZ2Uuc3RvcmVzLlNUQVRVUyk7XG4gIH1cblxuICBzZWxmLnN0b3JhZ2Uuc3luYyhtYW5pZmVzdElkLCBzeW5jU3RvcmFnZUtleXMpXG4gICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5zdG9yYWdlLnBhcmFtcy5kZWNyZWFzZShtYW5pZmVzdElkLCBzZWxmLl9uYW1lcy5kb3dubG9hZEluUHJvZ3Jlc3MpO1xuICAgICAgaWYgKGxhc3RJdGVtKSB7XG4gICAgICAgIHNlbGYuX2ZpbmlzaChtYW5pZmVzdElkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc2VsZi5zdGFydFF1ZXVlKCk7XG4gICAgICAgICAgY29uc29sZS5pbmZvKFwiRklOSVNIRURcIiwgbWFuaWZlc3RJZCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZWxmLnN0YXJ0UXVldWUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmLnN0YXJ0UXVldWUoKTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiRVJST1JcIiwgZXJyKTtcbiAgICB9KTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYW5pZmVzdElkIC0gbWFuaWZlc3QgaWRlbnRpZmllclxuICogQHBhcmFtIHtmdW5jdGlvbn0gb25TdWNjZXNzIC0gY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIHN0b3AgaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBvbkZhaWx1cmUgLSBjYWxsYmFjayB0byBiZSBpbnZva2VkIHdoZW4gc3RvcCBmYWlsZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdGF0dXMgLSB0aGUgc3RhdHVzXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RhdHVzRGV0YWlscyAtIGFkZHMgZGV0YWlscyBhYm91dCBzdGF0dXMgKG9uIGVycm9ycyBmb3IgZXhhbXBsZSlcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5Eb3dubG9hZHNDb250cm9sbGVyLnByb3RvdHlwZS5fc3RvcFdpdGhTdGF0dXMgPSBmdW5jdGlvbiAobWFuaWZlc3RJZCwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHN0YXR1cywgc3RhdHVzRGV0YWlscykge1xuICBjb25zdCBzZWxmID0gdGhpcztcbiAgc2VsZi5fZG93bmxvYWRPcmRlclJlbW92ZU1hbmlmZXN0KG1hbmlmZXN0SWQpO1xuICBzZWxmLnN0b3JhZ2UuZ2V0SXRlbShtYW5pZmVzdElkKVxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5BTFJFQURZX1NUT1BQRUQsIG1hbmlmZXN0SWQpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgaXRlbXNUb1N0b3AgPSBzZWxmLnN0b3JhZ2UuZG93bmxvYWRpbmcuZ2V0S2V5cyhtYW5pZmVzdElkKTtcbiAgICAgIGxldCBpdGVtVG9TdG9wO1xuICAgICAgY29uc29sZS5pbmZvKFwiU1RPUFBJTkdcIiwgbWFuaWZlc3RJZCwgaXRlbXNUb1N0b3AubGVuZ3RoKTtcbiAgICAgIGxldCBwcm9taXNlcyA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGogPSBpdGVtc1RvU3RvcC5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgaXRlbVRvU3RvcCA9IHNlbGYuc3RvcmFnZS5kb3dubG9hZGluZy5nZXRJdGVtKG1hbmlmZXN0SWQsIGl0ZW1zVG9TdG9wW2ldKTtcbiAgICAgICAgaXRlbVRvU3RvcC5ldmVudHMucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIiwgc2VsZi5fb25Eb3dubG9hZEVuZCk7XG4gICAgICAgIGl0ZW1Ub1N0b3AuZXZlbnRzLnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIiwgc2VsZi5fb25Eb3dubG9hZEVycm9yKTtcbiAgICAgICAgcHJvbWlzZXMucHVzaChpdGVtVG9TdG9wLnN0b3BQcm9taXNlKCkpO1xuICAgICAgfVxuXG4gICAgICBzZWxmLnN0b3JhZ2Uuc3RhdHVzLnNldEl0ZW0obWFuaWZlc3RJZCwgXCJzdGF0dXNcIiwgc3RhdHVzKTtcbiAgICAgIGlmIChzdGF0dXNEZXRhaWxzKSB7XG4gICAgICAgIHNlbGYuc3RvcmFnZS5zdGF0dXMuc2V0SXRlbShtYW5pZmVzdElkLCBcImRldGFpbHNcIiwgc3RhdHVzRGV0YWlscyk7XG4gICAgICB9XG5cbiAgICAgIHByb21pc2VzLnB1c2goc2VsZi5zdG9yYWdlLnN5bmMobWFuaWZlc3RJZCwgW1xuICAgICAgICBzZWxmLnN0b3JhZ2Uuc3RvcmVzLkRPV05MT0FEUy5ET1dOTE9BREVELFxuICAgICAgICBzZWxmLnN0b3JhZ2Uuc3RvcmVzLlNUQVRVUyxcbiAgICAgIF0pKTtcbiAgICAgIFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc2VsZi5fZmluaXNoKG1hbmlmZXN0SWQsIG9uU3VjY2Vzcywgb25GYWlsdXJlKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5TVE9QUElOR19GQUlMRUQsIG1hbmlmZXN0SWQpLCBlcnIpO1xuICAgICAgICB9KTtcbiAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuU1RPUFBJTkdfRkFJTEVELCBtYW5pZmVzdElkKSwgZXJyKTtcbiAgICB9KTtcblxufTtcbi8qKlxuICogQHBhcmFtIHtEb3dubG9hZH0gZG93bmxvYWQgLSBEb3dubG9hZCBDbGFzc1xuICogQHBhcmFtIHtvYmplY3R9IGVyciAtIGVycm9yIG9iamVjdFxuICogQHJldHVybnMge3ZvaWR9XG4gKiBAcHJpdmF0ZVxuICovXG5Eb3dubG9hZHNDb250cm9sbGVyLnByb3RvdHlwZS5fb25Eb3dubG9hZEVycm9yID0gZnVuY3Rpb24gKGRvd25sb2FkLCBlcnIpIHtcbiAgY29uc29sZS5lcnJvcihcIkVSUk9SXCIsIGRvd25sb2FkLnJlbW90ZVVybCwgZXJyKTtcbiAgdGhpcy5fbWFya0Rvd25sb2FkSXRlbShkb3dubG9hZCk7XG4gIGlmIChlcnIgPT09IGRvd25sb2FkRmlsZVV0aWwuZXJyb3JzLk5PX1NQQUNFX0xFRlRfRVJST1IgfHwgYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5zdG9wT25FcnJvcikge1xuICAgIC8vIHN0b3AgZG93bmxvYWRpbmcgPT4gY2Fubm90IHdyaXRlXG4gICAgdGhpcy5fc3RvcFdpdGhTdGF0dXMoZG93bmxvYWQubWFuaWZlc3RJZCwgKCkgPT4ge1xuICAgICAgY29uc29sZS5pbmZvKCdzdG9wcGVkJyk7XG4gICAgfSwgKGZhaWx1cmUpID0+IHtcbiAgICAgIGNvbnNvbGUuaW5mbyhmYWlsdXJlKTtcbiAgICB9LCBTVEFUVVNFUy5FUlJPUiwgZXJyKTtcbiAgfVxufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtEb3dubG9hZH0gZG93bmxvYWQgLSBEb3dubG9hZCBDbGFzc1xuICogQHJldHVybnMge3ZvaWR9XG4gKiBAcHJpdmF0ZVxuICovXG5Eb3dubG9hZHNDb250cm9sbGVyLnByb3RvdHlwZS5fb25Eb3dubG9hZEVuZCA9IGZ1bmN0aW9uIChkb3dubG9hZCkge1xuICAvLyBjb25zb2xlLmxvZyhcIkZJTklTSEVEXCIsIGRvd25sb2FkLnJlbW90ZVVybCwgZG93bmxvYWQubG9jYWxVcmwpO1xuICB0aGlzLl9tYXJrRG93bmxvYWRJdGVtKGRvd25sb2FkKTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYW5pZmVzdElkIC0gbWFuaWZlc3QgaWRlbnRpZmllclxuICogQHBhcmFtIHtBcnJheX0gdmlkZW9MaW5rcyAtIHZpZGVvIGxpbmtzIHRvIGJlIGRvd25sb2FkZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGF1ZGlvTGlua3MgLSBhdWRpbyBsaW5rcyB0byBiZSBkb3dubG9hZGVkXG4gKiBAcGFyYW0ge0FycmF5fSB0ZXh0TGlua3MgLSB0ZXh0IGxpbmtzIHRvIGJlIGRvd25sb2FkZWRcbiAqIEByZXR1cm5zIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuRG93bmxvYWRzQ29udHJvbGxlci5wcm90b3R5cGUuX3ByZXBhcmVTdGFydE9wdGlvbnMgPSBmdW5jdGlvbiAobWFuaWZlc3RJZCwgdmlkZW9MaW5rcywgYXVkaW9MaW5rcywgdGV4dExpbmtzKSB7XG4gIGNvbnN0IGNvdW50ID0gdmlkZW9MaW5rcy5sZW5ndGggKyBhdWRpb0xpbmtzLmxlbmd0aCArIHRleHRMaW5rcy5sZW5ndGg7XG4gIGNvbnNvbGUuaW5mbyhcIkFERElORyAtPj4+IFwiLCBtYW5pZmVzdElkICsgXCIsXCIsIGNvdW50LCBcImZyYWdtZW50c1wiKTtcbiAgbGV0IG9wdGlvbnMgPSB7fTtcbiAgdGhpcy5zdG9yYWdlLnBhcmFtcy5zZXRJdGVtKG1hbmlmZXN0SWQsIHRoaXMuX25hbWVzLmRvd25sb2FkSW5Qcm9ncmVzcywgMCk7XG4gIGxldCBtYXhEb3dubG9hZEluUHJvZ3Jlc3M7XG4gIGNvbnN0IHRocmVhZFJ1bGVzID0gYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5kb3dubG9hZGluZ1RocmVhZHNSdWxlcztcblxuICBmb3IgKGxldCBpID0gMCwgaiA9IHRocmVhZFJ1bGVzLml0ZW1zLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgIGlmIChjb3VudCA8PSB0aHJlYWRSdWxlcy5pdGVtc1tpXS5tYXgpIHtcbiAgICAgIG9wdGlvbnNbdGhyZWFkUnVsZXMudGhyZWFkTmFtZV0gPSB0aHJlYWRSdWxlcy5pdGVtc1tpXS50aHJlYWRzO1xuICAgICAgbWF4RG93bmxvYWRJblByb2dyZXNzID0gdGhyZWFkUnVsZXMuaXRlbXNbaV0uZmlsZXM7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB0aGlzLnN0b3JhZ2UucGFyYW1zLnNldEl0ZW0obWFuaWZlc3RJZCwgdGhpcy5fbmFtZXMub3B0aW9ucywgb3B0aW9ucyk7XG4gIHRoaXMuc3RvcmFnZS5wYXJhbXMuc2V0SXRlbShtYW5pZmVzdElkLCB0aGlzLl9uYW1lcy5tYXhEb3dubG9hZEluUHJvZ3Jlc3MsIG1heERvd25sb2FkSW5Qcm9ncmVzcyk7XG5cbiAgLy9kb3dubG9hZCBvcmRlciBjYW4gaGVscCB0byBzdG9wIGRvd25sb2FkIG9uZSBtYW5pZmVzdCBhbmQgZG93bmxvYWQgYW5vdGhlciBvciBkb3dubG9hZCB0aGVtIGluIHBhcmFsbGVsXG4gIHRoaXMuX2Rvd25sb2FkT3JkZXJBZGRNYW5pZmVzdChtYW5pZmVzdElkKTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYW5pZmVzdElkIC0gbWFuaWZlc3QgaWRlbnRpZmllclxuICogQHJldHVybnMge2Jvb2xlYW59IC0gaWYgZG93bmxvYWQgaXMgZmluaXNoZWRcbiAqL1xuRG93bmxvYWRzQ29udHJvbGxlci5wcm90b3R5cGUuaXNEb3dubG9hZEZpbmlzaGVkID0gZnVuY3Rpb24gKG1hbmlmZXN0SWQpIHtcbiAgcmV0dXJuICF0aGlzLnN0b3JhZ2UubGVmdC5jb3VudChtYW5pZmVzdElkKSAmJiAhdGhpcy5zdG9yYWdlLmRvd25sb2FkaW5nLmNvdW50KG1hbmlmZXN0SWQpO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hbmlmZXN0SWQgLSBtYW5pZmVzdCBpZGVudGlmaWVyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBpZiBkb3dubG9hZCBpcyBmaW5pc2hlZCBhbmQgc3luY2VkIChpbmZvIHdyaXR0ZW4gb24gZGlzaylcbiAqL1xuRG93bmxvYWRzQ29udHJvbGxlci5wcm90b3R5cGUuaXNEb3dubG9hZEZpbmlzaGVkQW5kU3luY2VkID0gZnVuY3Rpb24gKG1hbmlmZXN0SWQpIHtcbiAgcmV0dXJuICF0aGlzLnN0b3JhZ2UubGVmdC5jb3VudChtYW5pZmVzdElkKSAmJiAhdGhpcy5zdG9yYWdlLmRvd25sb2FkaW5nLmNvdW50KG1hbmlmZXN0SWQpICYmICF0aGlzLnN0b3JhZ2Uua2V5RXhpc3RzKG1hbmlmZXN0SWQpO1xufTtcblxuXG5Eb3dubG9hZHNDb250cm9sbGVyLnByb3RvdHlwZS5nZXREb3dubG9hZGluZyA9IGZ1bmN0aW9uIChtYW5pZmVzdElkLCBsb2NhbEZpbGUpIHtcbiAgbGV0IGl0ZW1zID0gdGhpcy5zdG9yYWdlLmRvd25sb2FkaW5nLmdldEl0ZW1zKG1hbmlmZXN0SWQpO1xuICBpZiAoIWl0ZW1zKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmb3IgKHZhciBsaW5rIGluIGl0ZW1zKSB7XG4gICAgaWYgKGl0ZW1zLmhhc093blByb3BlcnR5KGxpbmspKSB7XG4gICAgICBsZXQgZG93bmxvYWQgPSBpdGVtc1tsaW5rXTtcbiAgICAgIGxldCBkb3dubG9hZFBhdGggPSBwYXRoLm5vcm1hbGl6ZShkb3dubG9hZC5sb2NhbFVybCk7XG4gICAgICBsZXQgbG9jYWwgPSBwYXRoLm5vcm1hbGl6ZShsb2NhbEZpbGUpO1xuICAgICAgaWYgKGRvd25sb2FkUGF0aCA9PT0gbG9jYWwpIHtcbiAgICAgICAgcmV0dXJuIGRvd25sb2FkO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuRG93bmxvYWRzQ29udHJvbGxlci5wcm90b3R5cGUud2FpdEZvckRvd25sb2FkID0gZnVuY3Rpb24gKGRvd25sb2FkLCBjYWxsYmFjaykge1xuICBsZXQgX29uRG93bmxvYWRFbmQ7XG4gIGxldCBfb25Eb3dubG9hZEVycm9yO1xuXG4gIGxldCByZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIChkb3dubG9hZCkge1xuICAgIGRvd25sb2FkLmV2ZW50cy5yZW1vdmVMaXN0ZW5lcihcImVuZFwiLCBfb25Eb3dubG9hZEVuZCk7XG4gICAgZG93bmxvYWQuZXZlbnRzLnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIiwgX29uRG93bmxvYWRFcnJvcik7XG4gIH1cblxuICBfb25Eb3dubG9hZEVuZCA9IGZ1bmN0aW9uIChkb3dubG9hZCkge1xuICAgIHJlbW92ZUxpc3RlbmVyKGRvd25sb2FkKTtcbiAgICBjYWxsYmFjaygpO1xuICB9XG5cbiAgX29uRG93bmxvYWRFcnJvciA9IGZ1bmN0aW9uIChkb3dubG9hZCwgZXJyKSB7XG4gICAgcmVtb3ZlTGlzdGVuZXIoZG93bmxvYWQpO1xuICAgIGNhbGxiYWNrKGVycik7XG4gIH1cblxuICBkb3dubG9hZC5ldmVudHMub24oXCJlbmRcIiwgX29uRG93bmxvYWRFbmQpO1xuICBkb3dubG9hZC5ldmVudHMub24oXCJlcnJvclwiLCBfb25Eb3dubG9hZEVycm9yKTtcbn1cblxuLyoqXG4qIFBlcmZvcm0gYSBzZWVrIC0gdGhpcyBjaGFuZ2VzIG9yZGVyIG9mIGZyYWdtZW50IGRvd25sb2FkIGZvciBhIG1hbmlmZXN0XG4qIEBwYXJhbSB7c3RyaW5nfSBtYW5pZmVzdElkIC0gbWFuaWZlc3QgaWRlbnRpZmllclxuKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxGaWxlIC0gbG9jYWwgZmlsZVxuKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGNhbGxiYWNrIHRvIGdldCByZXN1bHRcbiogQHJldHVybnMge3ZvaWR9XG4qL1xuRG93bmxvYWRzQ29udHJvbGxlci5wcm90b3R5cGUucGVyZm9ybVNlZWsgPSBmdW5jdGlvbiAobWFuaWZlc3RJZCwgbG9jYWxGaWxlLCBjYWxsYmFjaykge1xuICBsZXQgc2VsZiA9IHRoaXM7XG4gIGxldCBkb3dubG9hZDtcblxuICBkb3dubG9hZCA9IHNlbGYuZ2V0RG93bmxvYWRpbmcobWFuaWZlc3RJZCwgbG9jYWxGaWxlKTtcbiAgaWYgKGRvd25sb2FkKSB7XG4gICAgc2VsZi53YWl0Rm9yRG93bmxvYWQoZG93bmxvYWQsIGNhbGxiYWNrKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgaXRlbXMgPSBzZWxmLnN0b3JhZ2UubGVmdC5nZXRJdGVtcyhtYW5pZmVzdElkKTtcbiAgaWYgKCFpdGVtcykge1xuICAgIGNhbGxiYWNrKCdObyBkb3dubG9hZCBmb3VuZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBpbmRleCA9IGl0ZW1zLmZpbmRJbmRleChmdW5jdGlvbiAoZG93bmxvYWQpIHtcbiAgICBsZXQgZG93bmxvYWRQYXRoID0gcGF0aC5ub3JtYWxpemUoZG93bmxvYWQubG9jYWxVcmwpO1xuICAgIGxldCBsb2NhbCA9IHBhdGgubm9ybWFsaXplKGxvY2FsRmlsZSk7XG4gICAgcmV0dXJuIChkb3dubG9hZFBhdGggPT09IGxvY2FsKVxuICB9KTtcbiAgaWYgKGluZGV4ID4gLTEpIHtcblxuICAgIGxldCBwYXJ0MSA9IGl0ZW1zLnNsaWNlKDAsIGluZGV4KTtcbiAgICBsZXQgcGFydDIgPSBpdGVtcy5zbGljZShpbmRleCk7XG5cbiAgICBzZWxmLnN0b3JhZ2UubGVmdC5jbGVhcihtYW5pZmVzdElkKTtcbiAgICBzZWxmLnN0b3JhZ2UubGVmdC5jb25jYXQobWFuaWZlc3RJZCwgcGFydDIpO1xuICAgIHNlbGYuc3RvcmFnZS5sZWZ0LmNvbmNhdChtYW5pZmVzdElkLCBwYXJ0MSk7XG5cbiAgICBpdGVtcyA9IHNlbGYuc3RvcmFnZS5sZWZ0LmdldEl0ZW1zKG1hbmlmZXN0SWQpO1xuICAgIHNlbGYuc3RhcnRRdWV1ZShzZWxmLl9pbmRleE9mTWFuaWZlc3QobWFuaWZlc3RJZCksIHRydWUpO1xuICAgIGRvd25sb2FkID0gc2VsZi5nZXREb3dubG9hZGluZyhtYW5pZmVzdElkLCBsb2NhbEZpbGUpO1xuICAgIGlmIChkb3dubG9hZCkge1xuICAgICAgc2VsZi53YWl0Rm9yRG93bmxvYWQoZG93bmxvYWQsIGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgbm90IHF1ZXVlZCwgcmV0dXJuIGFuIGVycm9yXG4gICAgICBjYWxsYmFjaygnTm8gZG93bmxvYWQgZm91bmQnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY2FsbGJhY2soJ05vIGRvd25sb2FkIGZvdW5kJyk7XG4gIH1cbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYW5pZmVzdElkIC0gbWFuaWZlc3QgaWRlbnRpZmllclxuICogQHBhcmFtIHtvYmplY3R9IHJlcHJlc2VudGF0aW9ucyAtIG9iamVjdCBjb250YWluaW5nIHZpZGVvLCBhdWRpbyBhbmQgdGV4dCByZXByZXNlbnRhdGlvbnMgaWRzXG4gKiBAcGFyYW0ge3N0cmluZ30gZG93bmxvYWRGb2xkZXIgLSBkb3dubG9hZCBmb2xkZXIgZm9yIHZpZGVvLiBJZiB1bmRlZmluZWQsIHRoZW4gZGVmYXVsdCBkb3dubG9hZCBmb2xkZXIgaXMgdXNlZFxuICogQHBhcmFtIHtmdW5jdGlvbn0gb25TdWNjZXNzIC0gY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIHN0YXJ0IGhhcyBiZWVuIHN1Y2Nlc3NmdWxseVxuICogQHBhcmFtIHtmdW5jdGlvbn0gb25GYWlsdXJlIC0gY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIHN0YXJ0IGZhaWxlZFxuICogQHBhcmFtIHtib29sZWFufSBmcm9tUmVzdW1lZCAtIGlmIHN0YXJ0IGhhcyBiZWVuIGNhbGxlZCBmcm9tIHJlc3VtZSBhcGkgbWV0aG9kXG4gKiBAcGFyYW0ge3N0cmluZ30gb2xkc3RhdHVzIC0gaWYgZnJvbSByZXN1bWVkLCB0aGVuIGluZGljYXRlcyB0aGUgb2xkIHN0YXR1cyBvZiBkb3dubG9hZFxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbkRvd25sb2Fkc0NvbnRyb2xsZXIucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKG1hbmlmZXN0SWQsIHJlcHJlc2VudGF0aW9ucywgZG93bmxvYWRGb2xkZXIsIG9uU3VjY2Vzcywgb25GYWlsdXJlLCBmcm9tUmVzdW1lZCwgb2xkc3RhdHVzKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuICB0aGlzLmRvd25sb2FkU3RhdHMuc3RhcnQoKTtcbiAgY29uc3QgbWFuaWZlc3QgPSB0aGlzLl9tYW5pZmVzdENvbnRyb2xsZXIuZ2V0TWFuaWZlc3RCeUlkKG1hbmlmZXN0SWQpO1xuXG4gIGlmICghbWFuaWZlc3QpIHtcbiAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5tYW5pZmVzdHMuTk9UX0ZPVU5ELCBtYW5pZmVzdElkKSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHJlcHJlc2VudGF0aW9ucyA9IHJlcHJlc2VudGF0aW9ucyB8fCB7fTtcbiAgbGV0IHZpZGVvID0gcmVwcmVzZW50YXRpb25zLnZpZGVvIHx8IFtdO1xuICBpZiAoIUFycmF5LmlzQXJyYXkodmlkZW8pKSB7XG4gICAgdmlkZW8gPSBbdmlkZW9dO1xuICB9XG5cbiAgbGV0IGF1ZGlvID0gcmVwcmVzZW50YXRpb25zLmF1ZGlvIHx8IFtdO1xuICBpZiAoIUFycmF5LmlzQXJyYXkoYXVkaW8pKSB7XG4gICAgYXVkaW8gPSBbYXVkaW9dO1xuICB9XG5cbiAgbGV0IHRleHQgPSByZXByZXNlbnRhdGlvbnMudGV4dCB8fCBbXTtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHRleHQpKSB7XG4gICAgdGV4dCA9IFt0ZXh0XTtcbiAgfVxuXG4gIGNvbnN0IHZpZGVvUiA9IG1hbmlmZXN0LmdldFZpZGVvUmVwcmVzZW50YXRpb25zKCk7XG4gIGNvbnN0IGF1ZGlvUiA9IG1hbmlmZXN0LmdldEF1ZGlvUmVwcmVzZW50YXRpb25zKCk7XG4gIGNvbnN0IHRleHRSID0gbWFuaWZlc3QuZ2V0VGV4dFJlcHJlc2VudGF0aW9ucygpO1xuXG4gIGxldCBsb2NhbERvd25sb2FkRm9sZGVyID0gcGF0aC5yZXNvbHZlKGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkuZG93bmxvYWRzRm9sZGVyUGF0aClcbiAgaWYgKGRvd25sb2FkRm9sZGVyKSB7XG4gICAgbG9jYWxEb3dubG9hZEZvbGRlciA9IHBhdGgucmVzb2x2ZShkb3dubG9hZEZvbGRlcik7XG4gIH1cbiAgY29uc3QgbG9jYWxQYXRoID0gcGF0aC5yZXNvbHZlKGxvY2FsRG93bmxvYWRGb2xkZXIgKyBcIi9cIiArIG1hbmlmZXN0SWQgKyBcIi9cIik7XG4gIGNvbnN0IG1hbmlmZXN0VXJsID0gbWFuaWZlc3QuZ2V0TWFuaWZlc3RVcmwoKTtcbiAgY29uc3QgbWFuaWZlc3ROYW1lID0gbWFuaWZlc3QuZ2V0TWFuaWZlc3ROYW1lKCk7XG5cbiAgZnVuY3Rpb24gZ2V0TWFuaWZlc3RCYXNlVXJsICh4bWwsIG1hbmlmZXN0VXJsRG9tYWluKSB7XG4gICAgbGV0IG1hbmlmZXN0QmFzZVVybDtcbiAgICBjb25zdCBNUEQgPSB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJNUERcIilbMF07XG4gICAgaWYgKE1QRCkge1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGogPSBNUEQuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgaWYgKE1QRC5jaGlsZE5vZGVzW2ldLm5vZGVOYW1lID09PSBcIkJhc2VVUkxcIikge1xuICAgICAgICAgIG1hbmlmZXN0QmFzZVVybCA9IE1QRC5jaGlsZE5vZGVzW2ldLnRleHRDb250ZW50O1xuICAgICAgICAgIGlmICghbWFuaWZlc3RCYXNlVXJsLm1hdGNoKGNvbnN0YW50cy5yZWdleHBQcm90b2NvbFJlbW92ZSkpIHtcbiAgICAgICAgICAgIG1hbmlmZXN0QmFzZVVybCA9IHV0aWxVcmwuam9pblBhdGgobWFuaWZlc3RVcmxEb21haW4sIG1hbmlmZXN0QmFzZVVybCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghbWFuaWZlc3RCYXNlVXJsKSB7XG4gICAgICBtYW5pZmVzdEJhc2VVcmwgPSBtYW5pZmVzdFVybERvbWFpbjtcbiAgICB9XG4gICAgcmV0dXJuIG1hbmlmZXN0QmFzZVVybDtcbiAgfVxuXG4gIFByb21pc2UuYWxsKFtcbiAgICB0aGlzLl9vZmZsaW5lQ29udHJvbGxlci5nZXRNYW5pZmVzdEluZm9Qcm9taXNlKG1hbmlmZXN0SWQsIHRydWUpLFxuICAgIHRoaXMuc3RvcmFnZS5nZXRJdGVtKG1hbmlmZXN0SWQpLFxuICAgIG1rZGlycChsb2NhbFBhdGgpLFxuICBdKVxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7XG4gICAgICBjb25zdCBpbmZvID0gcmVzdWx0c1swXTtcbiAgICAgIGNvbnN0IHN0b3JhZ2VJdGVtID0gcmVzdWx0c1sxXTtcbiAgICAgIGlmIChzdG9yYWdlSXRlbSAmJiAhc2VsZi5pc0Rvd25sb2FkRmluaXNoZWQobWFuaWZlc3RJZCkpIHtcbiAgICAgICAgaWYgKGZyb21SZXN1bWVkKSB7XG4gICAgICAgICAgb25GYWlsdXJlKHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUuZG93bmxvYWRzLkFMUkVBRFlfUkVTVU1FRCwgbWFuaWZlc3RJZCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5BTFJFQURZX1NUQVJURUQsIG1hbmlmZXN0SWQpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vY29sbGVjdCBMaW5rcyAtIHN0YXJ0XG4gICAgICBpZiAoaW5mby5tYW5pZmVzdC52aWRlbykge1xuICAgICAgICB2aWRlbyA9IF8udW5pb24odmlkZW8sIGluZm8ubWFuaWZlc3QudmlkZW8pO1xuICAgICAgfVxuICAgICAgaWYgKGluZm8ubWFuaWZlc3QuYXVkaW8pIHtcbiAgICAgICAgYXVkaW8gPSBfLnVuaW9uKGF1ZGlvLCBpbmZvLm1hbmlmZXN0LmF1ZGlvKTtcbiAgICAgIH1cbiAgICAgIGlmIChpbmZvLm1hbmlmZXN0LnRleHQpIHtcbiAgICAgICAgdGV4dCA9IF8udW5pb24odGV4dCwgaW5mby5tYW5pZmVzdC50ZXh0KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRvd25sb2FkZWQgPSBpbmZvLmRvd25sb2FkZWRGaWxlcyB8fCBbXTtcbiAgICAgIGxldCBkb3dubG9hZGVkSGFzaCA9IHt9O1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGogPSBkb3dubG9hZGVkLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICBkb3dubG9hZGVkSGFzaFtkb3dubG9hZGVkW2ldLmxvY2FsVXJsXSA9IGRvd25sb2FkZWRbaV07XG4gICAgICB9XG5cbiAgICAgIGxldCByZW1vdGVQYXRoID0gZ2V0TWFuaWZlc3RCYXNlVXJsKG1hbmlmZXN0Lm1hbmlmZXN0WE1MLnhtbCwgbWFuaWZlc3QudXJsX2RvbWFpbik7XG4gICAgICBjb25zdCB2aWRlb0xpbmtzID0gZG93bmxvYWRVdGlsLmdldERvd25sb2FkTGlua3MobWFuaWZlc3RJZCwgbG9jYWxQYXRoLCByZW1vdGVQYXRoLCB2aWRlbywgdmlkZW9SLCBkb3dubG9hZGVkSGFzaCk7XG4gICAgICBjb25zdCBhdWRpb0xpbmtzID0gZG93bmxvYWRVdGlsLmdldERvd25sb2FkTGlua3MobWFuaWZlc3RJZCwgbG9jYWxQYXRoLCByZW1vdGVQYXRoLCBhdWRpbywgYXVkaW9SLCBkb3dubG9hZGVkSGFzaCk7XG4gICAgICBjb25zdCB0ZXh0TGlua3MgPSBkb3dubG9hZFV0aWwuZ2V0RG93bmxvYWRMaW5rcyhtYW5pZmVzdElkLCBsb2NhbFBhdGgsIHJlbW90ZVBhdGgsIHRleHQsIHRleHRSLCBkb3dubG9hZGVkSGFzaCk7XG5cbiAgICAgIGNvbnN0IGFsbHZpZGVvTGlua3MgPSBkb3dubG9hZFV0aWwuZ2V0QWxsTGlua3MobWFuaWZlc3RJZCwgbG9jYWxQYXRoLCByZW1vdGVQYXRoLCB2aWRlbywgdmlkZW9SKTtcbiAgICAgIGNvbnN0IGFsbGF1ZGlvTGlua3MgPSBkb3dubG9hZFV0aWwuZ2V0QWxsTGlua3MobWFuaWZlc3RJZCwgbG9jYWxQYXRoLCByZW1vdGVQYXRoLCBhdWRpbywgYXVkaW9SKTtcbiAgICAgIGNvbnN0IGFsbHRleHRMaW5rcyA9IGRvd25sb2FkVXRpbC5nZXRBbGxMaW5rcyhtYW5pZmVzdElkLCBsb2NhbFBhdGgsIHJlbW90ZVBhdGgsIHRleHQsIHRleHRSKTtcbiAgICAgIGNvbnN0IGFsbEZpbGVzID0gYWxsdmlkZW9MaW5rcy5jb25jYXQoYWxsYXVkaW9MaW5rcywgYWxsdGV4dExpbmtzKTtcblxuICAgICAgLy9jb2xsZWN0IExpbmtzIC0gZW5kXG5cbiAgICAgIHNlbGYuc3RvcmFnZS5jcmVhdGVJZk5vdEV4aXN0cyhtYW5pZmVzdElkKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICBzZWxmLnN0b3JhZ2UubWFuaWZlc3Quc2V0SXRlbShtYW5pZmVzdElkLCBcInRzXCIsIG5ldyBEYXRlKCkuZ2V0VGltZSgpKTtcbiAgICAgICAgICBzZWxmLnN0b3JhZ2UubWFuaWZlc3Quc2V0SXRlbShtYW5pZmVzdElkLCBcInVybFwiLCBtYW5pZmVzdFVybCk7XG4gICAgICAgICAgc2VsZi5zdG9yYWdlLm1hbmlmZXN0LnNldEl0ZW0obWFuaWZlc3RJZCwgXCJuYW1lXCIsIG1hbmlmZXN0TmFtZSk7XG4gICAgICAgICAgc2VsZi5zdG9yYWdlLm1hbmlmZXN0LnNldEl0ZW0obWFuaWZlc3RJZCwgXCJ2aWRlb1wiLCB2aWRlbyk7XG4gICAgICAgICAgc2VsZi5zdG9yYWdlLm1hbmlmZXN0LnNldEl0ZW0obWFuaWZlc3RJZCwgXCJhdWRpb1wiLCBhdWRpbyk7XG4gICAgICAgICAgc2VsZi5zdG9yYWdlLm1hbmlmZXN0LnNldEl0ZW0obWFuaWZlc3RJZCwgXCJ0ZXh0XCIsIHRleHQpO1xuICAgICAgICAgIHNlbGYuc3RvcmFnZS5tYW5pZmVzdC5zZXRJdGVtKG1hbmlmZXN0SWQsIFwiZmlsZXNcIiwgYWxsRmlsZXMpO1xuICAgICAgICAgIHNlbGYuc3RvcmFnZS5tYW5pZmVzdC5zZXRJdGVtKG1hbmlmZXN0SWQsIFwiZm9sZGVyXCIsIGxvY2FsRG93bmxvYWRGb2xkZXIpO1xuXG4gICAgICAgICAgc2VsZi5zdG9yYWdlLmRvd25sb2FkZWQuY2xlYXIobWFuaWZlc3RJZCk7XG4gICAgICAgICAgc2VsZi5zdG9yYWdlLmRvd25sb2FkZWQuY29uY2F0KG1hbmlmZXN0SWQsIGRvd25sb2FkZWQpO1xuICAgICAgICAgIHNlbGYuc3RvcmFnZS5lcnJvcnMuY2xlYXIobWFuaWZlc3RJZCk7XG5cbiAgICAgICAgICBpZiAoIWZyb21SZXN1bWVkKSB7XG4gICAgICAgICAgICAvLyBkbyBub3QgaW5pdGlhbGlzZSBzdGF0ZSBvZiBtYW5pZmVzdCBpcyBzdGFydCBpcyBmcm9tIHJlc3VtZVxuICAgICAgICAgICAgLy8gc3RhdGUgbXVzdCBzdGF5IHRoZSBsYXN0IG9uZVxuICAgICAgICAgICAgc2VsZi5zdG9yYWdlLnN0YXR1cy5zZXRJdGVtKG1hbmlmZXN0SWQsIFwic3RhdHVzXCIsIFNUQVRVU0VTLkNSRUFURUQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpbml0IHN0YXR1cyB3aXRoIGxhc3Qgc3RhdHVzXG4gICAgICAgICAgICBzZWxmLnN0b3JhZ2Uuc3RhdHVzLnNldEl0ZW0obWFuaWZlc3RJZCwgXCJzdGF0dXNcIiwgb2xkc3RhdHVzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICBzZWxmLnN0b3JhZ2Uuc3luYyhtYW5pZmVzdElkLCBbXG4gICAgICAgICAgICAgIHNlbGYuc3RvcmFnZS5zdG9yZXMuTUFOSUZFU1QsXG4gICAgICAgICAgICAgIHNlbGYuc3RvcmFnZS5zdG9yZXMuU1RBVFVTXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIHNlbGYuX21hbmlmZXN0Q29udHJvbGxlci5zYXZlT3JpZ2luYWxNYW5pZmVzdE9uY2VPbmx5KG1hbmlmZXN0SWQpLFxuICAgICAgICAgICAgc2VsZi5fbWFuaWZlc3RDb250cm9sbGVyLnNhdmVNYW5pZmVzdFdpdGhDaG9zZW5SZXByZXNlbnRhdGlvbnMobWFuaWZlc3RJZCwge1xuICAgICAgICAgICAgICB2aWRlbzogdmlkZW8sXG4gICAgICAgICAgICAgIGF1ZGlvOiBhdWRpbyxcbiAgICAgICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGxvY2FsUGF0aClcbiAgICAgICAgICBdKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBzZWxmLl9hZGREb3dubG9hZHMobWFuaWZlc3RJZCwgdmlkZW9MaW5rcywgYXVkaW9MaW5rcywgdGV4dExpbmtzKTtcbiAgICAgICAgICAgICAgaWYgKHNlbGYuX2luZGV4T2ZNYW5pZmVzdChtYW5pZmVzdElkKSA+IGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkubnVtYmVyT2ZNYW5pZmVzdHNJblBhcmFsbGVsIC0gMSkge1xuICAgICAgICAgICAgICAgIHNlbGYuc3RvcmFnZS5zdGF0dXMuc2V0SXRlbShtYW5pZmVzdElkLCBcInN0YXR1c1wiLCBTVEFUVVNFUy5RVUVVRUQpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGYuc3RvcmFnZS5zdGF0dXMuc2V0SXRlbShtYW5pZmVzdElkLCBcInN0YXR1c1wiLCBTVEFUVVNFUy5TVEFSVEVEKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzZWxmLnN0b3JhZ2Uuc3RhdHVzLnNldEl0ZW0obWFuaWZlc3RJZCwgXCJsZWZ0XCIsIHNlbGYuc3RvcmFnZS5sZWZ0LmNvdW50KG1hbmlmZXN0SWQpKTtcbiAgICAgICAgICAgICAgc2VsZi5zdG9yYWdlLnN5bmMobWFuaWZlc3RJZCwgW1xuICAgICAgICAgICAgICAgIHNlbGYuc3RvcmFnZS5zdG9yZXMuRE9XTkxPQURTLkRPV05MT0FERUQsXG4gICAgICAgICAgICAgICAgc2VsZi5zdG9yYWdlLnN0b3Jlcy5TVEFUVVNcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBzZWxmLmRvd25sb2FkU3RhdHMucmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuaXNEb3dubG9hZEZpbmlzaGVkKG1hbmlmZXN0SWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc3RvcmFnZS5zdGF0dXMuc2V0SXRlbShtYW5pZmVzdElkLCBcInN0YXR1c1wiLCBTVEFUVVNFUy5GSU5JU0hFRCk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc3RvcmFnZS5zeW5jKG1hbmlmZXN0SWQsIHNlbGYuc3RvcmFnZS5zdG9yZXMuU1RBVFVTKVxuICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2ZpbmlzaChtYW5pZmVzdElkLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSwgb25GYWlsdXJlKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZG93bmxvYWRTdGF0cy5zdGFydCgpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnN0YXJ0UXVldWUoKTtcbiAgICAgICAgICAgICAgICAgICAgb25TdWNjZXNzKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgb25GYWlsdXJlKTtcbiAgICAgICAgICAgIH0sIG9uRmFpbHVyZSk7XG4gICAgICAgIH0sIG9uRmFpbHVyZSk7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFuaWZlc3RJZCAtIG1hbmlmZXN0IGlkZW50aWZpZXJcbiAqIEBwYXJhbSB7b2JqZWN0fSByZXByZXNlbnRhdGlvbnMgLSBvYmplY3QgY29udGFpbmluZyB2aWRlbywgYXVkaW8gYW5kIHRleHQgcmVwcmVzZW50YXRpb25zIGlkc1xuICogQHBhcmFtIHtmdW5jdGlvbn0gb25TdWNjZXNzIC0gY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIHN0YXJ0IGhhcyBiZWVuIHN1Y2Nlc3NmdWxseVxuICogQHBhcmFtIHtmdW5jdGlvbn0gb25GYWlsdXJlIC0gY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIHN0YXJ0IGZhaWxlZFxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbkRvd25sb2Fkc0NvbnRyb2xsZXIucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uIChtYW5pZmVzdElkLCByZXByZXNlbnRhdGlvbnMsIG9uU3VjY2Vzcywgb25GYWlsdXJlKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuICB0aGlzLl9vZmZsaW5lQ29udHJvbGxlci5nZXRNYW5pZmVzdEluZm8obWFuaWZlc3RJZCwgZnVuY3Rpb24gKGVyciwgaW5mbykge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5SRVNVTUlOR19GQUlMRUQsIG1hbmlmZXN0SWQpLCBlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgZm9sZGVyID0gaW5mby5tYW5pZmVzdC5mb2xkZXI7XG4gICAgICBpZiAoIWZvbGRlcikge1xuICAgICAgICAvLyB1c2UgZGVmYXVsdCBkb3dubG9hZCBmb2xkZXIgcGF0aFxuICAgICAgICBmb2xkZXIgPSBwYXRoLnJlc29sdmUoYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5kb3dubG9hZHNGb2xkZXJQYXRoKVxuICAgICAgfVxuICAgICAgc2VsZi5zdGFydChtYW5pZmVzdElkLCByZXByZXNlbnRhdGlvbnMsIGZvbGRlciwgb25TdWNjZXNzLCBvbkZhaWx1cmUsIHRydWUsIGluZm8uc3RhdHVzKTtcbiAgICB9XG4gIH0pO1xufTtcblxuLyoqXG4gKiBVcGRhdGUgZG93bmxvYWQgZm9sZGVyIHBhdGhcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYW5pZmVzdElkIC0gbWFuaWZlc3QgaWRlbnRpZmllclxuICogQHBhcmFtIHtzdHJpbmd9IGRvd25sb2FkRm9sZGVyIC0gbmV3IGRvd25sb2FkIGZvbGRlclxuICogQHBhcmFtIHtmdW5jdGlvbn0gb25TdWNjZXNzIC0gY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIHN0YXJ0IGhhcyBiZWVuIHN1Y2Nlc3NmdWxseVxuICogQHBhcmFtIHtmdW5jdGlvbn0gb25GYWlsdXJlIC0gY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIHN0YXJ0IGZhaWxlZFxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbkRvd25sb2Fkc0NvbnRyb2xsZXIucHJvdG90eXBlLnVwZGF0ZURvd25sb2FkRm9sZGVyID0gZnVuY3Rpb24gKG1hbmlmZXN0SWQsIGRvd25sb2FkRm9sZGVyLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSkge1xuICBQcm9taXNlLmFsbChbXG4gICAgbmV3IFJlYWRJdGVtKG1hbmlmZXN0SWQsIGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkuc3RvcmVzLk1BTklGRVNUKSxcbiAgXSlcbiAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0cykge1xuICAgICAgY29uc3QgbWFuaWZlc3RTZXR0aW5ncyA9IHJlc3VsdHNbMF1cbiAgICAgIGlmICghbWFuaWZlc3RTZXR0aW5ncykge1xuICAgICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5tYW5pZmVzdHMuTk9UX0ZPVU5ELCBtYW5pZmVzdElkKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbWFuaWZlc3RTZXR0aW5ncy5mb2xkZXIgPSBkb3dubG9hZEZvbGRlclxuICAgICAgY29uc3QgZmx1c2hJdGVtID0gbmV3IEZsdXNoSXRlbShtYW5pZmVzdElkLCBhcHBTZXR0aW5ncy5nZXRTZXR0aW5ncygpLnN0b3Jlcy5NQU5JRkVTVCwgbWFuaWZlc3RTZXR0aW5ncyk7XG4gICAgICBmbHVzaEl0ZW0uc2F2ZSgpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBvblN1Y2Nlc3MoKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIG9uRmFpbHVyZSh0cmFuc2xhdGlvbi5nZXRFcnJvcih0cmFuc2xhdGlvbi5lLmRvd25sb2Fkcy5TQVZJTkdfREFUQV9GQUlMRUQsIG1hbmlmZXN0SWQpLCBlcnIpO1xuICAgICAgICB9KTtcbiAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBvbkZhaWx1cmUodHJhbnNsYXRpb24uZ2V0RXJyb3IodHJhbnNsYXRpb24uZS5kb3dubG9hZHMuVVBEQVRFX0RPV05MT0FEX0ZPTERFUl9GQUlMRUQsIG1hbmlmZXN0SWQpLCBlcnIpO1xuICAgIH0pXG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFuaWZlc3RJZCAtIG1hbmlmZXN0IGlkZW50aWZpZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uU3VjY2VzcyAtIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgd2hlbiBzdG9wIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseVxuICogQHBhcmFtIHtmdW5jdGlvbn0gb25GYWlsdXJlIC0gY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIHN0b3AgZmFpbGVkXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuRG93bmxvYWRzQ29udHJvbGxlci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uIChtYW5pZmVzdElkLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSkge1xuICB0aGlzLl9zdG9wV2l0aFN0YXR1cyhtYW5pZmVzdElkLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSwgU1RBVFVTRVMuU1RPUFBFRClcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYW5pZmVzdElkIC0gbWFuaWZlc3QgaWRlbnRpZmllclxuICogQHBhcmFtIHtib29sZWFufSBpZ25vcmVTdG9wcGVkIC0gZG9uJ3QgZmFpbCBpZiBkb3dubG9hZCBoYXMgYmVlbiBhbHJlYWR5IHN0b3BwZWRcbiAqIEByZXR1cm5zIHtQcm9taXNlfSAtIHByb21pc2VcbiAqL1xuRG93bmxvYWRzQ29udHJvbGxlci5wcm90b3R5cGUuc3RvcFByb21pc2UgPSBmdW5jdGlvbiAobWFuaWZlc3RJZCwgaWdub3JlU3RvcHBlZCkge1xuICBjb25zdCBzZWxmID0gdGhpcztcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBzZWxmLnN0b3AobWFuaWZlc3RJZCwgcmVzb2x2ZSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBpZiAoaWdub3JlU3RvcHBlZCAmJiBlcnIuY29kZSA9PT0gQ09ERVMuRVJST1JTLlNUT1BQRUQpIHtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZSgpXG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hbmlmZXN0SWQgLSBtYW5pZmVzdCBpZGVudGlmaWVyXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gLSBwcm9taXNlXG4gKi9cbkRvd25sb2Fkc0NvbnRyb2xsZXIucHJvdG90eXBlLnJlbW92ZVByb21pc2UgPSBmdW5jdGlvbiAobWFuaWZlc3RJZCkge1xuICBjb25zdCBzZWxmID0gdGhpcztcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBzZWxmLnN0b3BQcm9taXNlKG1hbmlmZXN0SWQpXG4gICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYuc3RvcmFnZS5yZW1vdmVJdGVtKG1hbmlmZXN0SWQpXG4gICAgICAgICAgLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgLy9hbHJlYWR5IHN0b3BwZWQsIGNvbnRpbnVlXG4gICAgICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgPT09IENPREVTLkVSUk9SUy5TVE9QUEVEKSB7XG4gICAgICAgICAgc2VsZi5zdG9yYWdlLnJlbW92ZUl0ZW0obWFuaWZlc3RJZClcbiAgICAgICAgICAgIC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9KTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYW5pZmVzdElkIC0gbWFuaWZlc3QgaWRlbnRpZmllclxuICogQHBhcmFtIHtvYmplY3R9IGxpbmsgLSBvYmplY3QgbGluayB0byBiZSBkb3dubG9hZGVkXG4gKiBAcHJpdmF0ZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbkRvd25sb2Fkc0NvbnRyb2xsZXIucHJvdG90eXBlLl9hZGRMaW5rVG9Eb3dubG9hZCA9IGZ1bmN0aW9uIChtYW5pZmVzdElkLCBsaW5rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBPYmplY3QuYXNzaWduKHt9LCBsaW5rKTtcbiAgY29uc3QgZG93bmxvYWQgPSBuZXcgRG93bmxvYWQocGFyYW1zLCBzZWxmLnN0b3JhZ2UucGFyYW1zLmdldEl0ZW0obWFuaWZlc3RJZCwgc2VsZi5fbmFtZXMub3B0aW9ucykpO1xuICBjb25zdCBkb3dubG9hZEhhc2ggPSBzZWxmLl9nZXREb3dubG9hZEhhc2gobGluayk7XG4gIHNlbGYuc3RvcmFnZS5kb3dubG9hZGluZy5zZXRJdGVtKG1hbmlmZXN0SWQsIGRvd25sb2FkSGFzaCwgZG93bmxvYWQpO1xuICBzZWxmLnN0b3JhZ2Uuc3RhdHVzLnNldEl0ZW0obWFuaWZlc3RJZCwgXCJsZWZ0XCIsIHNlbGYuc3RvcmFnZS5sZWZ0LmNvdW50KG1hbmlmZXN0SWQpICsgc2VsZi5zdG9yYWdlLmVycm9ycy5jb3VudChtYW5pZmVzdElkKSk7XG4gIHNlbGYuc3RvcmFnZS5zeW5jKG1hbmlmZXN0SWQsIHNlbGYuc3RvcmFnZS5zdG9yZXMuU1RBVFVTKTtcbiAgZG93bmxvYWQuZXZlbnRzLm9uKFwiZW5kXCIsIHNlbGYuX29uRG93bmxvYWRFbmQpO1xuICBkb3dubG9hZC5ldmVudHMub24oXCJlcnJvclwiLCBzZWxmLl9vbkRvd25sb2FkRXJyb3IpO1xuICBkb3dubG9hZC5zdGFydCgpO1xuXG4gIHJldHVybiBkb3dubG9hZDtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBbbmV4dE1hbmlmZXN0UG9zaXRpb25JbkFycmF5XSAtIGluZGV4IGZyb20gYXJyYXkgdG8gZGVjaWRlIHdoaWNoIG1hbmlmZXN0IHNob3VsZCBiZSBkb3dubG9hZGVkIG5leHRcbiAqICAgKHF1ZXVlKVxuICogQHBhcmFtIHtib29sZWFufSBmb3JjZURvd25sb2FkIHRydWUgdG8gZm9yY2UgbmV4dCBkb3dubG9hZCB0byBiZSBxdWV1ZWRcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5Eb3dubG9hZHNDb250cm9sbGVyLnByb3RvdHlwZS5zdGFydFF1ZXVlID0gZnVuY3Rpb24gKG5leHRNYW5pZmVzdFBvc2l0aW9uSW5BcnJheSwgZm9yY2VEb3dubG9hZCkge1xuICBsZXQgY291bnQsIGRvd25sb2Fkc0luUHJvZ3Jlc3MsIGxpbmssIG1hbmlmZXN0SWQsIG1heERvd25sb2FkcztcbiAgaWYgKHR5cGVvZiBuZXh0TWFuaWZlc3RQb3NpdGlvbkluQXJyYXkgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBuZXh0TWFuaWZlc3RQb3NpdGlvbkluQXJyYXkgPSAwO1xuICB9XG5cbiAgbWFuaWZlc3RJZCA9IHRoaXMuX2Rvd25sb2FkT3JkZXJHZXRNYW5pZmVzdElkKG5leHRNYW5pZmVzdFBvc2l0aW9uSW5BcnJheSk7XG4gIGlmIChtYW5pZmVzdElkICYmIHRoaXMuaXNEb3dubG9hZEZpbmlzaGVkKG1hbmlmZXN0SWQpKSB7XG4gICAgLy8gdGhlIG1hbmlmZXN0IGlkIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHF1ZXVlLCB3YWl0IG5leHQgdGltZS4gVGh1cywgZG8gbm90IGNoYW5nZSBzdGF0dXNcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG5leHRNYW5pZmVzdFBvc2l0aW9uSW5BcnJheSA+PSBhcHBTZXR0aW5ncy5nZXRTZXR0aW5ncygpLm51bWJlck9mTWFuaWZlc3RzSW5QYXJhbGxlbCkge1xuICAgIGlmIChtYW5pZmVzdElkKSB7XG4gICAgICB0aGlzLnN0b3JhZ2Uuc3RhdHVzLnNldEl0ZW0obWFuaWZlc3RJZCwgXCJzdGF0dXNcIiwgU1RBVFVTRVMuUVVFVUVEKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc3RvcmFnZS5zdGF0dXMuc2V0SXRlbShtYW5pZmVzdElkLCBcInN0YXR1c1wiLCBTVEFUVVNFUy5TVEFSVEVEKTtcbiAgfVxuXG4gIGlmICghbWFuaWZlc3RJZCkge1xuICAgIGNvdW50ID0gMDtcbiAgICBsZXQgaSwgaiwgaXRlbXM7XG4gICAgaXRlbXMgPSB0aGlzLnN0b3JhZ2UuZ2V0S2V5cygpO1xuICAgIGZvciAoaSA9IDAsIGogPSBpdGVtcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIGNvdW50ICs9IHRoaXMuc3RvcmFnZS5wYXJhbXMuY291bnQoaXRlbXNbaV0sIHRoaXMuX25hbWVzLmRvd25sb2FkSW5Qcm9ncmVzcyk7XG4gICAgfVxuICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgdGhpcy5kb3dubG9hZFN0YXRzLnN0b3AoKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGRvd25sb2Fkc0luUHJvZ3Jlc3MgPSB0aGlzLnN0b3JhZ2UucGFyYW1zLmdldEl0ZW0obWFuaWZlc3RJZCwgdGhpcy5fbmFtZXMuZG93bmxvYWRJblByb2dyZXNzKTtcbiAgbWF4RG93bmxvYWRzID0gdGhpcy5zdG9yYWdlLnBhcmFtcy5nZXRJdGVtKG1hbmlmZXN0SWQsIHRoaXMuX25hbWVzLm1heERvd25sb2FkSW5Qcm9ncmVzcyk7XG4gIGlmICgoZG93bmxvYWRzSW5Qcm9ncmVzcyA8IG1heERvd25sb2FkcyAtIDEpIHx8IGZvcmNlRG93bmxvYWQpIHtcbiAgICBsaW5rID0gdGhpcy5zdG9yYWdlLmxlZnQuc2hpZnQobWFuaWZlc3RJZCk7XG4gICAgaWYgKGxpbmspIHtcbiAgICAgIHRoaXMuc3RvcmFnZS5wYXJhbXMuaW5jcmVhc2UobWFuaWZlc3RJZCwgdGhpcy5fbmFtZXMuZG93bmxvYWRJblByb2dyZXNzKTtcbiAgICAgIHRoaXMuX2FkZExpbmtUb0Rvd25sb2FkKG1hbmlmZXN0SWQsIGxpbmspO1xuICAgIH0gZWxzZSB7XG4gICAgICAvL2NoZWNrIG5leHQgbWFuaWZlc3RcbiAgICAgIG5leHRNYW5pZmVzdFBvc2l0aW9uSW5BcnJheSsrO1xuICAgIH1cbiAgICB0aGlzLnN0YXJ0UXVldWUobmV4dE1hbmlmZXN0UG9zaXRpb25JbkFycmF5KTtcbiAgfSBlbHNlIGlmIChhcHBTZXR0aW5ncy5nZXRTZXR0aW5ncygpLm51bWJlck9mTWFuaWZlc3RzSW5QYXJhbGxlbCA+IDEgJiYgbmV4dE1hbmlmZXN0UG9zaXRpb25JbkFycmF5IDwgYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5udW1iZXJPZk1hbmlmZXN0c0luUGFyYWxsZWwpIHtcbiAgICBuZXh0TWFuaWZlc3RQb3NpdGlvbkluQXJyYXkrKztcbiAgICB0aGlzLnN0YXJ0UXVldWUobmV4dE1hbmlmZXN0UG9zaXRpb25JbkFycmF5KTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEb3dubG9hZHNDb250cm9sbGVyO1xuIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiX3JlcXVpcmUiLCJta2RpcnAiLCJhcHBTZXR0aW5ncyIsInRyYW5zbGF0aW9uIiwiRG93bmxvYWQiLCJEb3dubG9hZHNTdG9yYWdlQ29udHJvbGxlciIsImRvd25sb2FkVXRpbCIsIkRvd25sb2FkU3RhdHMiLCJTVEFUVVNFUyIsIkNPREVTIiwiY29uc3RhbnRzIiwidXRpbFVybCIsInBhdGgiLCJSZWFkSXRlbSIsIkZsdXNoSXRlbSIsImRvd25sb2FkRmlsZVV0aWwiLCJEb3dubG9hZHNDb250cm9sbGVyIiwibWFuaWZlc3RDb250cm9sbGVyIiwib2ZmbGluZUNvbnRyb2xsZXIiLCJfbWFuaWZlc3RzRG93bmxvYWRPcmRlciIsIl9tYW5pZmVzdHNEb3dubG9hZE9yZGVyT2JqIiwiX21hbmlmZXN0Q29udHJvbGxlciIsIl9vZmZsaW5lQ29udHJvbGxlciIsInN0b3JhZ2UiLCJzZXREb3dubG9hZFN0b3JhZ2UiLCJfbmFtZXMiLCJkb3dubG9hZEluUHJvZ3Jlc3MiLCJvcHRpb25zIiwibWF4RG93bmxvYWRJblByb2dyZXNzIiwiX1NUQVRTX1RJTUVfR0VORVJBVElPTiIsImRvd25sb2FkU3RhdHMiLCJiaW5kQWxsIiwicHJvdG90eXBlIiwiX2FkZERvd25sb2FkcyIsIm1hbmlmZXN0SWQiLCJ2aWRlb0xpbmtzIiwiYXVkaW9MaW5rcyIsInRleHRMaW5rcyIsIndvcmtpbmciLCJfcHJlcGFyZVN0YXJ0T3B0aW9ucyIsInJhdGlvQXVkaW9WaWRlbyIsImxlbmd0aCIsIk1hdGgiLCJyb3VuZCIsInJhdGlvVGV4dFZpZGVvIiwiX2FkZE5leHRJdGVtVG9RdWV1ZSIsImxpbmtzIiwibmJJdGVtcyIsImxpbmsiLCJzaGlmdCIsImxlZnQiLCJwdXNoIiwiX2Rvd25sb2FkT3JkZXJBZGRNYW5pZmVzdCIsImFzRmlyc3QiLCJfZG93bmxvYWRPcmRlck1hbmlmZXN0RXhpc3RzIiwidW5zaGlmdCIsIl9kb3dubG9hZE9yZGVyR2V0TWFuaWZlc3RJZCIsIm5leHRNYW5pZmVzdFBvc2l0aW9uSW5BcnJheSIsIl9pbmRleE9mTWFuaWZlc3QiLCJpbmRleE9mIiwiX2Rvd25sb2FkT3JkZXJSZW1vdmVNYW5pZmVzdCIsImZvdW5kIiwiaSIsImoiLCJzcGxpY2UiLCJfZmluaXNoIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwicmVmcmVzaCIsInN0b3AiLCJyZW1vdmVJdGVtIiwidGhlbiIsIl9nZXREb3dubG9hZEhhc2giLCJyZW1vdGVVcmwiLCJsb2NhbFVybCIsIl9tYXJrRG93bmxvYWRJdGVtIiwiZG93bmxvYWQiLCJzZWxmIiwiZG93bmxvYWRIYXNoIiwic3luY1N0b3JhZ2VLZXlzIiwibGFzdEl0ZW0iLCJldmVudHMiLCJyZW1vdmVMaXN0ZW5lciIsIl9vbkRvd25sb2FkRW5kIiwiX29uRG93bmxvYWRFcnJvciIsImRvd25sb2FkaW5nIiwiY291bnQiLCJzdGF0dXMiLCJGSU5JU0hFRCIsImRvd25sb2FkZWQiLCJzdG9yZXMiLCJET1dOTE9BRFMiLCJET1dOTE9BREVEIiwiZXJyb3JzIiwiaXNEb3dubG9hZEZpbmlzaGVkIiwic2V0SXRlbSIsIkVSUk9SIiwiU1RBVFVTIiwic3luYyIsInBhcmFtcyIsImRlY3JlYXNlIiwic3RhcnRRdWV1ZSIsImNvbnNvbGUiLCJpbmZvIiwiZXJyIiwiZXJyb3IiLCJfc3RvcFdpdGhTdGF0dXMiLCJzdGF0dXNEZXRhaWxzIiwiZ2V0SXRlbSIsInJlc3VsdCIsImdldEVycm9yIiwiZSIsImRvd25sb2FkcyIsIkFMUkVBRFlfU1RPUFBFRCIsIml0ZW1zVG9TdG9wIiwiZ2V0S2V5cyIsIml0ZW1Ub1N0b3AiLCJwcm9taXNlcyIsInN0b3BQcm9taXNlIiwiUHJvbWlzZSIsImFsbCIsIlNUT1BQSU5HX0ZBSUxFRCIsIk5PX1NQQUNFX0xFRlRfRVJST1IiLCJnZXRTZXR0aW5ncyIsInN0b3BPbkVycm9yIiwiZmFpbHVyZSIsInRocmVhZFJ1bGVzIiwiZG93bmxvYWRpbmdUaHJlYWRzUnVsZXMiLCJpdGVtcyIsIm1heCIsInRocmVhZE5hbWUiLCJ0aHJlYWRzIiwiZmlsZXMiLCJpc0Rvd25sb2FkRmluaXNoZWRBbmRTeW5jZWQiLCJrZXlFeGlzdHMiLCJnZXREb3dubG9hZGluZyIsImxvY2FsRmlsZSIsImdldEl0ZW1zIiwiaGFzT3duUHJvcGVydHkiLCJkb3dubG9hZFBhdGgiLCJub3JtYWxpemUiLCJsb2NhbCIsIndhaXRGb3JEb3dubG9hZCIsImNhbGxiYWNrIiwib24iLCJwZXJmb3JtU2VlayIsImluZGV4IiwiZmluZEluZGV4IiwicGFydDEiLCJzbGljZSIsInBhcnQyIiwiY2xlYXIiLCJjb25jYXQiLCJzdGFydCIsInJlcHJlc2VudGF0aW9ucyIsImRvd25sb2FkRm9sZGVyIiwiZnJvbVJlc3VtZWQiLCJvbGRzdGF0dXMiLCJtYW5pZmVzdCIsImdldE1hbmlmZXN0QnlJZCIsIm1hbmlmZXN0cyIsIk5PVF9GT1VORCIsInZpZGVvIiwiQXJyYXkiLCJpc0FycmF5IiwiYXVkaW8iLCJ0ZXh0IiwidmlkZW9SIiwiZ2V0VmlkZW9SZXByZXNlbnRhdGlvbnMiLCJhdWRpb1IiLCJnZXRBdWRpb1JlcHJlc2VudGF0aW9ucyIsInRleHRSIiwiZ2V0VGV4dFJlcHJlc2VudGF0aW9ucyIsImxvY2FsRG93bmxvYWRGb2xkZXIiLCJyZXNvbHZlIiwiZG93bmxvYWRzRm9sZGVyUGF0aCIsImxvY2FsUGF0aCIsIm1hbmlmZXN0VXJsIiwiZ2V0TWFuaWZlc3RVcmwiLCJtYW5pZmVzdE5hbWUiLCJnZXRNYW5pZmVzdE5hbWUiLCJnZXRNYW5pZmVzdEJhc2VVcmwiLCJ4bWwiLCJtYW5pZmVzdFVybERvbWFpbiIsIm1hbmlmZXN0QmFzZVVybCIsIk1QRCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiY2hpbGROb2RlcyIsIm5vZGVOYW1lIiwidGV4dENvbnRlbnQiLCJtYXRjaCIsInJlZ2V4cFByb3RvY29sUmVtb3ZlIiwiam9pblBhdGgiLCJnZXRNYW5pZmVzdEluZm9Qcm9taXNlIiwicmVzdWx0cyIsInN0b3JhZ2VJdGVtIiwiQUxSRUFEWV9SRVNVTUVEIiwiQUxSRUFEWV9TVEFSVEVEIiwidW5pb24iLCJkb3dubG9hZGVkRmlsZXMiLCJkb3dubG9hZGVkSGFzaCIsInJlbW90ZVBhdGgiLCJtYW5pZmVzdFhNTCIsInVybF9kb21haW4iLCJnZXREb3dubG9hZExpbmtzIiwiYWxsdmlkZW9MaW5rcyIsImdldEFsbExpbmtzIiwiYWxsYXVkaW9MaW5rcyIsImFsbHRleHRMaW5rcyIsImFsbEZpbGVzIiwiY3JlYXRlSWZOb3RFeGlzdHMiLCJEYXRlIiwiZ2V0VGltZSIsIkNSRUFURUQiLCJNQU5JRkVTVCIsInNhdmVPcmlnaW5hbE1hbmlmZXN0T25jZU9ubHkiLCJzYXZlTWFuaWZlc3RXaXRoQ2hvc2VuUmVwcmVzZW50YXRpb25zIiwibnVtYmVyT2ZNYW5pZmVzdHNJblBhcmFsbGVsIiwiUVVFVUVEIiwiU1RBUlRFRCIsInJlc3VtZSIsImdldE1hbmlmZXN0SW5mbyIsIlJFU1VNSU5HX0ZBSUxFRCIsImZvbGRlciIsInVwZGF0ZURvd25sb2FkRm9sZGVyIiwibWFuaWZlc3RTZXR0aW5ncyIsImZsdXNoSXRlbSIsInNhdmUiLCJTQVZJTkdfREFUQV9GQUlMRUQiLCJVUERBVEVfRE9XTkxPQURfRk9MREVSX0ZBSUxFRCIsIlNUT1BQRUQiLCJpZ25vcmVTdG9wcGVkIiwicmVqZWN0IiwiY29kZSIsIkVSUk9SUyIsInJlbW92ZVByb21pc2UiLCJfYWRkTGlua1RvRG93bmxvYWQiLCJPYmplY3QiLCJhc3NpZ24iLCJmb3JjZURvd25sb2FkIiwiZG93bmxvYWRzSW5Qcm9ncmVzcyIsIm1heERvd25sb2FkcyIsImluY3JlYXNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///785\n')},8910:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('/*eslint no-console: ["error", { allow: ["warn", "error", "info"] }] */\n\n\nvar _ = __webpack_require__(4952);\nvar appSettings = __webpack_require__(8557);\nvar ArrayStorage = __webpack_require__(1730);\nvar ArrayStorageBridge = __webpack_require__(4692);\nvar FlushItem = __webpack_require__(8381);\nvar Storage = __webpack_require__(6351);\nvar StorageBridge = __webpack_require__(3575);\nvar SyncItem = __webpack_require__(1587);\n\n/**\n *\n * @constructor\n */\nfunction DownloadsStorageController() {\n  this.stores = appSettings.getSettings().stores;\n  this._items = {};\n  this._syncItems = [];\n  this._FLUSH_TIME = 50; //in miliseconds\n  this._flushThrottled = _.throttle(this._flush, this._FLUSH_TIME, {\n    leading: false\n  });\n  this._createDummyStorageBridge();\n}\n\n/**\n *\n * @private\n * @param {string} manifestId - manifest identifier\n * @param {string} key - key identifier\n * @returns {void}\n */\nDownloadsStorageController.prototype._createArrayStorage = function (manifestId, key) {\n  if (!this[key]) {\n    this._createArrayStorageBridge(key);\n  }\n  this._items[manifestId][key] = new ArrayStorage();\n};\n\n/**\n *\n * @private\n * @param {string} key - key identifier\n * @returns {void}\n */\nDownloadsStorageController.prototype._createArrayStorageBridge = function (key) {\n  this[key] = new ArrayStorageBridge(this, key);\n};\nDownloadsStorageController.prototype._createDummyStorageBridge = function () {\n  this._createArrayStorageBridge(this.stores.DOWNLOADS.LEFT);\n  this._createArrayStorageBridge(this.stores.DOWNLOADS.DOWNLOADED);\n  this._createStorageBridge(this.stores.DOWNLOADS.DOWNLOADING);\n  this._createArrayStorageBridge(this.stores.DOWNLOADS.ERRORS);\n  this._createStorageBridge(this.stores.PARAMS);\n  this._createStorageBridge(this.stores.MANIFEST);\n  this._createStorageBridge(this.stores.STATUS);\n};\n\n/**\n *\n * @private\n * @param {string} manifestId - manifest identifier\n * @param {string} key - key identifier\n * @returns {void}\n */\nDownloadsStorageController.prototype._createStorage = function (manifestId, key) {\n  if (!this[key]) {\n    this._createStorageBridge(key);\n  }\n  this._items[manifestId][key] = new Storage();\n};\n\n/**\n *\n * @private\n * @param {string} key - key identifier\n * @returns {void}\n */\nDownloadsStorageController.prototype._createStorageBridge = function (key) {\n  this[key] = new StorageBridge(this, key);\n};\n\n/**\n *\n * @private\n * @returns {void}\n */\nDownloadsStorageController.prototype._flush = function () {\n  var self = this;\n  var items = this._syncItems.splice(0, this._syncItems.length);\n  var flushItem, flushItems, i, item, j, k, l, manifestId, storageKey, storageKeys, storagesToFlush;\n  storagesToFlush = {};\n  function getItems(manifestId, storageKey) {\n    if (self._items[manifestId] && self._items[manifestId][storageKey]) {\n      return self._items[manifestId][storageKey].getItems();\n    } else {\n      return [];\n    }\n  }\n\n  //collect information which storages needs to be saved\n  for (i = 0, j = items.length; i < j; i++) {\n    item = items[i];\n    storagesToFlush[item.manifestId] = storagesToFlush[item.manifestId] || {};\n    for (k = 0, l = item.storageKeys.length; k < l; k++) {\n      storagesToFlush[item.manifestId][item.storageKeys[k]] = true;\n    }\n  }\n  flushItems = [];\n\n  //create flush items - promises that needs to be resolved together in parallel\n  for (manifestId in storagesToFlush) {\n    storageKeys = storagesToFlush[manifestId];\n    for (storageKey in storageKeys) {\n      try {\n        flushItem = new FlushItem(manifestId, storageKey, getItems(manifestId, storageKey));\n        flushItems.push(flushItem.save());\n      } catch (e) {\n        console.error("ERROR", storageKey);\n      }\n    }\n  }\n  Promise.all(flushItems).then(function () {\n    var i, j;\n    for (i = 0, j = items.length; i < j; i++) {\n      items[i].resolve();\n    }\n  }, function () {\n    var i, j;\n    for (i = 0, j = items.length; i < j; i++) {\n      items[i].reject();\n    }\n  });\n};\n\n/**\n *\n * @private\n * @param {Array} [storageKey] storage key\n * @returns {Array} keys for all storages\n */\nDownloadsStorageController.prototype._getAllStorageKeys = function (storageKey) {\n  var keys = [];\n  storageKey = storageKey || this.stores;\n  for (var key in storageKey) {\n    if (storageKey.hasOwnProperty(key)) {\n      if (typeof storageKey[key] === "string") {\n        //params don\'t need to be stored to disk\n        if (key !== this.stores.PARAMS) {\n          keys.push(storageKey[key]);\n        }\n      } else {\n        keys = keys.concat(this._getAllStorageKeys(storageKey[key]));\n      }\n    }\n  }\n  return keys;\n};\n\n/**\n *\n * @private\n * @param {string} storageKey storage key identifier\n * @param {string} bridgeMethodName method name to be called\n * @param {string} manifestId - manifest identifier\n * @returns {*} items\n */\nDownloadsStorageController.prototype._itemAction = function (storageKey, bridgeMethodName, manifestId) {\n  var args = [],\n    i,\n    j;\n\n  //collect all other parameters except those already listed\n  for (i = 3, j = arguments.length; i < j; i++) {\n    args.push(arguments[i]);\n  }\n  if (this._items[manifestId] && this._items[manifestId][storageKey] && this._items[manifestId][storageKey][bridgeMethodName]) {\n    return this._items[manifestId][storageKey][bridgeMethodName].apply(this._items[manifestId][storageKey], args);\n  } else {\n    //if manifest still exists\n    if (this._items[manifestId]) {\n      console.error("ERROR", manifestId, storageKey, bridgeMethodName, args);\n    }\n    return undefined;\n  }\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Array} [storageKeys] storage keys that will be cleared\n * @returns {Promise} promise\n */\nDownloadsStorageController.prototype.clear = function (manifestId, storageKeys) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    storageKeys = storageKeys || self._getAllStorageKeys();\n    if (self._items[manifestId]) {\n      for (var i = 0, j = storageKeys.length; i < j; i++) {\n        var storage = self._items[manifestId][storageKeys[i]];\n        if (storage) {\n          storage.clear();\n        }\n      }\n    }\n    delete self._items[manifestId];\n    self.sync(manifestId, storageKeys).then(resolve, reject);\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\nDownloadsStorageController.prototype.create = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self._items[manifestId] = {};\n    self._createArrayStorage(manifestId, self.stores.DOWNLOADS.LEFT);\n    self._createArrayStorage(manifestId, self.stores.DOWNLOADS.DOWNLOADED);\n    self._createStorage(manifestId, self.stores.DOWNLOADS.DOWNLOADING);\n    self._createArrayStorage(manifestId, self.stores.DOWNLOADS.ERRORS);\n    self._createStorage(manifestId, self.stores.PARAMS);\n    self._createStorage(manifestId, self.stores.MANIFEST);\n    self._createStorage(manifestId, self.stores.STATUS);\n    self.sync(manifestId, [self.stores.DOWNLOADS.DOWNLOADED, self.stores.MANIFEST, self.stores.STATUS]).then(resolve, reject);\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\nDownloadsStorageController.prototype.createIfNotExists = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self.getItem(manifestId).then(function (result) {\n      if (result) {\n        resolve();\n      } else {\n        self.create(manifestId).then(resolve, reject);\n      }\n    }, reject);\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\nDownloadsStorageController.prototype.getItem = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve) {\n    resolve(self._items[manifestId]);\n  });\n};\n\n/**\n *\n * @returns {string[]} keys of all items\n */\nDownloadsStorageController.prototype.getKeys = function () {\n  return Object.keys(this._items);\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {boolean} if certain manifest id exists\n */\nDownloadsStorageController.prototype.keyExists = function (manifestId) {\n  return !!this._items[manifestId];\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\nDownloadsStorageController.prototype.removeItem = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve) {\n    delete self._items[manifestId];\n    resolve();\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Array} [storageKeys] storage keys that will be synced\n * @returns {Promise} promise\n */\nDownloadsStorageController.prototype.sync = function (manifestId, storageKeys) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    if (typeof storageKeys === "undefined") {\n      reject("Storage key is missing");\n      return;\n    }\n    if (typeof storageKeys === "string") {\n      storageKeys = [storageKeys];\n    }\n    if (appSettings.getSettings().saveToDisk) {\n      self._syncItems.push(new SyncItem(resolve, reject, manifestId, storageKeys));\n      self._flushThrottled();\n    } else {\n      resolve();\n    }\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\nDownloadsStorageController.prototype.syncAll = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    if (appSettings.getSettings().saveToDisk) {\n      var storageKeys = self._getAllStorageKeys();\n      self._syncItems.push(new SyncItem(resolve, reject, manifestId, storageKeys));\n      self._flushThrottled();\n    } else {\n      resolve();\n    }\n  });\n};\nmodule.exports = DownloadsStorageController;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8910\n')},8948:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar XMLSerializer = (__webpack_require__(678).XMLSerializer);\nvar appSettings = __webpack_require__(8557);\nvar parseManifestWithChoosenRepresentations = __webpack_require__(3064);\nvar downloadFileUtil = __webpack_require__(6003);\nvar saveFile = __webpack_require__(6744);\nvar translation = __webpack_require__(5847);\n\n/**\n *\n * @constructor\n */\nfunction ManifestController() {\n  this._manifests = {};\n}\n\n/**\n *\n * @param {object} manifest manifest object\n * @returns {void}\n */\nManifestController.prototype.cacheManifest = function (manifest) {\n  this._manifests[manifest.id] = manifest;\n};\n\n/**\n *\n * @param {Array|number|string} [manifestIds] manifests identifiers\n * @returns {*} manifests\n */\nManifestController.prototype.getManifests = function (manifestIds) {\n  var selectedManifests;\n  if (typeof manifestIds === "undefined") {\n    selectedManifests = this._manifests;\n  } else if (typeof manifestIds === "number" || typeof manifestIds === "string") {\n    selectedManifests = [this._manifests[String(manifestIds)]];\n  } else {\n    selectedManifests = [];\n    for (var i = 0, j = manifestIds.length; i < j; i++) {\n      if (this._manifests[manifestIds[i]]) {\n        selectedManifests.push(this._manifests[manifestIds[i]]);\n      }\n    }\n  }\n  return selectedManifests;\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {*} manifest\n */\nManifestController.prototype.getManifestById = function (manifestId) {\n  if (typeof manifestId === "number" || typeof manifestId === "string") {\n    return this._manifests[String(manifestId)];\n  }\n};\n\n/**\n *\n * @param {Array|number|string} [manifestIds] manifests identifiers\n * @returns {Array} manifests infomrations\n */\nManifestController.prototype.getManifestsInfo = function (manifestIds) {\n  var manifests = [];\n  var selectedManifests = this.getManifests(manifestIds);\n  for (var i = 0, j = selectedManifests.length; i < j; i++) {\n    manifests.push(selectedManifests[i].getJsonInfo());\n  }\n  return manifests;\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {string} local path for manifest files\n */\nManifestController.prototype.getOriginalManifestLocalPath = function (manifestId) {\n  return appSettings.getSettings().settingsFolder + manifestId + "/";\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {*} manifest info\n */\nManifestController.prototype.getManifestInfoById = function (manifestId) {\n  var manifest = this.getManifestById(manifestId);\n  if (manifest) {\n    return manifest.getJsonInfo();\n  }\n};\n\n/**\n *\n * @param {Array|number|string} [manifestIds] manifests identifiers\n * @returns {void}\n */\nManifestController.prototype.removeFromCache = function (manifestIds) {\n  if (typeof manifestIds === "number" || typeof manifestIds === "string") {\n    manifestIds = [String(manifestIds)];\n  }\n  manifestIds = manifestIds || [];\n  for (var i = 0, j = manifestIds.length; i < j; i++) {\n    delete this._manifests[manifestIds[i]];\n  }\n};\nManifestController.prototype.removeFromCacheAll = function () {\n  this._manifests = [];\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} promise\n */\nManifestController.prototype.saveOriginalManifestOnceOnly = function (manifestId) {\n  var localPath = this.getOriginalManifestLocalPath(manifestId);\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    var manifest = self.getManifestById(manifestId);\n    if (!manifest) {\n      reject(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n      return;\n    }\n    downloadFileUtil.checkForLocalFile(localPath + manifest.getManifestName(), function (exists) {\n      if (exists) {\n        resolve();\n      } else {\n        var xmlSerializer = new XMLSerializer();\n        var manifestString;\n        try {\n          manifestString = xmlSerializer.serializeToString(manifest.getManifestXML());\n        } catch (err) {\n          reject(err);\n          return;\n        }\n        saveFile(localPath, manifest.getManifestName(), manifestString, function (err) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      }\n    });\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {object} representations representations to be saved\n * @param {string} downloadFolder - folder where all fragments are downloaded\n * @returns {Promise} promise\n */\nManifestController.prototype.saveManifestWithChosenRepresentations = function (manifestId, representations, downloadFolder) {\n  var localPath = downloadFolder;\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    var manifest = self.getManifestById(manifestId);\n    if (!manifest) {\n      reject(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n      return;\n    }\n    var manifestString;\n    try {\n      manifestString = parseManifestWithChoosenRepresentations(manifest, representations);\n    } catch (err) {\n      reject(err);\n      return;\n    }\n    saveFile(localPath, manifest.getManifestName(), manifestString, function (err) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\nmodule.exports = ManifestController;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8948\n')},3656:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar path = __webpack_require__(1017);\nvar getSize = __webpack_require__(6838);\nvar rmdir = __webpack_require__(943);\nvar appSettings = __webpack_require__(8557);\nvar ReadItem = __webpack_require__(2144);\nvar dirList = __webpack_require__(7182);\nvar Manifest = (__webpack_require__(7151)/* .Manifest */ .G);\nvar STATUSES = __webpack_require__(9773);\n\n/**\n *\n * @param {ManifestController} manifestController - reference to existing manifest controller\n * @constructor\n */\nfunction OfflineController(manifestController) {\n  this._manifestController = manifestController;\n}\n\n/**\n *\n * @param {Function} callback - function to be called when list is ready\n * @returns {void}\n */\nOfflineController.prototype.getManifestsList = function (callback) {\n  dirList(appSettings.getSettings().settingsFolder, true, false).then(function (settingsFolderList) {\n    var manifestList = [];\n    for (var i = 0, j = settingsFolderList.length; i < j; i++) {\n      manifestList.push(settingsFolderList[i]);\n    }\n    callback(null, manifestList);\n  }, function (err) {\n    callback(err);\n  });\n};\n\n/**\n *\n * @param {Function} callback - function to be called when list with info is ready\n * @param {Boolean} full - if downloaded info should contain all items or only the length\n * @returns {void}\n */\nOfflineController.prototype.getManifestsListWithInfo = function (callback, full) {\n  var self = this;\n  this.getManifestsList(function (err, list) {\n    if (err) {\n      callback(err);\n    } else {\n      var infoP = [];\n      for (var i = 0, j = list.length; i < j; i++) {\n        infoP.push(self.getManifestInfoPromise(list[i], full));\n      }\n      Promise.all(infoP).then(function (results) {\n        var newResults = [];\n        for (var _i = 0, _j = results.length; _i < _j; _i++) {\n          if (results[_i]) {\n            newResults.push(results[_i]);\n          }\n        }\n        callback(null, newResults);\n      }, function (promisesError) {\n        callback(promisesError);\n      });\n    }\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Function} callback - function to be called when info for manifest is ready\n * @param {Boolean} full - if downloaded info should contain all items or only the length\n * @returns {void}\n */\nOfflineController.prototype.getManifestInfo = function (manifestId, callback, full) {\n  var self = this;\n  function addManifestInfoAndContinue(info) {\n    var manifestName = info.manifest.name;\n    var manifestUrl = info.manifest.url;\n    var manifestLocalUrl = path.resolve(appSettings.getSettings().settingsFolder + "/" + manifestId + "/" + manifestName);\n    var manifest = self._manifestController.getManifestById(manifestId);\n    if (manifest) {\n      info.manifestInfo = manifest.getJsonInfo();\n      callback(null, info);\n    } else {\n      manifest = new Manifest(manifestId);\n      manifest.loadFromLocal(manifestLocalUrl, manifestUrl).then(function () {\n        self._manifestController.cacheManifest(manifest);\n        info.manifestInfo = manifest.getJsonInfo();\n        callback(null, info);\n      }, function (err) {\n        if (err && err.code === "ENOENT") {\n          callback();\n        } else {\n          callback(err);\n        }\n      });\n    }\n  }\n  Promise.all([new ReadItem(manifestId, appSettings.getSettings().stores.MANIFEST), new ReadItem(manifestId, appSettings.getSettings().stores.DOWNLOADS.DOWNLOADED), new ReadItem(manifestId, appSettings.getSettings().stores.STATUS), new ReadItem(manifestId, appSettings.getSettings().stores.PERSISTENT), new ReadItem(manifestId, appSettings.getSettings().stores.DATA)]).then(function (results) {\n    var info = {};\n    var manifestSettings = results[0] || {};\n    var downloaded = results[1] || [];\n    var status = results[2] || {};\n    var persistent = results[3] || \'\';\n    var data = results[4] || \'\';\n    info.status = status.status || STATUSES.BROKEN;\n    info.details = status.details || undefined;\n    if (!self.downloadStorage.keyExists(manifestId) && info.status === STATUSES.STARTED) {\n      info.status = STATUSES.BROKEN;\n    }\n    info.manifest = manifestSettings;\n    if (info.manifest.files) {\n      info.manifest.totalFiles = info.manifest.files.length;\n      if (full === false) {\n        delete info.manifest.files;\n      }\n    }\n    info.left = status.left || 0;\n    info.persistent = persistent;\n    info.downloaded = downloaded.length;\n    if (full) {\n      info.downloadedFiles = downloaded;\n    }\n    info.data = data;\n    addManifestInfoAndContinue(info);\n  }, callback);\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Function} callback - function to be called when info for manifest is ready\n * @returns {void}\n */\nOfflineController.prototype.getManifestFolderInfo = function (manifestId, callback) {\n  Promise.all([new ReadItem(manifestId, appSettings.getSettings().stores.MANIFEST)]).then(function (results) {\n    var info = {};\n    var manifestSettings = results[0] || {};\n    var downloadFolder = manifestSettings.folder;\n    if (!downloadFolder) {\n      // try to serve from default download folder\n      downloadFolder = appSettings.getSettings().downloadsFolderPath;\n    }\n    var videoFolder = path.join(downloadFolder, manifestId);\n    info.folder = videoFolder;\n\n    // get size of folder\n    getSize(videoFolder, function (err, size) {\n      if (err) {\n        info.size = 0;\n      } else {\n        info.size = size;\n      }\n      callback(null, info);\n    });\n  }, callback);\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Boolean} full - if downloaded info should contain all items or only the length\n * @returns {Promise} - promise\n */\nOfflineController.prototype.getManifestInfoPromise = function (manifestId, full) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self.getManifestInfo(manifestId, function (err, result) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(result);\n      }\n    }, full);\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Function} callback - callback with resolved info data about manifest - if such exists\n * @returns {void}\n */\nOfflineController.prototype.getManifestDataFile = function (manifestId, callback) {\n  new ReadItem(manifestId, appSettings.getSettings().stores.MANIFEST).then(function (data) {\n    callback(data);\n  }, function () {\n    callback();\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Function} onSuccess - callback to be invoked when remove has been successfully\n * @param {Function} onFailure - callback to be invoked when remove failed\n * @returns {void}\n */\nOfflineController.prototype.remove = function (manifestId, onSuccess, onFailure) {\n  var settingsFolder = appSettings.getSettings().settingsFolder + manifestId;\n  this.getManifestDataFile(manifestId, function (info) {\n    if (!info) {\n      // no manifest data found for manifest, the download has not been started => just remove settings\n      rmdir(settingsFolder, function (err) {\n        if (err && err.code !== "ENOENT") {\n          onFailure(err);\n        } else {\n          onSuccess();\n        }\n      });\n    } else {\n      var folder = info.folder;\n      if (!folder) {\n        // use default download folder path\n        folder = path.resolve(appSettings.getSettings().downloadsFolderPath);\n      }\n      var downloadsFolder = folder + \'/\' + manifestId;\n      rmdir(downloadsFolder, function (err) {\n        if (err && err.code !== "ENOENT") {\n          onFailure(err);\n        } else {\n          rmdir(settingsFolder, function (err) {\n            if (err && err.code !== "ENOENT") {\n              onFailure(err);\n            } else {\n              onSuccess();\n            }\n          });\n        }\n      });\n    }\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {Promise} - promise\n */\nOfflineController.prototype.removePromise = function (manifestId) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self.remove(manifestId, resolve, reject);\n  });\n};\n\n/**\n *\n * @returns {Promise} - promise\n */\nOfflineController.prototype.removeAllPromise = function () {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    var settingsFolder = appSettings.getSettings().settingsFolder;\n    self.getManifestsList(function (err, list) {\n      if (err) {\n        reject(err);\n      } else {\n        var removeP = [];\n        for (var i = 0, j = list.length; i < j; i++) {\n          removeP.push(self.removePromise(list[i]));\n        }\n        Promise.all(removeP).then(function () {\n          rmdir(settingsFolder, function (err) {\n            if (err && err.code !== "ENOENT") {\n              reject(err);\n            } else {\n              resolve();\n            }\n          });\n        }, function (err) {\n          reject(err);\n        });\n      }\n    });\n  });\n};\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {Function} onSuccess - callback to be invoked when restore has been successfully\n * @param {Function} onFailure - callback to be invoked when restore failed\n * @returns {void}\n */\nOfflineController.prototype.restoreLocalManifest = function (manifestId, onSuccess, onFailure) {\n  var self = this;\n  this.getManifestInfo(manifestId, function (err, info) {\n    var representations = {};\n    representations.video = info.manifest.video;\n    representations.audio = info.manifest.audio;\n    representations.text = info.manifest.text;\n    self._manifestController.saveManifestWithChosenRepresentations(manifestId, representations).then(onSuccess, onFailure);\n  });\n};\n\n/**\n *\n * @param {DownloadsStorageController} storage - downloads storage controller\n * @returns {void}\n */\nOfflineController.prototype.setDownloadStorage = function (storage) {\n  this.downloadStorage = storage;\n};\nmodule.exports = OfflineController;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3656\n')},8834:module=>{"use strict";eval('\n\n/**\n *\n * @constructor\n */\nfunction SubscribersController() {\n  this._subscribers = {};\n}\n\n/**\n *\n * @param {Subscriber} subscriber - subscriber\n * @returns {void}\n */\nSubscribersController.prototype.addSubscriber = function (subscriber) {\n  var id = subscriber.getId();\n  this._subscribers[id] = subscriber;\n  return id;\n};\n\n/**\n *\n * @param {Array|String} subscribersId - subscriber identifier\n * @returns {void}\n */\nSubscribersController.prototype.removeSubscribersById = function (subscribersId) {\n  if (typeof subscribersId === "string") {\n    subscribersId = [subscribersId];\n  }\n  for (var i = 0, j = subscribersId.length; i < j; i++) {\n    if (this._subscribers[subscribersId[i]]) {\n      this._subscribers[subscribersId[i]].remove();\n      delete this._subscribers[subscribersId[i]];\n    }\n  }\n};\n\n/**\n *\n * Remove all subscribers for certain manifest based on any subscriberId that belongs to this manifest\n * @param {Array|String} subscriberId - subscriber identifier\n * @returns {void}\n */\nSubscribersController.prototype.removeAllManifestSubscribersById = function (subscriberId) {\n  var subscriber = subscriberId && this._subscribers[subscriberId];\n  if (subscriber) {\n    this.unsubscribe(subscriber.getManifestId());\n  }\n};\n\n/**\n *\n * @param {Array|String} manifestIds - manifest or manifests identifier\n * @returns {void}\n */\nSubscribersController.prototype.unsubscribe = function (manifestIds) {\n  var subscribersId = [];\n  var manifestIdsHash = {};\n  if (typeof manifestIds === "string") {\n    manifestIds = [manifestIds];\n  }\n  manifestIds = manifestIds || [];\n  for (var i = 0, j = manifestIds.length; i < j; i++) {\n    manifestIdsHash[manifestIds[i]] = true;\n  }\n  for (var key in this._subscribers) {\n    if (this._subscribers.hasOwnProperty(key)) {\n      if (manifestIdsHash[this._subscribers[key].getManifestId()]) {\n        subscribersId.push(key);\n      }\n    }\n  }\n  this.removeSubscribersById(subscribersId);\n};\n\n/**\n * @returns {void}\n */\nSubscribersController.prototype.unsubscribeAll = function () {\n  for (var key in this._subscribers) {\n    if (this._subscribers.hasOwnProperty(key)) {\n      this._subscribers[key].remove();\n    }\n  }\n  this._subscribers = {};\n};\nmodule.exports = SubscribersController;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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OztBQUVEO0FBQ0E7QUFDQTtBQUNBUixxQkFBcUIsQ0FBQ0UsU0FBUyxDQUFDb0IsY0FBYyxHQUFHLFlBQVk7RUFDM0QsS0FBSyxJQUFJSCxHQUFHLElBQUksSUFBSSxDQUFDbEIsWUFBWSxFQUFFO0lBQ2pDLElBQUksSUFBSSxDQUFDQSxZQUFZLENBQUNtQixjQUFjLENBQUNELEdBQUcsQ0FBQyxFQUFFO01BQ3pDLElBQUksQ0FBQ2xCLFlBQVksQ0FBQ2tCLEdBQUcsQ0FBQyxDQUFDUCxNQUFNLENBQUMsQ0FBQztJQUNqQztFQUNGO0VBQ0EsSUFBSSxDQUFDWCxZQUFZLEdBQUcsQ0FBQyxDQUFDO0FBQ3hCLENBQUM7QUFFRHNCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHeEIscUJBQXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9jb250cm9sbGVycy9zdWJzY3JpYmVycy1jb250cm9sbGVyLmpzP2E4NDgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gU3Vic2NyaWJlcnNDb250cm9sbGVyICgpIHtcbiAgdGhpcy5fc3Vic2NyaWJlcnMgPSB7fTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHtTdWJzY3JpYmVyfSBzdWJzY3JpYmVyIC0gc3Vic2NyaWJlclxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblN1YnNjcmliZXJzQ29udHJvbGxlci5wcm90b3R5cGUuYWRkU3Vic2NyaWJlciA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gIGNvbnN0IGlkID0gc3Vic2NyaWJlci5nZXRJZCgpO1xuICB0aGlzLl9zdWJzY3JpYmVyc1tpZF0gPSBzdWJzY3JpYmVyO1xuICByZXR1cm4gaWQ7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge0FycmF5fFN0cmluZ30gc3Vic2NyaWJlcnNJZCAtIHN1YnNjcmliZXIgaWRlbnRpZmllclxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblN1YnNjcmliZXJzQ29udHJvbGxlci5wcm90b3R5cGUucmVtb3ZlU3Vic2NyaWJlcnNCeUlkID0gZnVuY3Rpb24gKHN1YnNjcmliZXJzSWQpIHtcbiAgaWYgKHR5cGVvZiBzdWJzY3JpYmVyc0lkID09PSBcInN0cmluZ1wiKSB7XG4gICAgc3Vic2NyaWJlcnNJZCA9IFtzdWJzY3JpYmVyc0lkXTtcbiAgfVxuICBmb3IgKGxldCBpID0gMCwgaiA9IHN1YnNjcmliZXJzSWQubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgaWYgKHRoaXMuX3N1YnNjcmliZXJzW3N1YnNjcmliZXJzSWRbaV1dKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpYmVyc1tzdWJzY3JpYmVyc0lkW2ldXS5yZW1vdmUoKTtcbiAgICAgIGRlbGV0ZSh0aGlzLl9zdWJzY3JpYmVyc1tzdWJzY3JpYmVyc0lkW2ldXSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqXG4gKiBSZW1vdmUgYWxsIHN1YnNjcmliZXJzIGZvciBjZXJ0YWluIG1hbmlmZXN0IGJhc2VkIG9uIGFueSBzdWJzY3JpYmVySWQgdGhhdCBiZWxvbmdzIHRvIHRoaXMgbWFuaWZlc3RcbiAqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBzdWJzY3JpYmVySWQgLSBzdWJzY3JpYmVyIGlkZW50aWZpZXJcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5TdWJzY3JpYmVyc0NvbnRyb2xsZXIucHJvdG90eXBlLnJlbW92ZUFsbE1hbmlmZXN0U3Vic2NyaWJlcnNCeUlkID0gZnVuY3Rpb24gKHN1YnNjcmliZXJJZCkge1xuICBsZXQgc3Vic2NyaWJlciA9IHN1YnNjcmliZXJJZCAmJiB0aGlzLl9zdWJzY3JpYmVyc1tzdWJzY3JpYmVySWRdO1xuICBpZiAoc3Vic2NyaWJlcikge1xuICAgIHRoaXMudW5zdWJzY3JpYmUoc3Vic2NyaWJlci5nZXRNYW5pZmVzdElkKCkpO1xuICB9XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge0FycmF5fFN0cmluZ30gbWFuaWZlc3RJZHMgLSBtYW5pZmVzdCBvciBtYW5pZmVzdHMgaWRlbnRpZmllclxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblN1YnNjcmliZXJzQ29udHJvbGxlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAobWFuaWZlc3RJZHMpIHtcbiAgbGV0IHN1YnNjcmliZXJzSWQgPSBbXTtcbiAgbGV0IG1hbmlmZXN0SWRzSGFzaCA9IHt9O1xuICBpZiAodHlwZW9mIG1hbmlmZXN0SWRzID09PSBcInN0cmluZ1wiKSB7XG4gICAgbWFuaWZlc3RJZHMgPSBbbWFuaWZlc3RJZHNdO1xuICB9XG4gIG1hbmlmZXN0SWRzID0gbWFuaWZlc3RJZHMgfHwgW107XG4gIGZvciAobGV0IGkgPSAwLCBqID0gbWFuaWZlc3RJZHMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgbWFuaWZlc3RJZHNIYXNoW21hbmlmZXN0SWRzW2ldXSA9IHRydWU7XG4gIH1cblxuICBmb3IgKGxldCBrZXkgaW4gdGhpcy5fc3Vic2NyaWJlcnMpIHtcbiAgICBpZiAodGhpcy5fc3Vic2NyaWJlcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgaWYgKG1hbmlmZXN0SWRzSGFzaFt0aGlzLl9zdWJzY3JpYmVyc1trZXldLmdldE1hbmlmZXN0SWQoKV0pIHtcbiAgICAgICAgc3Vic2NyaWJlcnNJZC5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy5yZW1vdmVTdWJzY3JpYmVyc0J5SWQoc3Vic2NyaWJlcnNJZCk7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5TdWJzY3JpYmVyc0NvbnRyb2xsZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlQWxsID0gZnVuY3Rpb24gKCkge1xuICBmb3IgKGxldCBrZXkgaW4gdGhpcy5fc3Vic2NyaWJlcnMpIHtcbiAgICBpZiAodGhpcy5fc3Vic2NyaWJlcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgdGhpcy5fc3Vic2NyaWJlcnNba2V5XS5yZW1vdmUoKTtcbiAgICB9XG4gIH1cbiAgdGhpcy5fc3Vic2NyaWJlcnMgPSB7fTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3Vic2NyaWJlcnNDb250cm9sbGVyO1xuIl0sIm5hbWVzIjpbIlN1YnNjcmliZXJzQ29udHJvbGxlciIsIl9zdWJzY3JpYmVycyIsInByb3RvdHlwZSIsImFkZFN1YnNjcmliZXIiLCJzdWJzY3JpYmVyIiwiaWQiLCJnZXRJZCIsInJlbW92ZVN1YnNjcmliZXJzQnlJZCIsInN1YnNjcmliZXJzSWQiLCJpIiwiaiIsImxlbmd0aCIsInJlbW92ZSIsInJlbW92ZUFsbE1hbmlmZXN0U3Vic2NyaWJlcnNCeUlkIiwic3Vic2NyaWJlcklkIiwidW5zdWJzY3JpYmUiLCJnZXRNYW5pZmVzdElkIiwibWFuaWZlc3RJZHMiLCJtYW5pZmVzdElkc0hhc2giLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsInB1c2giLCJ1bnN1YnNjcmliZUFsbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8834\n')},3740:module=>{"use strict";eval("\n\nvar codes = {\n  GENERAL: -1,\n  ERRORS: {\n    INTERNAL_ERROR: 1,\n    BROKEN: 11,\n    FINISHED: 12,\n    UNFINISHED: 13,\n    STOPPED: 14,\n    CREATED: 15,\n    MISSING: 16,\n    RESUMED: 17,\n    STARTED: 18,\n    LOADING: 19,\n    REMOVED: 20,\n    INFO: 21,\n    EXISTS: 22,\n    NOT_FOUND: 100\n  }\n};\nmodule.exports = codes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc0MC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxLQUFLLEdBQUc7RUFDWkMsT0FBTyxFQUFFLENBQUMsQ0FBQztFQUNYQyxNQUFNLEVBQUU7SUFDTkMsY0FBYyxFQUFFLENBQUM7SUFDakJDLE1BQU0sRUFBRSxFQUFFO0lBQ1ZDLFFBQVEsRUFBRSxFQUFFO0lBQ1pDLFVBQVUsRUFBRSxFQUFFO0lBQ2RDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLElBQUksRUFBRSxFQUFFO0lBQ1JDLE1BQU0sRUFBRSxFQUFFO0lBQ1ZDLFNBQVMsRUFBRTtFQUNiO0FBQ0YsQ0FBQztBQUNEQyxNQUFNLENBQUNDLE9BQU8sR0FBR2xCLEtBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2Rvd25sb2Fkcy9jb2Rlcy5qcz84ZWMwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgY29kZXMgPSB7XG4gIEdFTkVSQUw6IC0xLFxuICBFUlJPUlM6IHtcbiAgICBJTlRFUk5BTF9FUlJPUjogMSxcbiAgICBCUk9LRU46IDExLFxuICAgIEZJTklTSEVEOiAxMixcbiAgICBVTkZJTklTSEVEOiAxMyxcbiAgICBTVE9QUEVEOiAxNCxcbiAgICBDUkVBVEVEOiAxNSxcbiAgICBNSVNTSU5HOiAxNixcbiAgICBSRVNVTUVEOiAxNyxcbiAgICBTVEFSVEVEOiAxOCxcbiAgICBMT0FESU5HOiAxOSxcbiAgICBSRU1PVkVEOiAyMCxcbiAgICBJTkZPOiAyMSxcbiAgICBFWElTVFM6IDIyLFxuICAgIE5PVF9GT1VORDogMTAwLFxuICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBjb2RlcztcblxuIl0sIm5hbWVzIjpbImNvZGVzIiwiR0VORVJBTCIsIkVSUk9SUyIsIklOVEVSTkFMX0VSUk9SIiwiQlJPS0VOIiwiRklOSVNIRUQiLCJVTkZJTklTSEVEIiwiU1RPUFBFRCIsIkNSRUFURUQiLCJNSVNTSU5HIiwiUkVTVU1FRCIsIlNUQVJURUQiLCJMT0FESU5HIiwiUkVNT1ZFRCIsIklORk8iLCJFWElTVFMiLCJOT1RfRk9VTkQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3740\n")},223:(module,__unused_webpack_exports,__webpack_require__)=>{eval('var downloadFileUtil = __webpack_require__(6003);\nvar fs = __webpack_require__(7147);\nvar _require = __webpack_require__(7194),\n  net = _require.net;\nvar EventEmitter = (__webpack_require__(2361).EventEmitter);\n\n/**\n *\n * @param {string} url - url\n * @param {object} options - options\n * @returns {Chunk} - chunk object\n * @constructor\n */\nfunction Chunk(url, options) {\n  var self = this;\n  this.url = url;\n  this.options = options;\n  this.endPosition = options.endPosition;\n  this.startPosition = options.startPosition;\n  this.bytesRangeNotAvailable = options.bytesRangeNotAvailable;\n  this.reset();\n  this.events = new EventEmitter();\n  this._promise = new Promise(function (resolve, reject) {\n    self.resolve = resolve;\n    self.reject = reject;\n  });\n  return this;\n}\nChunk.prototype._retry = function (errorType, callback) {\n  var self = this;\n  var maxDownloadRetry;\n  this._errors = this._errors || {};\n  this._errors[errorType] = this._errors[errorType] || 0;\n  this._errors[errorType]++;\n  if (errorType === downloadFileUtil.errors.INTERNET) {\n    maxDownloadRetry = this.options.maxDownloadInternetRetry;\n  } else {\n    maxDownloadRetry = this.options.maxDownloadRetry;\n  }\n  if (this._errors[errorType] <= maxDownloadRetry) {\n    if (self._timer) {\n      clearTimeout(self._timer);\n    }\n    callback(true);\n    self._timer = setTimeout(function () {\n      // console.log("retrying chunk", errorType, self.destFile);\n      self.reset(function () {\n        self.start();\n      });\n    }, self.options.retryTimeout);\n  } else {\n    // console.log("not retrying chunk", errorType, self._errors[errorType]);\n    callback(false);\n  }\n};\nChunk.prototype.createFileStream = function (callback) {\n  var self = this;\n  if (!this.fileStream) {\n    var destFile = this.options.destFile;\n    if (this.options.multiChunks) {\n      destFile = destFile + "." + this.startPosition + "." + this.endPosition;\n    }\n    downloadFileUtil.checkForLocalFile(destFile, function (resumeFile, fileSize) {\n      self.destFile = destFile;\n      if (resumeFile) {\n        if (fileSize <= self.endPosition - self.startPosition) {\n          self.resumeFile = resumeFile;\n          self.available = fileSize;\n          self.offsetStartPosition = fileSize;\n        }\n      }\n      self.fileStream = fs.createWriteStream(destFile, {\n        flags: self.resumeFile ? "a" : "w"\n      });\n      self.fileStream.on("error", callback);\n      self.fileStream.on("open", function () {\n        // for unknown reason from time to time the file descriptor of self.fileStream is null\n        // when event \'open\' is fired then the file descriptor is not a null anymore\n        // this should fix a problem with EBADF error\n        // a bug in fs ?\n        self.fileStream = this;\n        this.removeListener("error", callback);\n        this.on("error", function (error) {\n          if (error.code === "ENOSPC") {\n            // no space left on disk, do not retry downloading\n            self.resolve(downloadFileUtil.errors.NO_SPACE_LEFT_ERROR, error);\n          } else {\n            self._retry(downloadFileUtil.errors.FILE_WRITING_ERROR, function (retried) {\n              if (!retried) {\n                self.resolve(downloadFileUtil.errors.FILE_WRITING_ERROR, error);\n              }\n            });\n          }\n        });\n        this.on("finish", function () {\n          if (!self.isDownloaded()) {\n            self._retry(downloadFileUtil.errors.CHUNK_SIZE_ERROR, function (retried) {\n              if (!retried) {\n                self.closeStreamAndRequest(function () {\n                  self.resolve(downloadFileUtil.errors.CHUNK_SIZE_ERROR);\n                });\n              }\n            });\n          } else {\n            self.closeStreamAndRequest(self.resolve);\n          }\n        });\n        callback();\n      });\n    });\n  } else {\n    callback();\n  }\n};\nChunk.prototype.isDownloaded = function () {\n  return this.endPosition - this.startPosition - this.offsetStartPosition + 1 === this.downloaded;\n};\nChunk.prototype.start = function () {\n  var self = this;\n  var req_options = {\n    timeout: this.options.timeout,\n    url: this.url\n  };\n  self.createFileStream(function (err) {\n    if (err) {\n      self._retry(downloadFileUtil.errors.FILE_CREATING_ERROR, function (retried) {\n        if (!retried) {\n          self.closeStreamAndRequest(function () {\n            self.resolve(downloadFileUtil.errors.FILE_CREATING_ERROR, err);\n          });\n        }\n      });\n      return;\n    }\n    req_options.headers = req_options.headers || {};\n    if (!self.bytesRangeNotAvailable) {\n      req_options.headers.range = "bytes=" + (self.startPosition + self.offsetStartPosition) + "-" + self.endPosition;\n    }\n    self._req = net.request(req_options);\n    self._req.chunkedEncoding = self.options.useChunkedEncoding;\n    self._req.on(\'response\', function (response) {\n      response.on("error", function (error) {\n        if (error.code === "ESOCKETTIMEDOUT" || error.code === "ENOTFOUND" || error.code === "ETIMEDOUT") {\n          self._retry(downloadFileUtil.errors.INTERNET, function (retried) {\n            if (!retried) {\n              self.closeStreamAndRequest(function () {\n                self.resolve(downloadFileUtil.errors.TIMEOUT, error);\n              });\n            }\n          });\n        } else {\n          self.closeStreamAndRequest(function () {\n            self.resolve(downloadFileUtil.errors.CHUNK_ERROR);\n          });\n        }\n      });\n      response.on("data", function (data) {\n        if (response.statusCode === 200 || response.statusCode === 206) {\n          self.available += data.length;\n          self.downloaded += data.length;\n          self.events.emit("download", data.length);\n        }\n      });\n      response.pipe(self.fileStream);\n    });\n    self._req.end();\n  });\n  return this._promise;\n};\nChunk.prototype.closeStreamAndRequest = function (callback) {\n  var self = this;\n  var timer;\n  var timerTimoutMS = 300;\n  function onClose() {\n    clearTimeout(timer);\n    if (self.fileStream) {\n      self.fileStream.destroy();\n      delete self.fileStream;\n    }\n    delete self._req;\n    callback();\n  }\n  if (this._req) {\n    this._req.removeAllListeners();\n  }\n  if (this.fileStream) {\n    this.fileStream.removeAllListeners();\n  }\n  if (this._req) {\n    this._req.abort();\n    if (this._req.timeoutTimer) {\n      clearTimeout(this._req.timeoutTimer);\n      this._req.timeoutTimer = null;\n    }\n  }\n  if (this.fileStream) {\n    timer = setTimeout(function () {\n      onClose();\n    }, timerTimoutMS);\n    this.fileStream.end();\n    this.fileStream.close(onClose);\n  } else {\n    delete this._req;\n    callback();\n  }\n};\nChunk.prototype.reset = function (callback) {\n  var self = this;\n  callback = callback || function () {};\n  self.closeStreamAndRequest(function () {\n    self.offsetStartPosition = 0;\n    self.available = 0;\n    self.downloaded = 0;\n    self.writeProgress = 0;\n    self.resumeFile = false;\n    callback();\n  });\n};\nChunk.prototype.stop = function () {\n  var self = this;\n  this.reset(function () {\n    self.resolve(downloadFileUtil.errors.ABORTED);\n  });\n};\nmodule.exports = Chunk;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///223\n')},2390:(module,__unused_webpack_exports,__webpack_require__)=>{eval('/*eslint no-console: ["error", { allow: ["warn", "error", "info"] }] */\nvar fs = __webpack_require__(7147);\nvar _require = __webpack_require__(7194),\n  net = _require.net;\nvar EventEmitter = (__webpack_require__(2361).EventEmitter);\nvar util = __webpack_require__(3837);\nvar downloadFileUtil = __webpack_require__(6003);\n\n/**\n *\n * @param {string} url - remote url\n * @param {string} destFile - local url\n * @param {object} options - options\n * @constructor\n */\nfunction DownloadFileNoHead(url, destFile, options) {\n  this._url = url;\n  this._destFile = destFile;\n  this._options = options;\n  this._resetValues();\n}\nutil.inherits(DownloadFileNoHead, EventEmitter);\nDownloadFileNoHead.prototype._reset = function (callback) {\n  var self = this;\n  callback = callback || function () {};\n  self._closeStreamAndRequest(function () {\n    self._resetValues();\n    callback();\n  });\n};\nDownloadFileNoHead.prototype._resetValues = function () {\n  this.available = 0;\n  this.downloaded = 0;\n  this.file_size = 0;\n  this.writeProgress = 0;\n};\nDownloadFileNoHead.prototype._createFileStream = function (callback) {\n  var self = this;\n  if (!this.fileStream) {\n    var destFile = this._destFile;\n    self.fileStream = fs.createWriteStream(destFile, {\n      flags: "w"\n    });\n    self.fileStream.on("error", callback);\n    self.fileStream.on("open", function () {\n      // for unknown reason from time to time the file descriptor of self.fileStream is null\n      // when event \'open\' is fired then the file descriptor is not a null anymore\n      // this should fix a problem with EBADF error\n      // a bug in fs ?\n      self.fileStream = this;\n      this.removeListener("error", callback);\n      this.on("error", function (error) {\n        if (error.code === "ENOSPC") {\n          // no space left on disk, do not retry downloading\n          self.emit("error", {\n            message: downloadFileUtil.errors.NO_SPACE_LEFT_ERROR,\n            data: error\n          });\n        } else {\n          self._retry(downloadFileUtil.errors.FILE_WRITING_ERROR, function (retried) {\n            if (!retried) {\n              self.emit("error", {\n                message: downloadFileUtil.errors.FILE_WRITING_ERROR,\n                data: error\n              });\n            }\n          });\n        }\n      });\n      this.on("finish", function () {\n        if (!self.isDownloaded()) {\n          self._retry(downloadFileUtil.errors.CHUNK_SIZE_ERROR, function (retried) {\n            if (!retried) {\n              self._closeStreamAndRequest(function () {\n                self.emit("error", {\n                  message: downloadFileUtil.errors.CHUNK_SIZE_ERROR\n                });\n              });\n            }\n          });\n        } else {\n          self.writeProgress = 1;\n          self.emit("end");\n        }\n      });\n      callback();\n    });\n  } else {\n    callback();\n  }\n};\nDownloadFileNoHead.prototype.isDownloaded = function () {\n  return this.downloaded === this.file_size;\n};\nDownloadFileNoHead.prototype._retry = function (errorType, callback) {\n  var self = this;\n  var maxDownloadRetry;\n  this._errors = this._errors || {};\n  this._errors[errorType] = this._errors[errorType] || 0;\n  this._errors[errorType]++;\n  if (errorType === downloadFileUtil.errors.INTERNET) {\n    maxDownloadRetry = this._options.maxDownloadChunkInternetRetry;\n  } else {\n    maxDownloadRetry = this._options.maxDownloadRetry;\n  }\n  if (this._errors[errorType] <= maxDownloadRetry) {\n    if (self._timer) {\n      clearTimeout(self._timer);\n    }\n    callback(true);\n    self._timer = setTimeout(function () {\n      // console.log("retrying chunk", errorType, self.destFile);\n      self._reset(function () {\n        self.start();\n      });\n    }, self._options.retryTimeout);\n  } else {\n    // console.log("not retrying chunk", errorType, self._errors[errorType]);\n    callback(false);\n  }\n};\nDownloadFileNoHead.prototype._closeStreamAndRequest = function (callback) {\n  var self = this;\n  var timer;\n  var timerTimoutMS = 300;\n  function onClose() {\n    clearTimeout(timer);\n    if (self.fileStream) {\n      self.fileStream.destroy();\n      delete self.fileStream;\n    }\n    delete self._req;\n    callback();\n  }\n  if (this._req) {\n    this._req.removeAllListeners();\n  }\n  if (this.fileStream) {\n    this.fileStream.removeAllListeners();\n  }\n  if (this._req) {\n    this._req.abort();\n    if (this._req.timeoutTimer) {\n      clearTimeout(this._req.timeoutTimer);\n      this._req.timeoutTimer = null;\n    }\n  }\n  if (this.fileStream) {\n    timer = setTimeout(function () {\n      onClose();\n    }, timerTimoutMS);\n    this.fileStream.end();\n    this.fileStream.close(onClose);\n  } else {\n    delete this._req;\n    callback();\n  }\n};\n\n/**\n * starts download\n * @returns {void}\n */\nDownloadFileNoHead.prototype.start = function () {\n  var self = this;\n  var req_options = {\n    timeout: this._options.timeout,\n    url: this._url\n  };\n  if (this._options.noCache) {\n    req_options.headers = {\n      \'Cache-Control\': \'no-cache\'\n    };\n  }\n  self._createFileStream(function (err) {\n    if (err) {\n      self._retry(downloadFileUtil.errors.FILE_CREATING_ERROR, function (retried) {\n        if (!retried) {\n          self._closeStreamAndRequest(function () {\n            self.emit("error", {\n              message: downloadFileUtil.errors.FILE_CREATING_ERROR\n            });\n          });\n        }\n      });\n      return;\n    }\n    req_options.headers = req_options.headers || {};\n    self._req = net.request(req_options);\n    self._req.on(\'response\', function (response) {\n      response.on("error", function (error) {\n        console.error(\'ERROR (\' + self._url + \') :\' + error);\n        if (error.code === "ESOCKETTIMEDOUT" || error.code === "ENOTFOUND" || error.code === "ETIMEDOUT") {\n          self._retry(downloadFileUtil.errors.INTERNET, function (retried) {\n            if (!retried) {\n              self._closeStreamAndRequest(function () {\n                self.emit("error", {\n                  message: downloadFileUtil.errors.TIMEOUT,\n                  data: error\n                });\n              });\n            }\n          });\n        } else {\n          self._retry(downloadFileUtil.errors.INTERNET, function (retried) {\n            if (!retried) {\n              self._closeStreamAndRequest(function () {\n                self.emit("error", {\n                  message: downloadFileUtil.errors.CHUNK_ERROR,\n                  data: error\n                });\n              });\n            }\n          });\n        }\n      });\n      if (response && response.statusCode >= 400) {\n        self._retry(downloadFileUtil.errors.INTERNET, function (retried) {\n          if (!retried) {\n            self._closeStreamAndRequest(function () {\n              console.error("HTTP DOWNLOAD ERROR url: ".concat(self._url, ", statusCode: ").concat(response.statusCode));\n              self.emit("error", {\n                message: downloadFileUtil.errors.CHUNK_ERROR,\n                data: response\n              });\n            });\n          }\n        });\n      } else {\n        self._headers = response.headers;\n        self.file_size = Number(self._headers["content-length"]);\n        response.on("data", function (data) {\n          if (response.statusCode === 200 || response.statusCode === 206) {\n            self.available += data.length;\n            self.downloaded += data.length;\n          }\n        });\n        response.pipe(self.fileStream);\n      }\n    });\n    self._req.end();\n  });\n  return this._promise;\n};\n\n/**\n * stops download\n * @returns {void}\n */\nDownloadFileNoHead.prototype.stop = function () {\n  var self = this;\n  this._reset(function () {\n    self.emit("error", {\n      message: downloadFileUtil.errors.ABORTED\n    });\n  });\n};\nmodule.exports = DownloadFileNoHead;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2390\n')},6003:(module,__unused_webpack_exports,__webpack_require__)=>{eval('var fs = __webpack_require__(7147);\nvar appSettings = __webpack_require__(8557);\n\n/**\n *\n * @type {{start: number, end: null}}\n */\nvar defaultOptions = Object.assign({\n  start: 0,\n  end: null\n}, appSettings.getSettings().defaultManifestRequestOptions);\n\n/**\n *\n * @type {{CHUNK_ERROR: string, CHUNK_SIZE_ERROR: string, FILE_CREATING_ERROR: string, FILE_WRITING_ERROR: string,\n *     ABORTED: string}}\n */\nvar errors = {\n  ABORTED: "ABORTED",\n  CHUNK_ERROR: "CHUNK_ERROR",\n  CHUNK_SIZE_ERROR: "CHUNK_SIZE_ERROR",\n  FILE_CREATING_ERROR: "FILE_CREATING_ERROR",\n  FILE_WRITING_ERROR: "FILE_WRITING_ERROR",\n  NO_SPACE_LEFT_ERROR: "NO_SPACE_LEFT_ERROR",\n  INTERNET: "INTERNET",\n  TIMEOUT: "TIMEOUT"\n};\n\n/**\n * @param {string} fileUrl - file url\n * @param {function} callback - callback to be invoked when check for file has been done\n * @returns {void}\n */\nfunction checkForLocalFile(fileUrl, callback) {\n  fs.stat(fileUrl, function (error, stat) {\n    if (error) {\n      callback(false);\n    } else {\n      callback(true, stat.size);\n    }\n  });\n}\nmodule.exports = {\n  checkForLocalFile: checkForLocalFile,\n  defaultOptions: defaultOptions,\n  errors: errors\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjAwMy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxFQUFFLEdBQUdDLG1CQUFPLENBQUMsSUFBSSxDQUFDO0FBQ3hCLElBQU1DLFdBQVcsR0FBR0QsbUJBQU8sQ0FBQyxJQUFpQixDQUFDOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1FLGNBQWMsR0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQ2xDO0VBQ0VDLEtBQUssRUFBRSxDQUFDO0VBQ1JDLEdBQUcsRUFBRTtBQUNQLENBQUMsRUFDREwsV0FBVyxDQUFDTSxXQUFXLENBQUMsQ0FBQyxDQUFDQyw2QkFDNUIsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBTUMsTUFBTSxHQUFHO0VBQ2JDLE9BQU8sRUFBRSxTQUFTO0VBQ2xCQyxXQUFXLEVBQUUsYUFBYTtFQUMxQkMsZ0JBQWdCLEVBQUUsa0JBQWtCO0VBQ3BDQyxtQkFBbUIsRUFBRSxxQkFBcUI7RUFDMUNDLGtCQUFrQixFQUFFLG9CQUFvQjtFQUN4Q0MsbUJBQW1CLEVBQUUscUJBQXFCO0VBQzFDQyxRQUFRLEVBQUUsVUFBVTtFQUNwQkMsT0FBTyxFQUFFO0FBQ1gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsaUJBQWlCQSxDQUFFQyxPQUFPLEVBQUVDLFFBQVEsRUFBRTtFQUM3Q3JCLEVBQUUsQ0FBQ3NCLElBQUksQ0FBQ0YsT0FBTyxFQUFFLFVBQVVHLEtBQUssRUFBRUQsSUFBSSxFQUFFO0lBQ3RDLElBQUlDLEtBQUssRUFBRTtNQUNURixRQUFRLENBQUMsS0FBSyxDQUFDO0lBQ2pCLENBQUMsTUFBTTtNQUNMQSxRQUFRLENBQUMsSUFBSSxFQUFFQyxJQUFJLENBQUNFLElBQUksQ0FBQztJQUMzQjtFQUNGLENBQUMsQ0FBQztBQUNKO0FBRUFDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZQLGlCQUFpQixFQUFFQSxpQkFBaUI7RUFDcENoQixjQUFjLEVBQUVBLGNBQWM7RUFDOUJPLE1BQU0sRUFBRUE7QUFDVixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9kb3dubG9hZHMvZG93bmxvYWQtZmlsZS11dGlsLmpzPzFiOGUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5jb25zdCBhcHBTZXR0aW5ncyA9IHJlcXVpcmUoJy4uL2FwcC1zZXR0aW5ncycpO1xuXG4vKipcbiAqXG4gKiBAdHlwZSB7e3N0YXJ0OiBudW1iZXIsIGVuZDogbnVsbH19XG4gKi9cbmNvbnN0IGRlZmF1bHRPcHRpb25zID0gT2JqZWN0LmFzc2lnbihcbiAge1xuICAgIHN0YXJ0OiAwLFxuICAgIGVuZDogbnVsbFxuICB9LFxuICBhcHBTZXR0aW5ncy5nZXRTZXR0aW5ncygpLmRlZmF1bHRNYW5pZmVzdFJlcXVlc3RPcHRpb25zXG4pO1xuXG4vKipcbiAqXG4gKiBAdHlwZSB7e0NIVU5LX0VSUk9SOiBzdHJpbmcsIENIVU5LX1NJWkVfRVJST1I6IHN0cmluZywgRklMRV9DUkVBVElOR19FUlJPUjogc3RyaW5nLCBGSUxFX1dSSVRJTkdfRVJST1I6IHN0cmluZyxcbiAqICAgICBBQk9SVEVEOiBzdHJpbmd9fVxuICovXG5jb25zdCBlcnJvcnMgPSB7XG4gIEFCT1JURUQ6IFwiQUJPUlRFRFwiLFxuICBDSFVOS19FUlJPUjogXCJDSFVOS19FUlJPUlwiLFxuICBDSFVOS19TSVpFX0VSUk9SOiBcIkNIVU5LX1NJWkVfRVJST1JcIixcbiAgRklMRV9DUkVBVElOR19FUlJPUjogXCJGSUxFX0NSRUFUSU5HX0VSUk9SXCIsXG4gIEZJTEVfV1JJVElOR19FUlJPUjogXCJGSUxFX1dSSVRJTkdfRVJST1JcIixcbiAgTk9fU1BBQ0VfTEVGVF9FUlJPUjogXCJOT19TUEFDRV9MRUZUX0VSUk9SXCIsXG4gIElOVEVSTkVUOiBcIklOVEVSTkVUXCIsXG4gIFRJTUVPVVQ6IFwiVElNRU9VVFwiLFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gZmlsZVVybCAtIGZpbGUgdXJsXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgd2hlbiBjaGVjayBmb3IgZmlsZSBoYXMgYmVlbiBkb25lXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gY2hlY2tGb3JMb2NhbEZpbGUgKGZpbGVVcmwsIGNhbGxiYWNrKSB7XG4gIGZzLnN0YXQoZmlsZVVybCwgZnVuY3Rpb24gKGVycm9yLCBzdGF0KSB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBjYWxsYmFjayhmYWxzZSlcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSwgc3RhdC5zaXplKTtcbiAgICB9XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2hlY2tGb3JMb2NhbEZpbGU6IGNoZWNrRm9yTG9jYWxGaWxlLFxuICBkZWZhdWx0T3B0aW9uczogZGVmYXVsdE9wdGlvbnMsXG4gIGVycm9yczogZXJyb3JzXG59O1xuIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsImFwcFNldHRpbmdzIiwiZGVmYXVsdE9wdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJzdGFydCIsImVuZCIsImdldFNldHRpbmdzIiwiZGVmYXVsdE1hbmlmZXN0UmVxdWVzdE9wdGlvbnMiLCJlcnJvcnMiLCJBQk9SVEVEIiwiQ0hVTktfRVJST1IiLCJDSFVOS19TSVpFX0VSUk9SIiwiRklMRV9DUkVBVElOR19FUlJPUiIsIkZJTEVfV1JJVElOR19FUlJPUiIsIk5PX1NQQUNFX0xFRlRfRVJST1IiLCJJTlRFUk5FVCIsIlRJTUVPVVQiLCJjaGVja0ZvckxvY2FsRmlsZSIsImZpbGVVcmwiLCJjYWxsYmFjayIsInN0YXQiLCJlcnJvciIsInNpemUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6003\n')},739:(module,__unused_webpack_exports,__webpack_require__)=>{eval('var fs = __webpack_require__(7147);\nvar _require = __webpack_require__(7194),\n  net = _require.net;\nvar EventEmitter = (__webpack_require__(2361).EventEmitter);\nvar util = __webpack_require__(3837);\nvar downloadFileUtil = __webpack_require__(6003);\nvar DownloadFileChunk = __webpack_require__(223);\n\n/**\n *\n * @param {string} url - remote url\n * @param {string} destFile - local url\n * @param {object} options - options\n * @constructor\n */\nfunction DownloadFile(url, destFile, options) {\n  this._url = url;\n  this._destFile = destFile;\n  this._options = options;\n  this._resetValues();\n}\nutil.inherits(DownloadFile, EventEmitter);\n\n/**\n *\n * @param {number} size - size of file\n * @private\n * @returns {*} - number of chunks\n */\nDownloadFile.prototype._calculateChunksNumber = function (size) {\n  var MB = 1024 * 1024;\n  for (var i = 0, j = this._options.threads.length; i < j; i++) {\n    if (size < this._options.threads[i].size * MB) {\n      return this._options.threads[i].number;\n    }\n  }\n  return 1;\n};\n\n/**\n * @private\n * @returns {void}\n */\nDownloadFile.prototype._concatChunks = function () {\n  var self = this;\n  var intervalTime = 500;\n  self._chunks[0].writeProgress = 1;\n  function countWriteProgress() {\n    self.writeProgress = self._chunks.reduce(function (a, b) {\n      return a + b.writeProgress;\n    }, 0) / self._chunksNumber;\n    self.emit("data");\n  }\n  function getWriteStream() {\n    return fs.createWriteStream(self._chunks[0].destFile, {\n      flags: "a"\n    });\n  }\n  function onInterval(writeStream, currentStream) {\n    self._chunks[currentStream].writeProgress = writeStream.bytesWritten / self._chunks[currentStream].available;\n    if (self._chunks[currentStream].writeProgress > 1) {\n      self._chunks[currentStream].writeProgress = 1;\n    }\n    countWriteProgress();\n  }\n  function pipeStream(writeStream, nextStreamNumber) {\n    var chunk = self._chunks[nextStreamNumber];\n    if (chunk) {\n      var interval = setInterval(function () {\n        onInterval(writeStream, nextStreamNumber);\n      }, intervalTime);\n      var readStream = fs.createReadStream(chunk.destFile);\n      readStream.pipe(writeStream);\n      writeStream.on("close", function () {\n        clearInterval(interval);\n        onInterval(writeStream, nextStreamNumber);\n        writeStream.removeAllListeners();\n        readStream.unpipe(writeStream);\n        readStream.destroy();\n        fs.unlink(chunk.destFile, function (err) {\n          if (err) {\n            self.emit("error", err);\n          } else {\n            writeStream.destroy();\n            pipeStream(getWriteStream(), nextStreamNumber + 1);\n          }\n        });\n      });\n    } else {\n      countWriteProgress();\n      writeStream.removeAllListeners();\n      writeStream.destroy();\n      fs.rename(self._chunks[0].destFile, self._destFile, function (err) {\n        if (err) {\n          self.emit("error", err);\n        } else {\n          self.emit("end");\n        }\n      });\n    }\n  }\n  if (self._chunks.length > 1) {\n    pipeStream(getWriteStream(), 1);\n  } else {\n    countWriteProgress();\n    self.emit("end");\n  }\n};\n\n/**\n *\n * @param {number} chunkNumber - chunk number\n * @private\n * @returns {void}\n */\nDownloadFile.prototype._initChunk = function (chunkNumber) {\n  var options = {};\n  options.bytesRangeNotAvailable = this._bytesRangeNotAvailable;\n  options.destFile = this._destFile;\n  options.maxDownloadRetry = this._options.maxDownloadChunkRetry;\n  options.maxDownloadInternetRetry = this._options.maxDownloadChunkInternetRetry;\n  options.timeout = this._options.timeout;\n  options.retryTimeout = this._options.retryTimeout;\n  options.useChunkedEncoding = this._options.useChunkedEncoding;\n  var size = this.file_size;\n  if (this._chunksNumber > 1) {\n    var chunkSize = parseInt(size / this._chunksNumber, 10);\n    options.startPosition = chunkNumber * chunkSize;\n    options.multiChunks = true;\n    if (chunkNumber === this._chunksNumber - 1) {\n      options.endPosition = size - 1;\n    } else {\n      options.endPosition = options.startPosition + chunkSize - 1;\n    }\n  } else {\n    options.startPosition = 0;\n    options.endPosition = size - 1;\n  }\n  var chunk = new DownloadFileChunk(this._url, options);\n  chunk.events.on("download", this._onChunkDownload.bind(this));\n  this._chunks.push(chunk);\n};\n\n/**\n *\n * @param {object} err - error\n * @param {boolean} aborted - if failure has been called because download was aborted\n * @private\n * @returns {void}\n */\nDownloadFile.prototype._onDownloadFailure = function (err, aborted) {\n  this._promises = null;\n  if (!aborted) {\n    this._errors = this._errors || 0;\n    this._errors++;\n    if (this._errors <= this._options.maxDownloadRetry) {\n      this._retryDownload();\n    } else {\n      this.emit("error", err);\n    }\n  } else {\n    var noSpaceLeft = false;\n    for (var i = 0, j = err.length; i < j; i++) {\n      if (err[i]) {\n        if (err[i] === downloadFileUtil.errors.NO_SPACE_LEFT_ERROR) {\n          noSpaceLeft = true;\n          break;\n        }\n      }\n    }\n    if (noSpaceLeft) {\n      err = {\n        message: downloadFileUtil.errors.NO_SPACE_LEFT_ERROR\n      };\n    }\n    this.emit("error", err);\n  }\n};\n\n/**\n *\n * @param {object} err - error\n * @private\n * @returns {void}\n */\nDownloadFile.prototype._onDownloadSuccess = function (err) {\n  var aborted, error;\n  this._promises = null;\n  err = err || [];\n  for (var i = 0, j = err.length; i < j; i++) {\n    if (err[i]) {\n      if (err[i] === downloadFileUtil.errors.ABORTED || err[i] === downloadFileUtil.errors.NO_SPACE_LEFT_ERROR) {\n        aborted = true;\n      }\n      error = true;\n    }\n  }\n  if (!error) {\n    this._concatChunks();\n  } else {\n    this._onDownloadFailure(err, aborted);\n  }\n};\n\n/**\n *\n * @param {number} downloaded - downloaded bytes\n * @private\n * @returns {void}\n */\nDownloadFile.prototype._onChunkDownload = function (downloaded) {\n  this.downloaded += downloaded;\n  this.available = this._chunks.reduce(function (a, b) {\n    return a + b.available;\n  }, 0);\n  this.emit("data");\n};\nDownloadFile.prototype._retryDownload = function () {\n  // console.log("retrying download", this._destFile);\n  this._resetValues();\n  this.start();\n};\nDownloadFile.prototype._resetValues = function () {\n  this.available = 0;\n  this.downloaded = 0;\n  this.progress = 0;\n  this.file_size = 0;\n  this.writeProgress = 0;\n  this._chunks = [];\n};\n\n/**\n * @private\n * @returns {void}\n */\nDownloadFile.prototype._startChunks = function () {\n  var promises = [];\n  for (var i = 0, j = this._chunks.length; i < j; i++) {\n    promises.push(this._chunks[i].start());\n  }\n  this._promises = promises;\n  Promise.all(this._promises).then(this._onDownloadSuccess.bind(this), this._onDownloadFailure.bind(this));\n};\nDownloadFile.prototype._startAllChunks = function () {\n  for (var i = 0, j = this._chunksNumber; i < j; i++) {\n    this._initChunk(i);\n  }\n  this._startChunks();\n};\n\n/**\n * starts download\n * @returns {void}\n */\nDownloadFile.prototype.start = function () {\n  var self = this;\n  var req_options = Object.assign({\n    url: this._url,\n    method: \'HEAD\'\n  }, downloadFileUtil.defaultOptions);\n  if (this._options.noCache) {\n    req_options.headers = req_options.headers || {};\n    req_options.headers[\'Cache-Control\'] = \'no-cache\';\n  }\n  var req = net.request(req_options);\n  req.chunkedEncoding = this._options.useChunkedEncoding;\n  req.on(\'response\', function (response) {\n    if (response && response.statusCode >= 400) {\n      var error = response.statusMessage;\n      if (error) {\n        self._onDownloadFailure(error, false);\n        return;\n      }\n    }\n    response.on("error", function (error) {\n      if (error) {\n        self._onDownloadFailure(error, false);\n      }\n    });\n    self._headers = response.headers;\n    self.file_size = Number(self._headers["content-length"]);\n    self._chunksNumber = self._calculateChunksNumber(self.file_size);\n    downloadFileUtil.checkForLocalFile(self._destFile, function (exists, fileSize) {\n      if (exists) {\n        if (fileSize === self.file_size) {\n          self.emit("end");\n        } else if (fileSize > self.file_size) {\n          fs.unlink(self._destFile, function (err) {\n            if (err) {\n              throw err;\n            }\n          });\n          self._startAllChunks();\n        } else if (fileSize < self.file_size && self._chunksNumber > 1) {\n          fs.unlink(self._destFile, function (err) {\n            if (err) {\n              throw err;\n            }\n          });\n          self._startAllChunks();\n        } else {\n          self._startAllChunks();\n        }\n      } else {\n        self._startAllChunks();\n      }\n    });\n  });\n  req.end();\n};\n\n/**\n * stops download\n * @returns {void}\n */\nDownloadFile.prototype.stop = function () {\n  var promises = [];\n  for (var i = 0, j = this._chunks.length; i < j; i++) {\n    this._chunks[i].stop();\n    if (this._chunks[i]._promise) {\n      promises.push(this._chunks[i]._promise);\n    }\n  }\n  function onStopped() {\n    this.emit("end", \'\');\n  }\n  if (!this._promises) {\n    Promise.all(promises).then(onStopped.bind(this), onStopped.bind(this));\n  }\n};\nmodule.exports = DownloadFile;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///739\n')},8298:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar _ = __webpack_require__(4952);\nvar domain = __webpack_require__(3639);\nvar DownloadFileNoHead = __webpack_require__(2390);\nvar DownloadFile = __webpack_require__(739);\nvar _require = __webpack_require__(9526),\n  mkdirp = _require.mkdirp;\nvar appSettings = __webpack_require__(8557);\nvar EventEmitter = (__webpack_require__(2361).EventEmitter);\nvar STATUSES = __webpack_require__(9773);\n\n/**\n *\n * @param {object} params - parameters connected with download like id, bandwidth, contentType, remoteUrl, localUrl\n * see util class {@link downloadUtil.getDownloadLinks}\n * @param {object} options - options chosen for whole manifest, like number of chunks, retry,\n * @constructor\n */\nfunction Download(params, options) {\n  this._defaults = {};\n  this._defaults.threads = appSettings.getSettings().downloadingThreadsRules.threads;\n  this.status = STATUSES.CREATED;\n  Object.assign(this, params);\n  this._options = Object.assign(this._defaults, options);\n  this._options.maxDownloadRetry = appSettings.getSettings().MAX_ERRORS_DOWNLOAD_RETRY;\n  this._options.maxDownloadChunkRetry = appSettings.getSettings().MAX_ERRORS_DOWNLOAD_CHUNK_RETRY;\n  this._options.maxDownloadChunkInternetRetry = appSettings.getSettings().MAX_INTERNET_ERRORS_DOWNLOAD_CHUNK_RETRY;\n  this._options.timeout = appSettings.getSettings().times.DOWNLOAD_TIMEOUT;\n  this._options.retryTimeout = appSettings.getSettings().times.RETRY_TIMEOUT;\n  this._options.useChunkedEncoding = appSettings.getSettings().useChunkedEncoding;\n  this._options.useHeadRequests = appSettings.getSettings().useHeadRequests;\n  this._options.noCache = appSettings.getSettings().noCache;\n  this.stats = {\n    available: 0,\n    downloaded: 0,\n    file_size: 0,\n    writeProgress: 0\n  };\n  _.bindAll(this, "_onError", "_onEnd", "_onData", "_updateStats", "_attachEvents", "_removeEvents", "_removeEventsOnStop");\n  this.events = new EventEmitter();\n}\n\n/**\n * @private\n * @returns {void}\n */\nDownload.prototype._attachEvents = function () {\n  this._dl.on(\'error\', this._onError);\n  this._dl.on(\'end\', this._onEnd);\n  this._dl.on(\'data\', this._onData);\n};\n\n/**\n *\n * @param {function} callback - callback to be invoked then local path is created\n * @private\n * @returns {void}\n */\nDownload.prototype._createLocalPath = function (callback) {\n  var folders = this.localUrl.split("/");\n  folders = folders.slice(0, folders.length - 1);\n  folders = folders.join("/");\n  mkdirp(folders).then(function () {\n    callback();\n  }, function (error) {\n    callback(error);\n  });\n};\n\n/**\n *\n * @private\n * @returns {void}\n */\nDownload.prototype._onData = function () {\n  this._updateStats();\n};\n\n/**\n * @private\n * @returns {void}\n */\nDownload.prototype._onEnd = function () {\n  this.status = STATUSES.FINISHED;\n  this._updateStats();\n  this._removeEvents();\n  this.events.emit("end", this);\n};\n\n/**\n *\n * @param {object} data - error data\n * @private\n * @returns {void}\n */\nDownload.prototype._onError = function (data) {\n  var self = this;\n  this.status = STATUSES.ERROR;\n  data = data || {};\n  var message = data.message || "";\n  self._removeEvents();\n  self._updateStats();\n\n  // notify only if there exists any error listener (from downloads controller)\n  // otherwise EventEmitter throws an error\n  if (self.events.listeners(\'error\').length) {\n    self.events.emit("error", self, message);\n  }\n};\nDownload.prototype._onDomainError = function (data) {\n  var self = this;\n  data = data || {};\n  var message = data.message || "";\n  if (self._dl) {\n    if (message === \'net::ERR_NETWORK_CHANGED\' || message === \'net::ERR_SPDY_PROTOCOL_ERROR\' || message === \'net::ERR_HTTP2_PROTOCOL_ERROR\') {\n      // network changed during download, retry download\n      self.stop(function () {\n        self.start();\n      });\n    } else {\n      // stop current download to release file stream and notify error\n      self.stop(function () {\n        self._onError(data);\n      });\n    }\n  } else {\n    self._onError(data);\n  }\n};\n\n/**\n * @private\n * @returns {void}\n */\nDownload.prototype._removeEvents = function () {\n  if (typeof this._dl.removeListener === "function") {\n    this._dl.removeListener(\'error\', this._onError);\n    this._dl.removeListener(\'end\', this._onEnd);\n    this._dl.removeListener(\'data\', this._onData);\n  }\n};\n\n/**\n * @private\n * @returns {void}\n */\nDownload.prototype._removeEventsOnStop = function () {\n  if (this._dl && typeof this._dl.removeListener === "function") {\n    this._dl.removeListener(\'error\', this._onError);\n    this._dl.removeListener(\'end\', this._onEnd);\n  }\n};\n\n/**\n * @private\n * @returns {void}\n */\nDownload.prototype._updateStats = function () {\n  if (this.status === STATUSES.FINISHED) {\n    this.stats.available = this._dl.file_size;\n    this.stats.writeProgress = 1;\n  } else {\n    this.stats.available = this._dl.available;\n    this.stats.writeProgress = this._dl.writeProgress;\n  }\n  this.stats.downloaded = this._dl.downloaded;\n  this.stats.file_size = this._dl.file_size;\n};\n\n/**\n * @returns {void}\n */\nDownload.prototype.start = function () {\n  var self = this;\n  this.status = STATUSES.STARTED;\n  this._createLocalPath(function (err) {\n    if (err) {\n      self._onError(err);\n      return;\n    }\n    // NOTE: domain module is marked to be deprecated in the future,\n    //       we will use it until NodeJS will propose alternative or\n    //       rewrite with promises\n    var d = domain.create();\n    d.on(\'error\', function (err) {\n      var message = \'\';\n      if (err) {\n        message = err.code || err.message || "";\n      }\n      // this needs to be disposed otherwise it might complain about unhandled error.\n      if (typeof d.dispose === "function") {\n        d.dispose();\n      }\n      self._onDomainError({\n        message: message\n      });\n    });\n    d.run(function () {\n      self._dl = self.createDownloader(self.remoteUrl, self.localUrl, self._options);\n      self._attachEvents();\n      self._dl.start();\n    });\n  });\n};\n\n/**\n * Creates file downloader\n * @param {string} [remoteUrl] - url of fragment\n * @param {string} [localUrl] - local url where to download fragment\n * @param {object} [options] - some options\n * @returns {void}\n */\nDownload.prototype.createDownloader = function (remoteUrl, localUrl, options) {\n  if (this._options.useHeadRequests) {\n    return new DownloadFile(remoteUrl, localUrl, options);\n  } else {\n    return new DownloadFileNoHead(remoteUrl, localUrl, options);\n  }\n};\n\n/**\n * @param {function} [resolve] - callback to be invoked when stop was successfully\n * @returns {void}\n */\nDownload.prototype.stop = function (resolve) {\n  var self = this;\n  this.status = STATUSES.STOPPED;\n  this._removeEventsOnStop();\n  if (typeof resolve !== "function") {\n    resolve = function resolve() {};\n  }\n  if (this._dl) {\n    var d = domain.create();\n    d.on(\'error\', function () {\n      resolve();\n    });\n    d.run(function () {\n      self._dl.on(\'error\', function () {\n        resolve();\n      });\n      self._dl.on(\'end\', function () {\n        resolve();\n      });\n      self._dl.stop();\n    });\n  } else {\n    resolve();\n  }\n};\n\n/**\n *\n * @returns {Promise} - promise\n */\nDownload.prototype.stopPromise = function () {\n  var self = this;\n  return new Promise(function (resolve) {\n    self.stop(function () {\n      resolve();\n    });\n  });\n};\nmodule.exports = Download;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8298\n')},8381:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar _require = __webpack_require__(9526),\n  mkdirp = _require.mkdirp;\nvar appSettings = __webpack_require__(8557);\nvar jsonfile = __webpack_require__(3480);\nvar LinkSave = __webpack_require__(2317);\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {string} storageKey - storage key\n * @param {object} items - storage items\n * @constructor\n */\nfunction FlushItem(manifestId, storageKey, items) {\n  this.manifestId = manifestId;\n  this.storageKey = storageKey;\n  this.items = items;\n}\n\n/**\n *\n * @param {function} resolve - callback to be invoked when save was successful\n * @param {function} reject - callback to be invoked when save failed\n * @private\n * @returns {void}\n */\nFlushItem.prototype._saveToDisk = function (resolve, reject) {\n  var self = this;\n  var path = appSettings.getSettings().settingsFolder + this.manifestId + "/";\n  var file = "" + this.storageKey + ".json";\n  var fileUrl = path + file;\n  mkdirp(path).then(function () {\n    var data = convertStorage(self.storageKey, self.items);\n    jsonfile.writeFile(fileUrl, data, function (err) {\n      if (!err) {\n        resolve();\n      } else {\n        reject(err);\n      }\n    });\n  }, function (error) {\n    reject(error);\n  });\n};\n\n/**\n *\n * @returns {Promise} promise\n */\nFlushItem.prototype.save = function () {\n  return new Promise(this._saveToDisk.bind(this));\n};\nmodule.exports = FlushItem;\n\n/**\n * Helper function\n * @param {string} storageKey - storage key\n * @param {object} items - storage items\n * @returns {*} data to be stored\n */\nvar convertStorage = function convertStorage(storageKey, items) {\n  var itemsA = [];\n  var data;\n  //only for downloading we want to have an array\n  if (storageKey === "downloading") {\n    itemsA = [];\n    for (var key in items) {\n      itemsA.push(items[key]);\n    }\n    items = itemsA;\n  }\n  if (items instanceof Array) {\n    data = [];\n    for (var i = 0, j = items.length; i < j; i++) {\n      data.push(new LinkSave(items[i]));\n    }\n  } else {\n    data = items;\n  }\n  return data;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUYsQ0FBQyxHQUFHQyxDQUFDLEVBQUVELENBQUMsRUFBRSxFQUFFO01BQzVDZCxJQUFJLENBQUNZLElBQUksQ0FBQyxJQUFJNUIsUUFBUSxDQUFDSSxLQUFLLENBQUMwQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25DO0VBQ0YsQ0FBQyxNQUFNO0lBQ0xkLElBQUksR0FBR1osS0FBSztFQUNkO0VBQ0EsT0FBT1ksSUFBSTtBQUNiLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2Rvd25sb2Fkcy9mbHVzaC1pdGVtLmpzPzcxNGEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB7bWtkaXJwfSA9IHJlcXVpcmUoJ21rZGlycCcpO1xuXG5jb25zdCBhcHBTZXR0aW5ncyA9IHJlcXVpcmUoJy4uL2FwcC1zZXR0aW5ncycpO1xuY29uc3QganNvbmZpbGUgPSByZXF1aXJlKCdqc29uZmlsZScpO1xuY29uc3QgTGlua1NhdmUgPSByZXF1aXJlKCcuLi9tYW5pZmVzdC9qc29uL2xpbmstc2F2ZScpO1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFuaWZlc3RJZCAtIG1hbmlmZXN0IGlkZW50aWZpZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdG9yYWdlS2V5IC0gc3RvcmFnZSBrZXlcbiAqIEBwYXJhbSB7b2JqZWN0fSBpdGVtcyAtIHN0b3JhZ2UgaXRlbXNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBGbHVzaEl0ZW0gKG1hbmlmZXN0SWQsIHN0b3JhZ2VLZXksIGl0ZW1zKSB7XG4gIHRoaXMubWFuaWZlc3RJZCA9IG1hbmlmZXN0SWQ7XG4gIHRoaXMuc3RvcmFnZUtleSA9IHN0b3JhZ2VLZXk7XG4gIHRoaXMuaXRlbXMgPSBpdGVtcztcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gcmVzb2x2ZSAtIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgd2hlbiBzYXZlIHdhcyBzdWNjZXNzZnVsXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSByZWplY3QgLSBjYWxsYmFjayB0byBiZSBpbnZva2VkIHdoZW4gc2F2ZSBmYWlsZWRcbiAqIEBwcml2YXRlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuRmx1c2hJdGVtLnByb3RvdHlwZS5fc2F2ZVRvRGlzayA9IGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gIGNvbnN0IHBhdGggPSBhcHBTZXR0aW5ncy5nZXRTZXR0aW5ncygpLnNldHRpbmdzRm9sZGVyICsgdGhpcy5tYW5pZmVzdElkICsgXCIvXCI7XG4gIGNvbnN0IGZpbGUgPSBcIlwiICsgdGhpcy5zdG9yYWdlS2V5ICsgXCIuanNvblwiO1xuICBjb25zdCBmaWxlVXJsID0gcGF0aCArIGZpbGU7XG4gIG1rZGlycChwYXRoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZGF0YSA9IGNvbnZlcnRTdG9yYWdlKHNlbGYuc3RvcmFnZUtleSwgc2VsZi5pdGVtcyk7XG4gICAganNvbmZpbGUud3JpdGVGaWxlKGZpbGVVcmwsIGRhdGEsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGlmICghZXJyKSB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICByZWplY3QoZXJyb3IpO1xuICB9KTtcbn07XG5cbi8qKlxuICpcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBwcm9taXNlXG4gKi9cbkZsdXNoSXRlbS5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHRoaXMuX3NhdmVUb0Rpc2suYmluZCh0aGlzKSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZsdXNoSXRlbTtcblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdG9yYWdlS2V5IC0gc3RvcmFnZSBrZXlcbiAqIEBwYXJhbSB7b2JqZWN0fSBpdGVtcyAtIHN0b3JhZ2UgaXRlbXNcbiAqIEByZXR1cm5zIHsqfSBkYXRhIHRvIGJlIHN0b3JlZFxuICovXG5jb25zdCBjb252ZXJ0U3RvcmFnZSA9IGZ1bmN0aW9uIGNvbnZlcnRTdG9yYWdlIChzdG9yYWdlS2V5LCBpdGVtcykge1xuICBsZXQgaXRlbXNBID0gW107XG4gIGxldCBkYXRhO1xuICAvL29ubHkgZm9yIGRvd25sb2FkaW5nIHdlIHdhbnQgdG8gaGF2ZSBhbiBhcnJheVxuICBpZiAoc3RvcmFnZUtleSA9PT0gXCJkb3dubG9hZGluZ1wiKSB7XG4gICAgaXRlbXNBID0gW107XG4gICAgZm9yIChsZXQga2V5IGluIGl0ZW1zKSB7XG4gICAgICBpdGVtc0EucHVzaChpdGVtc1trZXldKTtcbiAgICB9XG4gICAgaXRlbXMgPSBpdGVtc0E7XG4gIH1cbiAgaWYgKGl0ZW1zIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICBkYXRhID0gW107XG4gICAgZm9yIChsZXQgaSA9IDAsIGogPSBpdGVtcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIGRhdGEucHVzaChuZXcgTGlua1NhdmUoaXRlbXNbaV0pKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZGF0YSA9IGl0ZW1zO1xuICB9XG4gIHJldHVybiBkYXRhO1xufTtcblxuIl0sIm5hbWVzIjpbIl9yZXF1aXJlIiwicmVxdWlyZSIsIm1rZGlycCIsImFwcFNldHRpbmdzIiwianNvbmZpbGUiLCJMaW5rU2F2ZSIsIkZsdXNoSXRlbSIsIm1hbmlmZXN0SWQiLCJzdG9yYWdlS2V5IiwiaXRlbXMiLCJwcm90b3R5cGUiLCJfc2F2ZVRvRGlzayIsInJlc29sdmUiLCJyZWplY3QiLCJzZWxmIiwicGF0aCIsImdldFNldHRpbmdzIiwic2V0dGluZ3NGb2xkZXIiLCJmaWxlIiwiZmlsZVVybCIsInRoZW4iLCJkYXRhIiwiY29udmVydFN0b3JhZ2UiLCJ3cml0ZUZpbGUiLCJlcnIiLCJlcnJvciIsInNhdmUiLCJQcm9taXNlIiwiYmluZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJpdGVtc0EiLCJrZXkiLCJwdXNoIiwiQXJyYXkiLCJpIiwiaiIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8381\n')},2144:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar jsonfile = __webpack_require__(3480);\nvar path = __webpack_require__(1017);\nvar appSettings = __webpack_require__(8557);\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @param {string} itemName - item name\n * @returns {Promise} promise\n * @constructor\n */\nfunction ReadItem(manifestId, itemName) {\n  if (!manifestId) {\n    throw new Error("manifestId is missing");\n  }\n  this._manifestId = manifestId;\n  this._itemName = itemName;\n  return new Promise(this._read.bind(this));\n}\n\n/**\n *\n * @param {function} resolve - callback to be invoked on finish\n * @private\n * @returns {void}\n */\nReadItem.prototype._read = function (resolve) {\n  var fileUrl = path.resolve(appSettings.getSettings().settingsFolder + "/" + this._manifestId + "/" + this._itemName + ".json");\n  jsonfile.readFile(fileUrl, function (err, data) {\n    if (err) {\n      resolve();\n    } else {\n      resolve(data);\n    }\n  });\n};\nmodule.exports = ReadItem;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE0NC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxRQUFRLEdBQUdDLG1CQUFPLENBQUMsSUFBVSxDQUFDO0FBQ3BDLElBQU1DLElBQUksR0FBR0QsbUJBQU8sQ0FBQyxJQUFNLENBQUM7QUFFNUIsSUFBTUUsV0FBVyxHQUFHRixtQkFBTyxDQUFDLElBQWlCLENBQUM7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0csUUFBUUEsQ0FBRUMsVUFBVSxFQUFFQyxRQUFRLEVBQUU7RUFDdkMsSUFBSSxDQUFDRCxVQUFVLEVBQUU7SUFDZixNQUFNLElBQUlFLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQztFQUMxQztFQUNBLElBQUksQ0FBQ0MsV0FBVyxHQUFHSCxVQUFVO0VBQzdCLElBQUksQ0FBQ0ksU0FBUyxHQUFHSCxRQUFRO0VBQ3pCLE9BQU8sSUFBSUksT0FBTyxDQUFDLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDM0M7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FSLFFBQVEsQ0FBQ1MsU0FBUyxDQUFDRixLQUFLLEdBQUcsVUFBVUcsT0FBTyxFQUFFO0VBQzVDLElBQU1DLE9BQU8sR0FBR2IsSUFBSSxDQUFDWSxPQUFPLENBQUNYLFdBQVcsQ0FBQ2EsV0FBVyxDQUFDLENBQUMsQ0FBQ0MsY0FBYyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUNULFdBQVcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDQyxTQUFTLEdBQUcsT0FBTyxDQUFDO0VBQ2hJVCxRQUFRLENBQUNrQixRQUFRLENBQUNILE9BQU8sRUFBRSxVQUFVSSxHQUFHLEVBQUVDLElBQUksRUFBRTtJQUM5QyxJQUFJRCxHQUFHLEVBQUU7TUFDUEwsT0FBTyxDQUFDLENBQUM7SUFDWCxDQUFDLE1BQU07TUFDTEEsT0FBTyxDQUFDTSxJQUFJLENBQUM7SUFDZjtFQUNGLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFREMsTUFBTSxDQUFDQyxPQUFPLEdBQUdsQixRQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9kb3dubG9hZHMvcmVhZC1pdGVtLmpzP2QxYTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBqc29uZmlsZSA9IHJlcXVpcmUoJ2pzb25maWxlJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5cbmNvbnN0IGFwcFNldHRpbmdzID0gcmVxdWlyZSgnLi4vYXBwLXNldHRpbmdzJyk7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYW5pZmVzdElkIC0gbWFuaWZlc3QgaWRlbnRpZmllclxuICogQHBhcmFtIHtzdHJpbmd9IGl0ZW1OYW1lIC0gaXRlbSBuYW1lXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gcHJvbWlzZVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFJlYWRJdGVtIChtYW5pZmVzdElkLCBpdGVtTmFtZSkge1xuICBpZiAoIW1hbmlmZXN0SWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJtYW5pZmVzdElkIGlzIG1pc3NpbmdcIik7XG4gIH1cbiAgdGhpcy5fbWFuaWZlc3RJZCA9IG1hbmlmZXN0SWQ7XG4gIHRoaXMuX2l0ZW1OYW1lID0gaXRlbU5hbWU7XG4gIHJldHVybiBuZXcgUHJvbWlzZSh0aGlzLl9yZWFkLmJpbmQodGhpcykpO1xufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSByZXNvbHZlIC0gY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBmaW5pc2hcbiAqIEBwcml2YXRlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuUmVhZEl0ZW0ucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgY29uc3QgZmlsZVVybCA9IHBhdGgucmVzb2x2ZShhcHBTZXR0aW5ncy5nZXRTZXR0aW5ncygpLnNldHRpbmdzRm9sZGVyICsgXCIvXCIgKyB0aGlzLl9tYW5pZmVzdElkICsgXCIvXCIgKyB0aGlzLl9pdGVtTmFtZSArIFwiLmpzb25cIik7XG4gIGpzb25maWxlLnJlYWRGaWxlKGZpbGVVcmwsIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhZEl0ZW07Il0sIm5hbWVzIjpbImpzb25maWxlIiwicmVxdWlyZSIsInBhdGgiLCJhcHBTZXR0aW5ncyIsIlJlYWRJdGVtIiwibWFuaWZlc3RJZCIsIml0ZW1OYW1lIiwiRXJyb3IiLCJfbWFuaWZlc3RJZCIsIl9pdGVtTmFtZSIsIlByb21pc2UiLCJfcmVhZCIsImJpbmQiLCJwcm90b3R5cGUiLCJyZXNvbHZlIiwiZmlsZVVybCIsImdldFNldHRpbmdzIiwic2V0dGluZ3NGb2xkZXIiLCJyZWFkRmlsZSIsImVyciIsImRhdGEiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2144\n')},9773:module=>{"use strict";eval('\n\nvar STATUSES = {\n  "CREATED": "CREATED",\n  "STARTED": "STARTED",\n  "ERROR": "ERROR",\n  "STOPPED": "STOPPED",\n  "FINISHED": "FINISHED",\n  "BROKEN": "BROKEN",\n  "QUEUED": "QUEUED"\n};\nmodule.exports = STATUSES;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTc3My5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxRQUFRLEdBQUc7RUFDZixTQUFTLEVBQUUsU0FBUztFQUNwQixTQUFTLEVBQUUsU0FBUztFQUNwQixPQUFPLEVBQUUsT0FBTztFQUNoQixTQUFTLEVBQUUsU0FBUztFQUNwQixVQUFVLEVBQUUsVUFBVTtFQUN0QixRQUFRLEVBQUUsUUFBUTtFQUNsQixRQUFRLEVBQUU7QUFDWixDQUFDO0FBRURDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHRixRQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9kb3dubG9hZHMvc3RhdHVzZXMuanM/OWM1MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFNUQVRVU0VTID0ge1xuICBcIkNSRUFURURcIjogXCJDUkVBVEVEXCIsXG4gIFwiU1RBUlRFRFwiOiBcIlNUQVJURURcIixcbiAgXCJFUlJPUlwiOiBcIkVSUk9SXCIsXG4gIFwiU1RPUFBFRFwiOiBcIlNUT1BQRURcIixcbiAgXCJGSU5JU0hFRFwiOiBcIkZJTklTSEVEXCIsXG4gIFwiQlJPS0VOXCI6IFwiQlJPS0VOXCIsXG4gIFwiUVVFVUVEXCI6IFwiUVVFVUVEXCJcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU1RBVFVTRVM7Il0sIm5hbWVzIjpbIlNUQVRVU0VTIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9773\n')},1587:module=>{"use strict";eval("\n\nfunction SyncItem(resolve, reject, manifestId, storageKeys) {\n  this.resolve = resolve;\n  this.reject = reject;\n  this.manifestId = manifestId;\n  this.storageKeys = storageKeys;\n}\nmodule.exports = SyncItem;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU4Ny5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixTQUFTQSxRQUFRQSxDQUFFQyxPQUFPLEVBQUVDLE1BQU0sRUFBRUMsVUFBVSxFQUFFQyxXQUFXLEVBQUU7RUFDM0QsSUFBSSxDQUFDSCxPQUFPLEdBQUdBLE9BQU87RUFDdEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDcEIsSUFBSSxDQUFDQyxVQUFVLEdBQUdBLFVBQVU7RUFDNUIsSUFBSSxDQUFDQyxXQUFXLEdBQUdBLFdBQVc7QUFDaEM7QUFFQUMsTUFBTSxDQUFDQyxPQUFPLEdBQUdOLFFBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2Rvd25sb2Fkcy9zeW5jLWl0ZW0uanM/OGIxYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gU3luY0l0ZW0gKHJlc29sdmUsIHJlamVjdCwgbWFuaWZlc3RJZCwgc3RvcmFnZUtleXMpIHtcbiAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgdGhpcy5yZWplY3QgPSByZWplY3Q7XG4gIHRoaXMubWFuaWZlc3RJZCA9IG1hbmlmZXN0SWQ7XG4gIHRoaXMuc3RvcmFnZUtleXMgPSBzdG9yYWdlS2V5cztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTeW5jSXRlbTtcbiJdLCJuYW1lcyI6WyJTeW5jSXRlbSIsInJlc29sdmUiLCJyZWplY3QiLCJtYW5pZmVzdElkIiwic3RvcmFnZUtleXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1587\n")},1630:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('/*eslint no-console: ["error", { allow: ["warn", "error", "info"] }] */\n\n\nvar _ = __webpack_require__(4952);\nvar Snowflake = __webpack_require__(4576);\nvar appSettings = __webpack_require__(8557);\nvar beMethods = __webpack_require__(3274);\nvar DownloadsController = __webpack_require__(785);\nvar ManifestController = __webpack_require__(8948);\nvar OfflineController = __webpack_require__(3656);\nvar SubscribersController = __webpack_require__(8834);\nvar Server = __webpack_require__(1584);\nvar DownstreamElectronBE;\nfunction deserialize(serializedJavascript) {\n  try {\n    return JSON.parse(serializedJavascript);\n  } catch (err) {\n    return {};\n  }\n}\n\n/**\n * @constructor\n * @namespace DownstreamElectronBE\n * @param {object} configParams - configuration\n * @property {DownstreamElectronBE.init} init - initialize api in main process\n * @description\n * During initialization you can configure your app, [click here]{@link DownstreamElectronBE.configuration}\n *\n * @example\n * //somewhere in the main process\n * const { BrowserWindow, app } = require(\'electron\');\n * const downstreamElectron = require(\'downstream-electron\');\n *\n * const userSettings = {\n *   "appDir": "/Users/admin/myApp",\n *   "settingsName": "settings",\n *   "publicName": "public",\n *   "downloadsName": "movies"\n * };\n *\n * let downstreamInstance;\n * function createWindow() {\n *   downstreamInstance = downstreamElectron.init(userSettings);\n *   const win = new BrowserWindow({\n *     width: 1200,\n *     height: 700,\n *     resizable: true,\n *     webPreferences: {\n *       plugins: true,\n *       nodeIntegration: true\n *     }\n *   });\n *   win.loadURL(\'file://index.html\');\n *   win.webContents.openDevTools();\n * }\n *\n * function onWillQuit() {\n *  downstreamInstance.stop();\n * }\n *\n * app.on(\'ready\', createWindow);\n * app.on(\'will-quit\', onWillQuit);\n * app.on(\'window-all-closed\', function () {\n *  console.log("window-all-closed");\n *  app.quit();\n * });\n */\nDownstreamElectronBE = function DownstreamElectronBE() {\n  this._offlineContentPort = appSettings.getSettings().offlineContentPortStart;\n  _.bindAll(this, "_onApiRequest", "processSubscriber");\n  this._createControllers();\n  this._serveOfflineContent();\n  this._attachEvents();\n  // this.offlineController.restoreLocalManifest("6163760572308389888");\n};\n\nDownstreamElectronBE.prototype.stop = function () {\n  this.server.stop();\n};\n\n/**\n *\n * @param {string} methodName - api function\n * @param {string} promiseId - promise identifier\n * @param {object} args - arguments\n * @param {number} target - target window id\n * @private\n * @returns {void}\n */\nDownstreamElectronBE.prototype._apiMethods = function (methodName, promiseId, args, target) {\n  var self = this;\n  var manifestId = args[0];\n  var response = {};\n  response.promiseId = promiseId;\n  var onSuccess = function onSuccess(result, subscribersId) {\n    response.subscribersId = subscribersId;\n    response.status = "OK";\n    response.result = result;\n    response.manifestId = manifestId;\n    self._send(response, target);\n  };\n  var onFailure = function onFailure(err, internalError) {\n    var errorId = String(Snowflake.SnowflakeId.getUUID());\n    var errorInfo = _.clone({\n      errorId: errorId,\n      methodName: methodName,\n      args: args.slice(4),\n      err: err,\n      internalError: internalError\n    });\n    response.manifestId = manifestId;\n    response.status = "ERROR";\n    response.error = err || {};\n    response.error.errorId = errorId;\n    response.error.details = internalError;\n    self._send(response, target);\n\n    // @TODO log all errors that user have seen, the errorId will help to find stack\n    try {\n      console.error(new Date(), "Error occurred", JSON.stringify(errorInfo));\n    } catch (e) {\n      //do nothing\n    }\n  };\n  args = args || [];\n  args.unshift(target);\n  args.unshift(onFailure);\n  args.unshift(onSuccess);\n  args.unshift(this);\n  var method = this._getMethod(methodName);\n  if (typeof method === "function") {\n    method.apply(null, args);\n  } else {\n    response.status = "ERROR";\n    response.error = "Provided method \'" + methodName + "\' doesn\'t exists";\n    this._send(response, target);\n    console.error("ERROR", "Provided method \'" + methodName + "\' doesn\'t exists");\n  }\n};\n\n/**\n *\n * @private\n * @returns {void}\n */\nDownstreamElectronBE.prototype._attachEvents = function () {\n  var ipcMain = (__webpack_require__(7194).ipcMain);\n  ipcMain.on("downstreamElectronBE", this._onApiRequest);\n};\n\n/**\n *\n * @private\n * @returns {void}\n */\nDownstreamElectronBE.prototype._createControllers = function () {\n  this.manifestController = new ManifestController();\n  this.offlineController = new OfflineController(this.manifestController);\n  this.downloadsController = new DownloadsController(this.manifestController, this.offlineController);\n  this.subscribersController = new SubscribersController();\n};\n\n/**\n *\n * @param {string} methodName - method name\n * @returns {*} - method\n * @private\n */\nDownstreamElectronBE.prototype._getMethod = function (methodName) {\n  var names = methodName.split(".");\n  var i, j, method;\n  method = beMethods[names[0]];\n  for (i = 1, j = names.length; i < j; i++) {\n    method = method[names[i]];\n  }\n  return method;\n};\n\n/**\n *\n * @param {object} evt - event\n * @param {object} data - data from renderer\n * @param {number} target - target window id\n * @private\n * @returns {void}\n */\nDownstreamElectronBE.prototype._onApiRequest = function (evt, data, target) {\n  var promiseId = data.promiseId;\n  var argsObj = deserialize(data.args) || {};\n  var method = data.method;\n  var windowId = data.windowId;\n  target = windowId;\n  var args = [];\n  var i = 0;\n  while (argsObj.hasOwnProperty(i)) {\n    args.push(argsObj[i]);\n    i++;\n  }\n  this._apiMethods(method, promiseId, args, target);\n};\n\n/**\n * @private\n * @param {object} response - response\n * @param {number} target - window target id\n * @returns {void}\n */\nDownstreamElectronBE.prototype._send = function (response, target) {\n  try {\n    var windows = (__webpack_require__(7194).BrowserWindow.getAllWindows)();\n    for (var i = 0, j = windows.length; i < j; i++) {\n      if (windows[i].id === target) {\n        windows[i].webContents.send(\'downstreamElectronFE\', response);\n        break;\n      }\n    }\n  } catch (err) {\n    console.error("internal error ocurred", err);\n  }\n};\n\n/**\n * @private\n * @returns {void}\n */\nDownstreamElectronBE.prototype._serveOfflineContent = function () {\n  var self = this;\n  var maxOfflineContentPortRange = appSettings.getSettings().maxOfflineContentPortRange;\n  this.server = new Server(this.offlineController, this.downloadsController, maxOfflineContentPortRange, this._offlineContentPort);\n  this.server.serveOfflineContent(function (offlinePort) {\n    self._offlineContentPort = offlinePort;\n  });\n};\n\n/**\n *\n * @param {string} manifestId - manifest identifier\n * @returns {string} - offline path\n */\nDownstreamElectronBE.prototype.getOfflinePath = function (manifestId) {\n  var offlinePath = appSettings.getSettings().offlineDomain;\n  var offlineContentPort = this._offlineContentPort;\n  if (offlineContentPort) {\n    offlinePath += ":" + offlineContentPort;\n  }\n  offlinePath += "/" + encodeURIComponent(appSettings.getSettings().downloadsName) + "/" + encodeURIComponent(manifestId) + "/";\n  return offlinePath;\n};\n\n/**\n *\n * @param {string} subscriberId - subscriber identifier\n * @param {object} err - error\n * @param {object} result - result\n * @param {number} target - window target id\n * @param {boolean} subscriberFinished - download finished\n * @returns {void}\n */\nDownstreamElectronBE.prototype.processSubscriber = function (subscriberId, err, result, target, subscriberFinished) {\n  var response = {};\n  response.subscriberId = subscriberId;\n  response.status = err ? "ERROR" : "OK";\n  response.err = err;\n  response.result = result;\n  response.subscriberFinished = subscriberFinished;\n  this._send(response, target);\n  if (subscriberFinished) {\n    this.subscribersController.removeAllManifestSubscribersById(subscriberId);\n  }\n};\n\n//---------------------------\nmodule.exports = {\n  init: function init(userSettings) {\n    appSettings.load(userSettings);\n    return new DownstreamElectronBE();\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1630\n')},9977:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar fieldsPicker = __webpack_require__(1408);\nmodule.exports = function AudioRepresentation(attr) {\n  fieldsPicker(this, ["audioSamplingRate", "bandwidth", "id", "lang", "durationInS"], attr);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTk3Ny5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMsSUFBMEIsQ0FBQztBQUV4REMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0MsbUJBQW1CQSxDQUFFQyxJQUFJLEVBQUU7RUFDbkRMLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FDakIsbUJBQW1CLEVBQ25CLFdBQVcsRUFDWCxJQUFJLEVBQ0osTUFBTSxFQUNOLGFBQWEsQ0FDZCxFQUFFSyxJQUFJLENBQUM7QUFDVixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9tYW5pZmVzdC9qc29uL2F1ZGlvLXJlcHJlc2VudGF0aW9uLmpzP2UzMzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBmaWVsZHNQaWNrZXIgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9maWVsZHMtcGlja2VyXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEF1ZGlvUmVwcmVzZW50YXRpb24gKGF0dHIpIHtcbiAgZmllbGRzUGlja2VyKHRoaXMsIFtcbiAgICBcImF1ZGlvU2FtcGxpbmdSYXRlXCIsXG4gICAgXCJiYW5kd2lkdGhcIixcbiAgICBcImlkXCIsXG4gICAgXCJsYW5nXCIsXG4gICAgXCJkdXJhdGlvbkluU1wiXG4gIF0sIGF0dHIpO1xufTtcbiJdLCJuYW1lcyI6WyJmaWVsZHNQaWNrZXIiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIkF1ZGlvUmVwcmVzZW50YXRpb24iLCJhdHRyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9977\n')},2317:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar fieldsPicker = __webpack_require__(1408);\nmodule.exports = function LinkSave(attr) {\n  fieldsPicker(this, ["id", "contentType", "bandwidth", "remoteUrl", "stats", "localUrl"], attr);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMxNy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMsSUFBMEIsQ0FBQztBQUV4REMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0MsUUFBUUEsQ0FBRUMsSUFBSSxFQUFFO0VBQ3hDTCxZQUFZLENBQUMsSUFBSSxFQUFFLENBQ2pCLElBQUksRUFDSixhQUFhLEVBQ2IsV0FBVyxFQUNYLFdBQVcsRUFDWCxPQUFPLEVBQ1AsVUFBVSxDQUNYLEVBQUVLLElBQUksQ0FBQztBQUNWLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL21hbmlmZXN0L2pzb24vbGluay1zYXZlLmpzPzFhMDgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBmaWVsZHNQaWNrZXIgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9maWVsZHMtcGlja2VyXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIExpbmtTYXZlIChhdHRyKSB7XG4gIGZpZWxkc1BpY2tlcih0aGlzLCBbXG4gICAgXCJpZFwiLFxuICAgIFwiY29udGVudFR5cGVcIixcbiAgICBcImJhbmR3aWR0aFwiLFxuICAgIFwicmVtb3RlVXJsXCIsXG4gICAgXCJzdGF0c1wiLFxuICAgIFwibG9jYWxVcmxcIlxuICBdLCBhdHRyKTtcbn07Il0sIm5hbWVzIjpbImZpZWxkc1BpY2tlciIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiTGlua1NhdmUiLCJhdHRyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2317\n')},1099:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar fieldsPicker = __webpack_require__(1408);\nmodule.exports = function TextRepresentation(attr) {\n  fieldsPicker(this, ["bandwidth", "id", "lang", "durationInS"], attr);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA5OS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMsSUFBMEIsQ0FBQztBQUN4REMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0Msa0JBQWtCQSxDQUFFQyxJQUFJLEVBQUU7RUFDbERMLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FDakIsV0FBVyxFQUNYLElBQUksRUFDSixNQUFNLEVBQ04sYUFBYSxDQUNkLEVBQUVLLElBQUksQ0FBQztBQUNWLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL21hbmlmZXN0L2pzb24vdGV4dC1yZXByZXNlbnRhdGlvbi5qcz9lMDBiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgZmllbGRzUGlja2VyID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvZmllbGRzLXBpY2tlclwiKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVGV4dFJlcHJlc2VudGF0aW9uIChhdHRyKSB7XG4gIGZpZWxkc1BpY2tlcih0aGlzLCBbXG4gICAgXCJiYW5kd2lkdGhcIixcbiAgICBcImlkXCIsXG4gICAgXCJsYW5nXCIsXG4gICAgXCJkdXJhdGlvbkluU1wiXG4gIF0sIGF0dHIpO1xufTtcbiJdLCJuYW1lcyI6WyJmaWVsZHNQaWNrZXIiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIlRleHRSZXByZXNlbnRhdGlvbiIsImF0dHIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1099\n')},6756:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar fieldsPicker = __webpack_require__(1408);\nmodule.exports = function VideoRepresentation(attr) {\n  fieldsPicker(this, ["bandwidth", "id", "height", "lang", "width", "durationInS"], attr);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjc1Ni5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMsSUFBMEIsQ0FBQztBQUN4REMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0MsbUJBQW1CQSxDQUFFQyxJQUFJLEVBQUU7RUFDbkRMLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FDakIsV0FBVyxFQUNYLElBQUksRUFDSixRQUFRLEVBQ1IsTUFBTSxFQUNOLE9BQU8sRUFDUCxhQUFhLENBQ2QsRUFBRUssSUFBSSxDQUFDO0FBQ1YsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvbWFuaWZlc3QvanNvbi92aWRlby1yZXByZXNlbnRhdGlvbi5qcz81MWE4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgZmllbGRzUGlja2VyID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvZmllbGRzLXBpY2tlclwiKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVmlkZW9SZXByZXNlbnRhdGlvbiAoYXR0cikge1xuICBmaWVsZHNQaWNrZXIodGhpcywgW1xuICAgIFwiYmFuZHdpZHRoXCIsXG4gICAgXCJpZFwiLFxuICAgIFwiaGVpZ2h0XCIsXG4gICAgXCJsYW5nXCIsXG4gICAgXCJ3aWR0aFwiLFxuICAgIFwiZHVyYXRpb25JblNcIlxuICBdLCBhdHRyKTtcbn07XG4iXSwibmFtZXMiOlsiZmllbGRzUGlja2VyIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJWaWRlb1JlcHJlc2VudGF0aW9uIiwiYXR0ciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6756\n')},2069:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nvar _require = __webpack_require__(7194),\n  net = _require.net;\nvar appSettings = __webpack_require__(8557);\nvar ManifestLoader = function () {\n  function ManifestLoader() {}\n  ManifestLoader.prototype.load = function (url) {\n    return this.sendXMLHttpRequest(url);\n  };\n  ManifestLoader.prototype.sendXMLHttpRequest = function (url) {\n    var req_options = Object.assign({\n      url: url,\n      method: 'GET'\n    }, appSettings.getSettings().defaultManifestRequestOptions);\n    return new Promise(function (resolve, reject) {\n      var req = net.request(req_options);\n      req.chunkedEncoding = appSettings.getSettings().useChunkedEncoding;\n      req.on('error', function (err) {\n        reject(err);\n      });\n      req.on('response', function (response) {\n        response.on(\"error\", function (error) {\n          reject(new Error(\"MANIFEST LOAD FAILURE \" + error));\n        });\n        var error;\n        if (response.statusCode >= 400) {\n          error = response.statusMessage;\n        }\n        if (!error) {\n          var body = [];\n          response.on('data', function (chunk) {\n            body.push(chunk);\n          }).on('end', function () {\n            body = Buffer.concat(body);\n            resolve({\n              response: body,\n              url: url\n            });\n          });\n        } else {\n          reject(new Error(\"MANIFEST LOAD FAILURE \" + error));\n        }\n      });\n      req.end();\n    });\n  };\n  return ManifestLoader;\n}();\nexports.ManifestLoader = ManifestLoader;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjA2OS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFBQSxRQUFBLEdBQWNDLG1CQUFPLENBQUMsSUFBVSxDQUFDO0VBQTFCQyxHQUFHLEdBQUFGLFFBQUEsQ0FBSEUsR0FBRztBQUNWLElBQU1DLFdBQVcsR0FBR0YsbUJBQU8sQ0FBQyxJQUFvQixDQUFDO0FBRWpELElBQU1HLGNBQWMsR0FBSSxZQUFZO0VBQ2xDLFNBQVNBLGNBQWNBLENBQUEsRUFBSSxDQUFDO0VBRTVCQSxjQUFjLENBQUNDLFNBQVMsQ0FBQ0MsSUFBSSxHQUFHLFVBQVVDLEdBQUcsRUFBRTtJQUM3QyxPQUFPLElBQUksQ0FBQ0Msa0JBQWtCLENBQUNELEdBQUcsQ0FBQztFQUNyQyxDQUFDO0VBQ0RILGNBQWMsQ0FBQ0MsU0FBUyxDQUFDRyxrQkFBa0IsR0FBRyxVQUFVRCxHQUFHLEVBQUU7SUFDM0QsSUFBTUUsV0FBVyxHQUFHQyxNQUFNLENBQUNDLE1BQU0sQ0FBQztNQUNoQ0osR0FBRyxFQUFFQSxHQUFHO01BQ1JLLE1BQU0sRUFBRTtJQUNWLENBQUMsRUFBRVQsV0FBVyxDQUFDVSxXQUFXLENBQUMsQ0FBQyxDQUFDQyw2QkFBNkIsQ0FBQztJQUUzRCxPQUFPLElBQUlDLE9BQU8sQ0FBQyxVQUFVQyxPQUFPLEVBQUVDLE1BQU0sRUFBRTtNQUM1QyxJQUFJQyxHQUFHLEdBQUdoQixHQUFHLENBQUNpQixPQUFPLENBQUNWLFdBQVcsQ0FBQztNQUNsQ1MsR0FBRyxDQUFDRSxlQUFlLEdBQUdqQixXQUFXLENBQUNVLFdBQVcsQ0FBQyxDQUFDLENBQUNRLGtCQUFrQjtNQUVsRUgsR0FBRyxDQUFDSSxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQUNDLEdBQUcsRUFBSztRQUN2Qk4sTUFBTSxDQUFDTSxHQUFHLENBQUM7TUFDYixDQUFDLENBQUM7TUFFRkwsR0FBRyxDQUFDSSxFQUFFLENBQUMsVUFBVSxFQUFFLFVBQUNFLFFBQVEsRUFBSztRQUUvQkEsUUFBUSxDQUFDRixFQUFFLENBQUMsT0FBTyxFQUFFLFVBQVVHLEtBQUssRUFBRTtVQUNwQ1IsTUFBTSxDQUFDLElBQUlTLEtBQUssQ0FBQyx3QkFBd0IsR0FBR0QsS0FBSyxDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDO1FBRUYsSUFBSUEsS0FBSztRQUNULElBQUlELFFBQVEsQ0FBQ0csVUFBVSxJQUFJLEdBQUcsRUFBRTtVQUM1QkYsS0FBSyxHQUFHRCxRQUFRLENBQUNJLGFBQWE7UUFDbEM7UUFFQSxJQUFJLENBQUNILEtBQUssRUFBRTtVQUNWLElBQUlJLElBQUksR0FBRyxFQUFFO1VBQ2JMLFFBQVEsQ0FBQ0YsRUFBRSxDQUFDLE1BQU0sRUFBRSxVQUFDUSxLQUFLLEVBQUs7WUFDN0JELElBQUksQ0FBQ0UsSUFBSSxDQUFDRCxLQUFLLENBQUM7VUFDbEIsQ0FBQyxDQUFDLENBQUNSLEVBQUUsQ0FBQyxLQUFLLEVBQUUsWUFBTTtZQUNqQk8sSUFBSSxHQUFHRyxNQUFNLENBQUNDLE1BQU0sQ0FBQ0osSUFBSSxDQUFDO1lBQzFCYixPQUFPLENBQUM7Y0FBQ1EsUUFBUSxFQUFFSyxJQUFJO2NBQUV0QixHQUFHLEVBQUVBO1lBQUcsQ0FBQyxDQUFDO1VBQ3JDLENBQUMsQ0FBQztRQUNKLENBQUMsTUFBTTtVQUNIVSxNQUFNLENBQUMsSUFBSVMsS0FBSyxDQUFDLHdCQUF3QixHQUFHRCxLQUFLLENBQUMsQ0FBQztRQUN2RDtNQUNGLENBQUMsQ0FBQztNQUNGUCxHQUFHLENBQUNnQixHQUFHLENBQUMsQ0FBQztJQUNYLENBQUMsQ0FBQztFQUNKLENBQUM7RUFDRCxPQUFPOUIsY0FBYztBQUN2QixDQUFDLENBQUMsQ0FBRTtBQUNKK0Isc0JBQXNCLEdBQUcvQixjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9tYW5pZmVzdC9sb2FkZXIvbWFuaWZlc3QtbG9hZGVyLmpzPzk1NDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB7bmV0fSA9IHJlcXVpcmUoJ2VsZWN0cm9uJyk7XG5jb25zdCBhcHBTZXR0aW5ncyA9IHJlcXVpcmUoJy4uLy4uL2FwcC1zZXR0aW5ncycpO1xuXG5jb25zdCBNYW5pZmVzdExvYWRlciA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1hbmlmZXN0TG9hZGVyICgpIHt9XG5cbiAgTWFuaWZlc3RMb2FkZXIucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VuZFhNTEh0dHBSZXF1ZXN0KHVybCk7XG4gIH07XG4gIE1hbmlmZXN0TG9hZGVyLnByb3RvdHlwZS5zZW5kWE1MSHR0cFJlcXVlc3QgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgY29uc3QgcmVxX29wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIHVybDogdXJsLFxuICAgICAgbWV0aG9kOiAnR0VUJ1xuICAgIH0sIGFwcFNldHRpbmdzLmdldFNldHRpbmdzKCkuZGVmYXVsdE1hbmlmZXN0UmVxdWVzdE9wdGlvbnMpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGxldCByZXEgPSBuZXQucmVxdWVzdChyZXFfb3B0aW9ucyk7XG4gICAgICByZXEuY2h1bmtlZEVuY29kaW5nID0gYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS51c2VDaHVua2VkRW5jb2Rpbmc7XG5cbiAgICAgIHJlcS5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG5cbiAgICAgIHJlcS5vbigncmVzcG9uc2UnLCAocmVzcG9uc2UpID0+IHtcblxuICAgICAgICByZXNwb25zZS5vbihcImVycm9yXCIsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJNQU5JRkVTVCBMT0FEIEZBSUxVUkUgXCIgKyBlcnJvcikpO1xuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgZXJyb3I7XG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlID49IDQwMCkge1xuICAgICAgICAgICAgZXJyb3IgPSByZXNwb25zZS5zdGF0dXNNZXNzYWdlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgIGxldCBib2R5ID0gW107XG4gICAgICAgICAgcmVzcG9uc2Uub24oJ2RhdGEnLCAoY2h1bmspID0+IHtcbiAgICAgICAgICAgIGJvZHkucHVzaChjaHVuayk7XG4gICAgICAgICAgfSkub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgIGJvZHkgPSBCdWZmZXIuY29uY2F0KGJvZHkpO1xuICAgICAgICAgICAgcmVzb2x2ZSh7cmVzcG9uc2U6IGJvZHksIHVybDogdXJsfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiTUFOSUZFU1QgTE9BRCBGQUlMVVJFIFwiICsgZXJyb3IpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXEuZW5kKCk7XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBNYW5pZmVzdExvYWRlcjtcbn0oKSk7XG5leHBvcnRzLk1hbmlmZXN0TG9hZGVyID0gTWFuaWZlc3RMb2FkZXI7XG4iXSwibmFtZXMiOlsiX3JlcXVpcmUiLCJyZXF1aXJlIiwibmV0IiwiYXBwU2V0dGluZ3MiLCJNYW5pZmVzdExvYWRlciIsInByb3RvdHlwZSIsImxvYWQiLCJ1cmwiLCJzZW5kWE1MSHR0cFJlcXVlc3QiLCJyZXFfb3B0aW9ucyIsIk9iamVjdCIsImFzc2lnbiIsIm1ldGhvZCIsImdldFNldHRpbmdzIiwiZGVmYXVsdE1hbmlmZXN0UmVxdWVzdE9wdGlvbnMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlcSIsInJlcXVlc3QiLCJjaHVua2VkRW5jb2RpbmciLCJ1c2VDaHVua2VkRW5jb2RpbmciLCJvbiIsImVyciIsInJlc3BvbnNlIiwiZXJyb3IiLCJFcnJvciIsInN0YXR1c0NvZGUiLCJzdGF0dXNNZXNzYWdlIiwiYm9keSIsImNodW5rIiwicHVzaCIsIkJ1ZmZlciIsImNvbmNhdCIsImVuZCIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2069\n")},1826:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar fs = __webpack_require__(7147);\nvar path = __webpack_require__(1017);\n\n/**\n * @param {string} url - local url\n * @returns {Promise} promise\n * @constructor\n */\nfunction ManifestLocalLoader(url) {\n  return new Promise(function (resolve, reject) {\n    fs.readFile(path.resolve(url), "utf-8", function (err, content) {\n      if (!err) {\n        resolve(content);\n      } else {\n        reject(err);\n      }\n    });\n  });\n}\nmodule.exports = ManifestLocalLoader;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgyNi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxFQUFFLEdBQUdDLG1CQUFPLENBQUMsSUFBSSxDQUFDO0FBQ3hCLElBQU1DLElBQUksR0FBR0QsbUJBQU8sQ0FBQyxJQUFNLENBQUM7O0FBRTVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSxtQkFBbUJBLENBQUVDLEdBQUcsRUFBRTtFQUNqQyxPQUFPLElBQUlDLE9BQU8sQ0FBQyxVQUFVQyxPQUFPLEVBQUVDLE1BQU0sRUFBRTtJQUM1Q1AsRUFBRSxDQUFDUSxRQUFRLENBQUNOLElBQUksQ0FBQ0ksT0FBTyxDQUFDRixHQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsVUFBVUssR0FBRyxFQUFFQyxPQUFPLEVBQUU7TUFDOUQsSUFBSSxDQUFDRCxHQUFHLEVBQUU7UUFDUkgsT0FBTyxDQUFDSSxPQUFPLENBQUM7TUFDbEIsQ0FBQyxNQUFNO1FBQ0xILE1BQU0sQ0FBQ0UsR0FBRyxDQUFDO01BQ2I7SUFDRixDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7QUFDSjtBQUNBRSxNQUFNLENBQUNDLE9BQU8sR0FBR1QsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9tYW5pZmVzdC9sb2FkZXIvbWFuaWZlc3QtbG9jYWwtbG9hZGVyLmpzP2YzNjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBsb2NhbCB1cmxcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBwcm9taXNlXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTWFuaWZlc3RMb2NhbExvYWRlciAodXJsKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZnMucmVhZEZpbGUocGF0aC5yZXNvbHZlKHVybCksIFwidXRmLThcIiwgZnVuY3Rpb24gKGVyciwgY29udGVudCkge1xuICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgcmVzb2x2ZShjb250ZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gTWFuaWZlc3RMb2NhbExvYWRlcjtcbiJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwYXRoIiwiTWFuaWZlc3RMb2NhbExvYWRlciIsInVybCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVhZEZpbGUiLCJlcnIiLCJjb250ZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1826\n')},7151:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nvar ManifestLoader = __webpack_require__(2069);\nvar ManifestLocalLoader = __webpack_require__(1826);\n// const ManifestXML_1 = require(\"./../parser/manifest-xml\");\nvar ManifestXML_1 = __webpack_require__(5022);\nvar AllAdaptationSets_1 = __webpack_require__(3487);\nvar SnowflakeId_1 = __webpack_require__(4576);\nvar jsonRepresentation = __webpack_require__(7644);\nvar jsonRepresentationWithProtection = __webpack_require__(5628);\nvar manifestLoader = new ManifestLoader.ManifestLoader();\nvar urlParse = __webpack_require__(3720);\nvar encoding = __webpack_require__(2759);\nvar Manifest = function () {\n  function Manifest(id) {\n    if (!id) {\n      this.id = String(SnowflakeId_1.SnowflakeId.getUUID());\n    } else {\n      this.id = id;\n    }\n  }\n  Manifest.prototype._setUpUrl = function (url) {\n    var pathName = urlParse(url).pathname;\n    this.url = url;\n    this.url_domain = url.substring(0, url.lastIndexOf('/') + 1);\n    this.manifest_name = pathName.substring(pathName.lastIndexOf('/') + 1, pathName.length);\n  };\n  Manifest.prototype.load = function (url) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      _this._setUpUrl(url);\n      var p = manifestLoader.load(url);\n      p.then(function (v) {\n        var isEncodingUTF16 = encoding.isUTF16(v.response);\n        v.response = v.response.toString(isEncodingUTF16 ? 'utf16le' : 'utf-8');\n        var xml = v.response;\n        _this.manifestXML = new ManifestXML_1.ManifestXML();\n        _this.manifestXML.parse(xml, function () {\n          resolve();\n        }, function (e) {\n          reject(e);\n          throw new Error(\"Manifest parsing error\");\n        });\n      }, function (e) {\n        reject(e);\n      });\n    });\n  };\n  Manifest.prototype.loadWithManifest = function (url, manifest) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      _this._setUpUrl(url);\n      _this.manifestXML = new ManifestXML_1.ManifestXML();\n      _this.manifestXML.parse(manifest, function () {\n        resolve();\n      }, function (e) {\n        reject(e);\n        throw new Error(\"Manifest parsing error\");\n      });\n    });\n  };\n  Manifest.prototype.loadFromLocal = function (localPath, url) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      if (!url || !localPath) {\n        reject('wrong parameter');\n        return;\n      }\n      ManifestLocalLoader(localPath).then(function (str) {\n        _this._setUpUrl(url);\n        _this.manifestXML = new ManifestXML_1.ManifestXML();\n        _this.manifestXML.parse(str, function () {\n          resolve();\n        }, function (e) {\n          reject(e);\n        });\n      }, function (e) {\n        reject(e);\n      });\n    });\n  };\n  Manifest.prototype.loadFromStr = function (str, url) {\n    this.url_domain = url.substring(0, url.lastIndexOf('/') + 1);\n    this.manifest_name = url.substring(url.lastIndexOf('/') + 1, url.length);\n    this.manifestXML = new ManifestXML_1.ManifestXML();\n    this.manifestXML.parse(str);\n  };\n  Manifest.prototype.getAdaptationSets = function () {\n    var vid = this.manifestXML.getVideoAdaptation();\n    var audio = this.manifestXML.getAudioAdaptation();\n    var text = this.manifestXML.getTextAdaptation();\n    var all = new AllAdaptationSets_1.AllAdaptationSets(vid, audio, text);\n    return all;\n  };\n  Manifest.prototype.getVideoRepresentations = function () {\n    return this.manifestXML.getVideoAdaptation();\n  };\n  Manifest.prototype.getAudioRepresentations = function () {\n    return this.manifestXML.getAudioAdaptation();\n  };\n  Manifest.prototype.getTextRepresentations = function () {\n    return this.manifestXML.getTextAdaptation();\n  };\n  Manifest.prototype.getProtections = function () {\n    var protections = {};\n    protections.video = jsonRepresentationWithProtection(this.getVideoRepresentations());\n    protections.audio = jsonRepresentationWithProtection(this.getAudioRepresentations());\n    protections.text = jsonRepresentationWithProtection(this.getTextRepresentations());\n    return protections;\n  };\n  Manifest.prototype.getRemoteDomain = function () {\n    return this.url_domain;\n  };\n  Manifest.prototype.getManifestName = function () {\n    return this.manifest_name;\n  };\n  Manifest.prototype.getManifestUrl = function () {\n    return this.url;\n  };\n  Manifest.prototype.getManifestXML = function () {\n    return this.manifestXML.getManifestXML();\n  };\n  Manifest.prototype.removeNode = function () {\n    this.manifestXML.removeNode();\n  };\n  Manifest.prototype.getJsonInfo = function () {\n    var json = {};\n    json.id = this.id;\n    json.audio = jsonRepresentation(this.getAudioRepresentations());\n    json.video = jsonRepresentation(this.getVideoRepresentations());\n    json.text = jsonRepresentation(this.getTextRepresentations());\n    json.protections = this.getProtections();\n    return json;\n  };\n  return Manifest;\n}();\nexports.G = Manifest;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7151\n")},4033:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\nvar BASE64 = __webpack_require__(7769);\nvar pssh = __webpack_require__(2712);\nvar MPEG_DASH_PROTECTION_SCHEME_ID_URI = 'urn:mpeg:dash:mp4protection:2011';\nvar WIDEVINE_SCHEME_ID_URI = 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) {\n      d[p] = b[p];\n    }\n  }\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ManifestNode_1 = __webpack_require__(8243);\nvar RepresentationNode_1 = __webpack_require__(814);\nvar AdaptationSetNode = function (_super) {\n  __extends(AdaptationSetNode, _super);\n  function AdaptationSetNode(node, xml) {\n    _super.call(this, node, xml);\n    this.representationColl = [];\n    this.contentProtections = [];\n    this.parse();\n  }\n  AdaptationSetNode.prototype.parse = function () {\n    var rep = this.currentNode.getElementsByTagName('Representation');\n    for (var i = 0; i < rep.length; i++) {\n      var repNode = new RepresentationNode_1.RepresentationNode(rep[i], this.xml);\n      this.representationColl[i] = repNode;\n      if (this.representationColl[0].hasMimeType()) {\n        {\n          this.attributeList['mimeType'] = this.representationColl[0].getMimeType();\n        }\n      }\n    }\n    var contentProtections = this.currentNode.getElementsByTagName('ContentProtection');\n    var KID;\n    // find CENC KEY ID if there is some\n    for (var _i = 0; _i < contentProtections.length; _i++) {\n      var attrs = contentProtections[_i].attributes;\n      var schemeIdUri = attrs.getNamedItem(\"schemeIdUri\");\n      if (schemeIdUri && schemeIdUri.value.toLowerCase() === MPEG_DASH_PROTECTION_SCHEME_ID_URI) {\n        if (attrs.getNamedItem(\"cenc:default_KID\")) {\n          KID = attrs.getNamedItem(\"cenc:default_KID\").value;\n          // Get KID (base64 decoded) as byte array\n          KID = BASE64.toByteArray(KID);\n          break;\n        }\n      }\n    }\n    for (var _i2 = 0; _i2 < contentProtections.length; _i2++) {\n      var _attrs = contentProtections[_i2].attributes;\n      if (_attrs.getNamedItem(\"schemeIdUri\")) {\n        var scheme = _attrs.getNamedItem(\"schemeIdUri\").value.toLowerCase();\n        var cenc = contentProtections[_i2].getElementsByTagName(\"cenc:pssh\");\n        if (cenc.length) {\n          var contentProtection = {\n            schemeIdUri: scheme,\n            cencPSSH: cenc[0].childNodes[0].data\n          };\n          this.contentProtections.push(contentProtection);\n        } else if (KID && scheme === WIDEVINE_SCHEME_ID_URI) {\n          var psshWV = pssh.createWidevinePssh(KID);\n          var _contentProtection = {\n            schemeIdUri: scheme,\n            cencPSSH: psshWV\n          };\n          this.contentProtections.push(_contentProtection);\n        }\n      }\n    }\n  };\n  AdaptationSetNode.prototype.getContentProtections = function () {\n    return this.contentProtections;\n  };\n  AdaptationSetNode.prototype.getWidevineProtection = function () {\n    return this.contentProtections.filter(function (item) {\n      return item.schemeIdUri && item.schemeIdUri.toLowerCase() === WIDEVINE_SCHEME_ID_URI;\n    });\n  };\n  AdaptationSetNode.prototype.isMimeType = function (str) {\n    return this.attributeList['mimeType'].indexOf(str) != -1 ? true : false;\n  };\n  AdaptationSetNode.prototype.isContentType = function (str) {\n    return this.attributeList['contentType'] && this.attributeList['contentType'].indexOf(str) != -1 ? true : false;\n  };\n  return AdaptationSetNode;\n}(ManifestNode_1.ManifestNode);\nexports.AdaptationSetNode = AdaptationSetNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4033\n")},3487:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nvar AllAdaptationSets = function () {\n  function AllAdaptationSets(vid, audio, text) {\n    this.videoAdaptation = vid;\n    if (audio) {\n      this.audioAdaptation = audio;\n    }\n    if (text) {\n      this.textAdaptation = text;\n    }\n  }\n  return AllAdaptationSets;\n}();\nexports.AllAdaptationSets = AllAdaptationSets;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQ4Ny5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxpQkFBaUIsR0FBSSxZQUFZO0VBQ3JDLFNBQVNBLGlCQUFpQkEsQ0FBRUMsR0FBRyxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRTtJQUM1QyxJQUFJLENBQUNDLGVBQWUsR0FBR0gsR0FBRztJQUMxQixJQUFJQyxLQUFLLEVBQUU7TUFDVCxJQUFJLENBQUNHLGVBQWUsR0FBR0gsS0FBSztJQUM5QjtJQUNBLElBQUlDLElBQUksRUFBRTtNQUNSLElBQUksQ0FBQ0csY0FBYyxHQUFHSCxJQUFJO0lBQzVCO0VBQ0Y7RUFFQSxPQUFPSCxpQkFBaUI7QUFDMUIsQ0FBQyxDQUFDLENBQUU7QUFDSk8seUJBQXlCLEdBQUdQLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvbWFuaWZlc3QvcGFyc2VyL2FsbC1hZGFwdGF0aW9uLXNldHMuanM/NTdlYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IEFsbEFkYXB0YXRpb25TZXRzID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQWxsQWRhcHRhdGlvblNldHMgKHZpZCwgYXVkaW8sIHRleHQpIHtcbiAgICB0aGlzLnZpZGVvQWRhcHRhdGlvbiA9IHZpZDtcbiAgICBpZiAoYXVkaW8pIHtcbiAgICAgIHRoaXMuYXVkaW9BZGFwdGF0aW9uID0gYXVkaW87XG4gICAgfVxuICAgIGlmICh0ZXh0KSB7XG4gICAgICB0aGlzLnRleHRBZGFwdGF0aW9uID0gdGV4dDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gQWxsQWRhcHRhdGlvblNldHM7XG59KCkpO1xuZXhwb3J0cy5BbGxBZGFwdGF0aW9uU2V0cyA9IEFsbEFkYXB0YXRpb25TZXRzO1xuIl0sIm5hbWVzIjpbIkFsbEFkYXB0YXRpb25TZXRzIiwidmlkIiwiYXVkaW8iLCJ0ZXh0IiwidmlkZW9BZGFwdGF0aW9uIiwiYXVkaW9BZGFwdGF0aW9uIiwidGV4dEFkYXB0YXRpb24iLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3487\n")},5628:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar AudioRepresentation = __webpack_require__(9977);\nvar VideoRepresentation = __webpack_require__(6756);\nvar TextRepresentation = __webpack_require__(1099);\nmodule.exports = function jsonRepresentation(representations) {\n  var reprObj = [];\n  for (var i = 0, j = representations.length; i < j; i++) {\n    var cols = representations[i].representationColl;\n    for (var k = 0, l = cols.length; k < l; k++) {\n      var attr = cols[k].attributeList;\n      var contentType = attr.contentType || attr.mimeType;\n      if (contentType.indexOf("video") >= 0) {\n        contentType = "video";\n      } else if (contentType.indexOf("audio") >= 0) {\n        contentType = "audio";\n      } else {\n        contentType = "text";\n      }\n      switch (contentType) {\n        case "audio":\n          reprObj.push(new AudioRepresentation(attr));\n          break;\n        case "video":\n          reprObj.push(new VideoRepresentation(attr));\n          break;\n        default:\n          reprObj.push(new TextRepresentation(attr));\n      }\n      reprObj[k].protections = representations[i].contentProtections.slice();\n    }\n  }\n  return reprObj;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYyOC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxtQkFBbUIsR0FBR0MsbUJBQU8sQ0FBQyxJQUE4QixDQUFDO0FBQ25FLElBQU1DLG1CQUFtQixHQUFHRCxtQkFBTyxDQUFDLElBQThCLENBQUM7QUFDbkUsSUFBTUUsa0JBQWtCLEdBQUdGLG1CQUFPLENBQUMsSUFBNkIsQ0FBQztBQUVqRUcsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0Msa0JBQWtCQSxDQUFFQyxlQUFlLEVBQUU7RUFDN0QsSUFBSUMsT0FBTyxHQUFHLEVBQUU7RUFDaEIsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQyxDQUFDLEdBQUdILGVBQWUsQ0FBQ0ksTUFBTSxFQUFFRixDQUFDLEdBQUdDLENBQUMsRUFBRUQsQ0FBQyxFQUFFLEVBQUU7SUFDdEQsSUFBTUcsSUFBSSxHQUFHTCxlQUFlLENBQUNFLENBQUMsQ0FBQyxDQUFDSSxrQkFBa0I7SUFDbEQsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQyxDQUFDLEdBQUdILElBQUksQ0FBQ0QsTUFBTSxFQUFFRyxDQUFDLEdBQUdDLENBQUMsRUFBRUQsQ0FBQyxFQUFFLEVBQUU7TUFDM0MsSUFBTUUsSUFBSSxHQUFHSixJQUFJLENBQUNFLENBQUMsQ0FBQyxDQUFDRyxhQUFhO01BQ2xDLElBQUlDLFdBQVcsR0FBR0YsSUFBSSxDQUFDRSxXQUFXLElBQUlGLElBQUksQ0FBQ0csUUFBUTtNQUNuRCxJQUFJRCxXQUFXLENBQUNFLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDckNGLFdBQVcsR0FBRyxPQUFPO01BQ3ZCLENBQUMsTUFBTSxJQUFJQSxXQUFXLENBQUNFLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDNUNGLFdBQVcsR0FBRyxPQUFPO01BQ3ZCLENBQUMsTUFBTTtRQUNMQSxXQUFXLEdBQUcsTUFBTTtNQUN0QjtNQUNBLFFBQVFBLFdBQVc7UUFDakIsS0FBSyxPQUFPO1VBQ1ZWLE9BQU8sQ0FBQ2EsSUFBSSxDQUFDLElBQUlyQixtQkFBbUIsQ0FBQ2dCLElBQUksQ0FBQyxDQUFDO1VBQzNDO1FBRUYsS0FBSyxPQUFPO1VBQ1ZSLE9BQU8sQ0FBQ2EsSUFBSSxDQUFDLElBQUluQixtQkFBbUIsQ0FBQ2MsSUFBSSxDQUFDLENBQUM7VUFDM0M7UUFFRjtVQUNFUixPQUFPLENBQUNhLElBQUksQ0FBQyxJQUFJbEIsa0JBQWtCLENBQUNhLElBQUksQ0FBQyxDQUFDO01BQzlDO01BQ0FSLE9BQU8sQ0FBQ00sQ0FBQyxDQUFDLENBQUNRLFdBQVcsR0FBR2YsZUFBZSxDQUFDRSxDQUFDLENBQUMsQ0FBQ2Msa0JBQWtCLENBQUNDLEtBQUssQ0FBQyxDQUFDO0lBQ3hFO0VBRUY7RUFDQSxPQUFPaEIsT0FBTztBQUNoQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9tYW5pZmVzdC9wYXJzZXIvanNvbi1yZXByZXNlbnRhdGlvbi13aXRoLXByb3RlY3Rpb24uanM/NTE0YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IEF1ZGlvUmVwcmVzZW50YXRpb24gPSByZXF1aXJlKFwiLi4vanNvbi9hdWRpby1yZXByZXNlbnRhdGlvblwiKTtcbmNvbnN0IFZpZGVvUmVwcmVzZW50YXRpb24gPSByZXF1aXJlKFwiLi4vanNvbi92aWRlby1yZXByZXNlbnRhdGlvblwiKTtcbmNvbnN0IFRleHRSZXByZXNlbnRhdGlvbiA9IHJlcXVpcmUoXCIuLi9qc29uL3RleHQtcmVwcmVzZW50YXRpb25cIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ganNvblJlcHJlc2VudGF0aW9uIChyZXByZXNlbnRhdGlvbnMpIHtcbiAgbGV0IHJlcHJPYmogPSBbXTtcbiAgZm9yIChsZXQgaSA9IDAsIGogPSByZXByZXNlbnRhdGlvbnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgY29uc3QgY29scyA9IHJlcHJlc2VudGF0aW9uc1tpXS5yZXByZXNlbnRhdGlvbkNvbGw7XG4gICAgZm9yIChsZXQgayA9IDAsIGwgPSBjb2xzLmxlbmd0aDsgayA8IGw7IGsrKykge1xuICAgICAgY29uc3QgYXR0ciA9IGNvbHNba10uYXR0cmlidXRlTGlzdDtcbiAgICAgIGxldCBjb250ZW50VHlwZSA9IGF0dHIuY29udGVudFR5cGUgfHwgYXR0ci5taW1lVHlwZTtcbiAgICAgIGlmIChjb250ZW50VHlwZS5pbmRleE9mKFwidmlkZW9cIikgPj0gMCkge1xuICAgICAgICBjb250ZW50VHlwZSA9IFwidmlkZW9cIjtcbiAgICAgIH0gZWxzZSBpZiAoY29udGVudFR5cGUuaW5kZXhPZihcImF1ZGlvXCIpID49IDApIHtcbiAgICAgICAgY29udGVudFR5cGUgPSBcImF1ZGlvXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZW50VHlwZSA9IFwidGV4dFwiO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChjb250ZW50VHlwZSkge1xuICAgICAgICBjYXNlIFwiYXVkaW9cIjpcbiAgICAgICAgICByZXByT2JqLnB1c2gobmV3IEF1ZGlvUmVwcmVzZW50YXRpb24oYXR0cikpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJ2aWRlb1wiOlxuICAgICAgICAgIHJlcHJPYmoucHVzaChuZXcgVmlkZW9SZXByZXNlbnRhdGlvbihhdHRyKSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXByT2JqLnB1c2gobmV3IFRleHRSZXByZXNlbnRhdGlvbihhdHRyKSk7XG4gICAgICB9XG4gICAgICByZXByT2JqW2tdLnByb3RlY3Rpb25zID0gcmVwcmVzZW50YXRpb25zW2ldLmNvbnRlbnRQcm90ZWN0aW9ucy5zbGljZSgpO1xuICAgIH1cblxuICB9XG4gIHJldHVybiByZXByT2JqO1xufTtcbiJdLCJuYW1lcyI6WyJBdWRpb1JlcHJlc2VudGF0aW9uIiwicmVxdWlyZSIsIlZpZGVvUmVwcmVzZW50YXRpb24iLCJUZXh0UmVwcmVzZW50YXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwianNvblJlcHJlc2VudGF0aW9uIiwicmVwcmVzZW50YXRpb25zIiwicmVwck9iaiIsImkiLCJqIiwibGVuZ3RoIiwiY29scyIsInJlcHJlc2VudGF0aW9uQ29sbCIsImsiLCJsIiwiYXR0ciIsImF0dHJpYnV0ZUxpc3QiLCJjb250ZW50VHlwZSIsIm1pbWVUeXBlIiwiaW5kZXhPZiIsInB1c2giLCJwcm90ZWN0aW9ucyIsImNvbnRlbnRQcm90ZWN0aW9ucyIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5628\n')},7644:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar AudioRepresentation = __webpack_require__(9977);\nvar VideoRepresentation = __webpack_require__(6756);\nvar TextRepresentation = __webpack_require__(1099);\nmodule.exports = function jsonRepresentation(representations) {\n  var reprObj = [];\n  for (var i = 0, j = representations.length; i < j; i++) {\n    var cols = representations[i].representationColl;\n    for (var k = 0, l = cols.length; k < l; k++) {\n      var attr = cols[k].attributeList;\n      var contentType = attr.contentType || attr.mimeType;\n      if (contentType.indexOf("video") >= 0) {\n        contentType = "video";\n      } else if (contentType.indexOf("audio") >= 0) {\n        contentType = "audio";\n      } else {\n        contentType = "text";\n      }\n      switch (contentType) {\n        case "audio":\n          reprObj.push(new AudioRepresentation(attr));\n          break;\n        case "video":\n          reprObj.push(new VideoRepresentation(attr));\n          break;\n        default:\n          reprObj.push(new TextRepresentation(attr));\n      }\n    }\n  }\n  return reprObj;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzY0NC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxtQkFBbUIsR0FBR0MsbUJBQU8sQ0FBQyxJQUE4QixDQUFDO0FBQ25FLElBQU1DLG1CQUFtQixHQUFHRCxtQkFBTyxDQUFDLElBQThCLENBQUM7QUFDbkUsSUFBTUUsa0JBQWtCLEdBQUdGLG1CQUFPLENBQUMsSUFBNkIsQ0FBQztBQUVqRUcsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0Msa0JBQWtCQSxDQUFFQyxlQUFlLEVBQUU7RUFDN0QsSUFBSUMsT0FBTyxHQUFHLEVBQUU7RUFDaEIsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQyxDQUFDLEdBQUdILGVBQWUsQ0FBQ0ksTUFBTSxFQUFFRixDQUFDLEdBQUdDLENBQUMsRUFBRUQsQ0FBQyxFQUFFLEVBQUU7SUFDdEQsSUFBTUcsSUFBSSxHQUFHTCxlQUFlLENBQUNFLENBQUMsQ0FBQyxDQUFDSSxrQkFBa0I7SUFDbEQsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQyxDQUFDLEdBQUdILElBQUksQ0FBQ0QsTUFBTSxFQUFFRyxDQUFDLEdBQUdDLENBQUMsRUFBRUQsQ0FBQyxFQUFFLEVBQUU7TUFDM0MsSUFBTUUsSUFBSSxHQUFHSixJQUFJLENBQUNFLENBQUMsQ0FBQyxDQUFDRyxhQUFhO01BQ2xDLElBQUlDLFdBQVcsR0FBR0YsSUFBSSxDQUFDRSxXQUFXLElBQUlGLElBQUksQ0FBQ0csUUFBUTtNQUNuRCxJQUFJRCxXQUFXLENBQUNFLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDckNGLFdBQVcsR0FBRyxPQUFPO01BQ3ZCLENBQUMsTUFBTSxJQUFJQSxXQUFXLENBQUNFLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDNUNGLFdBQVcsR0FBRyxPQUFPO01BQ3ZCLENBQUMsTUFBTTtRQUNMQSxXQUFXLEdBQUcsTUFBTTtNQUN0QjtNQUNBLFFBQVFBLFdBQVc7UUFDakIsS0FBSyxPQUFPO1VBQ1ZWLE9BQU8sQ0FBQ2EsSUFBSSxDQUFDLElBQUlyQixtQkFBbUIsQ0FBQ2dCLElBQUksQ0FBQyxDQUFDO1VBQzNDO1FBRUYsS0FBSyxPQUFPO1VBQ1ZSLE9BQU8sQ0FBQ2EsSUFBSSxDQUFDLElBQUluQixtQkFBbUIsQ0FBQ2MsSUFBSSxDQUFDLENBQUM7VUFDM0M7UUFFRjtVQUNFUixPQUFPLENBQUNhLElBQUksQ0FBQyxJQUFJbEIsa0JBQWtCLENBQUNhLElBQUksQ0FBQyxDQUFDO01BQzlDO0lBQ0Y7RUFDRjtFQUNBLE9BQU9SLE9BQU87QUFDaEIsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvbWFuaWZlc3QvcGFyc2VyL2pzb24tcmVwcmVzZW50YXRpb24uanM/MWM4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IEF1ZGlvUmVwcmVzZW50YXRpb24gPSByZXF1aXJlKFwiLi4vanNvbi9hdWRpby1yZXByZXNlbnRhdGlvblwiKTtcbmNvbnN0IFZpZGVvUmVwcmVzZW50YXRpb24gPSByZXF1aXJlKFwiLi4vanNvbi92aWRlby1yZXByZXNlbnRhdGlvblwiKTtcbmNvbnN0IFRleHRSZXByZXNlbnRhdGlvbiA9IHJlcXVpcmUoXCIuLi9qc29uL3RleHQtcmVwcmVzZW50YXRpb25cIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ganNvblJlcHJlc2VudGF0aW9uIChyZXByZXNlbnRhdGlvbnMpIHtcbiAgbGV0IHJlcHJPYmogPSBbXTtcbiAgZm9yIChsZXQgaSA9IDAsIGogPSByZXByZXNlbnRhdGlvbnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgY29uc3QgY29scyA9IHJlcHJlc2VudGF0aW9uc1tpXS5yZXByZXNlbnRhdGlvbkNvbGw7XG4gICAgZm9yIChsZXQgayA9IDAsIGwgPSBjb2xzLmxlbmd0aDsgayA8IGw7IGsrKykge1xuICAgICAgY29uc3QgYXR0ciA9IGNvbHNba10uYXR0cmlidXRlTGlzdDtcbiAgICAgIGxldCBjb250ZW50VHlwZSA9IGF0dHIuY29udGVudFR5cGUgfHwgYXR0ci5taW1lVHlwZTtcbiAgICAgIGlmIChjb250ZW50VHlwZS5pbmRleE9mKFwidmlkZW9cIikgPj0gMCkge1xuICAgICAgICBjb250ZW50VHlwZSA9IFwidmlkZW9cIjtcbiAgICAgIH0gZWxzZSBpZiAoY29udGVudFR5cGUuaW5kZXhPZihcImF1ZGlvXCIpID49IDApIHtcbiAgICAgICAgY29udGVudFR5cGUgPSBcImF1ZGlvXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZW50VHlwZSA9IFwidGV4dFwiO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChjb250ZW50VHlwZSkge1xuICAgICAgICBjYXNlIFwiYXVkaW9cIjpcbiAgICAgICAgICByZXByT2JqLnB1c2gobmV3IEF1ZGlvUmVwcmVzZW50YXRpb24oYXR0cikpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJ2aWRlb1wiOlxuICAgICAgICAgIHJlcHJPYmoucHVzaChuZXcgVmlkZW9SZXByZXNlbnRhdGlvbihhdHRyKSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXByT2JqLnB1c2gobmV3IFRleHRSZXByZXNlbnRhdGlvbihhdHRyKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXByT2JqO1xufTtcbiJdLCJuYW1lcyI6WyJBdWRpb1JlcHJlc2VudGF0aW9uIiwicmVxdWlyZSIsIlZpZGVvUmVwcmVzZW50YXRpb24iLCJUZXh0UmVwcmVzZW50YXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwianNvblJlcHJlc2VudGF0aW9uIiwicmVwcmVzZW50YXRpb25zIiwicmVwck9iaiIsImkiLCJqIiwibGVuZ3RoIiwiY29scyIsInJlcHJlc2VudGF0aW9uQ29sbCIsImsiLCJsIiwiYXR0ciIsImF0dHJpYnV0ZUxpc3QiLCJjb250ZW50VHlwZSIsIm1pbWVUeXBlIiwiaW5kZXhPZiIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7644\n')},8243:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nvar SnowflakeId_1 = __webpack_require__(4576);\nvar ManifestNode = function () {\n  function ManifestNode(node, xml) {\n    this.childCollection = [];\n    this.attributeList = {};\n    this.setCurrentNode(node);\n    this.setChildCollection(node.childNodes);\n    this.buildAttributeList(node, this.attributeList);\n    this.setParentNode(node.parentNode);\n    this.xml = xml;\n    this.id = SnowflakeId_1.SnowflakeId.getUUID();\n  }\n  ManifestNode.prototype.setParentNode = function (node) {\n    this.parentNode = node;\n  };\n  ManifestNode.prototype.setChildCollection = function (coll) {\n    this.childCollection = coll;\n  };\n  ManifestNode.prototype.setCurrentNode = function (node) {\n    this.currentNode = node;\n  };\n  ManifestNode.prototype.buildAttributeList = function (node, list) {\n    this.writeAttributesToList(node, list);\n  };\n  ManifestNode.prototype.writeAttributesToList = function (node, list) {\n    var attrList = node.attributes;\n    for (var attr in attrList) {\n      if (!list[attrList[attr].nodeName]) {\n        list[attrList[attr].nodeName] = attrList[attr].nodeValue;\n      }\n    }\n    if (node.parentNode !== null) {\n      this.buildAttributeList(node.parentNode, list);\n    }\n  };\n  ManifestNode.prototype.getCurrentNode = function () {\n    return this.currentNode;\n  };\n  ManifestNode.prototype.markNodeForDownload = function (value) {\n    var newAtt = this.xml.createAttribute('markForDownload');\n    if (!value) {\n      this.currentNode.removeAttribute('markForDownload');\n    } else {\n      newAtt.value = value.toString();\n      this.currentNode.setAttributeNode(newAtt);\n    }\n  };\n  ManifestNode.prototype.getAttributeList = function () {\n    return this.attributeList;\n  };\n  return ManifestNode;\n}();\nexports.ManifestNode = ManifestNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE1BQU0sQ0FBQztJQUMzQztFQUNGLENBQUM7RUFDRDNCLFlBQVksQ0FBQ2MsU0FBUyxDQUFDa0IsZ0JBQWdCLEdBQUcsWUFBWTtJQUNwRCxPQUFPLElBQUksQ0FBQzVCLGFBQWE7RUFDM0IsQ0FBQztFQUNELE9BQU9KLFlBQVk7QUFDckIsQ0FBQyxDQUFDLENBQUU7QUFDSmlDLG9CQUFvQixHQUFHakMsWUFBWSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvbWFuaWZlc3QvcGFyc2VyL21hbmlmZXN0LW5vZGUuanM/MzFiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFNub3dmbGFrZUlkXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9zbm93Zmxha2UtaWRcIik7XG5jb25zdCBNYW5pZmVzdE5vZGUgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNYW5pZmVzdE5vZGUgKG5vZGUsIHhtbCkge1xuICAgIHRoaXMuY2hpbGRDb2xsZWN0aW9uID0gW107XG4gICAgdGhpcy5hdHRyaWJ1dGVMaXN0ID0ge307XG4gICAgdGhpcy5zZXRDdXJyZW50Tm9kZShub2RlKTtcbiAgICB0aGlzLnNldENoaWxkQ29sbGVjdGlvbihub2RlLmNoaWxkTm9kZXMpO1xuICAgIHRoaXMuYnVpbGRBdHRyaWJ1dGVMaXN0KG5vZGUsIHRoaXMuYXR0cmlidXRlTGlzdCk7XG4gICAgdGhpcy5zZXRQYXJlbnROb2RlKG5vZGUucGFyZW50Tm9kZSk7XG4gICAgdGhpcy54bWwgPSB4bWw7XG4gICAgdGhpcy5pZCA9IFNub3dmbGFrZUlkXzEuU25vd2ZsYWtlSWQuZ2V0VVVJRCgpO1xuICB9XG5cbiAgTWFuaWZlc3ROb2RlLnByb3RvdHlwZS5zZXRQYXJlbnROb2RlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB0aGlzLnBhcmVudE5vZGUgPSBub2RlO1xuICB9O1xuICBNYW5pZmVzdE5vZGUucHJvdG90eXBlLnNldENoaWxkQ29sbGVjdGlvbiA9IGZ1bmN0aW9uIChjb2xsKSB7XG4gICAgdGhpcy5jaGlsZENvbGxlY3Rpb24gPSBjb2xsO1xuICB9O1xuICBNYW5pZmVzdE5vZGUucHJvdG90eXBlLnNldEN1cnJlbnROb2RlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB0aGlzLmN1cnJlbnROb2RlID0gbm9kZTtcbiAgfTtcbiAgTWFuaWZlc3ROb2RlLnByb3RvdHlwZS5idWlsZEF0dHJpYnV0ZUxpc3QgPSBmdW5jdGlvbiAobm9kZSwgbGlzdCkge1xuICAgIHRoaXMud3JpdGVBdHRyaWJ1dGVzVG9MaXN0KG5vZGUsIGxpc3QpO1xuICB9O1xuICBNYW5pZmVzdE5vZGUucHJvdG90eXBlLndyaXRlQXR0cmlidXRlc1RvTGlzdCA9IGZ1bmN0aW9uIChub2RlLCBsaXN0KSB7XG4gICAgY29uc3QgYXR0ckxpc3QgPSBub2RlLmF0dHJpYnV0ZXM7XG4gICAgZm9yIChsZXQgYXR0ciBpbiBhdHRyTGlzdCkge1xuICAgICAgaWYgKCFsaXN0W2F0dHJMaXN0W2F0dHJdLm5vZGVOYW1lXSkge1xuICAgICAgICBsaXN0W2F0dHJMaXN0W2F0dHJdLm5vZGVOYW1lXSA9IGF0dHJMaXN0W2F0dHJdLm5vZGVWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5idWlsZEF0dHJpYnV0ZUxpc3Qobm9kZS5wYXJlbnROb2RlLCBsaXN0KTtcbiAgICB9XG4gIH07XG4gIE1hbmlmZXN0Tm9kZS5wcm90b3R5cGUuZ2V0Q3VycmVudE5vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudE5vZGU7XG4gIH07XG4gIE1hbmlmZXN0Tm9kZS5wcm90b3R5cGUubWFya05vZGVGb3JEb3dubG9hZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGNvbnN0IG5ld0F0dCA9IHRoaXMueG1sLmNyZWF0ZUF0dHJpYnV0ZSgnbWFya0ZvckRvd25sb2FkJyk7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgdGhpcy5jdXJyZW50Tm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ21hcmtGb3JEb3dubG9hZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdBdHQudmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgdGhpcy5jdXJyZW50Tm9kZS5zZXRBdHRyaWJ1dGVOb2RlKG5ld0F0dCk7XG4gICAgfVxuICB9O1xuICBNYW5pZmVzdE5vZGUucHJvdG90eXBlLmdldEF0dHJpYnV0ZUxpc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlTGlzdDtcbiAgfTtcbiAgcmV0dXJuIE1hbmlmZXN0Tm9kZTtcbn0oKSk7XG5leHBvcnRzLk1hbmlmZXN0Tm9kZSA9IE1hbmlmZXN0Tm9kZTtcbiJdLCJuYW1lcyI6WyJTbm93Zmxha2VJZF8xIiwicmVxdWlyZSIsIk1hbmlmZXN0Tm9kZSIsIm5vZGUiLCJ4bWwiLCJjaGlsZENvbGxlY3Rpb24iLCJhdHRyaWJ1dGVMaXN0Iiwic2V0Q3VycmVudE5vZGUiLCJzZXRDaGlsZENvbGxlY3Rpb24iLCJjaGlsZE5vZGVzIiwiYnVpbGRBdHRyaWJ1dGVMaXN0Iiwic2V0UGFyZW50Tm9kZSIsInBhcmVudE5vZGUiLCJpZCIsIlNub3dmbGFrZUlkIiwiZ2V0VVVJRCIsInByb3RvdHlwZSIsImNvbGwiLCJjdXJyZW50Tm9kZSIsImxpc3QiLCJ3cml0ZUF0dHJpYnV0ZXNUb0xpc3QiLCJhdHRyTGlzdCIsImF0dHJpYnV0ZXMiLCJhdHRyIiwibm9kZU5hbWUiLCJub2RlVmFsdWUiLCJnZXRDdXJyZW50Tm9kZSIsIm1hcmtOb2RlRm9yRG93bmxvYWQiLCJ2YWx1ZSIsIm5ld0F0dCIsImNyZWF0ZUF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsInRvU3RyaW5nIiwic2V0QXR0cmlidXRlTm9kZSIsImdldEF0dHJpYnV0ZUxpc3QiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8243\n")},886:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nvar AdaptationSetNode_1 = __webpack_require__(4033);\nvar DOMParser = (__webpack_require__(678).DOMParser);\nvar ManifestXML = function () {\n  function ManifestXML() {}\n  ManifestXML.prototype.parse = function (str, onSuccess, onError) {\n    var parser;\n    if (typeof onSuccess === \"function\" && typeof onError === \"function\") {\n      parser = new DOMParser({\n        errorHandler: {\n          warning: function warning() {},\n          error: onError,\n          fatalError: onError\n        }\n      });\n    } else {\n      parser = new DOMParser();\n    }\n    this.adaptationSetColl = [];\n    this.xml = parser.parseFromString(str, \"application/xml\");\n    this.parseAdaptations();\n    if (typeof onSuccess === \"function\") {\n      onSuccess();\n    }\n  };\n  ManifestXML.prototype.getAdaptationSetNodeName = function () {\n    return 'AdaptationSet';\n  };\n  ManifestXML.prototype.getRepresentationNodeName = function () {\n    return 'Representation';\n  };\n  ManifestXML.prototype.parseAdaptations = function () {\n    var adaptations = this.xml.getElementsByTagName('AdaptationSet');\n    for (var i = 0; i < adaptations.length; i++) {\n      var adaptNode = new AdaptationSetNode_1.AdaptationSetNode(adaptations[i], this.xml);\n      this.adaptationSetColl[i] = adaptNode;\n    }\n  };\n  ManifestXML.prototype.getVideoAdaptation = function () {\n    return this.getAdaptations('video');\n  };\n  ManifestXML.prototype.getAudioAdaptation = function () {\n    return this.getAdaptations('audio');\n  };\n  ManifestXML.prototype.getTextAdaptation = function () {\n    return this.getAdaptations('text');\n  };\n  ManifestXML.prototype.getManifestXML = function () {\n    return this.xml;\n  };\n  ManifestXML.prototype.getAdaptations = function (which) {\n    var adaptations = this.adaptationSetColl.map(function (item) {\n      return item;\n    }).filter(function (item) {\n      if (item.isMimeType(which) || item.isContentType(which)) {\n        return true;\n      }\n    });\n    return adaptations;\n  };\n  ManifestXML.cloneXML = function (xml) {\n    var newDocument = xml.implementation.createDocument(xml.namespaceURI, null, null);\n    var newNode = newDocument.importNode(xml.documentElement, true);\n    newDocument.appendChild(newNode);\n    return newDocument;\n  };\n  ManifestXML.prototype.removeNode = function () {\n    var self = this;\n    var representationCollection = this.xml.documentElement.getElementsByTagName(this.getRepresentationNodeName());\n    var adaptationCollection = this.xml.documentElement.getElementsByTagName(this.getAdaptationSetNodeName());\n    var repArray = [];\n    var adaptationArray = [];\n    for (var i = 0; i < representationCollection.length; i++) {\n      repArray[i] = representationCollection[i];\n    }\n    repArray.forEach(function (item) {\n      var markForDownload = item.attributes.getNamedItem(\"markForDownload\") && item.attributes.getNamedItem(\"markForDownload\").value == 'true' ? true : false;\n      if (!markForDownload) {\n        item.parentNode.removeChild(item);\n      }\n      item.removeAttribute('markForDownload');\n    }, this);\n    for (var _i = 0; _i < adaptationCollection.length; _i++) {\n      adaptationArray[_i] = adaptationCollection[_i];\n    }\n    adaptationArray.forEach(function (item) {\n      if (!item.getElementsByTagName(self.getRepresentationNodeName()).length) {\n        item.parentNode.removeChild(item);\n      }\n    });\n  };\n  return ManifestXML;\n}();\nexports.ManifestXML = ManifestXML;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///886\n")},4826:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nvar MediaUrl = function () {\n  function MediaUrl(baseURL, mediaFile, mimeType, url_domain) {\n    if (url_domain === void 0) {\n      url_domain = '';\n    }\n    this.baseURL = '';\n    if (baseURL.startsWith('http') === false) {\n      this.baseURL = baseURL;\n    }\n    this.mediaFile = mediaFile.indexOf('/') !== -1 ? this.truncateMediaFilePath(mediaFile) : mediaFile;\n    this.url_domain = url_domain;\n    this.mimeType = mimeType;\n  }\n  MediaUrl.prototype.truncateMediaFilePath = function (mediaFile) {\n    var startIndex = mediaFile.lastIndexOf('/');\n    var front = mediaFile.substring(0, startIndex);\n    var end = mediaFile.substring(startIndex + 1, mediaFile.length);\n    this.baseURL += front;\n    return end;\n  };\n  MediaUrl.prototype.getFileAddress = function () {\n    return this.baseURL + this.mediaFile;\n  };\n  return MediaUrl;\n}();\nexports.MediaUrl = MediaUrl;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDgyNi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxRQUFRLEdBQUksWUFBWTtFQUM1QixTQUFTQSxRQUFRQSxDQUFFQyxPQUFPLEVBQUVDLFNBQVMsRUFBRUMsUUFBUSxFQUFFQyxVQUFVLEVBQUU7SUFDM0QsSUFBSUEsVUFBVSxLQUFLLEtBQUssQ0FBQyxFQUFFO01BQ3pCQSxVQUFVLEdBQUcsRUFBRTtJQUNqQjtJQUNBLElBQUksQ0FBQ0gsT0FBTyxHQUFHLEVBQUU7SUFDakIsSUFBSUEsT0FBTyxDQUFDSSxVQUFVLENBQUMsTUFBTSxDQUFDLEtBQUssS0FBSyxFQUFFO01BQ3hDLElBQUksQ0FBQ0osT0FBTyxHQUFHQSxPQUFPO0lBQ3hCO0lBQ0EsSUFBSSxDQUFDQyxTQUFTLEdBQUlBLFNBQVMsQ0FBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFJLElBQUksQ0FBQ0MscUJBQXFCLENBQUNMLFNBQVMsQ0FBQyxHQUFHQSxTQUFTO0lBQ3BHLElBQUksQ0FBQ0UsVUFBVSxHQUFHQSxVQUFVO0lBQzVCLElBQUksQ0FBQ0QsUUFBUSxHQUFHQSxRQUFRO0VBQzFCO0VBRUFILFFBQVEsQ0FBQ1EsU0FBUyxDQUFDRCxxQkFBcUIsR0FBRyxVQUFVTCxTQUFTLEVBQUU7SUFDOUQsSUFBTU8sVUFBVSxHQUFHUCxTQUFTLENBQUNRLFdBQVcsQ0FBQyxHQUFHLENBQUM7SUFDN0MsSUFBTUMsS0FBSyxHQUFHVCxTQUFTLENBQUNVLFNBQVMsQ0FBQyxDQUFDLEVBQUVILFVBQVUsQ0FBQztJQUNoRCxJQUFNSSxHQUFHLEdBQUdYLFNBQVMsQ0FBQ1UsU0FBUyxDQUFDSCxVQUFVLEdBQUcsQ0FBQyxFQUFFUCxTQUFTLENBQUNZLE1BQU0sQ0FBQztJQUNqRSxJQUFJLENBQUNiLE9BQU8sSUFBSVUsS0FBSztJQUNyQixPQUFPRSxHQUFHO0VBQ1osQ0FBQztFQUNEYixRQUFRLENBQUNRLFNBQVMsQ0FBQ08sY0FBYyxHQUFHLFlBQVk7SUFDOUMsT0FBTyxJQUFJLENBQUNkLE9BQU8sR0FBRyxJQUFJLENBQUNDLFNBQVM7RUFDdEMsQ0FBQztFQUNELE9BQU9GLFFBQVE7QUFDakIsQ0FBQyxDQUFDLENBQUU7QUFDSmdCLGdCQUFnQixHQUFHaEIsUUFBUSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvbWFuaWZlc3QvcGFyc2VyL21lZGlhLXVybC5qcz8xMTdjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgTWVkaWFVcmwgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNZWRpYVVybCAoYmFzZVVSTCwgbWVkaWFGaWxlLCBtaW1lVHlwZSwgdXJsX2RvbWFpbikge1xuICAgIGlmICh1cmxfZG9tYWluID09PSB2b2lkIDApIHtcbiAgICAgIHVybF9kb21haW4gPSAnJztcbiAgICB9XG4gICAgdGhpcy5iYXNlVVJMID0gJyc7XG4gICAgaWYgKGJhc2VVUkwuc3RhcnRzV2l0aCgnaHR0cCcpID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5iYXNlVVJMID0gYmFzZVVSTDtcbiAgICB9XG4gICAgdGhpcy5tZWRpYUZpbGUgPSAobWVkaWFGaWxlLmluZGV4T2YoJy8nKSAhPT0gLTEpID8gdGhpcy50cnVuY2F0ZU1lZGlhRmlsZVBhdGgobWVkaWFGaWxlKSA6IG1lZGlhRmlsZTtcbiAgICB0aGlzLnVybF9kb21haW4gPSB1cmxfZG9tYWluO1xuICAgIHRoaXMubWltZVR5cGUgPSBtaW1lVHlwZTtcbiAgfVxuXG4gIE1lZGlhVXJsLnByb3RvdHlwZS50cnVuY2F0ZU1lZGlhRmlsZVBhdGggPSBmdW5jdGlvbiAobWVkaWFGaWxlKSB7XG4gICAgY29uc3Qgc3RhcnRJbmRleCA9IG1lZGlhRmlsZS5sYXN0SW5kZXhPZignLycpO1xuICAgIGNvbnN0IGZyb250ID0gbWVkaWFGaWxlLnN1YnN0cmluZygwLCBzdGFydEluZGV4KTtcbiAgICBjb25zdCBlbmQgPSBtZWRpYUZpbGUuc3Vic3RyaW5nKHN0YXJ0SW5kZXggKyAxLCBtZWRpYUZpbGUubGVuZ3RoKTtcbiAgICB0aGlzLmJhc2VVUkwgKz0gZnJvbnQ7XG4gICAgcmV0dXJuIGVuZDtcbiAgfTtcbiAgTWVkaWFVcmwucHJvdG90eXBlLmdldEZpbGVBZGRyZXNzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmJhc2VVUkwgKyB0aGlzLm1lZGlhRmlsZTtcbiAgfTtcbiAgcmV0dXJuIE1lZGlhVXJsO1xufSgpKTtcbmV4cG9ydHMuTWVkaWFVcmwgPSBNZWRpYVVybDtcbiJdLCJuYW1lcyI6WyJNZWRpYVVybCIsImJhc2VVUkwiLCJtZWRpYUZpbGUiLCJtaW1lVHlwZSIsInVybF9kb21haW4iLCJzdGFydHNXaXRoIiwiaW5kZXhPZiIsInRydW5jYXRlTWVkaWFGaWxlUGF0aCIsInByb3RvdHlwZSIsInN0YXJ0SW5kZXgiLCJsYXN0SW5kZXhPZiIsImZyb250Iiwic3Vic3RyaW5nIiwiZW5kIiwibGVuZ3RoIiwiZ2V0RmlsZUFkZHJlc3MiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4826\n")},7640:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) {\n      d[p] = b[p];\n    }\n  }\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar MediaUrl_1 = __webpack_require__(4826);\nvar SegmentInformation_1 = __webpack_require__(5848);\nvar FragmentInformation = function (_super) {\n  __extends(FragmentInformation, _super);\n  function FragmentInformation(presentationDuration, bandwidth, baseUrl, representationID, mimeType, segmentTemplate) {\n    _super.call(this, presentationDuration, bandwidth, baseUrl, representationID, mimeType);\n    if (segmentTemplate) {\n      this.segmentTemplate = segmentTemplate;\n      this.mediaTemplate = this.segmentTemplate.media;\n      this.mediaTemplate = this.replace$Bandwidth$(this.mediaTemplate, this.bandwidth);\n    }\n    if (this.segmentTemplate.media) {\n      this.timelineItemList = this.segmentTemplate.SegmentTimeline;\n    }\n    this.createFragmentUrlsFromTimeline(this.timelineItemList);\n  }\n  FragmentInformation.prototype.createFragmentUrlsFromTimeline = function (segmentNodes) {\n    for (var i = 0; i < segmentNodes.S.length; i++) {\n      var fragment = this.mediaTemplate;\n      fragment = this.replace$Time$(fragment, segmentNodes.S[i].t);\n      this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, fragment, this.mimeType));\n    }\n  };\n  return FragmentInformation;\n}(SegmentInformation_1.SegmentInformation);\nexports.FragmentInformation = FragmentInformation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZWN0cm9uLy4vYXBpL21hbmlmZXN0L3BhcnNlci9tc3MvZnJhZ21lbnQtaW5mb3JtYXRpb24uanM/YjgxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgZm9yIChsZXQgcCBpbiBiKSB7XG4gICAgICAgIGlmIChiLmhhc093blByb3BlcnR5KHApKSB7XG4gICAgICAgICAgZFtwXSA9IGJbcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIF9fICgpIHtcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7XG4gICAgICB9XG5cbiAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xuY29uc3QgTWVkaWFVcmxfMSA9IHJlcXVpcmUoXCIuLi9tZWRpYS11cmxcIik7XG5jb25zdCBTZWdtZW50SW5mb3JtYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9zZWdtZW50LWluZm9ybWF0aW9uXCIpO1xuY29uc3QgRnJhZ21lbnRJbmZvcm1hdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gIF9fZXh0ZW5kcyhGcmFnbWVudEluZm9ybWF0aW9uLCBfc3VwZXIpO1xuICBmdW5jdGlvbiBGcmFnbWVudEluZm9ybWF0aW9uIChwcmVzZW50YXRpb25EdXJhdGlvbiwgYmFuZHdpZHRoLCBiYXNlVXJsLCByZXByZXNlbnRhdGlvbklELCBtaW1lVHlwZSwgc2VnbWVudFRlbXBsYXRlKSB7XG4gICAgX3N1cGVyLmNhbGwodGhpcywgcHJlc2VudGF0aW9uRHVyYXRpb24sIGJhbmR3aWR0aCwgYmFzZVVybCwgcmVwcmVzZW50YXRpb25JRCwgbWltZVR5cGUpO1xuICAgIGlmIChzZWdtZW50VGVtcGxhdGUpIHtcbiAgICAgIHRoaXMuc2VnbWVudFRlbXBsYXRlID0gc2VnbWVudFRlbXBsYXRlO1xuICAgICAgdGhpcy5tZWRpYVRlbXBsYXRlID0gdGhpcy5zZWdtZW50VGVtcGxhdGUubWVkaWE7XG4gICAgICB0aGlzLm1lZGlhVGVtcGxhdGUgPSB0aGlzLnJlcGxhY2UkQmFuZHdpZHRoJCh0aGlzLm1lZGlhVGVtcGxhdGUsIHRoaXMuYmFuZHdpZHRoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc2VnbWVudFRlbXBsYXRlLm1lZGlhKSB7XG4gICAgICB0aGlzLnRpbWVsaW5lSXRlbUxpc3QgPSB0aGlzLnNlZ21lbnRUZW1wbGF0ZS5TZWdtZW50VGltZWxpbmU7XG4gICAgfVxuICAgIHRoaXMuY3JlYXRlRnJhZ21lbnRVcmxzRnJvbVRpbWVsaW5lKHRoaXMudGltZWxpbmVJdGVtTGlzdCk7XG4gIH1cblxuICBGcmFnbWVudEluZm9ybWF0aW9uLnByb3RvdHlwZS5jcmVhdGVGcmFnbWVudFVybHNGcm9tVGltZWxpbmUgPSBmdW5jdGlvbiAoc2VnbWVudE5vZGVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWdtZW50Tm9kZXMuUy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGZyYWdtZW50ID0gdGhpcy5tZWRpYVRlbXBsYXRlO1xuICAgICAgZnJhZ21lbnQgPSB0aGlzLnJlcGxhY2UkVGltZSQoZnJhZ21lbnQsIHNlZ21lbnROb2Rlcy5TW2ldLnQpO1xuXG4gICAgICB0aGlzLm1lZGlhVXJscy5wdXNoKG5ldyBNZWRpYVVybF8xLk1lZGlhVXJsKHRoaXMuYmFzZVVybCwgZnJhZ21lbnQsIHRoaXMubWltZVR5cGUpKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBGcmFnbWVudEluZm9ybWF0aW9uO1xufShTZWdtZW50SW5mb3JtYXRpb25fMS5TZWdtZW50SW5mb3JtYXRpb24pKTtcbmV4cG9ydHMuRnJhZ21lbnRJbmZvcm1hdGlvbiA9IEZyYWdtZW50SW5mb3JtYXRpb247Il0sIm5hbWVzIjpbIl9fZXh0ZW5kcyIsImQiLCJiIiwicCIsImhhc093blByb3BlcnR5IiwiX18iLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsIk1lZGlhVXJsXzEiLCJyZXF1aXJlIiwiU2VnbWVudEluZm9ybWF0aW9uXzEiLCJGcmFnbWVudEluZm9ybWF0aW9uIiwiX3N1cGVyIiwicHJlc2VudGF0aW9uRHVyYXRpb24iLCJiYW5kd2lkdGgiLCJiYXNlVXJsIiwicmVwcmVzZW50YXRpb25JRCIsIm1pbWVUeXBlIiwic2VnbWVudFRlbXBsYXRlIiwiY2FsbCIsIm1lZGlhVGVtcGxhdGUiLCJtZWRpYSIsInJlcGxhY2UkQmFuZHdpZHRoJCIsInRpbWVsaW5lSXRlbUxpc3QiLCJTZWdtZW50VGltZWxpbmUiLCJjcmVhdGVGcmFnbWVudFVybHNGcm9tVGltZWxpbmUiLCJzZWdtZW50Tm9kZXMiLCJpIiwiUyIsImxlbmd0aCIsImZyYWdtZW50IiwicmVwbGFjZSRUaW1lJCIsInQiLCJtZWRpYVVybHMiLCJwdXNoIiwiTWVkaWFVcmwiLCJTZWdtZW50SW5mb3JtYXRpb24iLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7640\n")},5022:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nvar ManifestXML_1 = __webpack_require__(886);\nvar StreamIndexNode_1 = __webpack_require__(2872);\nManifestXML_1.ManifestXML.prototype.getManifestType = function (xml) {\n  return xml.getElementsByTagName('SmoothStreamingMedia').length !== 0 ? 'MSS' : 'DASH';\n};\nManifestXML_1.ManifestXML.prototype.getAdaptationSetNodeName = function () {\n  return this.manifestType === 'MSS' ? 'StreamIndex' : 'AdaptationSet';\n};\nManifestXML_1.ManifestXML.prototype.getRepresentationNodeName = function () {\n  return this.manifestType === 'MSS' ? 'QualityLevel' : 'Representation';\n};\nManifestXML_1.ManifestXML.prototype.parseStreams = function () {\n  var streams = this.xml.getElementsByTagName('StreamIndex');\n  for (var i = 0; i < streams.length; i++) {\n    var streamNode = new StreamIndexNode_1.StreamIndexNode(streams[i], this.xml);\n    this.adaptationSetColl[i] = streamNode;\n  }\n};\nManifestXML_1.ManifestXML.prototype._parseAdaptations = ManifestXML_1.ManifestXML.prototype.parseAdaptations;\nManifestXML_1.ManifestXML.prototype.parseAdaptations = function () {\n  // Manifest type detection\n  this.manifestType = this.getManifestType(this.xml);\n  if (this.manifestType === 'MSS') {\n    return this.parseStreams();\n  } else {\n    return this._parseAdaptations();\n  }\n};\nexports.ManifestXML = ManifestXML_1.ManifestXML;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTAyMi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxhQUFhLEdBQUdDLG1CQUFPLENBQUMsR0FBaUIsQ0FBQztBQUNoRCxJQUFNQyxpQkFBaUIsR0FBR0QsbUJBQU8sQ0FBQyxJQUFvQixDQUFDO0FBR3ZERCxhQUFhLENBQUNHLFdBQVcsQ0FBQ0MsU0FBUyxDQUFDQyxlQUFlLEdBQUcsVUFBVUMsR0FBRyxFQUFFO0VBQ25FLE9BQU9BLEdBQUcsQ0FBQ0Msb0JBQW9CLENBQUMsc0JBQXNCLENBQUMsQ0FBQ0MsTUFBTSxLQUFLLENBQUMsR0FBRyxLQUFLLEdBQUcsTUFBTTtBQUN2RixDQUFDO0FBRURSLGFBQWEsQ0FBQ0csV0FBVyxDQUFDQyxTQUFTLENBQUNLLHdCQUF3QixHQUFHLFlBQVk7RUFDekUsT0FBUSxJQUFJLENBQUNDLFlBQVksS0FBSyxLQUFLLEdBQUksYUFBYSxHQUFHLGVBQWU7QUFDeEUsQ0FBQztBQUNEVixhQUFhLENBQUNHLFdBQVcsQ0FBQ0MsU0FBUyxDQUFDTyx5QkFBeUIsR0FBRyxZQUFZO0VBQzFFLE9BQVEsSUFBSSxDQUFDRCxZQUFZLEtBQUssS0FBSyxHQUFJLGNBQWMsR0FBRyxnQkFBZ0I7QUFDMUUsQ0FBQztBQUNEVixhQUFhLENBQUNHLFdBQVcsQ0FBQ0MsU0FBUyxDQUFDUSxZQUFZLEdBQUcsWUFBWTtFQUM3RCxJQUFNQyxPQUFPLEdBQUcsSUFBSSxDQUFDUCxHQUFHLENBQUNDLG9CQUFvQixDQUFDLGFBQWEsQ0FBQztFQUM1RCxLQUFLLElBQUlPLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0QsT0FBTyxDQUFDTCxNQUFNLEVBQUVNLENBQUMsRUFBRSxFQUFFO0lBQ3ZDLElBQU1DLFVBQVUsR0FBRyxJQUFJYixpQkFBaUIsQ0FBQ2MsZUFBZSxDQUFDSCxPQUFPLENBQUNDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ1IsR0FBRyxDQUFDO0lBQzlFLElBQUksQ0FBQ1csaUJBQWlCLENBQUNILENBQUMsQ0FBQyxHQUFHQyxVQUFVO0VBQ3hDO0FBQ0YsQ0FBQztBQUNEZixhQUFhLENBQUNHLFdBQVcsQ0FBQ0MsU0FBUyxDQUFDYyxpQkFBaUIsR0FBR2xCLGFBQWEsQ0FBQ0csV0FBVyxDQUFDQyxTQUFTLENBQUNlLGdCQUFnQjtBQUM1R25CLGFBQWEsQ0FBQ0csV0FBVyxDQUFDQyxTQUFTLENBQUNlLGdCQUFnQixHQUFHLFlBQVk7RUFDakU7RUFDQSxJQUFJLENBQUNULFlBQVksR0FBRyxJQUFJLENBQUNMLGVBQWUsQ0FBQyxJQUFJLENBQUNDLEdBQUcsQ0FBQztFQUVsRCxJQUFJLElBQUksQ0FBQ0ksWUFBWSxLQUFLLEtBQUssRUFBRTtJQUMvQixPQUFPLElBQUksQ0FBQ0UsWUFBWSxDQUFDLENBQUM7RUFDNUIsQ0FBQyxNQUFNO0lBQ0wsT0FBTyxJQUFJLENBQUNNLGlCQUFpQixDQUFDLENBQUM7RUFDakM7QUFDRixDQUFDO0FBRURFLG1CQUFtQixHQUFHcEIsYUFBYSxDQUFDRyxXQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9tYW5pZmVzdC9wYXJzZXIvbXNzL21hbmlmZXN0LXhtbC5qcz82NWQwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgTWFuaWZlc3RYTUxfMSA9IHJlcXVpcmUoJy4uL21hbmlmZXN0LXhtbCcpO1xuY29uc3QgU3RyZWFtSW5kZXhOb2RlXzEgPSByZXF1aXJlKCcuL3N0cmVhbUluZGV4LW5vZGUnKTtcblxuXG5NYW5pZmVzdFhNTF8xLk1hbmlmZXN0WE1MLnByb3RvdHlwZS5nZXRNYW5pZmVzdFR5cGUgPSBmdW5jdGlvbiAoeG1sKSB7XG4gIHJldHVybiB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ1Ntb290aFN0cmVhbWluZ01lZGlhJykubGVuZ3RoICE9PSAwID8gJ01TUycgOiAnREFTSCc7XG59O1xuXG5NYW5pZmVzdFhNTF8xLk1hbmlmZXN0WE1MLnByb3RvdHlwZS5nZXRBZGFwdGF0aW9uU2V0Tm9kZU5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAodGhpcy5tYW5pZmVzdFR5cGUgPT09ICdNU1MnKSA/ICdTdHJlYW1JbmRleCcgOiAnQWRhcHRhdGlvblNldCc7XG59O1xuTWFuaWZlc3RYTUxfMS5NYW5pZmVzdFhNTC5wcm90b3R5cGUuZ2V0UmVwcmVzZW50YXRpb25Ob2RlTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICh0aGlzLm1hbmlmZXN0VHlwZSA9PT0gJ01TUycpID8gJ1F1YWxpdHlMZXZlbCcgOiAnUmVwcmVzZW50YXRpb24nO1xufTtcbk1hbmlmZXN0WE1MXzEuTWFuaWZlc3RYTUwucHJvdG90eXBlLnBhcnNlU3RyZWFtcyA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qgc3RyZWFtcyA9IHRoaXMueG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdTdHJlYW1JbmRleCcpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0cmVhbXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBzdHJlYW1Ob2RlID0gbmV3IFN0cmVhbUluZGV4Tm9kZV8xLlN0cmVhbUluZGV4Tm9kZShzdHJlYW1zW2ldLCB0aGlzLnhtbCk7XG4gICAgdGhpcy5hZGFwdGF0aW9uU2V0Q29sbFtpXSA9IHN0cmVhbU5vZGU7XG4gIH1cbn07XG5NYW5pZmVzdFhNTF8xLk1hbmlmZXN0WE1MLnByb3RvdHlwZS5fcGFyc2VBZGFwdGF0aW9ucyA9IE1hbmlmZXN0WE1MXzEuTWFuaWZlc3RYTUwucHJvdG90eXBlLnBhcnNlQWRhcHRhdGlvbnM7XG5NYW5pZmVzdFhNTF8xLk1hbmlmZXN0WE1MLnByb3RvdHlwZS5wYXJzZUFkYXB0YXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAvLyBNYW5pZmVzdCB0eXBlIGRldGVjdGlvblxuICB0aGlzLm1hbmlmZXN0VHlwZSA9IHRoaXMuZ2V0TWFuaWZlc3RUeXBlKHRoaXMueG1sKTtcblxuICBpZiAodGhpcy5tYW5pZmVzdFR5cGUgPT09ICdNU1MnKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyc2VTdHJlYW1zKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRoaXMuX3BhcnNlQWRhcHRhdGlvbnMoKTtcbiAgfVxufTtcblxuZXhwb3J0cy5NYW5pZmVzdFhNTCA9IE1hbmlmZXN0WE1MXzEuTWFuaWZlc3RYTUw7XG4iXSwibmFtZXMiOlsiTWFuaWZlc3RYTUxfMSIsInJlcXVpcmUiLCJTdHJlYW1JbmRleE5vZGVfMSIsIk1hbmlmZXN0WE1MIiwicHJvdG90eXBlIiwiZ2V0TWFuaWZlc3RUeXBlIiwieG1sIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJsZW5ndGgiLCJnZXRBZGFwdGF0aW9uU2V0Tm9kZU5hbWUiLCJtYW5pZmVzdFR5cGUiLCJnZXRSZXByZXNlbnRhdGlvbk5vZGVOYW1lIiwicGFyc2VTdHJlYW1zIiwic3RyZWFtcyIsImkiLCJzdHJlYW1Ob2RlIiwiU3RyZWFtSW5kZXhOb2RlIiwiYWRhcHRhdGlvblNldENvbGwiLCJfcGFyc2VBZGFwdGF0aW9ucyIsInBhcnNlQWRhcHRhdGlvbnMiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5022\n")},6543:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) {\n      d[p] = b[p];\n    }\n  }\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ManifestNode_1 = __webpack_require__(8243);\nvar IsoDurationParser_1 = __webpack_require__(453);\nvar FragmentInformation_1 = __webpack_require__(7640);\nvar TIME_SCALE_100_NANOSECOND_UNIT = 10000000.0;\nvar QualityLevelNode = function (_super) {\n  __extends(QualityLevelNode, _super);\n  function QualityLevelNode(node, xml) {\n    _super.call(this, node, xml);\n  }\n  QualityLevelNode.prototype.createSegmentInformation = function () {\n    var presentationDuration = IsoDurationParser_1.IsoDurationParser.getDuration(parseFloat(this.attributeList['Duration'] / TIME_SCALE_100_NANOSECOND_UNIT));\n    var representationID = this.attributeList['id'];\n    this.bandwidth = this.attributeList['bandwidth'] ? parseInt(this.attributeList['bandwidth']) : -1;\n    this.segmentTemplate = this.mapMssSegmentTemplate();\n    this.segmentInformation = new FragmentInformation_1.FragmentInformation(presentationDuration, this.bandwidth, this.baseURL, representationID, this.attributeList['mimeType'], this.segmentTemplate);\n  };\n  QualityLevelNode.prototype.mapMssSegmentTemplate = function () {\n    var segmentTemplate = {};\n    var mediaUrl;\n    mediaUrl = this.attributeList['Url'].replace('{bitrate}', '$Bandwidth$');\n    mediaUrl = mediaUrl.replace('{start time}', '$Time$');\n    segmentTemplate.media = mediaUrl;\n    segmentTemplate.timescale = TIME_SCALE_100_NANOSECOND_UNIT;\n    segmentTemplate.SegmentTimeline = this.mapMssSegmentTimeline();\n    return segmentTemplate;\n  };\n  QualityLevelNode.prototype.mapMssSegmentTimeline = function () {\n    var segmentTimeline = {};\n    var chunks = this.currentNode.parentNode.getElementsByTagName('c');\n    var segments = [];\n    var segment;\n    var prevSegment;\n    var tManifest;\n    var i;\n    var duration = 0;\n    for (i = 0; i < chunks.length; i++) {\n      segment = {};\n\n      // Get time 't' attribute value\n      tManifest = chunks[i].getAttribute('t');\n\n      // => segment.tManifest = original timestamp value as a string (for constructing the fragment request url, see DashHandler)\n      // => segment.t = number value of timestamp (maybe rounded value, but only for 0.1 microsecond)\n      segment.tManifest = parseFloat(tManifest);\n      segment.t = parseFloat(tManifest);\n\n      // Get duration 'd' attribute value\n      segment.d = parseFloat(chunks[i].getAttribute('d'));\n\n      // If 't' not defined for first segment then t=0\n      if (i === 0 && !segment.t) {\n        segment.t = 0;\n      }\n      if (i > 0) {\n        prevSegment = segments[segments.length - 1];\n        // Update previous segment duration if not defined\n        if (!prevSegment.d) {\n          if (prevSegment.tManifest) {\n            prevSegment.d = parseFloat(tManifest) - parseFloat(prevSegment.tManifest);\n          } else {\n            prevSegment.d = segment.t - prevSegment.t;\n          }\n        }\n        // Set segment absolute timestamp if not set in manifest\n        if (!segment.t) {\n          if (prevSegment.tManifest) {\n            segment.tManifest = parseFloat(prevSegment.tManifest) + prevSegment.d;\n            segment.t = parseFloat(segment.tManifest);\n          } else {\n            segment.t = prevSegment.t + prevSegment.d;\n          }\n        }\n      }\n      duration += segment.d;\n\n      // Create new segment\n      segments.push(segment);\n    }\n    segmentTimeline.S = segments;\n    segmentTimeline.S_asArray = segments;\n    segmentTimeline.duration = duration / TIME_SCALE_100_NANOSECOND_UNIT;\n    return segmentTimeline;\n  };\n  QualityLevelNode.prototype.writeAttributesToList = function (node, list) {\n    var attrList = node.attributes;\n    var mimeTypeMap = {\n      'video': 'video/mp4',\n      'audio': 'audio/mp4',\n      'text': 'application/mp4'\n    };\n    for (var i = 0; i < node.childNodes.length; i++) {\n      if (!this.baseURL && node.childNodes[i].nodeName == 'BaseURL') {\n        this.baseURL = node.childNodes[i].firstChild.nodeValue;\n      }\n      if (!this.segmentBase && node.childNodes[i].nodeName == 'SegmentBase') {\n        this.segmentBase = node.childNodes[i];\n      }\n      if (!this.segmentTemplate && node.childNodes[i].nodeName == 'SegmentTemplate') {\n        this.segmentTemplate = node.childNodes[i];\n      }\n      if (!this.segmentList && node.childNodes[i].nodeName == 'SegmentList') {\n        this.segmentList = node.childNodes[i];\n      }\n    }\n    for (var attr in attrList) {\n      if (!list[attrList[attr].nodeName]) {\n        list[attrList[attr].nodeName] = attrList[attr].nodeValue;\n      }\n    }\n    if (list['Type'] !== undefined) {\n      list['contentType'] = list['Type'];\n      list['mimeType'] = mimeTypeMap[list['contentType']];\n      list['bandwidth'] = list['Bitrate'];\n      list['width'] = list['MaxWidth'];\n      list['height'] = list['MaxHeight'];\n      list.lang = list['Language'] || 'und';\n      var indexId = list['Name'] ? list['Name'] : list['Type'];\n      // build id\n      list['id'] = indexId + '_' + list['Index'];\n      if (list['Type'] === 'audio') {\n        list.audioSamplingRate = list['SamplingRate'];\n      }\n    }\n    if (list['Duration'] !== undefined) {\n      list['durationInS'] = this.attributeList['Duration'] / TIME_SCALE_100_NANOSECOND_UNIT;\n    }\n    if (node.parentNode !== null) {\n      this.buildAttributeList(node.parentNode, list);\n    } else {\n      if (!this.segmentInformation) {\n        this.createSegmentInformation();\n      }\n    }\n    _super.prototype.writeAttributesToList.call(this, node, list);\n  };\n  QualityLevelNode.prototype.getMimeType = function () {\n    return this.attributeList['mimeType'];\n  };\n  QualityLevelNode.prototype.hasMimeType = function () {\n    return this.attributeList['mimeType'] ? true : false;\n  };\n  QualityLevelNode.prototype.getContentType = function () {\n    return this.attributeList['contentType'];\n  };\n  QualityLevelNode.prototype.hasContentType = function () {\n    return this.attributeList['contentType'] ? true : false;\n  };\n  return QualityLevelNode;\n}(ManifestNode_1.ManifestNode);\nexports.QualityLevelNode = QualityLevelNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6543\n")},2872:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\nvar BASE64 = __webpack_require__(7769);\nvar pssh = __webpack_require__(2712);\nvar DOMParser = (__webpack_require__(678).DOMParser);\nvar WIDEVINE_SCHEME_ID_URI = 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\nvar PLAYREADY_SCHEME_ID_URI = 'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95';\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) {\n      d[p] = b[p];\n    }\n  }\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AdaptationSetNode_1 = __webpack_require__(4033);\nvar QualityLevelNode_1 = __webpack_require__(6543);\nvar StreamIndexNode = function (_super) {\n  __extends(StreamIndexNode, _super);\n  function StreamIndexNode(node, xml) {\n    _super.call(this, node, xml);\n  }\n  StreamIndexNode.prototype.parse = function () {\n    var qualityLevels = this.currentNode.getElementsByTagName('QualityLevel');\n    for (var i = 0; i < qualityLevels.length; i++) {\n      var qualityLevelNode = new QualityLevelNode_1.QualityLevelNode(qualityLevels[i], this.xml);\n      this.representationColl[i] = qualityLevelNode;\n      if (this.representationColl[0].hasMimeType()) {\n        this.attributeList['mimeType'] = this.representationColl[0].getMimeType();\n      }\n      if (this.representationColl[0].hasContentType()) {\n        this.attributeList['mimeType'] = this.representationColl[0].getContentType();\n      }\n    }\n    var protection = this.xml.getElementsByTagName('Protection')[0];\n    if (protection !== undefined) {\n      var protectionHeader = protection.getElementsByTagName('ProtectionHeader')[0];\n      // Some packagers put newlines into the ProtectionHeader base64 string, which is not good\n      // because this cannot be correctly parsed. Let's just filter out any newlines found in there.\n      var psshPR = protectionHeader.firstChild.data.replace(/\\n|\\r/g, '');\n\n      // Get KID (in CENC format) from protection header\n      var KID = this.getKIDFromProtectionHeader(protectionHeader);\n\n      // Create ContentProtection for PlayReady\n      var cpPR = {\n        schemeIdUri: PLAYREADY_SCHEME_ID_URI,\n        cencPSSH: psshPR\n      };\n      this.contentProtections.push(cpPR);\n\n      // Create ContentProtection for Widevine (as a CENC protection)\n      var psshWV = pssh.createWidevinePssh(KID);\n      var cpWV = {\n        schemeIdUri: WIDEVINE_SCHEME_ID_URI,\n        cencPSSH: psshWV\n      };\n      this.contentProtections.push(cpWV);\n    }\n  };\n  StreamIndexNode.prototype.getKIDFromProtectionHeader = function (protectionHeader) {\n    var prHeader, wrmHeader, xmlReader, KID;\n\n    // Get PlayReady header as byte array (base64 decoded)\n    prHeader = BASE64.toByteArray(protectionHeader.firstChild.data);\n\n    // Get Right Management header (WRMHEADER) from PlayReady header\n    wrmHeader = this.getWRMHeaderFromPRHeader(prHeader);\n\n    // Convert from multi-byte to unicode\n    wrmHeader = new Uint16Array(wrmHeader.buffer);\n\n    // Convert to string\n    wrmHeader = String.fromCharCode.apply(null, wrmHeader);\n\n    // Parse <WRMHeader> to get KID field value\n    xmlReader = new DOMParser().parseFromString(wrmHeader, 'application/xml');\n    KID = xmlReader.getElementsByTagName('KID')[0].textContent;\n\n    // Get KID (base64 decoded) as byte array\n    KID = BASE64.toByteArray(KID);\n\n    // Convert UUID from little-endian to big-endian\n    this.convertUuidEndianness(KID);\n    return KID;\n  };\n  StreamIndexNode.prototype.convertUuidEndianness = function (uuid) {\n    this.swapBytes(uuid, 0, 3);\n    this.swapBytes(uuid, 1, 2);\n    this.swapBytes(uuid, 4, 5);\n    this.swapBytes(uuid, 6, 7);\n  };\n  StreamIndexNode.prototype.swapBytes = function (bytes, pos1, pos2) {\n    var temp = bytes[pos1];\n    bytes[pos1] = bytes[pos2];\n    bytes[pos2] = temp;\n  };\n  StreamIndexNode.prototype.getWRMHeaderFromPRHeader = function getWRMHeaderFromPRHeader(prHeader) {\n    var recordType, recordLength, recordValue;\n    var i = 0;\n\n    // Parse PlayReady header\n\n    // Length - 32 bits (LE format)\n    // var length = (prHeader[i + 3] << 24) + (prHeader[i + 2] << 16) + (prHeader[i + 1] << 8) + prHeader[i];\n    i += 4;\n\n    // Record count - 16 bits (LE format)\n    // var recordCount = (prHeader[i + 1] << 8) + prHeader[i];\n    i += 2;\n\n    // Parse records\n    while (i < prHeader.length) {\n      // Record type - 16 bits (LE format)\n      recordType = prHeader[i + 1] * 256 + prHeader[i];\n      i += 2;\n\n      // Check if Rights Management header (record type = 0x01)\n      if (recordType === 0x01) {\n        // Record length - 16 bits (LE format)\n        recordLength = prHeader[i + 1] * 256 + prHeader[i];\n        i += 2;\n\n        // Record value => contains <WRMHEADER>\n        recordValue = new Uint8Array(recordLength);\n        recordValue.set(prHeader.subarray(i, i + recordLength));\n        return recordValue;\n      }\n    }\n    return null;\n  };\n  return StreamIndexNode;\n}(AdaptationSetNode_1.AdaptationSetNode);\nexports.StreamIndexNode = StreamIndexNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDNkMsd0JBQXdCLEdBQUcsU0FBU0Esd0JBQXdCQSxDQUFFSixRQUFRLEVBQUU7SUFDaEcsSUFBSW1CLFVBQVUsRUFDVkMsWUFBWSxFQUNaQyxXQUFXO0lBQ2YsSUFBSWhELENBQUMsR0FBRyxDQUFDOztJQUVUOztJQUVBO0lBQ0E7SUFDQUEsQ0FBQyxJQUFJLENBQUM7O0lBRU47SUFDQTtJQUNBQSxDQUFDLElBQUksQ0FBQzs7SUFFTjtJQUNBLE9BQU9BLENBQUMsR0FBRzJCLFFBQVEsQ0FBQzFCLE1BQU0sRUFBRTtNQUN4QjtNQUNBNkMsVUFBVSxHQUFJbkIsUUFBUSxDQUFDM0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBSTJCLFFBQVEsQ0FBQzNCLENBQUMsQ0FBQztNQUNsREEsQ0FBQyxJQUFJLENBQUM7O01BRU47TUFDQSxJQUFJOEMsVUFBVSxLQUFLLElBQUksRUFBRTtRQUVyQjtRQUNBQyxZQUFZLEdBQUlwQixRQUFRLENBQUMzQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFJMkIsUUFBUSxDQUFDM0IsQ0FBQyxDQUFDO1FBQ3BEQSxDQUFDLElBQUksQ0FBQzs7UUFFTjtRQUNBZ0QsV0FBVyxHQUFHLElBQUlDLFVBQVUsQ0FBQ0YsWUFBWSxDQUFDO1FBQzFDQyxXQUFXLENBQUNFLEdBQUcsQ0FBQ3ZCLFFBQVEsQ0FBQ3dCLFFBQVEsQ0FBQ25ELENBQUMsRUFBRUEsQ0FBQyxHQUFHK0MsWUFBWSxDQUFDLENBQUM7UUFDdkQsT0FBT0MsV0FBVztNQUN0QjtJQUNKO0lBQ0EsT0FBTyxJQUFJO0VBQ2IsQ0FBQztFQUVELE9BQU96RCxlQUFlO0FBQ3hCLENBQUMsQ0FBQ0YsbUJBQW1CLENBQUMrRCxpQkFBaUIsQ0FBRTtBQUN6Q0MsdUJBQXVCLEdBQUc5RCxlQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9tYW5pZmVzdC9wYXJzZXIvbXNzL3N0cmVhbUluZGV4LW5vZGUuanM/MjM5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IEJBU0U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpO1xuY29uc3QgcHNzaCA9IHJlcXVpcmUoXCIuLi9wc3NoXCIpO1xuY29uc3QgRE9NUGFyc2VyID0gcmVxdWlyZSgneG1sZG9tJykuRE9NUGFyc2VyO1xuXG5jb25zdCBXSURFVklORV9TQ0hFTUVfSURfVVJJID0gJ3Vybjp1dWlkOmVkZWY4YmE5LTc5ZDYtNGFjZS1hM2M4LTI3ZGNkNTFkMjFlZCc7XG5jb25zdCBQTEFZUkVBRFlfU0NIRU1FX0lEX1VSSSA9ICd1cm46dXVpZDo5YTA0ZjA3OS05ODQwLTQyODYtYWI5Mi1lNjViZTA4ODVmOTUnO1xuXG5jb25zdCBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgIGZvciAobGV0IHAgaW4gYikge1xuICAgICAgICBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkge1xuICAgICAgICAgIGRbcF0gPSBiW3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBfXyAoKSB7XG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IgPSBkO1xuICAgICAgfVxuXG4gICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbmNvbnN0IEFkYXB0YXRpb25TZXROb2RlXzEgPSByZXF1aXJlKFwiLi4vYWRhcHRhdGlvbi1zZXQtbm9kZVwiKTtcbmNvbnN0IFF1YWxpdHlMZXZlbE5vZGVfMSA9IHJlcXVpcmUoXCIuL3F1YWxpdHlMZXZlbC1ub2RlXCIpO1xuXG5jb25zdCBTdHJlYW1JbmRleE5vZGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICBfX2V4dGVuZHMoU3RyZWFtSW5kZXhOb2RlLCBfc3VwZXIpO1xuICBmdW5jdGlvbiBTdHJlYW1JbmRleE5vZGUgKG5vZGUsIHhtbCkge1xuICAgIF9zdXBlci5jYWxsKHRoaXMsIG5vZGUsIHhtbCk7XG4gIH1cblxuICBTdHJlYW1JbmRleE5vZGUucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gKCkge1xuXG4gICAgbGV0IHF1YWxpdHlMZXZlbHMgPSB0aGlzLmN1cnJlbnROb2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdRdWFsaXR5TGV2ZWwnKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcXVhbGl0eUxldmVscy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcXVhbGl0eUxldmVsTm9kZSA9IG5ldyBRdWFsaXR5TGV2ZWxOb2RlXzEuUXVhbGl0eUxldmVsTm9kZShxdWFsaXR5TGV2ZWxzW2ldLCB0aGlzLnhtbCk7XG4gICAgICB0aGlzLnJlcHJlc2VudGF0aW9uQ29sbFtpXSA9IHF1YWxpdHlMZXZlbE5vZGU7XG4gICAgICBpZiAodGhpcy5yZXByZXNlbnRhdGlvbkNvbGxbMF0uaGFzTWltZVR5cGUoKSkge1xuICAgICAgICAgIHRoaXMuYXR0cmlidXRlTGlzdFsnbWltZVR5cGUnXSA9IHRoaXMucmVwcmVzZW50YXRpb25Db2xsWzBdLmdldE1pbWVUeXBlKCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5yZXByZXNlbnRhdGlvbkNvbGxbMF0uaGFzQ29udGVudFR5cGUoKSkge1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZUxpc3RbJ21pbWVUeXBlJ10gPSB0aGlzLnJlcHJlc2VudGF0aW9uQ29sbFswXS5nZXRDb250ZW50VHlwZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHByb3RlY3Rpb24gPSB0aGlzLnhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnUHJvdGVjdGlvbicpWzBdO1xuXG4gICAgaWYgKHByb3RlY3Rpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgcHJvdGVjdGlvbkhlYWRlciA9IHByb3RlY3Rpb24uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ1Byb3RlY3Rpb25IZWFkZXInKVswXTtcbiAgICAgIC8vIFNvbWUgcGFja2FnZXJzIHB1dCBuZXdsaW5lcyBpbnRvIHRoZSBQcm90ZWN0aW9uSGVhZGVyIGJhc2U2NCBzdHJpbmcsIHdoaWNoIGlzIG5vdCBnb29kXG4gICAgICAvLyBiZWNhdXNlIHRoaXMgY2Fubm90IGJlIGNvcnJlY3RseSBwYXJzZWQuIExldCdzIGp1c3QgZmlsdGVyIG91dCBhbnkgbmV3bGluZXMgZm91bmQgaW4gdGhlcmUuXG4gICAgICBjb25zdCBwc3NoUFIgPSBwcm90ZWN0aW9uSGVhZGVyLmZpcnN0Q2hpbGQuZGF0YS5yZXBsYWNlKC9cXG58XFxyL2csICcnKTtcblxuICAgICAgLy8gR2V0IEtJRCAoaW4gQ0VOQyBmb3JtYXQpIGZyb20gcHJvdGVjdGlvbiBoZWFkZXJcbiAgICAgIGNvbnN0IEtJRCA9IHRoaXMuZ2V0S0lERnJvbVByb3RlY3Rpb25IZWFkZXIocHJvdGVjdGlvbkhlYWRlcik7XG5cbiAgICAgIC8vIENyZWF0ZSBDb250ZW50UHJvdGVjdGlvbiBmb3IgUGxheVJlYWR5XG4gICAgICBjb25zdCBjcFBSID0ge1xuICAgICAgICBzY2hlbWVJZFVyaTogUExBWVJFQURZX1NDSEVNRV9JRF9VUkksXG4gICAgICAgIGNlbmNQU1NIOiBwc3NoUFJcbiAgICAgIH07XG4gICAgICB0aGlzLmNvbnRlbnRQcm90ZWN0aW9ucy5wdXNoKGNwUFIpO1xuXG4gICAgICAvLyBDcmVhdGUgQ29udGVudFByb3RlY3Rpb24gZm9yIFdpZGV2aW5lIChhcyBhIENFTkMgcHJvdGVjdGlvbilcbiAgICAgIGNvbnN0IHBzc2hXViA9IHBzc2guY3JlYXRlV2lkZXZpbmVQc3NoKEtJRCk7XG4gICAgICBjb25zdCBjcFdWID0ge1xuICAgICAgICBzY2hlbWVJZFVyaTogV0lERVZJTkVfU0NIRU1FX0lEX1VSSSxcbiAgICAgICAgY2VuY1BTU0g6IHBzc2hXVlxuICAgICAgfTtcbiAgICAgIHRoaXMuY29udGVudFByb3RlY3Rpb25zLnB1c2goY3BXVik7XG4gICAgfVxuICB9XG5cbiAgU3RyZWFtSW5kZXhOb2RlLnByb3RvdHlwZS5nZXRLSURGcm9tUHJvdGVjdGlvbkhlYWRlciA9IGZ1bmN0aW9uIChwcm90ZWN0aW9uSGVhZGVyKSB7XG4gICAgICBsZXQgcHJIZWFkZXIsXG4gICAgICAgICAgd3JtSGVhZGVyLFxuICAgICAgICAgIHhtbFJlYWRlcixcbiAgICAgICAgICBLSUQ7XG5cbiAgICAgIC8vIEdldCBQbGF5UmVhZHkgaGVhZGVyIGFzIGJ5dGUgYXJyYXkgKGJhc2U2NCBkZWNvZGVkKVxuICAgICAgcHJIZWFkZXIgPSBCQVNFNjQudG9CeXRlQXJyYXkocHJvdGVjdGlvbkhlYWRlci5maXJzdENoaWxkLmRhdGEpO1xuXG4gICAgICAvLyBHZXQgUmlnaHQgTWFuYWdlbWVudCBoZWFkZXIgKFdSTUhFQURFUikgZnJvbSBQbGF5UmVhZHkgaGVhZGVyXG4gICAgICB3cm1IZWFkZXIgPSB0aGlzLmdldFdSTUhlYWRlckZyb21QUkhlYWRlcihwckhlYWRlcik7XG5cbiAgICAgIC8vIENvbnZlcnQgZnJvbSBtdWx0aS1ieXRlIHRvIHVuaWNvZGVcbiAgICAgIHdybUhlYWRlciA9IG5ldyBVaW50MTZBcnJheSh3cm1IZWFkZXIuYnVmZmVyKTtcblxuICAgICAgLy8gQ29udmVydCB0byBzdHJpbmdcbiAgICAgIHdybUhlYWRlciA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgd3JtSGVhZGVyKTtcblxuICAgICAgLy8gUGFyc2UgPFdSTUhlYWRlcj4gdG8gZ2V0IEtJRCBmaWVsZCB2YWx1ZVxuICAgICAgeG1sUmVhZGVyID0gKG5ldyBET01QYXJzZXIoKSkucGFyc2VGcm9tU3RyaW5nKHdybUhlYWRlciwgJ2FwcGxpY2F0aW9uL3htbCcpO1xuICAgICAgS0lEID0geG1sUmVhZGVyLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdLSUQnKVswXS50ZXh0Q29udGVudDtcblxuICAgICAgLy8gR2V0IEtJRCAoYmFzZTY0IGRlY29kZWQpIGFzIGJ5dGUgYXJyYXlcbiAgICAgIEtJRCA9IEJBU0U2NC50b0J5dGVBcnJheShLSUQpO1xuXG4gICAgICAvLyBDb252ZXJ0IFVVSUQgZnJvbSBsaXR0bGUtZW5kaWFuIHRvIGJpZy1lbmRpYW5cbiAgICAgIHRoaXMuY29udmVydFV1aWRFbmRpYW5uZXNzKEtJRCk7XG5cbiAgICAgIHJldHVybiBLSUQ7XG4gIH07XG5cbiAgU3RyZWFtSW5kZXhOb2RlLnByb3RvdHlwZS5jb252ZXJ0VXVpZEVuZGlhbm5lc3MgPSBmdW5jdGlvbiAodXVpZCkge1xuICAgICAgdGhpcy5zd2FwQnl0ZXModXVpZCwgMCwgMyk7XG4gICAgICB0aGlzLnN3YXBCeXRlcyh1dWlkLCAxLCAyKTtcbiAgICAgIHRoaXMuc3dhcEJ5dGVzKHV1aWQsIDQsIDUpO1xuICAgICAgdGhpcy5zd2FwQnl0ZXModXVpZCwgNiwgNyk7XG4gIH07XG5cbiAgU3RyZWFtSW5kZXhOb2RlLnByb3RvdHlwZS5zd2FwQnl0ZXMgPSBmdW5jdGlvbiAoYnl0ZXMsIHBvczEsIHBvczIpIHtcbiAgICAgIGxldCB0ZW1wID0gYnl0ZXNbcG9zMV07XG4gICAgICBieXRlc1twb3MxXSA9IGJ5dGVzW3BvczJdO1xuICAgICAgYnl0ZXNbcG9zMl0gPSB0ZW1wO1xuICB9O1xuXG4gIFN0cmVhbUluZGV4Tm9kZS5wcm90b3R5cGUuZ2V0V1JNSGVhZGVyRnJvbVBSSGVhZGVyID0gZnVuY3Rpb24gZ2V0V1JNSGVhZGVyRnJvbVBSSGVhZGVyIChwckhlYWRlcikge1xuICAgIGxldCByZWNvcmRUeXBlLFxuICAgICAgICByZWNvcmRMZW5ndGgsXG4gICAgICAgIHJlY29yZFZhbHVlO1xuICAgIGxldCBpID0gMDtcblxuICAgIC8vIFBhcnNlIFBsYXlSZWFkeSBoZWFkZXJcblxuICAgIC8vIExlbmd0aCAtIDMyIGJpdHMgKExFIGZvcm1hdClcbiAgICAvLyB2YXIgbGVuZ3RoID0gKHBySGVhZGVyW2kgKyAzXSA8PCAyNCkgKyAocHJIZWFkZXJbaSArIDJdIDw8IDE2KSArIChwckhlYWRlcltpICsgMV0gPDwgOCkgKyBwckhlYWRlcltpXTtcbiAgICBpICs9IDQ7XG5cbiAgICAvLyBSZWNvcmQgY291bnQgLSAxNiBiaXRzIChMRSBmb3JtYXQpXG4gICAgLy8gdmFyIHJlY29yZENvdW50ID0gKHBySGVhZGVyW2kgKyAxXSA8PCA4KSArIHBySGVhZGVyW2ldO1xuICAgIGkgKz0gMjtcblxuICAgIC8vIFBhcnNlIHJlY29yZHNcbiAgICB3aGlsZSAoaSA8IHBySGVhZGVyLmxlbmd0aCkge1xuICAgICAgICAvLyBSZWNvcmQgdHlwZSAtIDE2IGJpdHMgKExFIGZvcm1hdClcbiAgICAgICAgcmVjb3JkVHlwZSA9IChwckhlYWRlcltpICsgMV0gKiAyNTYpICsgcHJIZWFkZXJbaV07XG4gICAgICAgIGkgKz0gMjtcblxuICAgICAgICAvLyBDaGVjayBpZiBSaWdodHMgTWFuYWdlbWVudCBoZWFkZXIgKHJlY29yZCB0eXBlID0gMHgwMSlcbiAgICAgICAgaWYgKHJlY29yZFR5cGUgPT09IDB4MDEpIHtcblxuICAgICAgICAgICAgLy8gUmVjb3JkIGxlbmd0aCAtIDE2IGJpdHMgKExFIGZvcm1hdClcbiAgICAgICAgICAgIHJlY29yZExlbmd0aCA9IChwckhlYWRlcltpICsgMV0gKiAyNTYpICsgcHJIZWFkZXJbaV07XG4gICAgICAgICAgICBpICs9IDI7XG5cbiAgICAgICAgICAgIC8vIFJlY29yZCB2YWx1ZSA9PiBjb250YWlucyA8V1JNSEVBREVSPlxuICAgICAgICAgICAgcmVjb3JkVmFsdWUgPSBuZXcgVWludDhBcnJheShyZWNvcmRMZW5ndGgpO1xuICAgICAgICAgICAgcmVjb3JkVmFsdWUuc2V0KHBySGVhZGVyLnN1YmFycmF5KGksIGkgKyByZWNvcmRMZW5ndGgpKTtcbiAgICAgICAgICAgIHJldHVybiByZWNvcmRWYWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gU3RyZWFtSW5kZXhOb2RlO1xufShBZGFwdGF0aW9uU2V0Tm9kZV8xLkFkYXB0YXRpb25TZXROb2RlKSk7XG5leHBvcnRzLlN0cmVhbUluZGV4Tm9kZSA9IFN0cmVhbUluZGV4Tm9kZTtcbiJdLCJuYW1lcyI6WyJCQVNFNjQiLCJyZXF1aXJlIiwicHNzaCIsIkRPTVBhcnNlciIsIldJREVWSU5FX1NDSEVNRV9JRF9VUkkiLCJQTEFZUkVBRFlfU0NIRU1FX0lEX1VSSSIsIl9fZXh0ZW5kcyIsImQiLCJiIiwicCIsImhhc093blByb3BlcnR5IiwiX18iLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsIkFkYXB0YXRpb25TZXROb2RlXzEiLCJRdWFsaXR5TGV2ZWxOb2RlXzEiLCJTdHJlYW1JbmRleE5vZGUiLCJfc3VwZXIiLCJub2RlIiwieG1sIiwiY2FsbCIsInBhcnNlIiwicXVhbGl0eUxldmVscyIsImN1cnJlbnROb2RlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJpIiwibGVuZ3RoIiwicXVhbGl0eUxldmVsTm9kZSIsIlF1YWxpdHlMZXZlbE5vZGUiLCJyZXByZXNlbnRhdGlvbkNvbGwiLCJoYXNNaW1lVHlwZSIsImF0dHJpYnV0ZUxpc3QiLCJnZXRNaW1lVHlwZSIsImhhc0NvbnRlbnRUeXBlIiwiZ2V0Q29udGVudFR5cGUiLCJwcm90ZWN0aW9uIiwidW5kZWZpbmVkIiwicHJvdGVjdGlvbkhlYWRlciIsInBzc2hQUiIsImZpcnN0Q2hpbGQiLCJkYXRhIiwicmVwbGFjZSIsIktJRCIsImdldEtJREZyb21Qcm90ZWN0aW9uSGVhZGVyIiwiY3BQUiIsInNjaGVtZUlkVXJpIiwiY2VuY1BTU0giLCJjb250ZW50UHJvdGVjdGlvbnMiLCJwdXNoIiwicHNzaFdWIiwiY3JlYXRlV2lkZXZpbmVQc3NoIiwiY3BXViIsInBySGVhZGVyIiwid3JtSGVhZGVyIiwieG1sUmVhZGVyIiwidG9CeXRlQXJyYXkiLCJnZXRXUk1IZWFkZXJGcm9tUFJIZWFkZXIiLCJVaW50MTZBcnJheSIsImJ1ZmZlciIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImFwcGx5IiwicGFyc2VGcm9tU3RyaW5nIiwidGV4dENvbnRlbnQiLCJjb252ZXJ0VXVpZEVuZGlhbm5lc3MiLCJ1dWlkIiwic3dhcEJ5dGVzIiwiYnl0ZXMiLCJwb3MxIiwicG9zMiIsInRlbXAiLCJyZWNvcmRUeXBlIiwicmVjb3JkTGVuZ3RoIiwicmVjb3JkVmFsdWUiLCJVaW50OEFycmF5Iiwic2V0Iiwic3ViYXJyYXkiLCJBZGFwdGF0aW9uU2V0Tm9kZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2872\n")},2712:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar BASE64 = __webpack_require__(7769);\nfunction createWidevinePssh(KID) {\n  // Create Widevine CENC header (Protocol Buffer) with KID value\n  var wvCencHeader = new Uint8Array(2 + KID.length);\n  wvCencHeader[0] = 0x12;\n  wvCencHeader[1] = 0x10;\n  wvCencHeader.set(KID, 2);\n\n  // Create a pssh box\n  var length = 12 /* box length, type, version and flags */ + 16 /* SystemID */ + 4 /* data length */ + wvCencHeader.length,\n    pssh = new Uint8Array(length),\n    i = 0;\n\n  // Set box length value (4 bytes)\n  pssh[i++] = 0;\n  pssh[i++] = 0;\n  pssh[i++] = 0;\n  pssh[i++] = length;\n\n  // Set type ('pssh'), version (0) and flags (0)\n  pssh.set([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00], i);\n  i += 8;\n\n  // Set SystemID ('edef8ba9-79d6-4ace-a3c8-27dcd51d21ed')\n  pssh.set([0xed, 0xef, 0x8b, 0xa9, 0x79, 0xd6, 0x4a, 0xce, 0xa3, 0xc8, 0x27, 0xdc, 0xd5, 0x1d, 0x21, 0xed], i);\n  i += 16;\n\n  // Set data length value\n  pssh[i++] = 0;\n  pssh[i++] = 0;\n  pssh[i++] = 0;\n  pssh[i++] = wvCencHeader.length;\n\n  // Copy Widevine CENC header\n  pssh.set(wvCencHeader, i);\n\n  // Convert to BASE64 string\n  pssh = BASE64.fromByteArray(pssh);\n  return pssh;\n}\nmodule.exports = {\n  createWidevinePssh: createWidevinePssh\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcxMi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsSUFBVyxDQUFDO0FBRW5DLFNBQVNDLGtCQUFrQkEsQ0FBRUMsR0FBRyxFQUFFO0VBQ2hDO0VBQ0EsSUFBSUMsWUFBWSxHQUFHLElBQUlDLFVBQVUsQ0FBQyxDQUFDLEdBQUdGLEdBQUcsQ0FBQ0csTUFBTSxDQUFDO0VBQ2pERixZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSTtFQUN0QkEsWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUk7RUFDdEJBLFlBQVksQ0FBQ0csR0FBRyxDQUFDSixHQUFHLEVBQUUsQ0FBQyxDQUFDOztFQUV4QjtFQUNBLElBQUlHLE1BQU0sR0FBRyxFQUFFLENBQUMsNENBQTRDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLG9CQUFvQkYsWUFBWSxDQUFDRSxNQUFNO0lBQ3JIRSxJQUFJLEdBQUcsSUFBSUgsVUFBVSxDQUFDQyxNQUFNLENBQUM7SUFDN0JHLENBQUMsR0FBRyxDQUFDOztFQUVUO0VBQ0FELElBQUksQ0FBQ0MsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDO0VBQ2JELElBQUksQ0FBQ0MsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDO0VBQ2JELElBQUksQ0FBQ0MsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDO0VBQ2JELElBQUksQ0FBQ0MsQ0FBQyxFQUFFLENBQUMsR0FBR0gsTUFBTTs7RUFFbEI7RUFDQUUsSUFBSSxDQUFDRCxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUVFLENBQUMsQ0FBQztFQUM3REEsQ0FBQyxJQUFJLENBQUM7O0VBRU47RUFDQUQsSUFBSSxDQUFDRCxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRUUsQ0FBQyxDQUFDO0VBQzlHQSxDQUFDLElBQUksRUFBRTs7RUFFUDtFQUNBRCxJQUFJLENBQUNDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQztFQUNiRCxJQUFJLENBQUNDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQztFQUNiRCxJQUFJLENBQUNDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQztFQUNiRCxJQUFJLENBQUNDLENBQUMsRUFBRSxDQUFDLEdBQUdMLFlBQVksQ0FBQ0UsTUFBTTs7RUFFL0I7RUFDQUUsSUFBSSxDQUFDRCxHQUFHLENBQUNILFlBQVksRUFBRUssQ0FBQyxDQUFDOztFQUV6QjtFQUNBRCxJQUFJLEdBQUdSLE1BQU0sQ0FBQ1UsYUFBYSxDQUFDRixJQUFJLENBQUM7RUFDakMsT0FBT0EsSUFBSTtBQUNiO0FBRUFHLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZWLGtCQUFrQixFQUFFQTtBQUN0QixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9tYW5pZmVzdC9wYXJzZXIvcHNzaC5qcz9lNDZkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgQkFTRTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVdpZGV2aW5lUHNzaCAoS0lEKSB7XG4gIC8vIENyZWF0ZSBXaWRldmluZSBDRU5DIGhlYWRlciAoUHJvdG9jb2wgQnVmZmVyKSB3aXRoIEtJRCB2YWx1ZVxuICB2YXIgd3ZDZW5jSGVhZGVyID0gbmV3IFVpbnQ4QXJyYXkoMiArIEtJRC5sZW5ndGgpO1xuICB3dkNlbmNIZWFkZXJbMF0gPSAweDEyO1xuICB3dkNlbmNIZWFkZXJbMV0gPSAweDEwO1xuICB3dkNlbmNIZWFkZXIuc2V0KEtJRCwgMik7XG5cbiAgLy8gQ3JlYXRlIGEgcHNzaCBib3hcbiAgdmFyIGxlbmd0aCA9IDEyIC8qIGJveCBsZW5ndGgsIHR5cGUsIHZlcnNpb24gYW5kIGZsYWdzICovICsgMTYgLyogU3lzdGVtSUQgKi8gKyA0IC8qIGRhdGEgbGVuZ3RoICovICsgd3ZDZW5jSGVhZGVyLmxlbmd0aCxcbiAgICAgIHBzc2ggPSBuZXcgVWludDhBcnJheShsZW5ndGgpLFxuICAgICAgaSA9IDA7XG5cbiAgLy8gU2V0IGJveCBsZW5ndGggdmFsdWUgKDQgYnl0ZXMpXG4gIHBzc2hbaSsrXSA9IDA7XG4gIHBzc2hbaSsrXSA9IDA7XG4gIHBzc2hbaSsrXSA9IDA7XG4gIHBzc2hbaSsrXSA9IGxlbmd0aDtcblxuICAvLyBTZXQgdHlwZSAoJ3Bzc2gnKSwgdmVyc2lvbiAoMCkgYW5kIGZsYWdzICgwKVxuICBwc3NoLnNldChbMHg3MCwgMHg3MywgMHg3MywgMHg2OCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF0sIGkpO1xuICBpICs9IDg7XG5cbiAgLy8gU2V0IFN5c3RlbUlEICgnZWRlZjhiYTktNzlkNi00YWNlLWEzYzgtMjdkY2Q1MWQyMWVkJylcbiAgcHNzaC5zZXQoWzB4ZWQsIDB4ZWYsIDB4OGIsIDB4YTksICAweDc5LCAweGQ2LCAweDRhLCAweGNlLCAweGEzLCAweGM4LCAweDI3LCAweGRjLCAweGQ1LCAweDFkLCAweDIxLCAweGVkXSwgaSk7XG4gIGkgKz0gMTY7XG5cbiAgLy8gU2V0IGRhdGEgbGVuZ3RoIHZhbHVlXG4gIHBzc2hbaSsrXSA9IDA7XG4gIHBzc2hbaSsrXSA9IDA7XG4gIHBzc2hbaSsrXSA9IDA7XG4gIHBzc2hbaSsrXSA9IHd2Q2VuY0hlYWRlci5sZW5ndGg7XG5cbiAgLy8gQ29weSBXaWRldmluZSBDRU5DIGhlYWRlclxuICBwc3NoLnNldCh3dkNlbmNIZWFkZXIsIGkpO1xuXG4gIC8vIENvbnZlcnQgdG8gQkFTRTY0IHN0cmluZ1xuICBwc3NoID0gQkFTRTY0LmZyb21CeXRlQXJyYXkocHNzaCk7XG4gIHJldHVybiBwc3NoO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlV2lkZXZpbmVQc3NoOiBjcmVhdGVXaWRldmluZVBzc2hcbn1cbiJdLCJuYW1lcyI6WyJCQVNFNjQiLCJyZXF1aXJlIiwiY3JlYXRlV2lkZXZpbmVQc3NoIiwiS0lEIiwid3ZDZW5jSGVhZGVyIiwiVWludDhBcnJheSIsImxlbmd0aCIsInNldCIsInBzc2giLCJpIiwiZnJvbUJ5dGVBcnJheSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2712\n")},814:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) {\n      d[p] = b[p];\n    }\n  }\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ManifestNode_1 = __webpack_require__(8243);\nvar SegmentInformation_1 = __webpack_require__(5848);\nvar IsoDurationParser_1 = __webpack_require__(453);\nvar RepresentationNode = function (_super) {\n  __extends(RepresentationNode, _super);\n  function RepresentationNode(node, xml) {\n    _super.call(this, node, xml);\n    this.markNodeForDownload(false);\n  }\n  RepresentationNode.prototype.createSegmentInformation = function () {\n    var presentationDuration = IsoDurationParser_1.IsoDurationParser.getDuration(this.attributeList['mediaPresentationDuration']);\n    var segmentTimeline;\n    var timelineItemList;\n    var segmentUrlList;\n    var representationID = this.attributeList['id'];\n    if (this.segmentTemplate && this.segmentTemplate.hasChildNodes()) {\n      for (var i = 0; i < this.segmentTemplate.childNodes.length; i++) {\n        if (this.segmentTemplate.childNodes[i].nodeName == \"SegmentTimeline\") {\n          segmentTimeline = this.segmentTemplate.childNodes[i];\n        }\n      }\n    }\n    try {\n      timelineItemList = segmentTimeline.getElementsByTagName('S');\n    } catch (e) {}\n    try {\n      segmentUrlList = this.segmentList.getElementsByTagName('SegmentURL');\n    } catch (e) {}\n    this.bandwidth = this.attributeList['bandwidth'] ? parseInt(this.attributeList['bandwidth']) : -1;\n    this.segmentInformation = new SegmentInformation_1.SegmentInformation(presentationDuration, this.bandwidth, this.baseURL, representationID, this.attributeList['mimeType'], this.segmentBase, this.segmentTemplate, segmentTimeline, timelineItemList, this.segmentList, segmentUrlList);\n  };\n  RepresentationNode.prototype.writeAttributesToList = function (node, list) {\n    var attrList = node.attributes;\n    for (var i = 0; i < node.childNodes.length; i++) {\n      if (!this.baseURL && node.childNodes[i].nodeName == 'BaseURL') {\n        this.baseURL = node.childNodes[i].firstChild.nodeValue;\n      }\n      if (!this.segmentBase && node.childNodes[i].nodeName == 'SegmentBase') {\n        this.segmentBase = node.childNodes[i];\n      }\n      if (!this.segmentTemplate && node.childNodes[i].nodeName == 'SegmentTemplate') {\n        this.segmentTemplate = node.childNodes[i];\n      }\n      if (!this.segmentList && node.childNodes[i].nodeName == 'SegmentList') {\n        this.segmentList = node.childNodes[i];\n      }\n    }\n    for (var attr in attrList) {\n      if (!list[attrList[attr].nodeName]) {\n        list[attrList[attr].nodeName] = attrList[attr].nodeValue;\n      }\n    }\n    if (list['mediaPresentationDuration'] !== undefined) {\n      list['durationInS'] = IsoDurationParser_1.IsoDurationParser.getDurationAsS(this.attributeList['mediaPresentationDuration']);\n    }\n    if (node.parentNode !== null) {\n      this.buildAttributeList(node.parentNode, list);\n    } else {\n      if (!this.segmentInformation) {\n        this.createSegmentInformation();\n      }\n    }\n    _super.prototype.writeAttributesToList.call(this, node, list);\n  };\n  RepresentationNode.prototype.getMimeType = function () {\n    return this.attributeList['mimeType'] || this.attributeList['contentType'];\n  };\n  RepresentationNode.prototype.hasMimeType = function () {\n    return this.attributeList['mimeType'] || this.attributeList['contentType'] ? true : false;\n  };\n  RepresentationNode.prototype.getMediaUrlList = function () {\n    return this.segmentInformation.getMediaUrlList();\n  };\n  RepresentationNode.prototype.getRepresentationId = function () {\n    return this.id;\n  };\n  return RepresentationNode;\n}(ManifestNode_1.ManifestNode);\nexports.RepresentationNode = RepresentationNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///814\n")},5848:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nvar ZeroPadding_1 = __webpack_require__(7074);\nvar MediaUrl_1 = __webpack_require__(4826);\nvar CREATE_URL;\n(function (CREATE_URL) {\n  CREATE_URL[CREATE_URL["FROM_TEMPLATE"] = 0] = "FROM_TEMPLATE";\n  CREATE_URL[CREATE_URL["FROM_TIMELINE"] = 1] = "FROM_TIMELINE";\n  CREATE_URL[CREATE_URL["FROM_SEGMENTLIST"] = 2] = "FROM_SEGMENTLIST";\n  CREATE_URL[CREATE_URL["FROM_SEGMENT_BASE"] = 3] = "FROM_SEGMENT_BASE";\n})(CREATE_URL || (CREATE_URL = {}));\nvar SegmentInformation = function () {\n  function SegmentInformation(presentationDuration, bandwidth, baseUrl, representationID, mimeType, segmentBase, segmentTemplate, segmentTimeline, timelineItemList, segmentList, segmentUrlList) {\n    this.hasSegmentBase = false;\n    this.baseUrl = \'\';\n    this.presentationDuration = 0;\n    this.bandwidth = 0;\n    this.startNumber = 0;\n    this.mediaUrls = [];\n    this.whichUseCase = -1;\n    this.mimeType = \'\';\n    SegmentInformation.count += 1;\n    this.presentationDuration = presentationDuration;\n    this.mimeType = mimeType;\n    if (baseUrl) {\n      this.baseUrl = baseUrl;\n    }\n    if (bandwidth) {\n      this.bandwidth = bandwidth;\n    }\n    if (representationID) {\n      this.representationID = representationID;\n    }\n    if (segmentBase) {\n      this.segmentBase = segmentBase;\n      this.hasSegmentBase = true;\n      this.whichUseCase = CREATE_URL.FROM_SEGMENT_BASE;\n    }\n    if (segmentTemplate) {\n      this.segmentTemplate = segmentTemplate;\n      this.mediaTemplate = this.segmentTemplate.attributes.getNamedItem("media").nodeValue;\n      this.mediaTemplate = this.replace$RepresentationID$(this.mediaTemplate, this.representationID);\n      this.mediaTemplate = this.replace$Bandwidth$(this.mediaTemplate, this.bandwidth);\n      this.startNumber = this.segmentTemplate.attributes.getNamedItem("startNumber") ? parseInt(this.segmentTemplate.attributes.getNamedItem("startNumber").nodeValue) : 0;\n      this.whichUseCase = CREATE_URL.FROM_TEMPLATE;\n    }\n    if (segmentTimeline) {\n      this.segmentTimeline = segmentTimeline;\n    }\n    if (timelineItemList) {\n      this.timelineItemList = timelineItemList;\n      this.whichUseCase = CREATE_URL.FROM_TIMELINE;\n    }\n    if (segmentList) {\n      this.segmentList = segmentList;\n    }\n    if (segmentUrlList) {\n      this.segmentUrlList = segmentUrlList;\n      this.whichUseCase = CREATE_URL.FROM_SEGMENTLIST;\n    }\n    var hasFileExtension = false;\n    var initSegment = \'\';\n    switch (this.whichUseCase) {\n      case CREATE_URL.FROM_SEGMENTLIST:\n        this.createFragmentFromUrlList(this.segmentUrlList);\n        initSegment = this.createInitSegment(this.segmentList.getElementsByTagName(\'Initialization\')[0].attributes.getNamedItem("sourceURL").nodeValue);\n        this.mediaUrls.unshift(new MediaUrl_1.MediaUrl(this.baseUrl, initSegment, this.mimeType));\n        if (SegmentInformation.count == 0) {\n          // console.log(\'CREATE_URL.FROM_SEGMENTLIST\', this.mediaUrls, this);\n        }\n        break;\n      case CREATE_URL.FROM_TIMELINE:\n        initSegment = this.createInitSegment(this.segmentTemplate.attributes.getNamedItem("initialization").nodeValue);\n        this.mediaUrls.unshift(new MediaUrl_1.MediaUrl(this.baseUrl, initSegment, this.mimeType));\n        this.createFragmentUrlsFromTimeline(this.timelineItemList);\n        break;\n      case CREATE_URL.FROM_SEGMENT_BASE:\n        try {\n          hasFileExtension = this.baseUrl.indexOf(\'.\') !== -1 ? true : false;\n        } catch (e) {}\n        if (hasFileExtension) {\n          this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, this.baseUrl, this.mimeType));\n        }\n        if (SegmentInformation.count == 0) {\n          // console.log(\'CREATE_URL.FROM_SEGMENT_BASE\', this.mediaUrls, this);\n        }\n        break;\n      case CREATE_URL.FROM_TEMPLATE:\n        this.createFragmentsFromTemplate();\n        initSegment = this.createInitSegment(this.segmentTemplate.attributes.getNamedItem("initialization").nodeValue);\n        this.mediaUrls.unshift(new MediaUrl_1.MediaUrl(this.baseUrl, initSegment, this.mimeType));\n        break;\n      default:\n        try {\n          hasFileExtension = this.baseUrl.indexOf(\'.\') !== -1 ? true : false;\n        } catch (e) {}\n        if (hasFileExtension) {\n          this.mediaUrls.push(new MediaUrl_1.MediaUrl("", this.baseUrl, this.mimeType));\n        }\n    }\n  }\n  SegmentInformation.prototype.createFragmentUrlsFromTimeline = function (segmentNodes) {\n    var currentTime = this.segmentTemplate.attributes.getNamedItem("presentationTimeOffset");\n    if (currentTime) {\n      currentTime = parseInt(currentTime.nodeValue, 10);\n    } else {\n      currentTime = 0;\n    }\n    var hasCurrentTime = false;\n    var time = 0;\n    for (var i = 0; i < segmentNodes.length; i++) {\n      if (i > 0 && segmentNodes[i].attributes.getNamedItem("t") && segmentNodes[i].attributes.getNamedItem("t").nodeValue !== undefined) {\n        hasCurrentTime = true;\n        time = parseInt(segmentNodes[i].attributes.getNamedItem("t").nodeValue);\n      } else {\n        hasCurrentTime = false;\n      }\n      var duration = segmentNodes[i].attributes.getNamedItem("d") && segmentNodes[i].attributes.getNamedItem("d").nodeValue !== undefined ? parseInt(segmentNodes[i].attributes.getNamedItem("d").nodeValue) : 0;\n      var repeat = segmentNodes[i].attributes.getNamedItem("r") && segmentNodes[i].attributes.getNamedItem("r").nodeValue !== undefined ? parseInt(segmentNodes[i].attributes.getNamedItem("r").nodeValue) : 0;\n      for (var k = 1; k <= repeat; k++) {\n        var fragment_1 = this.segmentTemplate.attributes.getNamedItem("media").nodeValue;\n        fragment_1 = this.replace$RepresentationID$(fragment_1, this.representationID);\n        fragment_1 = this.replace$Time$(fragment_1, currentTime);\n        fragment_1 = this.replace$Bandwidth$(fragment_1, this.bandwidth);\n        this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, fragment_1, this.mimeType));\n        if (!hasCurrentTime) {\n          currentTime += duration;\n        } else {\n          currentTime = time;\n        }\n      }\n      var fragment = this.segmentTemplate.attributes.getNamedItem("media").nodeValue;\n      fragment = this.replace$RepresentationID$(fragment, this.representationID);\n      fragment = this.replace$Time$(fragment, currentTime);\n      fragment = this.replace$Bandwidth$(fragment, this.bandwidth);\n      this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, fragment, this.mimeType));\n      if (!hasCurrentTime) {\n        currentTime += duration;\n      } else {\n        currentTime = time;\n      }\n    }\n  };\n  SegmentInformation.prototype.createFragmentFromUrlList = function (urlListNodes) {\n    for (var i = 0; i < urlListNodes.length; i++) {\n      var fragment = urlListNodes[i].attributes.getNamedItem("media").nodeValue;\n      this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, fragment, this.mimeType));\n    }\n  };\n  SegmentInformation.prototype.createFragmentsFromTemplate = function () {\n    var segmentDuration = parseInt(this.segmentTemplate.attributes.getNamedItem("duration").nodeValue);\n    var segmentTimescale = this.segmentTemplate.attributes.getNamedItem("timescale") ? parseInt(this.segmentTemplate.attributes.getNamedItem("timescale").nodeValue) : 1;\n    var numSegments = Math.ceil(this.presentationDuration / (segmentDuration / segmentTimescale) / 1000);\n    var mediaTemplateStringSegment = this.mediaTemplate.split(\'$\');\n    var templateReplaceableIndex;\n    var startNumber = this.startNumber || 0;\n    for (var k = 0; k < mediaTemplateStringSegment.length; k++) {\n      if (mediaTemplateStringSegment[k].indexOf(\'Number\') != -1) {\n        templateReplaceableIndex = \'$\' + mediaTemplateStringSegment[k] + \'$\';\n      }\n    }\n    var paddingAmount = ZeroPadding_1.ZeroPadding.getPaddingAmount(templateReplaceableIndex);\n    for (var i = startNumber; i < numSegments + startNumber; i++) {\n      var segmentIndex = ZeroPadding_1.ZeroPadding.addPadding(i, paddingAmount);\n      var fragment = void 0;\n      if (paddingAmount === 0) {\n        fragment = this.replace$Number$(this.mediaTemplate, i);\n      } else {\n        fragment = this.mediaTemplate.replace(templateReplaceableIndex, segmentIndex);\n      }\n      this.mediaUrls.push(new MediaUrl_1.MediaUrl(this.baseUrl, fragment, this.mimeType));\n    }\n  };\n  SegmentInformation.prototype.replace$RepresentationID$ = function (fragment, id) {\n    return fragment.replace(new RegExp(\'\\\\$RepresentationID\\\\$\', \'g\'), id);\n  };\n  SegmentInformation.prototype.replace$Number$ = function (fragment, num) {\n    return fragment.replace(new RegExp(\'\\\\$Number\\\\$\', \'g\'), num.toString());\n  };\n  SegmentInformation.prototype.replace$Bandwidth$ = function (fragment, bandwidth) {\n    return fragment.replace(new RegExp(\'\\\\$Bandwidth\\\\$\', \'g\'), bandwidth.toString());\n  };\n  SegmentInformation.prototype.replace$Time$ = function (fragment, currentIndex) {\n    return fragment.replace(new RegExp(\'\\\\$Time\\\\$\', \'g\'), currentIndex.toString());\n  };\n  SegmentInformation.prototype.createInitSegment = function (fragment) {\n    fragment = this.replace$Bandwidth$(fragment, this.bandwidth);\n    fragment = this.replace$RepresentationID$(fragment, this.representationID);\n    return fragment;\n  };\n  SegmentInformation.prototype.getMediaUrlList = function () {\n    return this.mediaUrls;\n  };\n  SegmentInformation.count = -1;\n  return SegmentInformation;\n}();\nexports.SegmentInformation = SegmentInformation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5848\n')},1584:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/*eslint no-console: [\"error\", { allow: [\"warn\", \"error\", \"info\", \"log\"] }] */\n/*eslint no-sync: [\"off\"]*/\n\n\nvar isPortTaken = __webpack_require__(96);\nvar path = __webpack_require__(1017);\nvar fs = __webpack_require__(7147);\nvar fork = (__webpack_require__(2081).fork);\nvar appSettings = __webpack_require__(8557);\nvar _require = __webpack_require__(7194),\n  app = _require.app;\nvar CHILD_SCRIPT_FILENAME = 'startServer.js';\n\n/**\n * Offline content server\n * @param {object} offlineController : offline controller\n * @param {object} downloadController : download controller\n * @param {string} maxOfflineContentPortRange - max range for offline port to on which content can be served\n * @param {string} offlineContentPort - on which port offline content should be served, default is 3010\n * @constructor\n */\nfunction OfflineContentServer(offlineController, downloadController, maxOfflineContentPortRange, offlineContentPort) {\n  this._offlineController = offlineController;\n  this._downloadController = downloadController;\n  this._maxOfflineContentPortRange = maxOfflineContentPortRange;\n  this._offlineContentPort = offlineContentPort;\n  this.childProcess = undefined;\n}\n\n/**\n * Start http server in a child_process\n * @param {object} port : on which port offline content should be served, default is 3010\n * @param {object} callback : a callback function to get listen port (if default is already taken)\n * @constructor\n */\nOfflineContentServer.prototype._startServer = function (port, callback) {\n  var self = this;\n\n  // NOTE: this is so ugly FIXME\n  var serverPath = path.join(app.getAppPath(), 'node_modules/downstream-electron');\n  if (!fs.existsSync(path.join(serverPath, CHILD_SCRIPT_FILENAME))) {\n    serverPath = path.join(app.getAppPath(), 'node_modules/downstream-electron/api/server');\n    if (!fs.existsSync(path.join(serverPath, CHILD_SCRIPT_FILENAME))) {\n      serverPath = app.getAppPath();\n      if (!fs.existsSync(path.join(serverPath, CHILD_SCRIPT_FILENAME))) {\n        serverPath = __dirname;\n      }\n    }\n  }\n  console.log('Server Path:', serverPath);\n  var script = path.join(serverPath, CHILD_SCRIPT_FILENAME);\n  console.log('Script for server:', script);\n\n  //  FOR DEBUG PURPOSE self.childProcess = fork(script ,[],{execArgv:['--inspect=5860']});\n  self.childProcess = fork(script, []);\n  var routeName = appSettings.getSettings().downloadsName;\n\n  // send init data for http server\n  var data = {\n    cmd: 'init',\n    routeName: routeName,\n    port: port\n  };\n  self.childProcess.send(data);\n  self.childProcess.on('error', function (err) {\n    console.error(err);\n  });\n  // handles message from child process\n  self.childProcess.on('message', function (data) {\n    if (data.cmd === 'log') {\n      // http server wants to log some data\n      console.log(data.log);\n    }\n    if (data.cmd === 'listening_port') {\n      // http server is listening => notify application for listen port\n      callback(data.port);\n    }\n    if (data.cmd === 'get_info') {\n      var requestId = data.requestId;\n      // http server asks data folder for manifest id\n      var manifestId = data.args.manifest;\n      self._offlineController.getManifestInfo(manifestId, function (err, info) {\n        if (err) {\n          return self.childProcess.send({\n            error: err,\n            requestId: requestId\n          });\n        }\n        var downloadFolder = info.manifest.folder;\n        if (!downloadFolder) {\n          // try to serve from default download folder\n          downloadFolder = appSettings.getSettings().downloadsFolderPath;\n        }\n\n        // send response back\n        return self.childProcess.send({\n          status: 'OK',\n          requestId: requestId,\n          result: {\n            folder: downloadFolder,\n            status: info.status\n          }\n        });\n      });\n    }\n    if (data.cmd === 'is_downloading') {\n      var _requestId = data.requestId;\n      var _manifestId = data.args.manifest;\n      var file = data.args.file;\n      var download = self._downloadController.getDownloading(_manifestId, file);\n      var downloadedCallback = function downloadedCallback(err) {\n        if (err) {\n          return self.childProcess.send({\n            error: err,\n            requestId: _requestId\n          });\n        }\n        return self.childProcess.send({\n          status: 'OK',\n          requestId: _requestId\n        });\n      };\n      if (download) {\n        // file is created but being downloading => wait for download before sending result\n        self._downloadController.waitForDownload(download, downloadedCallback);\n      } else {\n        return downloadedCallback();\n      }\n    }\n    if (data.cmd === 'perform_seek') {\n      var _requestId2 = data.requestId;\n      var _manifestId2 = data.args.manifest;\n      var _file = data.args.file;\n      var _downloadedCallback = function _downloadedCallback(err) {\n        if (err) {\n          return self.childProcess.send({\n            error: err,\n            requestId: _requestId2\n          });\n        }\n        return self.childProcess.send({\n          status: 'OK',\n          requestId: _requestId2\n        });\n      };\n      self._downloadController.performSeek(_manifestId2, _file, _downloadedCallback);\n    }\n  });\n  self.childProcess.on('close', function (code, signal) {\n    // child has closed\n    if (code == null) {\n      console.log('Child process closed with signal:', signal);\n    } else {\n      console.log('Child process closed with code:', code);\n    }\n  });\n};\n/**\n * @param {Function} callback - a callback function to get listen port (if default is taken)\n * @constructor\n */\nOfflineContentServer.prototype.serveOfflineContent = function (callback) {\n  var self = this;\n  function startOnPort(port) {\n    if (port > self._maxOfflineContentPortRange) {\n      return;\n    }\n    isPortTaken(port, function (err) {\n      if (err) {\n        port++;\n        startOnPort(port);\n      } else {\n        console.log('Port found:', port);\n        self._startServer(port, function () {\n          self._offlineContentPort = port;\n          callback(self._offlineContentPort);\n          console.info('Offline content served on port:', port);\n        });\n      }\n    });\n  }\n  startOnPort(this._offlineContentPort);\n};\n\n/*\n * Stop server process\n * @returns\n */\nOfflineContentServer.prototype.stop = function () {\n  this.childProcess.kill('SIGTERM');\n};\nmodule.exports = OfflineContentServer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1584\n")},534:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar _ = __webpack_require__(4952);\n\n/**\n * how much of progress should be connected with writing chunks to a hard drive (1 - 100%)\n * @type {number}\n */\nvar writeProgressUsage = 0.1;\n\n/**\n *\n * @param {DownloadsStorageController} storage - downloads storage controller\n * @constructor\n */\nfunction DownloadStats(storage) {\n  this._storage = storage;\n  this._stats = {};\n  this._statsPrevious = {};\n  this._STATS_TIME_GENERATION = 1000;\n  _.bindAll(this, "_generate");\n}\n\n/**\n * @param {number} value - bytes\n * @param {number} precision - precision for kilobytes\n * @param {number=} precision2 - precision for megabytes\n * @param {number=} precision3 - precision for gigabytes\n * @returns {string} converted bytes to kb or mb or gb\n * @private\n */\nDownloadStats.prototype._convertToBytes = function (value, precision, precision2, precision3) {\n  precision2 = typeof precision2 !== "undefined" ? precision2 : precision;\n  precision3 = typeof precision3 !== "undefined" ? precision3 : precision;\n  if (value < 100000) {\n    return this._convertToKB(value, precision);\n  } else if (value < 1024 * 1024 * 1024) {\n    return this._convertToMB(value, precision2);\n  } else {\n    return this._convertToGB(value, precision3);\n  }\n};\n\n/**\n *\n * @param {number} value - bytes\n * @param {number} precision - precision\n * @returns {string} kilobytes\n * @private\n */\nDownloadStats.prototype._convertToKB = function (value, precision) {\n  precision = typeof precision !== "undefined" ? precision : 0;\n  var a = Math.pow(10, precision);\n  var oneKB = 1024;\n  return Math.round(value * a / oneKB) / a + "kB";\n};\n\n/**\n * @param {number} value - bytes\n * @param {number} precision - precision\n * @returns {string} - megabytes\n * @private\n */\nDownloadStats.prototype._convertToMB = function (value, precision) {\n  precision = typeof precision !== "undefined" ? precision : 0;\n  var a = Math.pow(10, precision);\n  var oneMB = 1024 * 1024;\n  return Math.round(value * a / oneMB) / a + "MB";\n};\n\n/**\n * @param {number} value - bytes\n * @param {number} precision - precision\n * @returns {string} gigabytes\n * @private\n */\nDownloadStats.prototype._convertToGB = function (value, precision) {\n  precision = typeof precision !== "undefined" ? precision : 0;\n  var a = Math.pow(10, precision);\n  var oneGB = 1024 * 1024 * 1024;\n  return Math.round(value * a / oneGB) / a + "GB";\n};\nDownloadStats.prototype._clearSpeed = function () {\n  var allManifestIds = Object.keys(this._stats) || [];\n  for (var i = 0, j = allManifestIds.length; i < j; i++) {\n    var manifestId = allManifestIds[i];\n    if (!this._storage.keyExists(manifestId) && this._stats[manifestId] && this._stats[manifestId].speed) {\n      this._stats[manifestId].speed = 0;\n      this._stats[manifestId].speedBytes = this._convertToBytes(this._stats[manifestId].speed, 3, 2);\n    }\n  }\n};\n\n/**\n * @param {boolean} refresh - decides if stats should be only calculated without setting previous stats\n * this is useful when downloads finishes and stats are being calculated one more time\n * @returns {void}\n * @private\n */\nDownloadStats.prototype._generate = function (refresh) {\n  var allStats = {};\n  var manifests = this._storage.getKeys();\n  this._clearSpeed();\n  function countParts(items) {\n    var parts = 0;\n    for (var k = 0, l = items.length; k < l; k++) {\n      var item = items[k];\n      parts += item.bandwidth || 1;\n    }\n    return parts;\n  }\n  function countPartsObj(items, withDownloadedOnly) {\n    var parts = 0;\n    for (var key in items) {\n      if (items.hasOwnProperty(key)) {\n        var item = items[key];\n        parts += (withDownloadedOnly ? item.stats.available / (item.stats.file_size || 1) : 1) * (item.bandwidth || 1);\n      }\n    }\n    return parts;\n  }\n  function toArray(obj) {\n    var arr = [];\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        var item = obj[key];\n        arr.push(item);\n      }\n    }\n    return arr;\n  }\n  var stats = {\n    downloading: 0,\n    downloaded: 0,\n    available: 0,\n    left: 0,\n    downloadingAvailableBytes: 0,\n    downloading_file_size: 0,\n    downloadingBytes: 0,\n    downloadedBytes: 0,\n    availableBytes: 0,\n    writeProgress: 0,\n    writeProgressDownloading: 0,\n    writeProgressDownloaded: 0,\n    errors: 0,\n    progress: 0,\n    speed: 0,\n    status: \'\'\n  };\n\n  //availableBytes - bates that has been already downloaded\n  //downloadedBytes - bytes used to calculate the current speed\n  //if for any reason the connection is broken or user stopped, then after resuming the available bytes are\n  //always bigger then the actual downloaded bytes.\n  //once the file is finished both values are equal and have the same value as file_size\n\n  var now = new Date().getTime();\n  if (!this._statsTime) {\n    this._statsTime = now;\n  }\n  for (var i = 0, j = manifests.length; i < j; i++) {\n    var manifestId = manifests[i];\n    allStats[manifestId] = _.clone(stats);\n    allStats[manifestId].left = this._storage.left.count(manifestId);\n    allStats[manifestId].leftI = this._storage.left.getItems(manifestId);\n    allStats[manifestId].errors = this._storage.errors.count(manifestId);\n    allStats[manifestId].errorsI = this._storage.errors.getItems(manifestId);\n    var items = this._storage.downloading.getKeys(manifestId);\n    allStats[manifestId].downloading = items.length;\n    allStats[manifestId].downloadingI = this._storage.downloading.getItems(manifestId);\n    var writeProgressDownloadingItemsLength = items.length;\n    for (var k = 0, l = items.length; k < l; k++) {\n      var item = this._storage.downloading.getItem(manifestId, items[k]);\n      allStats[manifestId].downloadingBytes += item.stats.downloaded;\n      allStats[manifestId].downloading_file_size += item.stats.file_size;\n      allStats[manifestId].downloadingAvailableBytes += item.stats.available;\n      allStats[manifestId].writeProgressDownloading += item.stats.writeProgress;\n    }\n    items = this._storage.downloaded.getItems(manifestId);\n    allStats[manifestId].downloaded = items.length;\n    allStats[manifestId].downloadedI = items;\n    var writeProgressItemsDownloadedLength = items.length;\n    for (var _k = 0, _l = items.length; _k < _l; _k++) {\n      var _item = items[_k];\n      allStats[manifestId].downloadedBytes += _item.stats.downloaded;\n      allStats[manifestId].writeProgressDownloaded += _item.stats.writeProgress;\n    }\n\n    //need to calculate what percentage of bytes that are going to be written to hard drive are according the the whole\n    // size for example 5 files are being downloaded, 4 smaller are 100mb and one large 1,9GB. When the large file is\n    // being saved the write progress is basically 1900/2000 = 95% of all written bytes.\n    allStats[manifestId].writeProgressDownloading = allStats[manifestId].writeProgressDownloading * (allStats[manifestId].downloadingAvailableBytes / (allStats[manifestId].downloadedBytes + allStats[manifestId].downloading_file_size) || 1);\n    allStats[manifestId].writeProgressDownloading = allStats[manifestId].writeProgressDownloading / (writeProgressDownloadingItemsLength || 1);\n    allStats[manifestId].writeProgressDownloaded = allStats[manifestId].writeProgressDownloaded * (allStats[manifestId].downloadedBytes / (allStats[manifestId].downloadedBytes + allStats[manifestId].downloading_file_size) || 1);\n    allStats[manifestId].writeProgressDownloaded = allStats[manifestId].writeProgressDownloaded / (writeProgressItemsDownloadedLength || 1);\n    allStats[manifestId].writeProgress = allStats[manifestId].writeProgressDownloading + allStats[manifestId].writeProgressDownloaded;\n    var speed = this._getDiff("downloadingBytes", manifestId, allStats, this._statsPrevious);\n    speed += this._getDiff("downloadedBytes", manifestId, allStats, this._statsPrevious);\n    speed = speed * 1000 / (now - this._statsTime || 1);\n    allStats[manifestId].speed = speed;\n    allStats[manifestId].status = this._storage.status.getItem(manifestId, "status");\n    allStats[manifestId].details = this._storage.status.getItem(manifestId, "details");\n\n    //progress for downloaded\n    var leftParts = countParts(allStats[manifestId].leftI);\n    var downloadedParts = countParts(allStats[manifestId].downloadedI);\n    var downloadingPartsSize = countPartsObj(allStats[manifestId].downloadingI);\n    var downloadingParts = countPartsObj(allStats[manifestId].downloadingI, true);\n    var errorParts = countPartsObj(allStats[manifestId].errorsI);\n    var allParts = leftParts + downloadedParts + downloadingPartsSize + errorParts;\n    allStats[manifestId].progress = (downloadedParts + downloadingParts) / (allParts || 1);\n    allStats[manifestId].progress = allStats[manifestId].progress * (1 - writeProgressUsage);\n    allStats[manifestId].progress += allStats[manifestId].writeProgress * writeProgressUsage;\n    allStats[manifestId].downloadedBytesTotal = Math.round(allStats[manifestId].progress * 10000) / 100;\n    allStats[manifestId].downloadedBytesTotal += "%";\n\n    // progress of each represention\n    var reduceFunc = function reduceFunc(map, obj) {\n      if (!map[obj.id]) {\n        map[obj.id] = [];\n      }\n      map[obj.id].push(obj);\n      return map;\n    };\n    var downloadedById = allStats[manifestId].downloadedI.reduce(reduceFunc, {});\n    var downloadingArray = toArray(allStats[manifestId].downloadingI);\n    var downloadingById = downloadingArray.reduce(reduceFunc, {});\n    var leftById = allStats[manifestId].leftI.reduce(reduceFunc, {});\n    var errorArray = toArray(allStats[manifestId].errorsI);\n    var errorsById = errorArray.reduce(reduceFunc, {});\n    var extend = function extend(obj, src) {\n      for (var key in src) {\n        if (src.hasOwnProperty(key)) {\n          if (!obj[key]) {\n            obj[key] = [];\n          }\n          obj[key] = obj[key].concat(src[key]);\n        }\n      }\n      return obj;\n    };\n    var allPartsById = {};\n    extend(allPartsById, downloadedById);\n    extend(allPartsById, downloadingById);\n    extend(allPartsById, leftById);\n    extend(allPartsById, errorsById);\n\n    // compute progres for each id\n    var progressById = {};\n    var key = void 0;\n    for (key in allPartsById) {\n      if (allPartsById.hasOwnProperty(key)) {\n        progressById[key] = countPartsObj(downloadedById[key]) / (countPartsObj(allPartsById[key]) || 1);\n      }\n    }\n    var progressByIdPercent = {};\n    for (key in progressById) {\n      if (progressById.hasOwnProperty(key)) {\n        progressByIdPercent[key] = Math.round(progressById[key] * 10000) / 100 + "%";\n      }\n    }\n    allStats[manifestId].progressById = progressById;\n    allStats[manifestId].progressByIdPercent = progressByIdPercent;\n  }\n  var showStats = {};\n  for (var _i = 0, _j = manifests.length; _i < _j; _i++) {\n    var _manifestId = manifests[_i];\n    showStats[_manifestId] = {};\n    var downloadedBytesTotal = allStats[_manifestId].downloadedBytes + allStats[_manifestId].downloadingAvailableBytes;\n    showStats[_manifestId].progress = allStats[_manifestId].progress;\n    showStats[_manifestId].progressPercentage = allStats[_manifestId].downloadedBytesTotal;\n    showStats[_manifestId].progressById = allStats[_manifestId].progressById;\n    showStats[_manifestId].progressByIdPercent = allStats[_manifestId].progressByIdPercent;\n    showStats[_manifestId].downloadedBytesTotal = this._convertToBytes(downloadedBytesTotal, 1, 2, 2);\n    showStats[_manifestId].downloaded = allStats[_manifestId].downloaded;\n    showStats[_manifestId].left = allStats[_manifestId].left;\n    showStats[_manifestId].errors = allStats[_manifestId].errors;\n    if (allStats[_manifestId].speed < 0) {\n      allStats[_manifestId].speed = 0;\n    }\n    showStats[_manifestId].speed = allStats[_manifestId].speed;\n    showStats[_manifestId].speedBytes = this._convertToBytes(allStats[_manifestId].speed, 3, 2);\n    showStats[_manifestId].status = allStats[_manifestId].status;\n    showStats[_manifestId].details = allStats[_manifestId].details;\n  }\n  for (var _key in showStats) {\n    if (showStats.hasOwnProperty(_key)) {\n      this._stats[_key] = showStats[_key];\n    }\n  }\n  if (!refresh) {\n    this._statsTime = now;\n    for (var _key2 in allStats) {\n      if (allStats.hasOwnProperty(_key2)) {\n        this._statsPrevious[_key2] = allStats[_key2];\n      }\n    }\n  }\n};\n\n/**\n * @param {string} key - key stats identifier\n * @param {string} manifestId - manifest identifier\n * @param {number} current - current value\n * @param {number} previous - previous value\n * @returns {number} - difference between current and previous value\n * @private\n */\nDownloadStats.prototype._getDiff = function (key, manifestId, current, previous) {\n  var currentValue = current[manifestId] && current[manifestId][key] || 0;\n  var previousValue = previous[manifestId] && previous[manifestId][key] || 0;\n  return currentValue - previousValue;\n};\n\n/**\n *\n * @param {string|array} manifestIds - manifest identifier or array of manifests identifier\n * @returns {*} stats for certain download or array of stats for downloads\n */\nDownloadStats.prototype.getStats = function (manifestIds) {\n  var stats;\n  if (this._stats) {\n    if (typeof manifestIds === \'string\') {\n      stats = this._stats[manifestIds];\n    } else {\n      stats = [];\n      for (var i = 0, j = manifestIds.length; i < j; i++) {\n        var stat = this._stats[manifestIds[i]];\n        if (stat) {\n          stats.push(stat);\n        }\n      }\n    }\n  }\n  return stats;\n};\nDownloadStats.prototype.refresh = function () {\n  this._generate(true);\n};\nDownloadStats.prototype.start = function () {\n  if (!this._interval) {\n    this._interval = setInterval(this._generate, this._STATS_TIME_GENERATION);\n    this._generate();\n  }\n};\nDownloadStats.prototype.stop = function () {\n  clearInterval(this._interval);\n  this._interval = null;\n  this._generate();\n  this._statsPrevious = {};\n};\nmodule.exports = DownloadStats;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RCxhQUFhLENBQUNPLFNBQVMsQ0FBQzRCLE9BQU8sR0FBRyxZQUFZO0VBQzVDLElBQUksQ0FBQ0QsU0FBUyxDQUFDLElBQUksQ0FBQztBQUN0QixDQUFDO0FBRURsQyxhQUFhLENBQUNPLFNBQVMsQ0FBQ2dILEtBQUssR0FBRyxZQUFZO0VBQzFDLElBQUksQ0FBQyxJQUFJLENBQUNDLFNBQVMsRUFBRTtJQUNuQixJQUFJLENBQUNBLFNBQVMsR0FBR0MsV0FBVyxDQUFDLElBQUksQ0FBQ3ZGLFNBQVMsRUFBRSxJQUFJLENBQUM3QixzQkFBc0IsQ0FBQztJQUN6RSxJQUFJLENBQUM2QixTQUFTLENBQUMsQ0FBQztFQUNsQjtBQUNGLENBQUM7QUFFRGxDLGFBQWEsQ0FBQ08sU0FBUyxDQUFDbUgsSUFBSSxHQUFHLFlBQVk7RUFDekNDLGFBQWEsQ0FBQyxJQUFJLENBQUNILFNBQVMsQ0FBQztFQUM3QixJQUFJLENBQUNBLFNBQVMsR0FBRyxJQUFJO0VBQ3JCLElBQUksQ0FBQ3RGLFNBQVMsQ0FBQyxDQUFDO0VBQ2hCLElBQUksQ0FBQzlCLGNBQWMsR0FBRyxDQUFDLENBQUM7QUFDMUIsQ0FBQztBQUVEd0gsTUFBTSxDQUFDQyxPQUFPLEdBQUc3SCxhQUFhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS9zdGF0cy9kb3dubG9hZF9zdGF0cy5qcz9mZjQzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgXyA9IHJlcXVpcmUoXCJ1bmRlcnNjb3JlXCIpO1xuXG4vKipcbiAqIGhvdyBtdWNoIG9mIHByb2dyZXNzIHNob3VsZCBiZSBjb25uZWN0ZWQgd2l0aCB3cml0aW5nIGNodW5rcyB0byBhIGhhcmQgZHJpdmUgKDEgLSAxMDAlKVxuICogQHR5cGUge251bWJlcn1cbiAqL1xuY29uc3Qgd3JpdGVQcm9ncmVzc1VzYWdlID0gMC4xO1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge0Rvd25sb2Fkc1N0b3JhZ2VDb250cm9sbGVyfSBzdG9yYWdlIC0gZG93bmxvYWRzIHN0b3JhZ2UgY29udHJvbGxlclxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIERvd25sb2FkU3RhdHMgKHN0b3JhZ2UpIHtcbiAgdGhpcy5fc3RvcmFnZSA9IHN0b3JhZ2U7XG4gIHRoaXMuX3N0YXRzID0ge307XG4gIHRoaXMuX3N0YXRzUHJldmlvdXMgPSB7fTtcbiAgdGhpcy5fU1RBVFNfVElNRV9HRU5FUkFUSU9OID0gMTAwMDtcbiAgXy5iaW5kQWxsKHRoaXMsIFwiX2dlbmVyYXRlXCIpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIGJ5dGVzXG4gKiBAcGFyYW0ge251bWJlcn0gcHJlY2lzaW9uIC0gcHJlY2lzaW9uIGZvciBraWxvYnl0ZXNcbiAqIEBwYXJhbSB7bnVtYmVyPX0gcHJlY2lzaW9uMiAtIHByZWNpc2lvbiBmb3IgbWVnYWJ5dGVzXG4gKiBAcGFyYW0ge251bWJlcj19IHByZWNpc2lvbjMgLSBwcmVjaXNpb24gZm9yIGdpZ2FieXRlc1xuICogQHJldHVybnMge3N0cmluZ30gY29udmVydGVkIGJ5dGVzIHRvIGtiIG9yIG1iIG9yIGdiXG4gKiBAcHJpdmF0ZVxuICovXG5Eb3dubG9hZFN0YXRzLnByb3RvdHlwZS5fY29udmVydFRvQnl0ZXMgPSBmdW5jdGlvbiAodmFsdWUsIHByZWNpc2lvbiwgcHJlY2lzaW9uMiwgcHJlY2lzaW9uMykge1xuICBwcmVjaXNpb24yID0gdHlwZW9mIHByZWNpc2lvbjIgIT09IFwidW5kZWZpbmVkXCIgPyBwcmVjaXNpb24yIDogcHJlY2lzaW9uO1xuICBwcmVjaXNpb24zID0gdHlwZW9mIHByZWNpc2lvbjMgIT09IFwidW5kZWZpbmVkXCIgPyBwcmVjaXNpb24zIDogcHJlY2lzaW9uO1xuICBpZiAodmFsdWUgPCAxMDAwMDApIHtcbiAgICByZXR1cm4gdGhpcy5fY29udmVydFRvS0IodmFsdWUsIHByZWNpc2lvbilcbiAgfSBlbHNlIGlmICh2YWx1ZSA8IDEwMjQgKiAxMDI0ICogMTAyNCkge1xuICAgIHJldHVybiB0aGlzLl9jb252ZXJ0VG9NQih2YWx1ZSwgcHJlY2lzaW9uMilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpcy5fY29udmVydFRvR0IodmFsdWUsIHByZWNpc2lvbjMpXG4gIH1cbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIGJ5dGVzXG4gKiBAcGFyYW0ge251bWJlcn0gcHJlY2lzaW9uIC0gcHJlY2lzaW9uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBraWxvYnl0ZXNcbiAqIEBwcml2YXRlXG4gKi9cbkRvd25sb2FkU3RhdHMucHJvdG90eXBlLl9jb252ZXJ0VG9LQiA9IGZ1bmN0aW9uICh2YWx1ZSwgcHJlY2lzaW9uKSB7XG4gIHByZWNpc2lvbiA9IHR5cGVvZiBwcmVjaXNpb24gIT09IFwidW5kZWZpbmVkXCIgPyBwcmVjaXNpb24gOiAwO1xuICBjb25zdCBhID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbik7XG4gIGNvbnN0IG9uZUtCID0gMTAyNDtcbiAgcmV0dXJuIChNYXRoLnJvdW5kKCh2YWx1ZSAqIGEpIC8gb25lS0IpIC8gYSkgKyBcImtCXCI7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIGJ5dGVzXG4gKiBAcGFyYW0ge251bWJlcn0gcHJlY2lzaW9uIC0gcHJlY2lzaW9uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIG1lZ2FieXRlc1xuICogQHByaXZhdGVcbiAqL1xuRG93bmxvYWRTdGF0cy5wcm90b3R5cGUuX2NvbnZlcnRUb01CID0gZnVuY3Rpb24gKHZhbHVlLCBwcmVjaXNpb24pIHtcbiAgcHJlY2lzaW9uID0gdHlwZW9mIHByZWNpc2lvbiAhPT0gXCJ1bmRlZmluZWRcIiA/IHByZWNpc2lvbiA6IDA7XG4gIGNvbnN0IGEgPSBNYXRoLnBvdygxMCwgcHJlY2lzaW9uKTtcbiAgY29uc3Qgb25lTUIgPSAxMDI0ICogMTAyNDtcbiAgcmV0dXJuIChNYXRoLnJvdW5kKCh2YWx1ZSAqIGEpIC8gb25lTUIpIC8gYSkgKyBcIk1CXCI7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIGJ5dGVzXG4gKiBAcGFyYW0ge251bWJlcn0gcHJlY2lzaW9uIC0gcHJlY2lzaW9uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBnaWdhYnl0ZXNcbiAqIEBwcml2YXRlXG4gKi9cbkRvd25sb2FkU3RhdHMucHJvdG90eXBlLl9jb252ZXJ0VG9HQiA9IGZ1bmN0aW9uICh2YWx1ZSwgcHJlY2lzaW9uKSB7XG4gIHByZWNpc2lvbiA9IHR5cGVvZiBwcmVjaXNpb24gIT09IFwidW5kZWZpbmVkXCIgPyBwcmVjaXNpb24gOiAwO1xuICBjb25zdCBhID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbik7XG4gIGNvbnN0IG9uZUdCID0gMTAyNCAqIDEwMjQgKiAxMDI0O1xuICByZXR1cm4gKE1hdGgucm91bmQoKHZhbHVlICogYSkgLyBvbmVHQikgLyBhKSArIFwiR0JcIjtcbn07XG5cbkRvd25sb2FkU3RhdHMucHJvdG90eXBlLl9jbGVhclNwZWVkID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCBhbGxNYW5pZmVzdElkcyA9IE9iamVjdC5rZXlzKHRoaXMuX3N0YXRzKSB8fCBbXTtcbiAgZm9yIChsZXQgaSA9IDAsIGogPSBhbGxNYW5pZmVzdElkcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICBsZXQgbWFuaWZlc3RJZCA9IGFsbE1hbmlmZXN0SWRzW2ldO1xuICAgIGlmICghdGhpcy5fc3RvcmFnZS5rZXlFeGlzdHMobWFuaWZlc3RJZCkgJiYgdGhpcy5fc3RhdHNbbWFuaWZlc3RJZF0gJiYgdGhpcy5fc3RhdHNbbWFuaWZlc3RJZF0uc3BlZWQpICB7XG4gICAgICB0aGlzLl9zdGF0c1ttYW5pZmVzdElkXS5zcGVlZCA9IDA7XG4gICAgICB0aGlzLl9zdGF0c1ttYW5pZmVzdElkXS5zcGVlZEJ5dGVzID0gdGhpcy5fY29udmVydFRvQnl0ZXModGhpcy5fc3RhdHNbbWFuaWZlc3RJZF0uc3BlZWQsIDMsIDIpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHJlZnJlc2ggLSBkZWNpZGVzIGlmIHN0YXRzIHNob3VsZCBiZSBvbmx5IGNhbGN1bGF0ZWQgd2l0aG91dCBzZXR0aW5nIHByZXZpb3VzIHN0YXRzXG4gKiB0aGlzIGlzIHVzZWZ1bCB3aGVuIGRvd25sb2FkcyBmaW5pc2hlcyBhbmQgc3RhdHMgYXJlIGJlaW5nIGNhbGN1bGF0ZWQgb25lIG1vcmUgdGltZVxuICogQHJldHVybnMge3ZvaWR9XG4gKiBAcHJpdmF0ZVxuICovXG5Eb3dubG9hZFN0YXRzLnByb3RvdHlwZS5fZ2VuZXJhdGUgPSBmdW5jdGlvbiAocmVmcmVzaCkge1xuICBsZXQgYWxsU3RhdHMgPSB7fTtcblxuICBsZXQgbWFuaWZlc3RzID0gdGhpcy5fc3RvcmFnZS5nZXRLZXlzKCk7XG5cbiAgdGhpcy5fY2xlYXJTcGVlZCgpO1xuXG4gIGZ1bmN0aW9uIGNvdW50UGFydHMgKGl0ZW1zKSB7XG4gICAgbGV0IHBhcnRzID0gMDtcbiAgICBmb3IgKGxldCBrID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgayA8IGw7IGsrKykge1xuICAgICAgbGV0IGl0ZW0gPSBpdGVtc1trXTtcbiAgICAgIHBhcnRzICs9IGl0ZW0uYmFuZHdpZHRoIHx8IDE7XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cztcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvdW50UGFydHNPYmogKGl0ZW1zLCB3aXRoRG93bmxvYWRlZE9ubHkpIHtcbiAgICBsZXQgcGFydHMgPSAwO1xuICAgIGZvciAobGV0IGtleSBpbiBpdGVtcykge1xuICAgICAgaWYgKGl0ZW1zLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgbGV0IGl0ZW0gPSBpdGVtc1trZXldO1xuICAgICAgICBwYXJ0cyArPSAod2l0aERvd25sb2FkZWRPbmx5ID8gKGl0ZW0uc3RhdHMuYXZhaWxhYmxlIC8gKGl0ZW0uc3RhdHMuZmlsZV9zaXplIHx8IDEpKSA6IDEpICogKGl0ZW0uYmFuZHdpZHRoIHx8IDEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGFydHM7XG4gIH1cblxuICBmdW5jdGlvbiB0b0FycmF5IChvYmopIHtcbiAgICBsZXQgYXJyID0gW107XG4gICAgZm9yIChsZXQga2V5IGluIG9iaikge1xuICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGxldCBpdGVtID0gb2JqW2tleV07XG4gICAgICAgIGFyci5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyO1xuICB9XG5cbiAgY29uc3Qgc3RhdHMgPSB7XG4gICAgZG93bmxvYWRpbmc6IDAsXG4gICAgZG93bmxvYWRlZDogMCxcbiAgICBhdmFpbGFibGU6IDAsXG4gICAgbGVmdDogMCxcbiAgICBkb3dubG9hZGluZ0F2YWlsYWJsZUJ5dGVzOiAwLFxuICAgIGRvd25sb2FkaW5nX2ZpbGVfc2l6ZTogMCxcbiAgICBkb3dubG9hZGluZ0J5dGVzOiAwLFxuICAgIGRvd25sb2FkZWRCeXRlczogMCxcbiAgICBhdmFpbGFibGVCeXRlczogMCxcbiAgICB3cml0ZVByb2dyZXNzOiAwLFxuICAgIHdyaXRlUHJvZ3Jlc3NEb3dubG9hZGluZzogMCxcbiAgICB3cml0ZVByb2dyZXNzRG93bmxvYWRlZDogMCxcbiAgICBlcnJvcnM6IDAsXG4gICAgcHJvZ3Jlc3M6IDAsXG4gICAgc3BlZWQ6IDAsXG4gICAgc3RhdHVzOiAnJ1xuICB9O1xuXG4gIC8vYXZhaWxhYmxlQnl0ZXMgLSBiYXRlcyB0aGF0IGhhcyBiZWVuIGFscmVhZHkgZG93bmxvYWRlZFxuICAvL2Rvd25sb2FkZWRCeXRlcyAtIGJ5dGVzIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSBjdXJyZW50IHNwZWVkXG4gIC8vaWYgZm9yIGFueSByZWFzb24gdGhlIGNvbm5lY3Rpb24gaXMgYnJva2VuIG9yIHVzZXIgc3RvcHBlZCwgdGhlbiBhZnRlciByZXN1bWluZyB0aGUgYXZhaWxhYmxlIGJ5dGVzIGFyZVxuICAvL2Fsd2F5cyBiaWdnZXIgdGhlbiB0aGUgYWN0dWFsIGRvd25sb2FkZWQgYnl0ZXMuXG4gIC8vb25jZSB0aGUgZmlsZSBpcyBmaW5pc2hlZCBib3RoIHZhbHVlcyBhcmUgZXF1YWwgYW5kIGhhdmUgdGhlIHNhbWUgdmFsdWUgYXMgZmlsZV9zaXplXG5cbiAgbGV0IG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICBpZiAoIXRoaXMuX3N0YXRzVGltZSkge1xuICAgIHRoaXMuX3N0YXRzVGltZSA9IG5vdztcbiAgfVxuICBmb3IgKGxldCBpID0gMCwgaiA9IG1hbmlmZXN0cy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICBsZXQgbWFuaWZlc3RJZCA9IG1hbmlmZXN0c1tpXTtcbiAgICBhbGxTdGF0c1ttYW5pZmVzdElkXSA9IF8uY2xvbmUoc3RhdHMpO1xuICAgIGFsbFN0YXRzW21hbmlmZXN0SWRdLmxlZnQgPSB0aGlzLl9zdG9yYWdlLmxlZnQuY291bnQobWFuaWZlc3RJZCk7XG4gICAgYWxsU3RhdHNbbWFuaWZlc3RJZF0ubGVmdEkgPSB0aGlzLl9zdG9yYWdlLmxlZnQuZ2V0SXRlbXMobWFuaWZlc3RJZCk7XG5cbiAgICBhbGxTdGF0c1ttYW5pZmVzdElkXS5lcnJvcnMgPSB0aGlzLl9zdG9yYWdlLmVycm9ycy5jb3VudChtYW5pZmVzdElkKTtcbiAgICBhbGxTdGF0c1ttYW5pZmVzdElkXS5lcnJvcnNJID0gdGhpcy5fc3RvcmFnZS5lcnJvcnMuZ2V0SXRlbXMobWFuaWZlc3RJZCk7XG4gICAgbGV0IGl0ZW1zID0gdGhpcy5fc3RvcmFnZS5kb3dubG9hZGluZy5nZXRLZXlzKG1hbmlmZXN0SWQpO1xuICAgIGFsbFN0YXRzW21hbmlmZXN0SWRdLmRvd25sb2FkaW5nID0gaXRlbXMubGVuZ3RoO1xuICAgIGFsbFN0YXRzW21hbmlmZXN0SWRdLmRvd25sb2FkaW5nSSA9IHRoaXMuX3N0b3JhZ2UuZG93bmxvYWRpbmcuZ2V0SXRlbXMobWFuaWZlc3RJZCk7XG4gICAgbGV0IHdyaXRlUHJvZ3Jlc3NEb3dubG9hZGluZ0l0ZW1zTGVuZ3RoID0gaXRlbXMubGVuZ3RoO1xuICAgIGZvciAobGV0IGsgPSAwLCBsID0gaXRlbXMubGVuZ3RoOyBrIDwgbDsgaysrKSB7XG4gICAgICBsZXQgaXRlbSA9IHRoaXMuX3N0b3JhZ2UuZG93bmxvYWRpbmcuZ2V0SXRlbShtYW5pZmVzdElkLCBpdGVtc1trXSk7XG4gICAgICBhbGxTdGF0c1ttYW5pZmVzdElkXS5kb3dubG9hZGluZ0J5dGVzICs9IGl0ZW0uc3RhdHMuZG93bmxvYWRlZDtcbiAgICAgIGFsbFN0YXRzW21hbmlmZXN0SWRdLmRvd25sb2FkaW5nX2ZpbGVfc2l6ZSArPSBpdGVtLnN0YXRzLmZpbGVfc2l6ZTtcbiAgICAgIGFsbFN0YXRzW21hbmlmZXN0SWRdLmRvd25sb2FkaW5nQXZhaWxhYmxlQnl0ZXMgKz0gaXRlbS5zdGF0cy5hdmFpbGFibGU7XG4gICAgICBhbGxTdGF0c1ttYW5pZmVzdElkXS53cml0ZVByb2dyZXNzRG93bmxvYWRpbmcgKz0gaXRlbS5zdGF0cy53cml0ZVByb2dyZXNzO1xuICAgIH1cbiAgICBpdGVtcyA9IHRoaXMuX3N0b3JhZ2UuZG93bmxvYWRlZC5nZXRJdGVtcyhtYW5pZmVzdElkKTtcbiAgICBhbGxTdGF0c1ttYW5pZmVzdElkXS5kb3dubG9hZGVkID0gaXRlbXMubGVuZ3RoO1xuICAgIGFsbFN0YXRzW21hbmlmZXN0SWRdLmRvd25sb2FkZWRJID0gaXRlbXM7XG4gICAgbGV0IHdyaXRlUHJvZ3Jlc3NJdGVtc0Rvd25sb2FkZWRMZW5ndGggPSBpdGVtcy5sZW5ndGg7XG4gICAgZm9yIChsZXQgayA9IDAsIGwgPSBpdGVtcy5sZW5ndGg7IGsgPCBsOyBrKyspIHtcbiAgICAgIGxldCBpdGVtID0gaXRlbXNba107XG4gICAgICBhbGxTdGF0c1ttYW5pZmVzdElkXS5kb3dubG9hZGVkQnl0ZXMgKz0gaXRlbS5zdGF0cy5kb3dubG9hZGVkO1xuICAgICAgYWxsU3RhdHNbbWFuaWZlc3RJZF0ud3JpdGVQcm9ncmVzc0Rvd25sb2FkZWQgKz0gaXRlbS5zdGF0cy53cml0ZVByb2dyZXNzO1xuICAgIH1cblxuICAgIC8vbmVlZCB0byBjYWxjdWxhdGUgd2hhdCBwZXJjZW50YWdlIG9mIGJ5dGVzIHRoYXQgYXJlIGdvaW5nIHRvIGJlIHdyaXR0ZW4gdG8gaGFyZCBkcml2ZSBhcmUgYWNjb3JkaW5nIHRoZSB0aGUgd2hvbGVcbiAgICAvLyBzaXplIGZvciBleGFtcGxlIDUgZmlsZXMgYXJlIGJlaW5nIGRvd25sb2FkZWQsIDQgc21hbGxlciBhcmUgMTAwbWIgYW5kIG9uZSBsYXJnZSAxLDlHQi4gV2hlbiB0aGUgbGFyZ2UgZmlsZSBpc1xuICAgIC8vIGJlaW5nIHNhdmVkIHRoZSB3cml0ZSBwcm9ncmVzcyBpcyBiYXNpY2FsbHkgMTkwMC8yMDAwID0gOTUlIG9mIGFsbCB3cml0dGVuIGJ5dGVzLlxuICAgIGFsbFN0YXRzW21hbmlmZXN0SWRdLndyaXRlUHJvZ3Jlc3NEb3dubG9hZGluZyA9IGFsbFN0YXRzW21hbmlmZXN0SWRdLndyaXRlUHJvZ3Jlc3NEb3dubG9hZGluZyAqXG4gICAgICAoYWxsU3RhdHNbbWFuaWZlc3RJZF0uZG93bmxvYWRpbmdBdmFpbGFibGVCeXRlcyAvIChhbGxTdGF0c1ttYW5pZmVzdElkXS5kb3dubG9hZGVkQnl0ZXMgKyBhbGxTdGF0c1ttYW5pZmVzdElkXS5kb3dubG9hZGluZ19maWxlX3NpemUpIHx8IDEpO1xuICAgIGFsbFN0YXRzW21hbmlmZXN0SWRdLndyaXRlUHJvZ3Jlc3NEb3dubG9hZGluZyA9IGFsbFN0YXRzW21hbmlmZXN0SWRdLndyaXRlUHJvZ3Jlc3NEb3dubG9hZGluZyAvICh3cml0ZVByb2dyZXNzRG93bmxvYWRpbmdJdGVtc0xlbmd0aCB8fCAxKTtcblxuICAgIGFsbFN0YXRzW21hbmlmZXN0SWRdLndyaXRlUHJvZ3Jlc3NEb3dubG9hZGVkID0gYWxsU3RhdHNbbWFuaWZlc3RJZF0ud3JpdGVQcm9ncmVzc0Rvd25sb2FkZWQgKlxuICAgICAgKGFsbFN0YXRzW21hbmlmZXN0SWRdLmRvd25sb2FkZWRCeXRlcyAvIChhbGxTdGF0c1ttYW5pZmVzdElkXS5kb3dubG9hZGVkQnl0ZXMgKyBhbGxTdGF0c1ttYW5pZmVzdElkXS5kb3dubG9hZGluZ19maWxlX3NpemUpIHx8IDEpO1xuICAgIGFsbFN0YXRzW21hbmlmZXN0SWRdLndyaXRlUHJvZ3Jlc3NEb3dubG9hZGVkID0gYWxsU3RhdHNbbWFuaWZlc3RJZF0ud3JpdGVQcm9ncmVzc0Rvd25sb2FkZWQgLyAod3JpdGVQcm9ncmVzc0l0ZW1zRG93bmxvYWRlZExlbmd0aCB8fCAxKTtcblxuICAgIGFsbFN0YXRzW21hbmlmZXN0SWRdLndyaXRlUHJvZ3Jlc3MgPSBhbGxTdGF0c1ttYW5pZmVzdElkXS53cml0ZVByb2dyZXNzRG93bmxvYWRpbmcgKyBhbGxTdGF0c1ttYW5pZmVzdElkXS53cml0ZVByb2dyZXNzRG93bmxvYWRlZDtcblxuICAgIGxldCBzcGVlZCA9IHRoaXMuX2dldERpZmYoXCJkb3dubG9hZGluZ0J5dGVzXCIsIG1hbmlmZXN0SWQsIGFsbFN0YXRzLCB0aGlzLl9zdGF0c1ByZXZpb3VzKTtcbiAgICBzcGVlZCArPSB0aGlzLl9nZXREaWZmKFwiZG93bmxvYWRlZEJ5dGVzXCIsIG1hbmlmZXN0SWQsIGFsbFN0YXRzLCB0aGlzLl9zdGF0c1ByZXZpb3VzKTtcbiAgICBzcGVlZCA9IChzcGVlZCAqIDEwMDApIC8gKChub3cgLSB0aGlzLl9zdGF0c1RpbWUpIHx8IDEgICk7XG4gICAgYWxsU3RhdHNbbWFuaWZlc3RJZF0uc3BlZWQgPSBzcGVlZDtcbiAgICBhbGxTdGF0c1ttYW5pZmVzdElkXS5zdGF0dXMgPSB0aGlzLl9zdG9yYWdlLnN0YXR1cy5nZXRJdGVtKG1hbmlmZXN0SWQsIFwic3RhdHVzXCIpO1xuICAgIGFsbFN0YXRzW21hbmlmZXN0SWRdLmRldGFpbHMgPSB0aGlzLl9zdG9yYWdlLnN0YXR1cy5nZXRJdGVtKG1hbmlmZXN0SWQsIFwiZGV0YWlsc1wiKTtcblxuICAgIC8vcHJvZ3Jlc3MgZm9yIGRvd25sb2FkZWRcbiAgICBsZXQgbGVmdFBhcnRzID0gY291bnRQYXJ0cyhhbGxTdGF0c1ttYW5pZmVzdElkXS5sZWZ0SSk7XG4gICAgbGV0IGRvd25sb2FkZWRQYXJ0cyA9IGNvdW50UGFydHMoYWxsU3RhdHNbbWFuaWZlc3RJZF0uZG93bmxvYWRlZEkpO1xuICAgIGxldCBkb3dubG9hZGluZ1BhcnRzU2l6ZSA9IGNvdW50UGFydHNPYmooYWxsU3RhdHNbbWFuaWZlc3RJZF0uZG93bmxvYWRpbmdJKTtcbiAgICBsZXQgZG93bmxvYWRpbmdQYXJ0cyA9IGNvdW50UGFydHNPYmooYWxsU3RhdHNbbWFuaWZlc3RJZF0uZG93bmxvYWRpbmdJLCB0cnVlKTtcbiAgICBsZXQgZXJyb3JQYXJ0cyA9IGNvdW50UGFydHNPYmooYWxsU3RhdHNbbWFuaWZlc3RJZF0uZXJyb3JzSSk7XG4gICAgbGV0IGFsbFBhcnRzID0gbGVmdFBhcnRzICsgZG93bmxvYWRlZFBhcnRzICsgZG93bmxvYWRpbmdQYXJ0c1NpemUgKyBlcnJvclBhcnRzO1xuXG4gICAgYWxsU3RhdHNbbWFuaWZlc3RJZF0ucHJvZ3Jlc3MgPSAoZG93bmxvYWRlZFBhcnRzICsgZG93bmxvYWRpbmdQYXJ0cykgLyAoYWxsUGFydHMgfHwgMSk7XG4gICAgYWxsU3RhdHNbbWFuaWZlc3RJZF0ucHJvZ3Jlc3MgPSBhbGxTdGF0c1ttYW5pZmVzdElkXS5wcm9ncmVzcyAqICgxIC0gd3JpdGVQcm9ncmVzc1VzYWdlKTtcbiAgICBhbGxTdGF0c1ttYW5pZmVzdElkXS5wcm9ncmVzcyArPSBhbGxTdGF0c1ttYW5pZmVzdElkXS53cml0ZVByb2dyZXNzICogd3JpdGVQcm9ncmVzc1VzYWdlO1xuXG4gICAgYWxsU3RhdHNbbWFuaWZlc3RJZF0uZG93bmxvYWRlZEJ5dGVzVG90YWwgPSBNYXRoLnJvdW5kKGFsbFN0YXRzW21hbmlmZXN0SWRdLnByb2dyZXNzICogMTAwMDApIC8gMTAwO1xuICAgIGFsbFN0YXRzW21hbmlmZXN0SWRdLmRvd25sb2FkZWRCeXRlc1RvdGFsICs9IFwiJVwiO1xuXG4gICAgLy8gcHJvZ3Jlc3Mgb2YgZWFjaCByZXByZXNlbnRpb25cbiAgICBsZXQgcmVkdWNlRnVuYyA9IGZ1bmN0aW9uIChtYXAsIG9iaikge1xuICAgICAgaWYgKCAhbWFwW29iai5pZF0gKSAge1xuICAgICAgICBtYXBbb2JqLmlkXSA9IFtdXG4gICAgICB9XG4gICAgICBtYXBbb2JqLmlkXS5wdXNoKG9iaik7XG4gICAgICByZXR1cm4gbWFwO1xuICAgIH1cbiAgICBsZXQgZG93bmxvYWRlZEJ5SWQgPSBhbGxTdGF0c1ttYW5pZmVzdElkXS5kb3dubG9hZGVkSS5yZWR1Y2UocmVkdWNlRnVuYywge30pO1xuICAgIGxldCBkb3dubG9hZGluZ0FycmF5ID0gdG9BcnJheShhbGxTdGF0c1ttYW5pZmVzdElkXS5kb3dubG9hZGluZ0kpO1xuICAgIGxldCBkb3dubG9hZGluZ0J5SWQgPSBkb3dubG9hZGluZ0FycmF5LnJlZHVjZShyZWR1Y2VGdW5jLCB7fSk7XG4gICAgbGV0IGxlZnRCeUlkID0gYWxsU3RhdHNbbWFuaWZlc3RJZF0ubGVmdEkucmVkdWNlKHJlZHVjZUZ1bmMsIHt9KTtcbiAgICBsZXQgZXJyb3JBcnJheSA9IHRvQXJyYXkoYWxsU3RhdHNbbWFuaWZlc3RJZF0uZXJyb3JzSSk7XG4gICAgbGV0IGVycm9yc0J5SWQgPSBlcnJvckFycmF5LnJlZHVjZShyZWR1Y2VGdW5jLCB7fSk7XG5cbiAgICBsZXQgZXh0ZW5kID0gZnVuY3Rpb24gKG9iaiwgc3JjKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgICAgIGlmIChzcmMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGlmICghb2JqW2tleV0pIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gW107XG4gICAgICAgICAgfVxuICAgICAgICAgIG9ialtrZXldID0gb2JqW2tleV0uY29uY2F0KHNyY1trZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgbGV0IGFsbFBhcnRzQnlJZCA9IHt9O1xuICAgIGV4dGVuZChhbGxQYXJ0c0J5SWQsIGRvd25sb2FkZWRCeUlkKTtcbiAgICBleHRlbmQoYWxsUGFydHNCeUlkLCBkb3dubG9hZGluZ0J5SWQpO1xuICAgIGV4dGVuZChhbGxQYXJ0c0J5SWQsIGxlZnRCeUlkKTtcbiAgICBleHRlbmQoYWxsUGFydHNCeUlkLCBlcnJvcnNCeUlkKTtcblxuICAgIC8vIGNvbXB1dGUgcHJvZ3JlcyBmb3IgZWFjaCBpZFxuICAgIGxldCBwcm9ncmVzc0J5SWQgPSB7fTtcbiAgICBsZXQga2V5O1xuICAgIGZvciAoa2V5IGluIGFsbFBhcnRzQnlJZCkge1xuICAgICAgaWYgKGFsbFBhcnRzQnlJZC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIHByb2dyZXNzQnlJZFtrZXldID0gKGNvdW50UGFydHNPYmooZG93bmxvYWRlZEJ5SWRba2V5XSkpIC8gKGNvdW50UGFydHNPYmooYWxsUGFydHNCeUlkW2tleV0pIHx8IDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgcHJvZ3Jlc3NCeUlkUGVyY2VudCA9IHt9O1xuICAgIGZvciAoa2V5IGluIHByb2dyZXNzQnlJZCkge1xuICAgICAgaWYgKHByb2dyZXNzQnlJZC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIHByb2dyZXNzQnlJZFBlcmNlbnRba2V5XSA9IE1hdGgucm91bmQocHJvZ3Jlc3NCeUlkW2tleV0gKiAxMDAwMCkgLyAxMDAgKyBcIiVcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgYWxsU3RhdHNbbWFuaWZlc3RJZF0ucHJvZ3Jlc3NCeUlkID0gcHJvZ3Jlc3NCeUlkO1xuICAgIGFsbFN0YXRzW21hbmlmZXN0SWRdLnByb2dyZXNzQnlJZFBlcmNlbnQgPSBwcm9ncmVzc0J5SWRQZXJjZW50O1xuICB9XG4gIGxldCBzaG93U3RhdHMgPSB7fTtcbiAgZm9yIChsZXQgaSA9IDAsIGogPSBtYW5pZmVzdHMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgbGV0IG1hbmlmZXN0SWQgPSBtYW5pZmVzdHNbaV07XG4gICAgc2hvd1N0YXRzW21hbmlmZXN0SWRdID0ge307XG4gICAgbGV0IGRvd25sb2FkZWRCeXRlc1RvdGFsID0gYWxsU3RhdHNbbWFuaWZlc3RJZF0uZG93bmxvYWRlZEJ5dGVzICsgYWxsU3RhdHNbbWFuaWZlc3RJZF0uZG93bmxvYWRpbmdBdmFpbGFibGVCeXRlcztcbiAgICBzaG93U3RhdHNbbWFuaWZlc3RJZF0ucHJvZ3Jlc3MgPSBhbGxTdGF0c1ttYW5pZmVzdElkXS5wcm9ncmVzcztcbiAgICBzaG93U3RhdHNbbWFuaWZlc3RJZF0ucHJvZ3Jlc3NQZXJjZW50YWdlID0gYWxsU3RhdHNbbWFuaWZlc3RJZF0uZG93bmxvYWRlZEJ5dGVzVG90YWw7XG4gICAgc2hvd1N0YXRzW21hbmlmZXN0SWRdLnByb2dyZXNzQnlJZCA9IGFsbFN0YXRzW21hbmlmZXN0SWRdLnByb2dyZXNzQnlJZDtcbiAgICBzaG93U3RhdHNbbWFuaWZlc3RJZF0ucHJvZ3Jlc3NCeUlkUGVyY2VudCA9IGFsbFN0YXRzW21hbmlmZXN0SWRdLnByb2dyZXNzQnlJZFBlcmNlbnQ7XG4gICAgc2hvd1N0YXRzW21hbmlmZXN0SWRdLmRvd25sb2FkZWRCeXRlc1RvdGFsID0gdGhpcy5fY29udmVydFRvQnl0ZXMoZG93bmxvYWRlZEJ5dGVzVG90YWwsIDEsIDIsIDIpO1xuICAgIHNob3dTdGF0c1ttYW5pZmVzdElkXS5kb3dubG9hZGVkID0gYWxsU3RhdHNbbWFuaWZlc3RJZF0uZG93bmxvYWRlZDtcbiAgICBzaG93U3RhdHNbbWFuaWZlc3RJZF0ubGVmdCA9IGFsbFN0YXRzW21hbmlmZXN0SWRdLmxlZnQ7XG4gICAgc2hvd1N0YXRzW21hbmlmZXN0SWRdLmVycm9ycyA9IGFsbFN0YXRzW21hbmlmZXN0SWRdLmVycm9ycztcbiAgICBpZiAoYWxsU3RhdHNbbWFuaWZlc3RJZF0uc3BlZWQgPCAwKSB7XG4gICAgICBhbGxTdGF0c1ttYW5pZmVzdElkXS5zcGVlZCA9IDA7XG4gICAgfVxuICAgIHNob3dTdGF0c1ttYW5pZmVzdElkXS5zcGVlZCA9IGFsbFN0YXRzW21hbmlmZXN0SWRdLnNwZWVkO1xuICAgIHNob3dTdGF0c1ttYW5pZmVzdElkXS5zcGVlZEJ5dGVzID0gdGhpcy5fY29udmVydFRvQnl0ZXMoYWxsU3RhdHNbbWFuaWZlc3RJZF0uc3BlZWQsIDMsIDIpO1xuICAgIHNob3dTdGF0c1ttYW5pZmVzdElkXS5zdGF0dXMgPSBhbGxTdGF0c1ttYW5pZmVzdElkXS5zdGF0dXM7XG4gICAgc2hvd1N0YXRzW21hbmlmZXN0SWRdLmRldGFpbHMgPSBhbGxTdGF0c1ttYW5pZmVzdElkXS5kZXRhaWxzO1xuXG4gIH1cbiAgZm9yIChsZXQga2V5IGluIHNob3dTdGF0cykge1xuICAgIGlmIChzaG93U3RhdHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgdGhpcy5fc3RhdHNba2V5XSA9IHNob3dTdGF0c1trZXldO1xuICAgIH1cbiAgfVxuICBpZiAoIXJlZnJlc2gpIHtcbiAgICB0aGlzLl9zdGF0c1RpbWUgPSBub3c7XG4gICAgZm9yIChsZXQga2V5IGluIGFsbFN0YXRzKSB7XG4gICAgICBpZiAoYWxsU3RhdHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICB0aGlzLl9zdGF0c1ByZXZpb3VzW2tleV0gPSBhbGxTdGF0c1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0ga2V5IHN0YXRzIGlkZW50aWZpZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYW5pZmVzdElkIC0gbWFuaWZlc3QgaWRlbnRpZmllclxuICogQHBhcmFtIHtudW1iZXJ9IGN1cnJlbnQgLSBjdXJyZW50IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gcHJldmlvdXMgLSBwcmV2aW91cyB2YWx1ZVxuICogQHJldHVybnMge251bWJlcn0gLSBkaWZmZXJlbmNlIGJldHdlZW4gY3VycmVudCBhbmQgcHJldmlvdXMgdmFsdWVcbiAqIEBwcml2YXRlXG4gKi9cbkRvd25sb2FkU3RhdHMucHJvdG90eXBlLl9nZXREaWZmID0gZnVuY3Rpb24gKGtleSwgbWFuaWZlc3RJZCwgY3VycmVudCwgcHJldmlvdXMpIHtcbiAgY29uc3QgY3VycmVudFZhbHVlID0gY3VycmVudFttYW5pZmVzdElkXSAmJiBjdXJyZW50W21hbmlmZXN0SWRdW2tleV0gfHwgMDtcbiAgY29uc3QgcHJldmlvdXNWYWx1ZSA9IHByZXZpb3VzW21hbmlmZXN0SWRdICYmIHByZXZpb3VzW21hbmlmZXN0SWRdW2tleV0gfHwgMDtcbiAgcmV0dXJuIGN1cnJlbnRWYWx1ZSAtIHByZXZpb3VzVmFsdWU7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xhcnJheX0gbWFuaWZlc3RJZHMgLSBtYW5pZmVzdCBpZGVudGlmaWVyIG9yIGFycmF5IG9mIG1hbmlmZXN0cyBpZGVudGlmaWVyXG4gKiBAcmV0dXJucyB7Kn0gc3RhdHMgZm9yIGNlcnRhaW4gZG93bmxvYWQgb3IgYXJyYXkgb2Ygc3RhdHMgZm9yIGRvd25sb2Fkc1xuICovXG5Eb3dubG9hZFN0YXRzLnByb3RvdHlwZS5nZXRTdGF0cyA9IGZ1bmN0aW9uIChtYW5pZmVzdElkcykge1xuICBsZXQgc3RhdHM7XG4gIGlmICh0aGlzLl9zdGF0cykge1xuICAgIGlmICh0eXBlb2YgbWFuaWZlc3RJZHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBzdGF0cyA9IHRoaXMuX3N0YXRzW21hbmlmZXN0SWRzXTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdHMgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gbWFuaWZlc3RJZHMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgIGxldCBzdGF0ID0gdGhpcy5fc3RhdHNbbWFuaWZlc3RJZHNbaV1dO1xuICAgICAgICBpZiAoc3RhdCkge1xuICAgICAgICAgIHN0YXRzLnB1c2goc3RhdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0YXRzO1xufTtcblxuRG93bmxvYWRTdGF0cy5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fZ2VuZXJhdGUodHJ1ZSk7XG59O1xuXG5Eb3dubG9hZFN0YXRzLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLl9pbnRlcnZhbCkge1xuICAgIHRoaXMuX2ludGVydmFsID0gc2V0SW50ZXJ2YWwodGhpcy5fZ2VuZXJhdGUsIHRoaXMuX1NUQVRTX1RJTUVfR0VORVJBVElPTik7XG4gICAgdGhpcy5fZ2VuZXJhdGUoKTtcbiAgfVxufTtcblxuRG93bmxvYWRTdGF0cy5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCk7XG4gIHRoaXMuX2ludGVydmFsID0gbnVsbDtcbiAgdGhpcy5fZ2VuZXJhdGUoKTtcbiAgdGhpcy5fc3RhdHNQcmV2aW91cyA9IHt9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEb3dubG9hZFN0YXRzO1xuIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwid3JpdGVQcm9ncmVzc1VzYWdlIiwiRG93bmxvYWRTdGF0cyIsInN0b3JhZ2UiLCJfc3RvcmFnZSIsIl9zdGF0cyIsIl9zdGF0c1ByZXZpb3VzIiwiX1NUQVRTX1RJTUVfR0VORVJBVElPTiIsImJpbmRBbGwiLCJwcm90b3R5cGUiLCJfY29udmVydFRvQnl0ZXMiLCJ2YWx1ZSIsInByZWNpc2lvbiIsInByZWNpc2lvbjIiLCJwcmVjaXNpb24zIiwiX2NvbnZlcnRUb0tCIiwiX2NvbnZlcnRUb01CIiwiX2NvbnZlcnRUb0dCIiwiYSIsIk1hdGgiLCJwb3ciLCJvbmVLQiIsInJvdW5kIiwib25lTUIiLCJvbmVHQiIsIl9jbGVhclNwZWVkIiwiYWxsTWFuaWZlc3RJZHMiLCJPYmplY3QiLCJrZXlzIiwiaSIsImoiLCJsZW5ndGgiLCJtYW5pZmVzdElkIiwia2V5RXhpc3RzIiwic3BlZWQiLCJzcGVlZEJ5dGVzIiwiX2dlbmVyYXRlIiwicmVmcmVzaCIsImFsbFN0YXRzIiwibWFuaWZlc3RzIiwiZ2V0S2V5cyIsImNvdW50UGFydHMiLCJpdGVtcyIsInBhcnRzIiwiayIsImwiLCJpdGVtIiwiYmFuZHdpZHRoIiwiY291bnRQYXJ0c09iaiIsIndpdGhEb3dubG9hZGVkT25seSIsImtleSIsImhhc093blByb3BlcnR5Iiwic3RhdHMiLCJhdmFpbGFibGUiLCJmaWxlX3NpemUiLCJ0b0FycmF5Iiwib2JqIiwiYXJyIiwicHVzaCIsImRvd25sb2FkaW5nIiwiZG93bmxvYWRlZCIsImxlZnQiLCJkb3dubG9hZGluZ0F2YWlsYWJsZUJ5dGVzIiwiZG93bmxvYWRpbmdfZmlsZV9zaXplIiwiZG93bmxvYWRpbmdCeXRlcyIsImRvd25sb2FkZWRCeXRlcyIsImF2YWlsYWJsZUJ5dGVzIiwid3JpdGVQcm9ncmVzcyIsIndyaXRlUHJvZ3Jlc3NEb3dubG9hZGluZyIsIndyaXRlUHJvZ3Jlc3NEb3dubG9hZGVkIiwiZXJyb3JzIiwicHJvZ3Jlc3MiLCJzdGF0dXMiLCJub3ciLCJEYXRlIiwiZ2V0VGltZSIsIl9zdGF0c1RpbWUiLCJjbG9uZSIsImNvdW50IiwibGVmdEkiLCJnZXRJdGVtcyIsImVycm9yc0kiLCJkb3dubG9hZGluZ0kiLCJ3cml0ZVByb2dyZXNzRG93bmxvYWRpbmdJdGVtc0xlbmd0aCIsImdldEl0ZW0iLCJkb3dubG9hZGVkSSIsIndyaXRlUHJvZ3Jlc3NJdGVtc0Rvd25sb2FkZWRMZW5ndGgiLCJfZ2V0RGlmZiIsImRldGFpbHMiLCJsZWZ0UGFydHMiLCJkb3dubG9hZGVkUGFydHMiLCJkb3dubG9hZGluZ1BhcnRzU2l6ZSIsImRvd25sb2FkaW5nUGFydHMiLCJlcnJvclBhcnRzIiwiYWxsUGFydHMiLCJkb3dubG9hZGVkQnl0ZXNUb3RhbCIsInJlZHVjZUZ1bmMiLCJtYXAiLCJpZCIsImRvd25sb2FkZWRCeUlkIiwicmVkdWNlIiwiZG93bmxvYWRpbmdBcnJheSIsImRvd25sb2FkaW5nQnlJZCIsImxlZnRCeUlkIiwiZXJyb3JBcnJheSIsImVycm9yc0J5SWQiLCJleHRlbmQiLCJzcmMiLCJjb25jYXQiLCJhbGxQYXJ0c0J5SWQiLCJwcm9ncmVzc0J5SWQiLCJwcm9ncmVzc0J5SWRQZXJjZW50Iiwic2hvd1N0YXRzIiwicHJvZ3Jlc3NQZXJjZW50YWdlIiwiY3VycmVudCIsInByZXZpb3VzIiwiY3VycmVudFZhbHVlIiwicHJldmlvdXNWYWx1ZSIsImdldFN0YXRzIiwibWFuaWZlc3RJZHMiLCJzdGF0Iiwic3RhcnQiLCJfaW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsInN0b3AiLCJjbGVhckludGVydmFsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///534\n')},1953:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar CODES = __webpack_require__(3740);\nvar translationErrors = {\n  downloads: {\n    _GENERAL: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Sorry we are unable to process your request - some internal error occurred"\n    },\n    ALREADY_FINISHED: {\n      code: CODES.ERRORS.FINISHED,\n      msg: "This download \'%manifestId%\' has been already finished."\n    },\n    ALREADY_REMOVED_ALL_UNFINISHED: {\n      code: CODES.ERRORS.REMOVED,\n      msg: "All unfinished downloads have been already removed, nothing left."\n    },\n    ALREADY_RESUMED: {\n      code: CODES.ERRORS.RESUMED,\n      msg: "This download \'%manifestId%\' has been already resumed."\n    },\n    ALREADY_STOPPED: {\n      code: CODES.ERRORS.STOPPED,\n      msg: "This download \'%manifestId%\' has been already stopped or has been already downloaded."\n    },\n    ALREADY_STOPPED_ALL: {\n      code: CODES.ERRORS.STOPPED,\n      msg: "There are no downloads to be stopped."\n    },\n    ALREADY_STARTED: {\n      code: CODES.ERRORS.STARTED,\n      msg: "This download \'%manifestId%\' has been already started."\n    },\n    BROKEN_CANNOT_BE_RESUMED: {\n      code: CODES.ERRORS.BROKEN,\n      msg: "This download \'%manifestId%\' is broken and cannot be resumed."\n    },\n    INFO_FAILED: {\n      code: CODES.ERRORS.INFO,\n      msg: "Gettting info of download \'%manifestId%\' failed."\n    },\n    REMOVING_ALL_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Removing of all downloads failed."\n    },\n    REMOVING_ALL_UNFINISHED_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Removing of all unfinished downloads failed."\n    },\n    REMOVING_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Removing of download \'%manifestId%\' failed."\n    },\n    RESUMING_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Resuming of download \'%manifestId%\' failed."\n    },\n    UPDATE_DOWNLOAD_FOLDER_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Updating of download folder for \'%manifestId%\' failed."\n    },\n    STOPPING_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Stopping of download \'%manifestId%\' failed."\n    },\n    SAVING_PERSISTENT_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Saving persistent info for download \'%manifestId%\' failed."\n    },\n    SAVING_DATA_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Saving data for download \'%manifestId%\' failed."\n    },\n    STOPPING_ALL_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Stopping all downloads failed."\n    },\n    UNFINISHED: {\n      code: CODES.ERRORS.UNFINISHED,\n      msg: "This download is not ready yet."\n    }\n  },\n  manifests: {\n    NOT_FOUND: {\n      code: CODES.ERRORS.NOT_FOUND,\n      msg: "Manifest with id=\'%manifestId%\' not found."\n    },\n    LOADING_FAILED: {\n      code: CODES.ERRORS.LOADING,\n      msg: "Could not load manifest from url \'%manifestUrl%\'."\n    },\n    LIST_LOADING_FAILED: {\n      code: CODES.ERRORS.LOADING,\n      msg: "Could not load list of manifests."\n    },\n    FOLDER_ALREADY_EXISTS: {\n      code: CODES.ERRORS.EXISTS,\n      msg: "Folder for manifest with id =\'%manifestId%\' already exists."\n    },\n    INVALID_ID: {\n      code: CODES.ERRORS.BROKEN,\n      msg: "Provided custom id for manifest is not valid: (\'%invalid%\')"\n    }\n  }\n};\nmodule.exports = translationErrors;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1953\n')},5406:module=>{"use strict";eval('\n\nmodule.exports = {\n  test: "Hello world"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQwNi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZkMsSUFBSSxFQUFFO0FBQ1IsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvdHJhbnNsYXRpb24vX3RyYW5zbGF0aW9ucy5qcz82ZWIwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdGVzdDogXCJIZWxsbyB3b3JsZFwiXG59OyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidGVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5406\n')},5847:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nvar errors = __webpack_require__(1953);\nvar translations = __webpack_require__(5406);\nvar CODES = __webpack_require__(3740);\nvar REGEXP_KEYS = /%[A-Za-z0-9_-]+%/g;\n\n/**\n * @namespace <global>\n * @module util/translation\n * @property {translationErrors} e - {@link translationErrors}\n */\nvar translation = {};\n\n/**\n *\n * @param {object} key - translation object\n * @returns {*} key from translation object\n * @private\n */\nfunction _getCode(key) {\n  key = key || {};\n  var code = key.code;\n  if (!code) {\n    code = CODES.GENERAL;\n  }\n  return code;\n}\n\n/**\n *\n * @param {object} key - translation object\n * @param {array|object|string|number|boolean} values - translation values\n * @returns {*} all key values\n * @private\n */\nfunction _getKeyValues(key, values) {\n  var translation = key;\n  var keyValues = [];\n  if (_typeof(translation) === "object") {\n    translation = translation.msg;\n  }\n  if (translation) {\n    if (values instanceof Array) {\n      var groups = _getUniqueKeys(translation.match(REGEXP_KEYS));\n      for (var i = 0, j = Math.min(groups.length, values.length); i < j; i++) {\n        var keyValue = {};\n        keyValue[groups[i].replace(/%/g, "")] = values[i];\n        keyValues.push(keyValue);\n      }\n    } else if (_typeof(values) === "object") {\n      for (var _key in values) {\n        if (values.hasOwnProperty(_key)) {\n          var _keyValue = {};\n          _keyValue[_key] = values[_key];\n          keyValues.push(_keyValue);\n        }\n      }\n    } else if (typeof values === "string" || typeof values === "number" || typeof values === "boolean") {\n      var _groups = translation.match(REGEXP_KEYS) || [];\n      for (var _i = 0, _j = _groups.length; _i < _j; _i++) {\n        var _keyValue2 = {};\n        _keyValue2[_groups[_i].replace(/%/g, "")] = values;\n        keyValues.push(_keyValue2);\n      }\n    }\n  }\n  if (keyValues && !keyValues.length) {\n    keyValues = undefined;\n  }\n  return keyValues;\n}\n\n/**\n *\n * @param {object} key - translation object\n * @param {array|object|string|number|boolean} values - translation values\n * @returns {*} translated message with attached values\n * @private\n */\nfunction _getTranslation(key, values) {\n  var translation = key;\n  if (_typeof(translation) === "object") {\n    translation = translation.msg;\n  }\n  if (translation) {\n    translation = _parseValues(translation, values);\n  } else {\n    translation = "Internal Error";\n  }\n  return translation;\n}\n\n/**\n *\n * @param {array} args - arguments\n * @returns {array} array of all values except 1st one\n * @private\n */\nfunction _getValues(args) {\n  var values = [];\n  for (var i = 1, j = args.length; i < j; i++) {\n    values.push(args[i]);\n  }\n  if (values.length === 0) {\n    values = undefined;\n  } else if (values.length === 1) {\n    values = values[0];\n  }\n  return values;\n}\n\n/**\n *\n * @param {array} groups - matched groups\n * @returns {array} unique names\n * @private\n */\nfunction _getUniqueKeys(groups) {\n  var hashKey = {};\n  var uniqueNames = [];\n  groups = groups || [];\n  for (var i = 0, j = groups.length; i < j; i++) {\n    if (!hashKey[groups[i]]) {\n      hashKey[groups[i]] = true;\n      uniqueNames.push(groups[i]);\n    }\n  }\n  return uniqueNames;\n}\n\n/**\n *\n * @param {string} translation - text to be translated\n * @param {array|object|string|number|boolean} values - values to be parsed with translation\n * @returns {*} translation\n * @private\n */\nfunction _parseValues(translation, values) {\n  values = values || \'\';\n  if (values instanceof Array) {\n    var groups = _getUniqueKeys(translation.match(REGEXP_KEYS));\n    for (var i = 0, j = Math.min(groups.length, values.length); i < j; i++) {\n      translation = translation.replace(new RegExp(groups[i], "g"), values[i]);\n    }\n  } else if (_typeof(values) === "object") {\n    for (var key in values) {\n      if (values.hasOwnProperty(key)) {\n        translation = translation.replace(new RegExp("%" + key + "%", "g"), values[key]);\n      }\n    }\n    translation = translation.replace(REGEXP_KEYS, values);\n  } else if (typeof values === "string" || typeof values === "number" || typeof values === "boolean") {\n    translation = translation.replace(REGEXP_KEYS, values);\n  }\n  return translation;\n}\n\n/**\n * @alias module:util/translation.getError\n * @param {object} key - translation object\n * @returns {{code: *, msg: *, keys: *}} - error object with code, msg and keys\n */\nfunction getError(key) {\n  var values = _getValues(arguments);\n  var keyValues = _getKeyValues(key, values);\n  var msg = _getTranslation(key, values);\n  var code = _getCode(key);\n  return {\n    code: code,\n    msg: msg,\n    keys: keyValues\n  };\n}\n\n/**\n * @alias module:util/translation.getTranslation\n * @static\n * @param {object} key - translation object\n * @returns {*} - return translated string with correctly applied values\n */\nfunction getTranslation(key) {\n  var values = _getValues(arguments);\n  return _getTranslation(key, values);\n}\ntranslation.getError = getError;\ntranslation.getTranslation = getTranslation;\ntranslation.e = errors;\ntranslation.t = translations;\nmodule.exports = translation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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eEQ7RUFDQSxPQUFPTixXQUFXO0FBQ3BCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOEIsUUFBUUEsQ0FBRTVCLEdBQUcsRUFBRTtFQUN0QixJQUFNSSxNQUFNLEdBQUdtQixVQUFVLENBQUNNLFNBQVMsQ0FBQztFQUNwQyxJQUFNeEIsU0FBUyxHQUFHRixhQUFhLENBQUNILEdBQUcsRUFBRUksTUFBTSxDQUFDO0VBQzVDLElBQU1FLEdBQUcsR0FBR2UsZUFBZSxDQUFDckIsR0FBRyxFQUFFSSxNQUFNLENBQUM7RUFDeEMsSUFBTUgsSUFBSSxHQUFHRixRQUFRLENBQUNDLEdBQUcsQ0FBQztFQUMxQixPQUFPO0lBQ0xDLElBQUksRUFBRUEsSUFBSTtJQUNWSyxHQUFHLEVBQUVBLEdBQUc7SUFDUndCLElBQUksRUFBRXpCO0VBQ1IsQ0FBQztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMwQixjQUFjQSxDQUFFL0IsR0FBRyxFQUFFO0VBQzVCLElBQU1JLE1BQU0sR0FBR21CLFVBQVUsQ0FBQ00sU0FBUyxDQUFDO0VBQ3BDLE9BQU9SLGVBQWUsQ0FBQ3JCLEdBQUcsRUFBRUksTUFBTSxDQUFDO0FBQ3JDO0FBRUFOLFdBQVcsQ0FBQzhCLFFBQVEsR0FBR0EsUUFBUTtBQUMvQjlCLFdBQVcsQ0FBQ2lDLGNBQWMsR0FBR0EsY0FBYztBQUMzQ2pDLFdBQVcsQ0FBQ2tDLENBQUMsR0FBR3ZDLE1BQU07QUFDdEJLLFdBQVcsQ0FBQ21DLENBQUMsR0FBR3RDLFlBQVk7QUFFNUJ1QyxNQUFNLENBQUNDLE9BQU8sR0FBR3JDLFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3RyYW5zbGF0aW9uL2luZGV4LmpzP2Y1MjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IGVycm9ycyA9IHJlcXVpcmUoXCIuL19lcnJvcnNcIik7XG5jb25zdCB0cmFuc2xhdGlvbnMgPSByZXF1aXJlKFwiLi9fdHJhbnNsYXRpb25zXCIpO1xuY29uc3QgQ09ERVMgPSByZXF1aXJlKFwiLi8uLi9kb3dubG9hZHMvY29kZXNcIik7XG5cbmNvbnN0IFJFR0VYUF9LRVlTID0gLyVbQS1aYS16MC05Xy1dKyUvZztcblxuLyoqXG4gKiBAbmFtZXNwYWNlIDxnbG9iYWw+XG4gKiBAbW9kdWxlIHV0aWwvdHJhbnNsYXRpb25cbiAqIEBwcm9wZXJ0eSB7dHJhbnNsYXRpb25FcnJvcnN9IGUgLSB7QGxpbmsgdHJhbnNsYXRpb25FcnJvcnN9XG4gKi9cbmxldCB0cmFuc2xhdGlvbiA9IHt9O1xuXG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBrZXkgLSB0cmFuc2xhdGlvbiBvYmplY3RcbiAqIEByZXR1cm5zIHsqfSBrZXkgZnJvbSB0cmFuc2xhdGlvbiBvYmplY3RcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9nZXRDb2RlIChrZXkpIHtcbiAga2V5ID0ga2V5IHx8IHt9O1xuICBsZXQgY29kZSA9IGtleS5jb2RlO1xuICBpZiAoIWNvZGUpIHtcbiAgICBjb2RlID0gQ09ERVMuR0VORVJBTFxuICB9XG4gIHJldHVybiBjb2RlO1xufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0ga2V5IC0gdHJhbnNsYXRpb24gb2JqZWN0XG4gKiBAcGFyYW0ge2FycmF5fG9iamVjdHxzdHJpbmd8bnVtYmVyfGJvb2xlYW59IHZhbHVlcyAtIHRyYW5zbGF0aW9uIHZhbHVlc1xuICogQHJldHVybnMgeyp9IGFsbCBrZXkgdmFsdWVzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfZ2V0S2V5VmFsdWVzIChrZXksIHZhbHVlcykge1xuICBsZXQgdHJhbnNsYXRpb24gPSBrZXk7XG4gIGxldCBrZXlWYWx1ZXMgPSBbXTtcbiAgaWYgKHR5cGVvZiB0cmFuc2xhdGlvbiA9PT0gXCJvYmplY3RcIikge1xuICAgIHRyYW5zbGF0aW9uID0gdHJhbnNsYXRpb24ubXNnO1xuICB9XG4gIGlmICh0cmFuc2xhdGlvbikge1xuICAgIGlmICh2YWx1ZXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgbGV0IGdyb3VwcyA9IF9nZXRVbmlxdWVLZXlzKHRyYW5zbGF0aW9uLm1hdGNoKFJFR0VYUF9LRVlTKSk7XG4gICAgICBmb3IgKGxldCBpID0gMCwgaiA9IE1hdGgubWluKGdyb3Vwcy5sZW5ndGgsIHZhbHVlcy5sZW5ndGgpOyBpIDwgajsgaSsrKSB7XG4gICAgICAgIGxldCBrZXlWYWx1ZSA9IHt9O1xuICAgICAgICBrZXlWYWx1ZVtncm91cHNbaV0ucmVwbGFjZSgvJS9nLCBcIlwiKV0gPSB2YWx1ZXNbaV07XG4gICAgICAgIGtleVZhbHVlcy5wdXNoKGtleVZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZXMgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIGZvciAobGV0IGtleSBpbiB2YWx1ZXMpIHtcbiAgICAgICAgaWYgKHZhbHVlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgbGV0IGtleVZhbHVlID0ge307XG4gICAgICAgICAga2V5VmFsdWVba2V5XSA9IHZhbHVlc1trZXldO1xuICAgICAgICAgIGtleVZhbHVlcy5wdXNoKGtleVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlcyA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdmFsdWVzID09PSBcIm51bWJlclwiIHx8IHR5cGVvZiB2YWx1ZXMgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICBjb25zdCBncm91cHMgPSB0cmFuc2xhdGlvbi5tYXRjaChSRUdFWFBfS0VZUykgfHwgW107XG4gICAgICBmb3IgKGxldCBpID0gMCwgaiA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgbGV0IGtleVZhbHVlID0ge307XG4gICAgICAgIGtleVZhbHVlW2dyb3Vwc1tpXS5yZXBsYWNlKC8lL2csIFwiXCIpXSA9IHZhbHVlcztcbiAgICAgICAga2V5VmFsdWVzLnB1c2goa2V5VmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoa2V5VmFsdWVzICYmICFrZXlWYWx1ZXMubGVuZ3RoKSB7XG4gICAga2V5VmFsdWVzID0gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiBrZXlWYWx1ZXM7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBrZXkgLSB0cmFuc2xhdGlvbiBvYmplY3RcbiAqIEBwYXJhbSB7YXJyYXl8b2JqZWN0fHN0cmluZ3xudW1iZXJ8Ym9vbGVhbn0gdmFsdWVzIC0gdHJhbnNsYXRpb24gdmFsdWVzXG4gKiBAcmV0dXJucyB7Kn0gdHJhbnNsYXRlZCBtZXNzYWdlIHdpdGggYXR0YWNoZWQgdmFsdWVzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfZ2V0VHJhbnNsYXRpb24gKGtleSwgdmFsdWVzKSB7XG4gIGxldCB0cmFuc2xhdGlvbiA9IGtleTtcbiAgaWYgKHR5cGVvZiB0cmFuc2xhdGlvbiA9PT0gXCJvYmplY3RcIikge1xuICAgIHRyYW5zbGF0aW9uID0gdHJhbnNsYXRpb24ubXNnO1xuICB9XG4gIGlmICh0cmFuc2xhdGlvbikge1xuICAgIHRyYW5zbGF0aW9uID0gX3BhcnNlVmFsdWVzKHRyYW5zbGF0aW9uLCB2YWx1ZXMpO1xuICB9IGVsc2Uge1xuICAgIHRyYW5zbGF0aW9uID0gXCJJbnRlcm5hbCBFcnJvclwiO1xuICB9XG4gIHJldHVybiB0cmFuc2xhdGlvbjtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHthcnJheX0gYXJncyAtIGFyZ3VtZW50c1xuICogQHJldHVybnMge2FycmF5fSBhcnJheSBvZiBhbGwgdmFsdWVzIGV4Y2VwdCAxc3Qgb25lXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfZ2V0VmFsdWVzIChhcmdzKSB7XG4gIGxldCB2YWx1ZXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDEsIGogPSBhcmdzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgIHZhbHVlcy5wdXNoKGFyZ3NbaV0pO1xuICB9XG4gIGlmICh2YWx1ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgdmFsdWVzID0gdW5kZWZpbmVkO1xuICB9IGVsc2UgaWYgKHZhbHVlcy5sZW5ndGggPT09IDEpIHtcbiAgICB2YWx1ZXMgPSB2YWx1ZXNbMF1cbiAgfVxuICByZXR1cm4gdmFsdWVzO1xufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0ge2FycmF5fSBncm91cHMgLSBtYXRjaGVkIGdyb3Vwc1xuICogQHJldHVybnMge2FycmF5fSB1bmlxdWUgbmFtZXNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9nZXRVbmlxdWVLZXlzIChncm91cHMpIHtcbiAgbGV0IGhhc2hLZXkgPSB7fTtcbiAgbGV0IHVuaXF1ZU5hbWVzID0gW107XG4gIGdyb3VwcyA9IGdyb3VwcyB8fCBbXTtcbiAgZm9yIChsZXQgaSA9IDAsIGogPSBncm91cHMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgaWYgKCFoYXNoS2V5W2dyb3Vwc1tpXV0pIHtcbiAgICAgIGhhc2hLZXlbZ3JvdXBzW2ldXSA9IHRydWU7XG4gICAgICB1bmlxdWVOYW1lcy5wdXNoKGdyb3Vwc1tpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmlxdWVOYW1lcztcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRyYW5zbGF0aW9uIC0gdGV4dCB0byBiZSB0cmFuc2xhdGVkXG4gKiBAcGFyYW0ge2FycmF5fG9iamVjdHxzdHJpbmd8bnVtYmVyfGJvb2xlYW59IHZhbHVlcyAtIHZhbHVlcyB0byBiZSBwYXJzZWQgd2l0aCB0cmFuc2xhdGlvblxuICogQHJldHVybnMgeyp9IHRyYW5zbGF0aW9uXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfcGFyc2VWYWx1ZXMgKHRyYW5zbGF0aW9uLCB2YWx1ZXMpIHtcbiAgdmFsdWVzID0gdmFsdWVzIHx8ICcnO1xuICBpZiAodmFsdWVzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICBjb25zdCBncm91cHMgPSBfZ2V0VW5pcXVlS2V5cyh0cmFuc2xhdGlvbi5tYXRjaChSRUdFWFBfS0VZUykpO1xuICAgIGZvciAobGV0IGkgPSAwLCBqID0gTWF0aC5taW4oZ3JvdXBzLmxlbmd0aCwgdmFsdWVzLmxlbmd0aCk7IGkgPCBqOyBpKyspIHtcbiAgICAgIHRyYW5zbGF0aW9uID0gdHJhbnNsYXRpb24ucmVwbGFjZShuZXcgUmVnRXhwKGdyb3Vwc1tpXSwgXCJnXCIpLCB2YWx1ZXNbaV0pO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWVzID09PSBcIm9iamVjdFwiKSB7XG4gICAgZm9yIChsZXQga2V5IGluIHZhbHVlcykge1xuICAgICAgaWYgKHZhbHVlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIHRyYW5zbGF0aW9uID0gdHJhbnNsYXRpb24ucmVwbGFjZShuZXcgUmVnRXhwKFwiJVwiICsga2V5ICsgXCIlXCIsIFwiZ1wiKSwgdmFsdWVzW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICB0cmFuc2xhdGlvbiA9IHRyYW5zbGF0aW9uLnJlcGxhY2UoUkVHRVhQX0tFWVMsIHZhbHVlcyk7XG5cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWVzID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiB2YWx1ZXMgPT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHZhbHVlcyA9PT0gXCJib29sZWFuXCIpIHtcbiAgICB0cmFuc2xhdGlvbiA9IHRyYW5zbGF0aW9uLnJlcGxhY2UoUkVHRVhQX0tFWVMsIHZhbHVlcyk7XG5cbiAgfVxuICByZXR1cm4gdHJhbnNsYXRpb247XG59XG5cbi8qKlxuICogQGFsaWFzIG1vZHVsZTp1dGlsL3RyYW5zbGF0aW9uLmdldEVycm9yXG4gKiBAcGFyYW0ge29iamVjdH0ga2V5IC0gdHJhbnNsYXRpb24gb2JqZWN0XG4gKiBAcmV0dXJucyB7e2NvZGU6ICosIG1zZzogKiwga2V5czogKn19IC0gZXJyb3Igb2JqZWN0IHdpdGggY29kZSwgbXNnIGFuZCBrZXlzXG4gKi9cbmZ1bmN0aW9uIGdldEVycm9yIChrZXkpIHtcbiAgY29uc3QgdmFsdWVzID0gX2dldFZhbHVlcyhhcmd1bWVudHMpO1xuICBjb25zdCBrZXlWYWx1ZXMgPSBfZ2V0S2V5VmFsdWVzKGtleSwgdmFsdWVzKTtcbiAgY29uc3QgbXNnID0gX2dldFRyYW5zbGF0aW9uKGtleSwgdmFsdWVzKTtcbiAgY29uc3QgY29kZSA9IF9nZXRDb2RlKGtleSk7XG4gIHJldHVybiB7XG4gICAgY29kZTogY29kZSxcbiAgICBtc2c6IG1zZyxcbiAgICBrZXlzOiBrZXlWYWx1ZXMsXG4gIH07XG59XG5cbi8qKlxuICogQGFsaWFzIG1vZHVsZTp1dGlsL3RyYW5zbGF0aW9uLmdldFRyYW5zbGF0aW9uXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge29iamVjdH0ga2V5IC0gdHJhbnNsYXRpb24gb2JqZWN0XG4gKiBAcmV0dXJucyB7Kn0gLSByZXR1cm4gdHJhbnNsYXRlZCBzdHJpbmcgd2l0aCBjb3JyZWN0bHkgYXBwbGllZCB2YWx1ZXNcbiAqL1xuZnVuY3Rpb24gZ2V0VHJhbnNsYXRpb24gKGtleSkge1xuICBjb25zdCB2YWx1ZXMgPSBfZ2V0VmFsdWVzKGFyZ3VtZW50cyk7XG4gIHJldHVybiBfZ2V0VHJhbnNsYXRpb24oa2V5LCB2YWx1ZXMpO1xufVxuXG50cmFuc2xhdGlvbi5nZXRFcnJvciA9IGdldEVycm9yO1xudHJhbnNsYXRpb24uZ2V0VHJhbnNsYXRpb24gPSBnZXRUcmFuc2xhdGlvbjtcbnRyYW5zbGF0aW9uLmUgPSBlcnJvcnM7XG50cmFuc2xhdGlvbi50ID0gdHJhbnNsYXRpb25zO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRyYW5zbGF0aW9uO1xuIl0sIm5hbWVzIjpbIl90eXBlb2YiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsImVycm9ycyIsInJlcXVpcmUiLCJ0cmFuc2xhdGlvbnMiLCJDT0RFUyIsIlJFR0VYUF9LRVlTIiwidHJhbnNsYXRpb24iLCJfZ2V0Q29kZSIsImtleSIsImNvZGUiLCJHRU5FUkFMIiwiX2dldEtleVZhbHVlcyIsInZhbHVlcyIsImtleVZhbHVlcyIsIm1zZyIsIkFycmF5IiwiZ3JvdXBzIiwiX2dldFVuaXF1ZUtleXMiLCJtYXRjaCIsImkiLCJqIiwiTWF0aCIsIm1pbiIsImxlbmd0aCIsImtleVZhbHVlIiwicmVwbGFjZSIsInB1c2giLCJoYXNPd25Qcm9wZXJ0eSIsInVuZGVmaW5lZCIsIl9nZXRUcmFuc2xhdGlvbiIsIl9wYXJzZVZhbHVlcyIsIl9nZXRWYWx1ZXMiLCJhcmdzIiwiaGFzaEtleSIsInVuaXF1ZU5hbWVzIiwiUmVnRXhwIiwiZ2V0RXJyb3IiLCJhcmd1bWVudHMiLCJrZXlzIiwiZ2V0VHJhbnNsYXRpb24iLCJlIiwidCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5847\n')},453:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nvar moment = __webpack_require__(1908);\nvar IsoDurationParser = function () {\n  function IsoDurationParser() {}\n  IsoDurationParser.getDuration = function (val) {\n    var dur = moment.duration(val);\n    return dur.asMilliseconds();\n  };\n  IsoDurationParser.getDurationAsS = function (val) {\n    var dur = moment.duration(val);\n    return dur.asSeconds();\n  };\n  IsoDurationParser.getMoment = function () {\n    return moment;\n  };\n  return IsoDurationParser;\n}();\nexports.IsoDurationParser = IsoDurationParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDUzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiLElBQU1BLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQyxJQUFlLENBQUM7QUFDdkMsSUFBTUMsaUJBQWlCLEdBQUksWUFBWTtFQUNyQyxTQUFTQSxpQkFBaUJBLENBQUEsRUFBSSxDQUM5QjtFQUVBQSxpQkFBaUIsQ0FBQ0MsV0FBVyxHQUFHLFVBQVVDLEdBQUcsRUFBRTtJQUM3QyxJQUFNQyxHQUFHLEdBQUdMLE1BQU0sQ0FBQ00sUUFBUSxDQUFDRixHQUFHLENBQUM7SUFDaEMsT0FBT0MsR0FBRyxDQUFDRSxjQUFjLENBQUMsQ0FBQztFQUM3QixDQUFDO0VBQ0RMLGlCQUFpQixDQUFDTSxjQUFjLEdBQUcsVUFBVUosR0FBRyxFQUFFO0lBQ2hELElBQU1DLEdBQUcsR0FBR0wsTUFBTSxDQUFDTSxRQUFRLENBQUNGLEdBQUcsQ0FBQztJQUNoQyxPQUFPQyxHQUFHLENBQUNJLFNBQVMsQ0FBQyxDQUFDO0VBQ3hCLENBQUM7RUFDRFAsaUJBQWlCLENBQUNRLFNBQVMsR0FBRyxZQUFZO0lBQ3hDLE9BQU9WLE1BQU07RUFDZixDQUFDO0VBQ0QsT0FBT0UsaUJBQWlCO0FBQzFCLENBQUMsQ0FBQyxDQUFFO0FBQ0pTLHlCQUF5QixHQUFHVCxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3V0aWwvSXNvLWR1cmF0aW9uLXBhcnNlci5qcz9jYzgwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgbW9tZW50ID0gcmVxdWlyZShcIm1vbWVudC9tb21lbnRcIik7XG5jb25zdCBJc29EdXJhdGlvblBhcnNlciA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIElzb0R1cmF0aW9uUGFyc2VyICgpIHtcbiAgfVxuXG4gIElzb0R1cmF0aW9uUGFyc2VyLmdldER1cmF0aW9uID0gZnVuY3Rpb24gKHZhbCkge1xuICAgIGNvbnN0IGR1ciA9IG1vbWVudC5kdXJhdGlvbih2YWwpO1xuICAgIHJldHVybiBkdXIuYXNNaWxsaXNlY29uZHMoKTtcbiAgfTtcbiAgSXNvRHVyYXRpb25QYXJzZXIuZ2V0RHVyYXRpb25Bc1MgPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgY29uc3QgZHVyID0gbW9tZW50LmR1cmF0aW9uKHZhbCk7XG4gICAgcmV0dXJuIGR1ci5hc1NlY29uZHMoKTtcbiAgfTtcbiAgSXNvRHVyYXRpb25QYXJzZXIuZ2V0TW9tZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtb21lbnQ7XG4gIH07XG4gIHJldHVybiBJc29EdXJhdGlvblBhcnNlcjtcbn0oKSk7XG5leHBvcnRzLklzb0R1cmF0aW9uUGFyc2VyID0gSXNvRHVyYXRpb25QYXJzZXI7XG4iXSwibmFtZXMiOlsibW9tZW50IiwicmVxdWlyZSIsIklzb0R1cmF0aW9uUGFyc2VyIiwiZ2V0RHVyYXRpb24iLCJ2YWwiLCJkdXIiLCJkdXJhdGlvbiIsImFzTWlsbGlzZWNvbmRzIiwiZ2V0RHVyYXRpb25Bc1MiLCJhc1NlY29uZHMiLCJnZXRNb21lbnQiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///453\n")},4692:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar ArrayStorage = __webpack_require__(1730);\nvar createBridgeMethods = __webpack_require__(9273);\n\n/**\n * @param {DownloadsStorageController} parent - reference to parent object\n * @param {string} storageKey - storage key\n * @constructor\n */\nfunction ArrayStorageBridge(parent, storageKey) {\n  this._parent = parent;\n  this._storageKey = storageKey;\n  createBridgeMethods(this, ArrayStorage);\n}\nmodule.exports = ArrayStorageBridge;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDY5Mi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMsSUFBaUIsQ0FBQztBQUMvQyxJQUFNQyxtQkFBbUIsR0FBR0QsbUJBQU8sQ0FBQyxJQUF5QixDQUFDOztBQUU5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0Usa0JBQWtCQSxDQUFFQyxNQUFNLEVBQUVDLFVBQVUsRUFBRTtFQUMvQyxJQUFJLENBQUNDLE9BQU8sR0FBR0YsTUFBTTtFQUNyQixJQUFJLENBQUNHLFdBQVcsR0FBR0YsVUFBVTtFQUM3QkgsbUJBQW1CLENBQUMsSUFBSSxFQUFFRixZQUFZLENBQUM7QUFDekM7QUFFQVEsTUFBTSxDQUFDQyxPQUFPLEdBQUdOLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvdXRpbC9hcnJheS1zdG9yYWdlLWJyaWRnZS5qcz9jNzE2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgQXJyYXlTdG9yYWdlID0gcmVxdWlyZShcIi4vYXJyYXktc3RvcmFnZVwiKTtcbmNvbnN0IGNyZWF0ZUJyaWRnZU1ldGhvZHMgPSByZXF1aXJlKFwiLi9jcmVhdGUtYnJpZGdlLW1ldGhvZHNcIik7XG5cbi8qKlxuICogQHBhcmFtIHtEb3dubG9hZHNTdG9yYWdlQ29udHJvbGxlcn0gcGFyZW50IC0gcmVmZXJlbmNlIHRvIHBhcmVudCBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdG9yYWdlS2V5IC0gc3RvcmFnZSBrZXlcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBBcnJheVN0b3JhZ2VCcmlkZ2UgKHBhcmVudCwgc3RvcmFnZUtleSkge1xuICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuX3N0b3JhZ2VLZXkgPSBzdG9yYWdlS2V5O1xuICBjcmVhdGVCcmlkZ2VNZXRob2RzKHRoaXMsIEFycmF5U3RvcmFnZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXlTdG9yYWdlQnJpZGdlOyJdLCJuYW1lcyI6WyJBcnJheVN0b3JhZ2UiLCJyZXF1aXJlIiwiY3JlYXRlQnJpZGdlTWV0aG9kcyIsIkFycmF5U3RvcmFnZUJyaWRnZSIsInBhcmVudCIsInN0b3JhZ2VLZXkiLCJfcGFyZW50IiwiX3N0b3JhZ2VLZXkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4692\n")},1730:module=>{"use strict";eval("\n\n/**\n * @constructor\n */\nfunction ArrayStorage() {\n  this._items = [];\n}\n\n/**\n * @returns {void}\n */\nArrayStorage.prototype.clear = function () {\n  this._items = [];\n};\n\n/**\n *\n * @param {array} items - array items\n * @returns {void}\n */\nArrayStorage.prototype.concat = function (items) {\n  this._items = this._items.concat(items);\n};\n\n/**\n *\n * @returns {number} - number of items\n */\nArrayStorage.prototype.count = function () {\n  return this._items.length;\n};\n\n/**\n *\n * @returns {array} - items\n */\nArrayStorage.prototype.getItems = function () {\n  return this._items;\n};\n\n/**\n *\n * @param {object} item - new item\n * @returns {void}\n */\nArrayStorage.prototype.push = function (item) {\n  this._items.push(item);\n};\n\n/**\n * removes first element and returns it\n * @returns {*} - item\n */\nArrayStorage.prototype.shift = function () {\n  return this._items.shift();\n};\n\n/**\n * add elements to the beginning of array\n * @returns {*} - new length of an array\n */\nArrayStorage.prototype.unshift = function () {\n  return this._items.unshift.apply(this, arguments);\n};\nmodule.exports = ArrayStorage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTczMC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQSxTQUFTQSxZQUFZQSxDQUFBLEVBQUk7RUFDdkIsSUFBSSxDQUFDQyxNQUFNLEdBQUcsRUFBRTtBQUNsQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQUQsWUFBWSxDQUFDRSxTQUFTLENBQUNDLEtBQUssR0FBRyxZQUFZO0VBQ3pDLElBQUksQ0FBQ0YsTUFBTSxHQUFHLEVBQUU7QUFDbEIsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FELFlBQVksQ0FBQ0UsU0FBUyxDQUFDRSxNQUFNLEdBQUcsVUFBVUMsS0FBSyxFQUFFO0VBQy9DLElBQUksQ0FBQ0osTUFBTSxHQUFHLElBQUksQ0FBQ0EsTUFBTSxDQUFDRyxNQUFNLENBQUNDLEtBQUssQ0FBQztBQUN6QyxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0FMLFlBQVksQ0FBQ0UsU0FBUyxDQUFDSSxLQUFLLEdBQUcsWUFBWTtFQUN6QyxPQUFPLElBQUksQ0FBQ0wsTUFBTSxDQUFDTSxNQUFNO0FBQzNCLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQVAsWUFBWSxDQUFDRSxTQUFTLENBQUNNLFFBQVEsR0FBRyxZQUFZO0VBQzVDLE9BQU8sSUFBSSxDQUFDUCxNQUFNO0FBQ3BCLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBRCxZQUFZLENBQUNFLFNBQVMsQ0FBQ08sSUFBSSxHQUFHLFVBQVVDLElBQUksRUFBRTtFQUM1QyxJQUFJLENBQUNULE1BQU0sQ0FBQ1EsSUFBSSxDQUFDQyxJQUFJLENBQUM7QUFDeEIsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBVixZQUFZLENBQUNFLFNBQVMsQ0FBQ1MsS0FBSyxHQUFHLFlBQVk7RUFDekMsT0FBTyxJQUFJLENBQUNWLE1BQU0sQ0FBQ1UsS0FBSyxDQUFDLENBQUM7QUFDNUIsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBWCxZQUFZLENBQUNFLFNBQVMsQ0FBQ1UsT0FBTyxHQUFHLFlBQVk7RUFDM0MsT0FBTyxJQUFJLENBQUNYLE1BQU0sQ0FBQ1csT0FBTyxDQUFDQyxLQUFLLENBQUMsSUFBSSxFQUFFQyxTQUFTLENBQUM7QUFDbkQsQ0FBQztBQUVEQyxNQUFNLENBQUNDLE9BQU8sR0FBR2hCLFlBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3V0aWwvYXJyYXktc3RvcmFnZS5qcz83NThiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBBcnJheVN0b3JhZ2UgKCkge1xuICB0aGlzLl9pdGVtcyA9IFtdO1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5BcnJheVN0b3JhZ2UucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9pdGVtcyA9IFtdO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHthcnJheX0gaXRlbXMgLSBhcnJheSBpdGVtc1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbkFycmF5U3RvcmFnZS5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gKGl0ZW1zKSB7XG4gIHRoaXMuX2l0ZW1zID0gdGhpcy5faXRlbXMuY29uY2F0KGl0ZW1zKTtcbn07XG5cbi8qKlxuICpcbiAqIEByZXR1cm5zIHtudW1iZXJ9IC0gbnVtYmVyIG9mIGl0ZW1zXG4gKi9cbkFycmF5U3RvcmFnZS5wcm90b3R5cGUuY291bnQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9pdGVtcy5sZW5ndGg7XG59O1xuXG4vKipcbiAqXG4gKiBAcmV0dXJucyB7YXJyYXl9IC0gaXRlbXNcbiAqL1xuQXJyYXlTdG9yYWdlLnByb3RvdHlwZS5nZXRJdGVtcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2l0ZW1zO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGl0ZW0gLSBuZXcgaXRlbVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbkFycmF5U3RvcmFnZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHRoaXMuX2l0ZW1zLnB1c2goaXRlbSk7XG59O1xuXG4vKipcbiAqIHJlbW92ZXMgZmlyc3QgZWxlbWVudCBhbmQgcmV0dXJucyBpdFxuICogQHJldHVybnMgeyp9IC0gaXRlbVxuICovXG5BcnJheVN0b3JhZ2UucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5faXRlbXMuc2hpZnQoKTtcbn07XG5cbi8qKlxuICogYWRkIGVsZW1lbnRzIHRvIHRoZSBiZWdpbm5pbmcgb2YgYXJyYXlcbiAqIEByZXR1cm5zIHsqfSAtIG5ldyBsZW5ndGggb2YgYW4gYXJyYXlcbiAqL1xuQXJyYXlTdG9yYWdlLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5faXRlbXMudW5zaGlmdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheVN0b3JhZ2U7Il0sIm5hbWVzIjpbIkFycmF5U3RvcmFnZSIsIl9pdGVtcyIsInByb3RvdHlwZSIsImNsZWFyIiwiY29uY2F0IiwiaXRlbXMiLCJjb3VudCIsImxlbmd0aCIsImdldEl0ZW1zIiwicHVzaCIsIml0ZW0iLCJzaGlmdCIsInVuc2hpZnQiLCJhcHBseSIsImFyZ3VtZW50cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1730\n")},1958:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar fs = __webpack_require__(7147);\nvar path = __webpack_require__(1017);\nvar appSettings = __webpack_require__(8557);\n\n/**\n *\n * @param {string} manifestId - manifest Id\n * @param {string} downloadFolder - donwload folder\n * @returns {Promise} promise\n */\nmodule.exports = function (manifestId, downloadFolder) {\n  var settingsPath = path.resolve(appSettings.getSettings().settingsFolder + "/" + manifestId + "/");\n  var moviePath = path.resolve(appSettings.getSettings().downloadsFolderPath + "/" + manifestId + "/");\n  if (downloadFolder) {\n    moviePath = path.resolve(downloadFolder + "/" + manifestId + "/");\n  }\n  function dirNotExists(dirToCheck) {\n    return new Promise(function (resolve /* , reject */) {\n      fs.stat(dirToCheck, function (er, stat) {\n        if (er) {\n          resolve();\n        } else {\n          if (stat.isDirectory()) {\n            resolve(\'Folder already exists\');\n          } else {\n            resolve();\n          }\n        }\n      });\n    });\n  }\n  return new Promise(function (resolve, reject) {\n    Promise.all([dirNotExists(settingsPath), dirNotExists(moviePath)]).then(function (results) {\n      results = results || [];\n      var errors = results.filter(function (result) {\n        return typeof result !== \'undefined\';\n      });\n      if (errors.length) {\n        reject(results);\n      } else {\n        resolve();\n      }\n    }, reject);\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk1OC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxFQUFFLEdBQUdDLG1CQUFPLENBQUMsSUFBSSxDQUFDO0FBQ3hCLElBQU1DLElBQUksR0FBR0QsbUJBQU8sQ0FBQyxJQUFNLENBQUM7QUFDNUIsSUFBTUUsV0FBVyxHQUFHRixtQkFBTyxDQUFDLElBQWlCLENBQUM7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBRyxNQUFNLENBQUNDLE9BQU8sR0FBRyxVQUFVQyxVQUFVLEVBQUVDLGNBQWMsRUFBRTtFQUNyRCxJQUFNQyxZQUFZLEdBQUdOLElBQUksQ0FBQ08sT0FBTyxDQUFDTixXQUFXLENBQUNPLFdBQVcsQ0FBQyxDQUFDLENBQUNDLGNBQWMsR0FBRyxHQUFHLEdBQUdMLFVBQVUsR0FBRyxHQUFHLENBQUM7RUFFcEcsSUFBSU0sU0FBUyxHQUFHVixJQUFJLENBQUNPLE9BQU8sQ0FBQ04sV0FBVyxDQUFDTyxXQUFXLENBQUMsQ0FBQyxDQUFDRyxtQkFBbUIsR0FBRyxHQUFHLEdBQUdQLFVBQVUsR0FBRyxHQUFHLENBQUM7RUFDcEcsSUFBSUMsY0FBYyxFQUFFO0lBQ2xCSyxTQUFTLEdBQUdWLElBQUksQ0FBQ08sT0FBTyxDQUFDRixjQUFjLEdBQUcsR0FBRyxHQUFHRCxVQUFVLEdBQUcsR0FBRyxDQUFDO0VBQ25FO0VBRUEsU0FBU1EsWUFBWUEsQ0FBRUMsVUFBVSxFQUFFO0lBQ2pDLE9BQU8sSUFBSUMsT0FBTyxDQUFDLFVBQVVQLE9BQU8sQ0FBQyxnQkFBZ0I7TUFDbkRULEVBQUUsQ0FBQ2lCLElBQUksQ0FBQ0YsVUFBVSxFQUFFLFVBQVVHLEVBQUUsRUFBRUQsSUFBSSxFQUFFO1FBQ3RDLElBQUlDLEVBQUUsRUFBRTtVQUNOVCxPQUFPLENBQUMsQ0FBQztRQUNYLENBQUMsTUFBTTtVQUNMLElBQUlRLElBQUksQ0FBQ0UsV0FBVyxDQUFDLENBQUMsRUFBRTtZQUN0QlYsT0FBTyxDQUFDLHVCQUF1QixDQUFDO1VBQ2xDLENBQUMsTUFBTTtZQUNMQSxPQUFPLENBQUMsQ0FBQztVQUNYO1FBQ0Y7TUFDRixDQUFDLENBQUM7SUFDSixDQUFDLENBQUM7RUFDSjtFQUVBLE9BQU8sSUFBSU8sT0FBTyxDQUFDLFVBQVVQLE9BQU8sRUFBRVcsTUFBTSxFQUFFO0lBQzVDSixPQUFPLENBQUNLLEdBQUcsQ0FBQyxDQUNWUCxZQUFZLENBQUNOLFlBQVksQ0FBQyxFQUMxQk0sWUFBWSxDQUFDRixTQUFTLENBQUMsQ0FDeEIsQ0FBQyxDQUFDVSxJQUFJLENBQUMsVUFBVUMsT0FBTyxFQUFFO01BQ3pCQSxPQUFPLEdBQUdBLE9BQU8sSUFBSSxFQUFFO01BQ3ZCLElBQU1DLE1BQU0sR0FBR0QsT0FBTyxDQUFDRSxNQUFNLENBQUMsVUFBVUMsTUFBTSxFQUFFO1FBQzlDLE9BQU8sT0FBT0EsTUFBTSxLQUFLLFdBQVc7TUFDdEMsQ0FBQyxDQUFDO01BQ0YsSUFBSUYsTUFBTSxDQUFDRyxNQUFNLEVBQUU7UUFDakJQLE1BQU0sQ0FBQ0csT0FBTyxDQUFDO01BQ2pCLENBQUMsTUFBTTtRQUNMZCxPQUFPLENBQUMsQ0FBQztNQUNYO0lBQ0YsQ0FBQyxFQUFFVyxNQUFNLENBQUM7RUFDWixDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS91dGlsL2Nhbi1jcmVhdGUtbWFuaWZlc3QuanM/Yjc2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuY29uc3QgYXBwU2V0dGluZ3MgPSByZXF1aXJlKFwiLi4vYXBwLXNldHRpbmdzXCIpO1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFuaWZlc3RJZCAtIG1hbmlmZXN0IElkXG4gKiBAcGFyYW0ge3N0cmluZ30gZG93bmxvYWRGb2xkZXIgLSBkb253bG9hZCBmb2xkZXJcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBwcm9taXNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1hbmlmZXN0SWQsIGRvd25sb2FkRm9sZGVyKSB7XG4gIGNvbnN0IHNldHRpbmdzUGF0aCA9IHBhdGgucmVzb2x2ZShhcHBTZXR0aW5ncy5nZXRTZXR0aW5ncygpLnNldHRpbmdzRm9sZGVyICsgXCIvXCIgKyBtYW5pZmVzdElkICsgXCIvXCIpO1xuXG4gIGxldCBtb3ZpZVBhdGggPSBwYXRoLnJlc29sdmUoYXBwU2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5kb3dubG9hZHNGb2xkZXJQYXRoICsgXCIvXCIgKyBtYW5pZmVzdElkICsgXCIvXCIpO1xuICBpZiAoZG93bmxvYWRGb2xkZXIpIHtcbiAgICBtb3ZpZVBhdGggPSBwYXRoLnJlc29sdmUoZG93bmxvYWRGb2xkZXIgKyBcIi9cIiArIG1hbmlmZXN0SWQgKyBcIi9cIik7XG4gIH1cblxuICBmdW5jdGlvbiBkaXJOb3RFeGlzdHMgKGRpclRvQ2hlY2spIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUgLyogLCByZWplY3QgKi8pIHtcbiAgICAgIGZzLnN0YXQoZGlyVG9DaGVjaywgZnVuY3Rpb24gKGVyLCBzdGF0KSB7XG4gICAgICAgIGlmIChlcikge1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoc3RhdC5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgICAgICByZXNvbHZlKCdGb2xkZXIgYWxyZWFkeSBleGlzdHMnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIFByb21pc2UuYWxsKFtcbiAgICAgIGRpck5vdEV4aXN0cyhzZXR0aW5nc1BhdGgpLFxuICAgICAgZGlyTm90RXhpc3RzKG1vdmllUGF0aClcbiAgICBdKS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7XG4gICAgICByZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcbiAgICAgIGNvbnN0IGVycm9ycyA9IHJlc3VsdHMuZmlsdGVyKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiByZXN1bHQgIT09ICd1bmRlZmluZWQnO1xuICAgICAgfSk7XG4gICAgICBpZiAoZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICByZWplY3QocmVzdWx0cyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9XG4gICAgfSwgcmVqZWN0KTtcbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsInBhdGgiLCJhcHBTZXR0aW5ncyIsIm1vZHVsZSIsImV4cG9ydHMiLCJtYW5pZmVzdElkIiwiZG93bmxvYWRGb2xkZXIiLCJzZXR0aW5nc1BhdGgiLCJyZXNvbHZlIiwiZ2V0U2V0dGluZ3MiLCJzZXR0aW5nc0ZvbGRlciIsIm1vdmllUGF0aCIsImRvd25sb2Fkc0ZvbGRlclBhdGgiLCJkaXJOb3RFeGlzdHMiLCJkaXJUb0NoZWNrIiwiUHJvbWlzZSIsInN0YXQiLCJlciIsImlzRGlyZWN0b3J5IiwicmVqZWN0IiwiYWxsIiwidGhlbiIsInJlc3VsdHMiLCJlcnJvcnMiLCJmaWx0ZXIiLCJyZXN1bHQiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1958\n')},9273:module=>{"use strict";eval('\n\n/**\n * the idea is to copy the methods from storage so that they can be triggered from parent object and then propagated back\n * to the storage object.\n * for example:\n *    someController.storage.status.setItem(manifestId, someKey, someValue);\n *    someController.storage.downloads.setItem(manifestId, someKey, someValue);\n * @param {object} scope - parent object where the method "From" object will be bridged to\n * @param {object} From - object where the original method was declared\n * @returns {void}\n */\nfunction createBridgeMethods(scope, From) {\n  function action() {\n    var args = [],\n      i,\n      j;\n    for (i = 0, j = arguments.length; i < j; i++) {\n      args.push(arguments[i]);\n    }\n    args.unshift(this._storageKey);\n    return this._parent._itemAction.apply(this._parent, args);\n  }\n  for (var methodName in From.prototype) {\n    if (From.prototype.hasOwnProperty(methodName)) {\n      scope[methodName] = action.bind(scope, methodName);\n    }\n  }\n}\nmodule.exports = createBridgeMethods;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTI3My5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNBLG1CQUFtQkEsQ0FBRUMsS0FBSyxFQUFFQyxJQUFJLEVBQUU7RUFDekMsU0FBU0MsTUFBTUEsQ0FBQSxFQUFJO0lBQ2pCLElBQUlDLElBQUksR0FBRyxFQUFFO01BQUVDLENBQUM7TUFBRUMsQ0FBQztJQUNuQixLQUFLRCxDQUFDLEdBQUcsQ0FBQyxFQUFFQyxDQUFDLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBTSxFQUFFSCxDQUFDLEdBQUdDLENBQUMsRUFBRUQsQ0FBQyxFQUFFLEVBQUU7TUFDNUNELElBQUksQ0FBQ0ssSUFBSSxDQUFDRixTQUFTLENBQUNGLENBQUMsQ0FBQyxDQUFDO0lBQ3pCO0lBQ0FELElBQUksQ0FBQ00sT0FBTyxDQUFDLElBQUksQ0FBQ0MsV0FBVyxDQUFDO0lBQzlCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLFdBQVcsQ0FBQ0MsS0FBSyxDQUFDLElBQUksQ0FBQ0YsT0FBTyxFQUFFUixJQUFJLENBQUM7RUFDM0Q7RUFFQSxLQUFLLElBQUlXLFVBQVUsSUFBSWIsSUFBSSxDQUFDYyxTQUFTLEVBQUU7SUFDckMsSUFBSWQsSUFBSSxDQUFDYyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0YsVUFBVSxDQUFDLEVBQUU7TUFDN0NkLEtBQUssQ0FBQ2MsVUFBVSxDQUFDLEdBQUdaLE1BQU0sQ0FBQ2UsSUFBSSxDQUFDakIsS0FBSyxFQUFFYyxVQUFVLENBQUM7SUFDcEQ7RUFDRjtBQUNGO0FBRUFJLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHcEIsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS91dGlsL2NyZWF0ZS1icmlkZ2UtbWV0aG9kcy5qcz85NzA5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIHRoZSBpZGVhIGlzIHRvIGNvcHkgdGhlIG1ldGhvZHMgZnJvbSBzdG9yYWdlIHNvIHRoYXQgdGhleSBjYW4gYmUgdHJpZ2dlcmVkIGZyb20gcGFyZW50IG9iamVjdCBhbmQgdGhlbiBwcm9wYWdhdGVkIGJhY2tcbiAqIHRvIHRoZSBzdG9yYWdlIG9iamVjdC5cbiAqIGZvciBleGFtcGxlOlxuICogICAgc29tZUNvbnRyb2xsZXIuc3RvcmFnZS5zdGF0dXMuc2V0SXRlbShtYW5pZmVzdElkLCBzb21lS2V5LCBzb21lVmFsdWUpO1xuICogICAgc29tZUNvbnRyb2xsZXIuc3RvcmFnZS5kb3dubG9hZHMuc2V0SXRlbShtYW5pZmVzdElkLCBzb21lS2V5LCBzb21lVmFsdWUpO1xuICogQHBhcmFtIHtvYmplY3R9IHNjb3BlIC0gcGFyZW50IG9iamVjdCB3aGVyZSB0aGUgbWV0aG9kIFwiRnJvbVwiIG9iamVjdCB3aWxsIGJlIGJyaWRnZWQgdG9cbiAqIEBwYXJhbSB7b2JqZWN0fSBGcm9tIC0gb2JqZWN0IHdoZXJlIHRoZSBvcmlnaW5hbCBtZXRob2Qgd2FzIGRlY2xhcmVkXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnJpZGdlTWV0aG9kcyAoc2NvcGUsIEZyb20pIHtcbiAgZnVuY3Rpb24gYWN0aW9uICgpIHtcbiAgICBsZXQgYXJncyA9IFtdLCBpLCBqO1xuICAgIGZvciAoaSA9IDAsIGogPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG4gICAgYXJncy51bnNoaWZ0KHRoaXMuX3N0b3JhZ2VLZXkpO1xuICAgIHJldHVybiB0aGlzLl9wYXJlbnQuX2l0ZW1BY3Rpb24uYXBwbHkodGhpcy5fcGFyZW50LCBhcmdzKTtcbiAgfVxuXG4gIGZvciAobGV0IG1ldGhvZE5hbWUgaW4gRnJvbS5wcm90b3R5cGUpIHtcbiAgICBpZiAoRnJvbS5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkobWV0aG9kTmFtZSkpIHtcbiAgICAgIHNjb3BlW21ldGhvZE5hbWVdID0gYWN0aW9uLmJpbmQoc2NvcGUsIG1ldGhvZE5hbWUpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUJyaWRnZU1ldGhvZHM7Il0sIm5hbWVzIjpbImNyZWF0ZUJyaWRnZU1ldGhvZHMiLCJzY29wZSIsIkZyb20iLCJhY3Rpb24iLCJhcmdzIiwiaSIsImoiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwdXNoIiwidW5zaGlmdCIsIl9zdG9yYWdlS2V5IiwiX3BhcmVudCIsIl9pdGVtQWN0aW9uIiwiYXBwbHkiLCJtZXRob2ROYW1lIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJiaW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9273\n')},7182:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar fs = __webpack_require__(7147);\nvar path = __webpack_require__(1017);\n/**\n * @param {string} dir - folder path\n * @param {string} itemName - folder or file name\n * @param {boolean} includeFolders - if folders should be included\n * @param {boolean} includeFiles - if files should be included\n * @returns {Promise} promise\n */\nfunction filterDirItem(dir, itemName, includeFolders, includeFiles) {\n  var folderPath = path.resolve(dir + "/" + itemName);\n  return new Promise(function (resolve, reject) {\n    fs.stat(folderPath, function (err, stat) {\n      if (err) {\n        reject(err);\n        return;\n      }\n      if (stat.isDirectory()) {\n        if (!includeFolders) {\n          itemName = undefined;\n        }\n        resolve(itemName);\n      } else {\n        if (!includeFiles) {\n          itemName = undefined;\n        }\n        resolve(itemName);\n      }\n    });\n  });\n}\n\n/**\n * @param {string} dir - folder path\n * @param {boolean} includeFolders - if folders should be included\n * @param {boolean} includeFiles - if files should be included\n * @returns {Promise} promise\n */\nfunction dirList(dir, includeFolders, includeFiles) {\n  if (typeof includeFolders === "undefined") {\n    includeFolders = true;\n  }\n  if (typeof includeFiles === "undefined") {\n    includeFiles = true;\n  }\n  return new Promise(function (resolve, reject) {\n    fs.readdir(dir, function (err, folders) {\n      if (err) {\n        //not found return empty list, there was another error ENOTDIR but it seems like this is not a valid case anyway\n        if (err.code === "ENOENT" || err.code === "ENOTDIR") {\n          resolve([]);\n        } else {\n          reject(err.message);\n        }\n      } else {\n        var foldersPromises = [];\n        for (var i = 0, j = folders.length; i < j; i++) {\n          foldersPromises.push(filterDirItem(dir, folders[i], includeFolders, includeFiles));\n        }\n        Promise.all(foldersPromises).then(function (results) {\n          resolve(results.filter(function (folderName) {\n            return typeof folderName !== "undefined";\n          }));\n        }, function (promiseError) {\n          reject(promiseError);\n        });\n      }\n    });\n  });\n}\nmodule.exports = dirList;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzE4Mi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxFQUFFLEdBQUdDLG1CQUFPLENBQUMsSUFBSSxDQUFDO0FBQ3hCLElBQU1DLElBQUksR0FBR0QsbUJBQU8sQ0FBQyxJQUFNLENBQUM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSxhQUFhQSxDQUFFQyxHQUFHLEVBQUVDLFFBQVEsRUFBRUMsY0FBYyxFQUFFQyxZQUFZLEVBQUU7RUFDbkUsSUFBTUMsVUFBVSxHQUFHTixJQUFJLENBQUNPLE9BQU8sQ0FBQ0wsR0FBRyxHQUFHLEdBQUcsR0FBR0MsUUFBUSxDQUFDO0VBQ3JELE9BQU8sSUFBSUssT0FBTyxDQUFDLFVBQVVELE9BQU8sRUFBRUUsTUFBTSxFQUFFO0lBQzVDWCxFQUFFLENBQUNZLElBQUksQ0FBQ0osVUFBVSxFQUFFLFVBQVVLLEdBQUcsRUFBRUQsSUFBSSxFQUFFO01BQ3ZDLElBQUlDLEdBQUcsRUFBRTtRQUNQRixNQUFNLENBQUNFLEdBQUcsQ0FBQztRQUNYO01BQ0Y7TUFDQSxJQUFJRCxJQUFJLENBQUNFLFdBQVcsQ0FBQyxDQUFDLEVBQUU7UUFDdEIsSUFBSSxDQUFDUixjQUFjLEVBQUU7VUFDbkJELFFBQVEsR0FBR1UsU0FBUztRQUN0QjtRQUNBTixPQUFPLENBQUNKLFFBQVEsQ0FBQztNQUNuQixDQUFDLE1BQU07UUFDTCxJQUFJLENBQUNFLFlBQVksRUFBRTtVQUNqQkYsUUFBUSxHQUFHVSxTQUFTO1FBQ3RCO1FBQ0FOLE9BQU8sQ0FBQ0osUUFBUSxDQUFDO01BQ25CO0lBQ0YsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU1csT0FBT0EsQ0FBRVosR0FBRyxFQUFFRSxjQUFjLEVBQUVDLFlBQVksRUFBRTtFQUNuRCxJQUFJLE9BQU9ELGNBQWMsS0FBSyxXQUFXLEVBQUU7SUFDekNBLGNBQWMsR0FBRyxJQUFJO0VBQ3ZCO0VBQ0EsSUFBSSxPQUFPQyxZQUFZLEtBQUssV0FBVyxFQUFFO0lBQ3ZDQSxZQUFZLEdBQUcsSUFBSTtFQUNyQjtFQUNBLE9BQU8sSUFBSUcsT0FBTyxDQUFDLFVBQVVELE9BQU8sRUFBRUUsTUFBTSxFQUFFO0lBQzVDWCxFQUFFLENBQUNpQixPQUFPLENBQUNiLEdBQUcsRUFBRSxVQUFVUyxHQUFHLEVBQUVLLE9BQU8sRUFBRTtNQUN0QyxJQUFJTCxHQUFHLEVBQUU7UUFDUDtRQUNBLElBQUlBLEdBQUcsQ0FBQ00sSUFBSSxLQUFLLFFBQVEsSUFBSU4sR0FBRyxDQUFDTSxJQUFJLEtBQUssU0FBUyxFQUFFO1VBQ25EVixPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ2IsQ0FBQyxNQUFNO1VBQ0xFLE1BQU0sQ0FBQ0UsR0FBRyxDQUFDTyxPQUFPLENBQUM7UUFDckI7TUFDRixDQUFDLE1BQU07UUFDTCxJQUFJQyxlQUFlLEdBQUcsRUFBRTtRQUN4QixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVDLENBQUMsR0FBR0wsT0FBTyxDQUFDTSxNQUFNLEVBQUVGLENBQUMsR0FBR0MsQ0FBQyxFQUFFRCxDQUFDLEVBQUUsRUFBRTtVQUM5Q0QsZUFBZSxDQUFDSSxJQUFJLENBQUN0QixhQUFhLENBQUNDLEdBQUcsRUFBRWMsT0FBTyxDQUFDSSxDQUFDLENBQUMsRUFBRWhCLGNBQWMsRUFBRUMsWUFBWSxDQUFDLENBQUM7UUFDcEY7UUFDQUcsT0FBTyxDQUFDZ0IsR0FBRyxDQUFDTCxlQUFlLENBQUMsQ0FBQ00sSUFBSSxDQUFDLFVBQVVDLE9BQU8sRUFBRTtVQUNuRG5CLE9BQU8sQ0FBQ21CLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDLFVBQVVDLFVBQVUsRUFBRTtZQUMzQyxPQUFPLE9BQU9BLFVBQVUsS0FBSyxXQUFXO1VBQzFDLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxFQUFFLFVBQVVDLFlBQVksRUFBRTtVQUN6QnBCLE1BQU0sQ0FBQ29CLFlBQVksQ0FBQztRQUN0QixDQUFDLENBQUM7TUFDSjtJQUNGLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztBQUNKO0FBRUFDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHakIsT0FBTyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvdXRpbC9kaXItbGlzdC5qcz8yZjFmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXIgLSBmb2xkZXIgcGF0aFxuICogQHBhcmFtIHtzdHJpbmd9IGl0ZW1OYW1lIC0gZm9sZGVyIG9yIGZpbGUgbmFtZVxuICogQHBhcmFtIHtib29sZWFufSBpbmNsdWRlRm9sZGVycyAtIGlmIGZvbGRlcnMgc2hvdWxkIGJlIGluY2x1ZGVkXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluY2x1ZGVGaWxlcyAtIGlmIGZpbGVzIHNob3VsZCBiZSBpbmNsdWRlZFxuICogQHJldHVybnMge1Byb21pc2V9IHByb21pc2VcbiAqL1xuZnVuY3Rpb24gZmlsdGVyRGlySXRlbSAoZGlyLCBpdGVtTmFtZSwgaW5jbHVkZUZvbGRlcnMsIGluY2x1ZGVGaWxlcykge1xuICBjb25zdCBmb2xkZXJQYXRoID0gcGF0aC5yZXNvbHZlKGRpciArIFwiL1wiICsgaXRlbU5hbWUpO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGZzLnN0YXQoZm9sZGVyUGF0aCwgZnVuY3Rpb24gKGVyciwgc3RhdCkge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXQuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICBpZiAoIWluY2x1ZGVGb2xkZXJzKSB7XG4gICAgICAgICAgaXRlbU5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShpdGVtTmFtZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghaW5jbHVkZUZpbGVzKSB7XG4gICAgICAgICAgaXRlbU5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShpdGVtTmFtZSlcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGRpciAtIGZvbGRlciBwYXRoXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluY2x1ZGVGb2xkZXJzIC0gaWYgZm9sZGVycyBzaG91bGQgYmUgaW5jbHVkZWRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5jbHVkZUZpbGVzIC0gaWYgZmlsZXMgc2hvdWxkIGJlIGluY2x1ZGVkXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gcHJvbWlzZVxuICovXG5mdW5jdGlvbiBkaXJMaXN0IChkaXIsIGluY2x1ZGVGb2xkZXJzLCBpbmNsdWRlRmlsZXMpIHtcbiAgaWYgKHR5cGVvZiBpbmNsdWRlRm9sZGVycyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGluY2x1ZGVGb2xkZXJzID0gdHJ1ZTtcbiAgfVxuICBpZiAodHlwZW9mIGluY2x1ZGVGaWxlcyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGluY2x1ZGVGaWxlcyA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmcy5yZWFkZGlyKGRpciwgZnVuY3Rpb24gKGVyciwgZm9sZGVycykge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICAvL25vdCBmb3VuZCByZXR1cm4gZW1wdHkgbGlzdCwgdGhlcmUgd2FzIGFub3RoZXIgZXJyb3IgRU5PVERJUiBidXQgaXQgc2VlbXMgbGlrZSB0aGlzIGlzIG5vdCBhIHZhbGlkIGNhc2UgYW55d2F5XG4gICAgICAgIGlmIChlcnIuY29kZSA9PT0gXCJFTk9FTlRcIiB8fCBlcnIuY29kZSA9PT0gXCJFTk9URElSXCIpIHtcbiAgICAgICAgICByZXNvbHZlKFtdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoZXJyLm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgZm9sZGVyc1Byb21pc2VzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gZm9sZGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICBmb2xkZXJzUHJvbWlzZXMucHVzaChmaWx0ZXJEaXJJdGVtKGRpciwgZm9sZGVyc1tpXSwgaW5jbHVkZUZvbGRlcnMsIGluY2x1ZGVGaWxlcykpO1xuICAgICAgICB9XG4gICAgICAgIFByb21pc2UuYWxsKGZvbGRlcnNQcm9taXNlcykudGhlbihmdW5jdGlvbiAocmVzdWx0cykge1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0cy5maWx0ZXIoZnVuY3Rpb24gKGZvbGRlck5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgZm9sZGVyTmFtZSAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKHByb21pc2VFcnJvcikge1xuICAgICAgICAgIHJlamVjdChwcm9taXNlRXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGlyTGlzdDtcbiJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwYXRoIiwiZmlsdGVyRGlySXRlbSIsImRpciIsIml0ZW1OYW1lIiwiaW5jbHVkZUZvbGRlcnMiLCJpbmNsdWRlRmlsZXMiLCJmb2xkZXJQYXRoIiwicmVzb2x2ZSIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0IiwiZXJyIiwiaXNEaXJlY3RvcnkiLCJ1bmRlZmluZWQiLCJkaXJMaXN0IiwicmVhZGRpciIsImZvbGRlcnMiLCJjb2RlIiwibWVzc2FnZSIsImZvbGRlcnNQcm9taXNlcyIsImkiLCJqIiwibGVuZ3RoIiwicHVzaCIsImFsbCIsInRoZW4iLCJyZXN1bHRzIiwiZmlsdGVyIiwiZm9sZGVyTmFtZSIsInByb21pc2VFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7182\n')},5237:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar constants = __webpack_require__(6557);\nvar utilUrl = __webpack_require__(8167);\n\n/**\n * @module\n * @namespace downloadUtil\n */\nvar downloadUtil = {};\n\n/**\n * @typedef {Link} Link\n * @property {string} id - identifier\n * @property {number} bandwidth - bandwidth\n * @property {string} contentType - content type [video, audio, text]\n * @property {string} remoteUrl - remote url\n * @property {string} localUrl - local url\n */\n\n/**\n * @typedef {Link} Link\n * @property {string} id - identifier\n * @property {number} bandwidth - bandwidth\n * @property {string} contentType - content type [video, audio, text]\n * @property {string} remoteUrl - remote url\n * @property {string} localUrl - local url\n */\n\n/**\n * @param {string} manifestId - manifest identifier\n * @param {string} localPath - local path\n * @param {string} remotePath - remote path\n * @param {Array} userRepresentations - representations chosen by a user\n * @param {Array} manifestRepresentations - all manifest representations\n * @param {object} downloadedHash - download unique identifier\n * @returns {Link[]} array of {@link Link}\n */\ndownloadUtil.getAllLinks = function getAllLinks(manifestId, localPath, remotePath, userRepresentations, manifestRepresentations) {\n  return downloadUtil.getDownloadLinks(manifestId, localPath, remotePath, userRepresentations, manifestRepresentations);\n};\n\n/**\n * @param {string} manifestId - manifest identifier\n * @param {string} localPath - local path\n * @param {string} remotePath - remote path\n * @param {Array} userRepresentations - representations chosen by a user\n * @param {Array} manifestRepresentations - all manifest representations\n * @param {object} downloadedHash - download unique identifier\n * @returns {Link[]} array of {@link Link}\n */\ndownloadUtil.getDownloadLinks = function getDownloadLinks(manifestId, localPath, remotePath, userRepresentations, manifestRepresentations, downloadedHash) {\n  var chosenRepresentations = downloadUtil.getChosenRepresentations(userRepresentations, manifestRepresentations);\n  var bandwidth, contentType, localUrl, i, id, j, k, l, links;\n  var mediaFile, mediaBaseUrl, mediaUrls, remoteUrl, segmentInformation;\n  links = [];\n  downloadedHash = downloadedHash || {};\n  for (i = 0, j = chosenRepresentations.length; i < j; i++) {\n    contentType = chosenRepresentations[i].attributeList.mimeType;\n    bandwidth = +chosenRepresentations[i].attributeList.bandwidth;\n    if (contentType.indexOf("video") === 0) {\n      contentType = "video";\n    } else if (contentType.indexOf("audio") === 0) {\n      contentType = "audio";\n    } else {\n      contentType = "text";\n    }\n    segmentInformation = chosenRepresentations[i].segmentInformation;\n    mediaUrls = segmentInformation.mediaUrls;\n    id = segmentInformation.representationID;\n    for (k = 0, l = mediaUrls.length; k < l; k++) {\n      mediaFile = mediaUrls[k].mediaFile;\n      mediaBaseUrl = mediaUrls[k].baseURL;\n      mediaBaseUrl = mediaBaseUrl.replace(/\\.\\.\\//g, "");\n      mediaBaseUrl = mediaBaseUrl.replace(/\\.\\./g, "");\n      if (mediaFile === mediaBaseUrl || remotePath === mediaBaseUrl) {\n        mediaBaseUrl = "";\n      }\n      // remove http and https from mediaBaseUrl, this way it will create a correct folder structure\n      if (mediaBaseUrl.match(constants.regexpProtocolRemove)) {\n        remoteUrl = utilUrl.joinPathWithFile(mediaBaseUrl, mediaFile);\n        localUrl = utilUrl.joinPathWithFile(localPath, mediaBaseUrl.replace(constants.regexpProtocolRemove, ""), mediaFile);\n      } else {\n        remoteUrl = utilUrl.joinPathWithFile(remotePath, mediaBaseUrl, mediaFile);\n        localUrl = utilUrl.joinPathWithFile(localPath, mediaBaseUrl, mediaFile);\n      }\n\n      // filter query string from localUrl\n      var index = localUrl.lastIndexOf(\'?\');\n      if (index > -1) {\n        localUrl = localUrl.substr(0, index);\n      }\n      if (!downloadedHash[localUrl] || !downloadedHash[localUrl] && downloadedHash[localUrl].remoteUrl !== remoteUrl) {\n        if (!links[k]) {\n          links[k] = [];\n        }\n        links[k].push({\n          id: id,\n          bandwidth: bandwidth,\n          contentType: contentType,\n          remoteUrl: remoteUrl,\n          localUrl: localUrl\n        });\n      }\n    }\n  }\n\n  // NOTE: use links.flat() in the future\n  return links.reduce(function (acc, val) {\n    return acc.concat(val);\n  }, []);\n};\n\n/**\n *\n * @param {array} userChosenRepr - array of chosen representations ids by user\n * @param {array} manifestRepr - array of all manifest representations\n * @returns {array} chosen representations from manifest\n */\ndownloadUtil.getChosenRepresentations = function getChosenRepresentations(userChosenRepr, manifestRepr) {\n  var chosenRepresentations = [];\n  var userChosenReprObj = {};\n  userChosenRepr = userChosenRepr || [];\n  manifestRepr = manifestRepr || [];\n  for (var i = 0, j = userChosenRepr.length; i < j; i++) {\n    userChosenReprObj[String(userChosenRepr[i])] = true;\n  }\n  for (var _i = 0, _j = manifestRepr.length; _i < _j; _i++) {\n    var items = manifestRepr[_i].representationColl;\n    for (var k = 0, l = items.length; k < l; k++) {\n      var item = items[k];\n      if (userChosenReprObj[String(item.attributeList.id)]) {\n        chosenRepresentations.push(item);\n      }\n    }\n  }\n  return chosenRepresentations;\n};\nmodule.exports = downloadUtil;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5237\n')},2759:module=>{"use strict";eval("\n\nfunction isUTF16(data) {\n  var i = 0;\n  var len = data && data.length;\n  var pos = null;\n  var b1, b2, next, prev;\n  if (len < 2) {\n    if (data[0] > 0xFF) {\n      return false;\n    }\n  } else {\n    b1 = data[0];\n    b2 = data[1];\n    if (b1 === 0xFF &&\n    // BOM (little-endian)\n    b2 === 0xFE) {\n      return true;\n    }\n    if (b1 === 0xFE &&\n    // BOM (big-endian)\n    b2 === 0xFF) {\n      return true;\n    }\n    for (; i < len; i++) {\n      if (data[i] === 0x00) {\n        pos = i;\n        break;\n      } else if (data[i] > 0xFF) {\n        return false;\n      }\n    }\n    if (pos === null) {\n      return false; // Non ASCII\n    }\n\n    next = data[pos + 1]; // BE\n    if (next !== void 0 && next > 0x00 && next < 0x80) {\n      return true;\n    }\n    prev = data[pos - 1]; // LE\n    if (prev !== void 0 && prev > 0x00 && prev < 0x80) {\n      return true;\n    }\n  }\n  return false;\n}\nmodule.exports = {\n  isUTF16: isUTF16\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc1OS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixTQUFTQSxPQUFPQSxDQUFFQyxJQUFJLEVBQUU7RUFDdEIsSUFBSUMsQ0FBQyxHQUFHLENBQUM7RUFDVCxJQUFJQyxHQUFHLEdBQUdGLElBQUksSUFBSUEsSUFBSSxDQUFDRyxNQUFNO0VBQzdCLElBQUlDLEdBQUcsR0FBRyxJQUFJO0VBQ2QsSUFBSUMsRUFBRSxFQUFFQyxFQUFFLEVBQUVDLElBQUksRUFBRUMsSUFBSTtFQUV0QixJQUFJTixHQUFHLEdBQUcsQ0FBQyxFQUFFO0lBQ1QsSUFBSUYsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRTtNQUNoQixPQUFPLEtBQUs7SUFDaEI7RUFDSixDQUFDLE1BQU07SUFDSEssRUFBRSxHQUFHTCxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ1pNLEVBQUUsR0FBR04sSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNaLElBQUlLLEVBQUUsS0FBSyxJQUFJO0lBQUk7SUFDZkMsRUFBRSxLQUFLLElBQUksRUFBRTtNQUNiLE9BQU8sSUFBSTtJQUNmO0lBQ0EsSUFBSUQsRUFBRSxLQUFLLElBQUk7SUFBSTtJQUNmQyxFQUFFLEtBQUssSUFBSSxFQUFFO01BQ2IsT0FBTyxJQUFJO0lBQ2Y7SUFFQSxPQUFPTCxDQUFDLEdBQUdDLEdBQUcsRUFBRUQsQ0FBQyxFQUFFLEVBQUU7TUFDakIsSUFBSUQsSUFBSSxDQUFDQyxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbEJHLEdBQUcsR0FBR0gsQ0FBQztRQUNQO01BQ0osQ0FBQyxNQUFNLElBQUlELElBQUksQ0FBQ0MsQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFFO1FBQ3ZCLE9BQU8sS0FBSztNQUNoQjtJQUNKO0lBRUEsSUFBSUcsR0FBRyxLQUFLLElBQUksRUFBRTtNQUNkLE9BQU8sS0FBSyxDQUFDLENBQUM7SUFDbEI7O0lBRUFHLElBQUksR0FBR1AsSUFBSSxDQUFDSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0QixJQUFJRyxJQUFJLEtBQUssS0FBSyxDQUFDLElBQUlBLElBQUksR0FBRyxJQUFJLElBQUlBLElBQUksR0FBRyxJQUFJLEVBQUU7TUFDL0MsT0FBTyxJQUFJO0lBQ2Y7SUFFQUMsSUFBSSxHQUFHUixJQUFJLENBQUNJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLElBQUlJLElBQUksS0FBSyxLQUFLLENBQUMsSUFBSUEsSUFBSSxHQUFHLElBQUksSUFBSUEsSUFBSSxHQUFHLElBQUksRUFBRTtNQUMvQyxPQUFPLElBQUk7SUFDZjtFQUNKO0VBRUEsT0FBTyxLQUFLO0FBQ2Q7QUFFQUMsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZlgsT0FBTyxFQUFFQTtBQUNYLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3V0aWwvZW5jb2RpbmcuanM/ODgxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gaXNVVEYxNiAoZGF0YSkge1xuICB2YXIgaSA9IDA7XG4gIHZhciBsZW4gPSBkYXRhICYmIGRhdGEubGVuZ3RoO1xuICB2YXIgcG9zID0gbnVsbDtcbiAgdmFyIGIxLCBiMiwgbmV4dCwgcHJldjtcblxuICBpZiAobGVuIDwgMikge1xuICAgICAgaWYgKGRhdGFbMF0gPiAweEZGKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICB9IGVsc2Uge1xuICAgICAgYjEgPSBkYXRhWzBdO1xuICAgICAgYjIgPSBkYXRhWzFdO1xuICAgICAgaWYgKGIxID09PSAweEZGICYmIC8vIEJPTSAobGl0dGxlLWVuZGlhbilcbiAgICAgICAgICBiMiA9PT0gMHhGRSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGIxID09PSAweEZFICYmIC8vIEJPTSAoYmlnLWVuZGlhbilcbiAgICAgICAgICBiMiA9PT0gMHhGRikge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGRhdGFbaV0gPT09IDB4MDApIHtcbiAgICAgICAgICAgICAgcG9zID0gaTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIGlmIChkYXRhW2ldID4gMHhGRikge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocG9zID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBOb24gQVNDSUlcbiAgICAgIH1cblxuICAgICAgbmV4dCA9IGRhdGFbcG9zICsgMV07IC8vIEJFXG4gICAgICBpZiAobmV4dCAhPT0gdm9pZCAwICYmIG5leHQgPiAweDAwICYmIG5leHQgPCAweDgwKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHByZXYgPSBkYXRhW3BvcyAtIDFdOyAvLyBMRVxuICAgICAgaWYgKHByZXYgIT09IHZvaWQgMCAmJiBwcmV2ID4gMHgwMCAmJiBwcmV2IDwgMHg4MCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNVVEYxNjogaXNVVEYxNlxufSJdLCJuYW1lcyI6WyJpc1VURjE2IiwiZGF0YSIsImkiLCJsZW4iLCJsZW5ndGgiLCJwb3MiLCJiMSIsImIyIiwibmV4dCIsInByZXYiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2759\n")},1408:module=>{"use strict";eval('\n\nmodule.exports = function fieldsPicker(obj, fields, attr) {\n  if (typeof attr === "undefined") {\n    return;\n  }\n  for (var i = 0, j = fields.length; i < j; i++) {\n    var field = fields[i];\n    var defaultValue = field.defaultValue;\n    var name = field.name || field;\n    obj[name] = typeof attr[name] !== "undefined" ? attr[name] : defaultValue;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQwOC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0MsWUFBWUEsQ0FBRUMsR0FBRyxFQUFFQyxNQUFNLEVBQUVDLElBQUksRUFBRTtFQUN6RCxJQUFJLE9BQU9BLElBQUksS0FBSyxXQUFXLEVBQUU7SUFDL0I7RUFDRjtFQUNBLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUMsQ0FBQyxHQUFHSCxNQUFNLENBQUNJLE1BQU0sRUFBRUYsQ0FBQyxHQUFHQyxDQUFDLEVBQUVELENBQUMsRUFBRSxFQUFFO0lBQzdDLElBQU1HLEtBQUssR0FBR0wsTUFBTSxDQUFDRSxDQUFDLENBQUM7SUFDdkIsSUFBTUksWUFBWSxHQUFHRCxLQUFLLENBQUNDLFlBQVk7SUFDdkMsSUFBTUMsSUFBSSxHQUFHRixLQUFLLENBQUNFLElBQUksSUFBSUYsS0FBSztJQUNoQ04sR0FBRyxDQUFDUSxJQUFJLENBQUMsR0FBRyxPQUFPTixJQUFJLENBQUNNLElBQUksQ0FBQyxLQUFLLFdBQVcsR0FBR04sSUFBSSxDQUFDTSxJQUFJLENBQUMsR0FBR0QsWUFBWTtFQUMzRTtBQUNGLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3V0aWwvZmllbGRzLXBpY2tlci5qcz8wNjNlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpZWxkc1BpY2tlciAob2JqLCBmaWVsZHMsIGF0dHIpIHtcbiAgaWYgKHR5cGVvZiBhdHRyID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAobGV0IGkgPSAwLCBqID0gZmllbGRzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgIGNvbnN0IGZpZWxkID0gZmllbGRzW2ldO1xuICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IGZpZWxkLmRlZmF1bHRWYWx1ZTtcbiAgICBjb25zdCBuYW1lID0gZmllbGQubmFtZSB8fCBmaWVsZDtcbiAgICBvYmpbbmFtZV0gPSB0eXBlb2YgYXR0cltuYW1lXSAhPT0gXCJ1bmRlZmluZWRcIiA/IGF0dHJbbmFtZV0gOiBkZWZhdWx0VmFsdWU7XG4gIH1cbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImZpZWxkc1BpY2tlciIsIm9iaiIsImZpZWxkcyIsImF0dHIiLCJpIiwiaiIsImxlbmd0aCIsImZpZWxkIiwiZGVmYXVsdFZhbHVlIiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1408\n')},7868:module=>{"use strict";eval('\n\nfunction removeCharacter(text, pos) {\n  var newText;\n  newText = text.substr(0, pos - 1);\n  if (text.length > pos) {\n    newText += text.substr(pos, text.length);\n  }\n  return newText;\n}\nfunction getInvalidDiff(text, regex, openingTag, closingTag) {\n  var value = String(text);\n  var check = true;\n  var i = 1;\n  while (check) {\n    var valueToCheck = value.substr(0, i);\n    if (!valueToCheck.match(regex)) {\n      value = removeCharacter(value, i);\n    } else {\n      i++;\n    }\n    if (i > value.length) {\n      check = false;\n    }\n  }\n  var arrValue = value.split("");\n  for (var _i = 0, j = text.length; _i < j; _i++) {\n    if (_i >= arrValue.length || text[_i] !== arrValue[_i]) {\n      arrValue.splice(_i, 0, openingTag + text[_i] + closingTag);\n    }\n  }\n  return arrValue.join("");\n}\nmodule.exports = getInvalidDiff;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzg2OC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixTQUFTQSxlQUFlQSxDQUFFQyxJQUFJLEVBQUVDLEdBQUcsRUFBRTtFQUNuQyxJQUFJQyxPQUFPO0VBQ1hBLE9BQU8sR0FBR0YsSUFBSSxDQUFDRyxNQUFNLENBQUMsQ0FBQyxFQUFFRixHQUFHLEdBQUcsQ0FBQyxDQUFDO0VBQ2pDLElBQUlELElBQUksQ0FBQ0ksTUFBTSxHQUFHSCxHQUFHLEVBQUU7SUFDckJDLE9BQU8sSUFBSUYsSUFBSSxDQUFDRyxNQUFNLENBQUNGLEdBQUcsRUFBRUQsSUFBSSxDQUFDSSxNQUFNLENBQUM7RUFDMUM7RUFDQSxPQUFPRixPQUFPO0FBQ2hCO0FBRUEsU0FBU0csY0FBY0EsQ0FBRUwsSUFBSSxFQUFFTSxLQUFLLEVBQUVDLFVBQVUsRUFBRUMsVUFBVSxFQUFFO0VBQzVELElBQUlDLEtBQUssR0FBR0MsTUFBTSxDQUFDVixJQUFJLENBQUM7RUFDeEIsSUFBSVcsS0FBSyxHQUFHLElBQUk7RUFDaEIsSUFBSUMsQ0FBQyxHQUFHLENBQUM7RUFDVCxPQUFPRCxLQUFLLEVBQUU7SUFDWixJQUFJRSxZQUFZLEdBQUdKLEtBQUssQ0FBQ04sTUFBTSxDQUFDLENBQUMsRUFBRVMsQ0FBQyxDQUFDO0lBRXJDLElBQUksQ0FBQ0MsWUFBWSxDQUFDQyxLQUFLLENBQUNSLEtBQUssQ0FBQyxFQUFFO01BQzlCRyxLQUFLLEdBQUdWLGVBQWUsQ0FBQ1UsS0FBSyxFQUFFRyxDQUFDLENBQUM7SUFDbkMsQ0FBQyxNQUFNO01BQ0xBLENBQUMsRUFBRTtJQUNMO0lBQ0EsSUFBSUEsQ0FBQyxHQUFHSCxLQUFLLENBQUNMLE1BQU0sRUFBRTtNQUNwQk8sS0FBSyxHQUFHLEtBQUs7SUFDZjtFQUNGO0VBQ0EsSUFBSUksUUFBUSxHQUFHTixLQUFLLENBQUNPLEtBQUssQ0FBQyxFQUFFLENBQUM7RUFDOUIsS0FBSyxJQUFJSixFQUFDLEdBQUcsQ0FBQyxFQUFFSyxDQUFDLEdBQUdqQixJQUFJLENBQUNJLE1BQU0sRUFBRVEsRUFBQyxHQUFHSyxDQUFDLEVBQUVMLEVBQUMsRUFBRSxFQUFFO0lBQzNDLElBQUlBLEVBQUMsSUFBSUcsUUFBUSxDQUFDWCxNQUFNLElBQUlKLElBQUksQ0FBQ1ksRUFBQyxDQUFDLEtBQUtHLFFBQVEsQ0FBQ0gsRUFBQyxDQUFDLEVBQUU7TUFDbkRHLFFBQVEsQ0FBQ0csTUFBTSxDQUFDTixFQUFDLEVBQUUsQ0FBQyxFQUFFTCxVQUFVLEdBQUdQLElBQUksQ0FBQ1ksRUFBQyxDQUFDLEdBQUdKLFVBQVUsQ0FBQztJQUMxRDtFQUNGO0VBQ0EsT0FBT08sUUFBUSxDQUFDSSxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQzFCO0FBRUFDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHaEIsY0FBYyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvdXRpbC9nZXQtaW52YWxpZC1kaWZmLmpzP2JhMWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIHJlbW92ZUNoYXJhY3RlciAodGV4dCwgcG9zKSB7XG4gIGxldCBuZXdUZXh0O1xuICBuZXdUZXh0ID0gdGV4dC5zdWJzdHIoMCwgcG9zIC0gMSk7XG4gIGlmICh0ZXh0Lmxlbmd0aCA+IHBvcykge1xuICAgIG5ld1RleHQgKz0gdGV4dC5zdWJzdHIocG9zLCB0ZXh0Lmxlbmd0aCk7XG4gIH1cbiAgcmV0dXJuIG5ld1RleHQ7XG59XG5cbmZ1bmN0aW9uIGdldEludmFsaWREaWZmICh0ZXh0LCByZWdleCwgb3BlbmluZ1RhZywgY2xvc2luZ1RhZykge1xuICBsZXQgdmFsdWUgPSBTdHJpbmcodGV4dCk7XG4gIGxldCBjaGVjayA9IHRydWU7XG4gIGxldCBpID0gMTtcbiAgd2hpbGUgKGNoZWNrKSB7XG4gICAgbGV0IHZhbHVlVG9DaGVjayA9IHZhbHVlLnN1YnN0cigwLCBpKTtcblxuICAgIGlmICghdmFsdWVUb0NoZWNrLm1hdGNoKHJlZ2V4KSkge1xuICAgICAgdmFsdWUgPSByZW1vdmVDaGFyYWN0ZXIodmFsdWUsIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpKys7XG4gICAgfVxuICAgIGlmIChpID4gdmFsdWUubGVuZ3RoKSB7XG4gICAgICBjaGVjayA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBsZXQgYXJyVmFsdWUgPSB2YWx1ZS5zcGxpdChcIlwiKTtcbiAgZm9yIChsZXQgaSA9IDAsIGogPSB0ZXh0Lmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgIGlmIChpID49IGFyclZhbHVlLmxlbmd0aCB8fCB0ZXh0W2ldICE9PSBhcnJWYWx1ZVtpXSkge1xuICAgICAgYXJyVmFsdWUuc3BsaWNlKGksIDAsIG9wZW5pbmdUYWcgKyB0ZXh0W2ldICsgY2xvc2luZ1RhZyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnJWYWx1ZS5qb2luKFwiXCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEludmFsaWREaWZmOyJdLCJuYW1lcyI6WyJyZW1vdmVDaGFyYWN0ZXIiLCJ0ZXh0IiwicG9zIiwibmV3VGV4dCIsInN1YnN0ciIsImxlbmd0aCIsImdldEludmFsaWREaWZmIiwicmVnZXgiLCJvcGVuaW5nVGFnIiwiY2xvc2luZ1RhZyIsInZhbHVlIiwiU3RyaW5nIiwiY2hlY2siLCJpIiwidmFsdWVUb0NoZWNrIiwibWF0Y2giLCJhcnJWYWx1ZSIsInNwbGl0IiwiaiIsInNwbGljZSIsImpvaW4iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7868\n')},96:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar net = __webpack_require__(1808);\nmodule.exports = function (port, fn) {\n  var tester = net.createServer().once('error', function (err) {\n    if (err) {\n      return fn(err);\n    }\n    fn(null, true);\n  }).once('listening', function () {\n    tester.once('close', function () {\n      fn(null, false);\n    }).close();\n  }).listen(port);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBTUEsR0FBRyxHQUFHQyxtQkFBTyxDQUFDLElBQUssQ0FBQztBQUUxQkMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsSUFBSSxFQUFFQyxFQUFFLEVBQUU7RUFDbkMsSUFBTUMsTUFBTSxHQUFHTixHQUFHLENBQUNPLFlBQVksQ0FBQyxDQUFDLENBQUNDLElBQUksQ0FBQyxPQUFPLEVBQUUsVUFBVUMsR0FBRyxFQUFFO0lBQzdELElBQUlBLEdBQUcsRUFBRTtNQUNQLE9BQU9KLEVBQUUsQ0FBQ0ksR0FBRyxDQUFDO0lBQ2hCO0lBQ0FKLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0VBQ2hCLENBQUMsQ0FBQyxDQUFDRyxJQUFJLENBQUMsV0FBVyxFQUFFLFlBQVk7SUFDL0JGLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDLE9BQU8sRUFBRSxZQUFZO01BQy9CSCxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQztJQUNqQixDQUFDLENBQUMsQ0FBQ0ssS0FBSyxDQUFDLENBQUM7RUFDWixDQUFDLENBQUMsQ0FBQ0MsTUFBTSxDQUFDUCxJQUFJLENBQUM7QUFDakIsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvdXRpbC9pcy1wb3J0LXRha2VuLmpzP2NkYzciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IG5ldCA9IHJlcXVpcmUoJ25ldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwb3J0LCBmbikge1xuICBjb25zdCB0ZXN0ZXIgPSBuZXQuY3JlYXRlU2VydmVyKCkub25jZSgnZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgcmV0dXJuIGZuKGVycik7XG4gICAgfVxuICAgIGZuKG51bGwsIHRydWUpO1xuICB9KS5vbmNlKCdsaXN0ZW5pbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgdGVzdGVyLm9uY2UoJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgZm4obnVsbCwgZmFsc2UpO1xuICAgIH0pLmNsb3NlKCk7XG4gIH0pLmxpc3Rlbihwb3J0KTtcbn07XG4iXSwibmFtZXMiOlsibmV0IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJwb3J0IiwiZm4iLCJ0ZXN0ZXIiLCJjcmVhdGVTZXJ2ZXIiLCJvbmNlIiwiZXJyIiwiY2xvc2UiLCJsaXN0ZW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///96\n")},3064:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar constants = __webpack_require__(6557);\nvar Manifest = (__webpack_require__(7151)/* .Manifest */ .G);\nvar XMLSerializer = (__webpack_require__(678).XMLSerializer);\nfunction getMimeType(value) {\n  if (value.indexOf("video") !== -1) {\n    return "video";\n  } else if (value.indexOf("audio") !== -1) {\n    return "audio";\n  } else {\n    return "text";\n  }\n}\nfunction parseManifestWithChoosenRepresentations(manifest, representations) {\n  var manifestId = manifest.id;\n  var xmlSerializer = new XMLSerializer();\n  var manifestUrl = manifest.getManifestUrl();\n  var manifestString = xmlSerializer.serializeToString(manifest.getManifestXML());\n  manifest = new Manifest(manifestId);\n  manifest.loadFromStr(manifestString, manifestUrl);\n  var video = representations.video;\n  var audio = representations.audio;\n  var text = representations.text;\n  var chosenRepresentations = {};\n  chosenRepresentations["video"] = {};\n  for (var i = 0, j = video.length; i < j; i++) {\n    chosenRepresentations["video"][video[i]] = true;\n  }\n  chosenRepresentations["audio"] = {};\n  for (var _i = 0, _j = audio.length; _i < _j; _i++) {\n    chosenRepresentations["audio"][audio[_i]] = true;\n  }\n  chosenRepresentations["text"] = {};\n  for (var _i2 = 0, _j2 = text.length; _i2 < _j2; _i2++) {\n    chosenRepresentations["text"][text[_i2]] = true;\n  }\n  function markNodeForDownload(repr) {\n    for (var _i3 = 0, _j3 = repr.length; _i3 < _j3; _i3++) {\n      for (var k = 0, l = repr[_i3].representationColl.length; k < l; k++) {\n        var id = repr[_i3].representationColl[k].attributeList.id;\n        var mimeType = getMimeType(repr[_i3].representationColl[k].attributeList.mimeType);\n        if (chosenRepresentations[mimeType][id]) {\n          repr[_i3].representationColl[k].markNodeForDownload(true);\n        }\n      }\n    }\n  }\n\n  // fix the baseURL by removing http and https the same is done when saving a file\n  // see api/util/downloads.js -> getDownloadLinks\n  function fixBaseURL(repr) {\n    for (var _i4 = 0, _j4 = repr.length; _i4 < _j4; _i4++) {\n      var baseURL = repr[_i4].currentNode.getElementsByTagName("BaseURL")[0];\n      if (baseURL && baseURL.textContent.match(constants.regexpProtocolRemove)) {\n        baseURL.textContent = baseURL.textContent.replace(constants.regexpProtocolRemove, "");\n      }\n    }\n  }\n  markNodeForDownload(manifest.getVideoRepresentations());\n  markNodeForDownload(manifest.getAudioRepresentations());\n  markNodeForDownload(manifest.getTextRepresentations());\n  fixBaseURL(manifest.getVideoRepresentations());\n  fixBaseURL(manifest.getAudioRepresentations());\n  fixBaseURL(manifest.getTextRepresentations());\n  manifest.removeNode();\n  return xmlSerializer.serializeToString(manifest.getManifestXML());\n}\nmodule.exports = parseManifestWithChoosenRepresentations;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3064\n')},943:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('/*eslint no-console: ["error", { allow: ["warn", "error", "info"] }] */\n\n\nvar fs = __webpack_require__(7147);\nvar path = __webpack_require__(1017);\nvar downloadFileUtil = __webpack_require__(6003);\nfunction removeDir(dir, cb, ENOTEMPTY_attempts) {\n  ENOTEMPTY_attempts = ENOTEMPTY_attempts || 0;\n  var ENOTEMPTY_maxAttempts = 10;\n  var ENOTEMPTY_TIMEOUT = 500;\n  if (typeof dir !== \'string\') {\n    throw new Error(\'directory path required\');\n  }\n  if (cb !== undefined && typeof cb !== \'function\') {\n    throw new Error(\'callback must be function\');\n  }\n  var self = this;\n  var called, results;\n  downloadFileUtil.checkForLocalFile(dir, function existsCallback(exists) {\n    if (!exists) {\n      return removeDirCallback(null);\n    }\n    fs.stat(dir, function statCallback(err, stat) {\n      if (err) {\n        return removeDirCallback(err);\n      }\n      if (!stat.isDirectory()) {\n        return fs.unlink(dir, removeDirCallback);\n      }\n      fs.readdir(dir, readdirCallback);\n    });\n    function readdirCallback(err, files) {\n      if (err) {\n        return removeDirCallback(err);\n      }\n      var n = files.length;\n      if (n === 0) {\n        return fs.rmdir(dir, removeDirCallback);\n      }\n      files.forEach(function (name) {\n        removeDir(path.resolve(dir, name), function (err) {\n          if (err) {\n            return removeDirCallback(err);\n          }\n          if (--n === 0) {\n            return fs.rmdir(dir, removeDirCallback);\n          }\n        });\n      });\n    }\n  });\n  function removeDirCallback(err) {\n    if (err && err.code === "ENOTEMPTY") {\n      if (ENOTEMPTY_attempts < ENOTEMPTY_maxAttempts) {\n        ENOTEMPTY_attempts++;\n        console.error("ERROR ENOTEMPTY", dir, ENOTEMPTY_attempts);\n        setTimeout(function () {\n          removeDir(dir, cb, ENOTEMPTY_attempts);\n        }, ENOTEMPTY_TIMEOUT);\n        return;\n      }\n    }\n    if (err && err.code === \'ENOENT\') {\n      arguments[0] = null;\n    }\n    if (!results) {\n      results = arguments;\n    }\n    if (!cb || called) {\n      return;\n    }\n    called = true;\n    cb.apply(self, results);\n  }\n}\nmodule.exports = removeDir;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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aUIsRUFBRTlCLEdBQUcsRUFBRUUsa0JBQWtCLENBQUM7UUFDekQ2QixVQUFVLENBQUMsWUFBWTtVQUNyQmhDLFNBQVMsQ0FBQ0MsR0FBRyxFQUFFQyxFQUFFLEVBQUVDLGtCQUFrQixDQUFDO1FBQ3hDLENBQUMsRUFBRUUsaUJBQWlCLENBQUM7UUFDckI7TUFDRjtJQUNGO0lBQ0EsSUFBSVksR0FBRyxJQUFJQSxHQUFHLENBQUNZLElBQUksS0FBSyxRQUFRLEVBQUU7TUFDaENJLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJO0lBQ3JCO0lBRUEsSUFBSSxDQUFDdkIsT0FBTyxFQUFFO01BQ1pBLE9BQU8sR0FBR3VCLFNBQVM7SUFDckI7SUFDQSxJQUFJLENBQUMvQixFQUFFLElBQUlPLE1BQU0sRUFBRTtNQUNqQjtJQUNGO0lBQ0FBLE1BQU0sR0FBRyxJQUFJO0lBQ2JQLEVBQUUsQ0FBQ2dDLEtBQUssQ0FBQzFCLElBQUksRUFBRUUsT0FBTyxDQUFDO0VBQ3pCO0FBQ0Y7QUFFQXlCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHcEMsU0FBUyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvdXRpbC9yZW1vdmUtZGlyLmpzP2YyOTQiXSwic291cmNlc0NvbnRlbnQiOlsiLyplc2xpbnQgbm8tY29uc29sZTogW1wiZXJyb3JcIiwgeyBhbGxvdzogW1wid2FyblwiLCBcImVycm9yXCIsIFwiaW5mb1wiXSB9XSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgZG93bmxvYWRGaWxlVXRpbCA9IHJlcXVpcmUoXCIuLi9kb3dubG9hZHMvZG93bmxvYWQtZmlsZS11dGlsXCIpO1xuXG5mdW5jdGlvbiByZW1vdmVEaXIgKGRpciwgY2IsIEVOT1RFTVBUWV9hdHRlbXB0cykge1xuICBFTk9URU1QVFlfYXR0ZW1wdHMgPSBFTk9URU1QVFlfYXR0ZW1wdHMgfHwgMDtcbiAgY29uc3QgRU5PVEVNUFRZX21heEF0dGVtcHRzID0gMTA7XG4gIGNvbnN0IEVOT1RFTVBUWV9USU1FT1VUID0gNTAwO1xuXG4gIGlmICh0eXBlb2YgZGlyICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignZGlyZWN0b3J5IHBhdGggcmVxdWlyZWQnKTtcbiAgfVxuXG4gIGlmIChjYiAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignY2FsbGJhY2sgbXVzdCBiZSBmdW5jdGlvbicpO1xuICB9XG5cbiAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgbGV0IGNhbGxlZCwgcmVzdWx0cztcblxuICBkb3dubG9hZEZpbGVVdGlsLmNoZWNrRm9yTG9jYWxGaWxlKGRpciwgZnVuY3Rpb24gZXhpc3RzQ2FsbGJhY2sgKGV4aXN0cykge1xuICAgIGlmICghZXhpc3RzKSB7XG4gICAgICByZXR1cm4gcmVtb3ZlRGlyQ2FsbGJhY2sobnVsbCk7XG4gICAgfVxuICAgIGZzLnN0YXQoZGlyLCBmdW5jdGlvbiBzdGF0Q2FsbGJhY2sgKGVyciwgc3RhdCkge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gcmVtb3ZlRGlyQ2FsbGJhY2soZXJyKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RhdC5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgIHJldHVybiBmcy51bmxpbmsoZGlyLCByZW1vdmVEaXJDYWxsYmFjayk7XG4gICAgICB9XG4gICAgICBmcy5yZWFkZGlyKGRpciwgcmVhZGRpckNhbGxiYWNrKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHJlYWRkaXJDYWxsYmFjayAoZXJyLCBmaWxlcykge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gcmVtb3ZlRGlyQ2FsbGJhY2soZXJyKTtcbiAgICAgIH1cblxuICAgICAgbGV0IG4gPSBmaWxlcy5sZW5ndGg7XG4gICAgICBpZiAobiA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZnMucm1kaXIoZGlyLCByZW1vdmVEaXJDYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIGZpbGVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmVtb3ZlRGlyKHBhdGgucmVzb2x2ZShkaXIsIG5hbWUpLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIHJlbW92ZURpckNhbGxiYWNrKGVycik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgtLW4gPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmcy5ybWRpcihkaXIsIHJlbW92ZURpckNhbGxiYWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICBmdW5jdGlvbiByZW1vdmVEaXJDYWxsYmFjayAoZXJyKSB7XG4gICAgaWYgKGVyciAmJiBlcnIuY29kZSA9PT0gXCJFTk9URU1QVFlcIikge1xuICAgICAgaWYgKEVOT1RFTVBUWV9hdHRlbXB0cyA8IEVOT1RFTVBUWV9tYXhBdHRlbXB0cykge1xuICAgICAgICBFTk9URU1QVFlfYXR0ZW1wdHMrKztcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVSUk9SIEVOT1RFTVBUWVwiLCBkaXIsIEVOT1RFTVBUWV9hdHRlbXB0cyk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJlbW92ZURpcihkaXIsIGNiLCBFTk9URU1QVFlfYXR0ZW1wdHMpO1xuICAgICAgICB9LCBFTk9URU1QVFlfVElNRU9VVCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVyciAmJiBlcnIuY29kZSA9PT0gJ0VOT0VOVCcpIHtcbiAgICAgIGFyZ3VtZW50c1swXSA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCFyZXN1bHRzKSB7XG4gICAgICByZXN1bHRzID0gYXJndW1lbnRzO1xuICAgIH1cbiAgICBpZiAoIWNiIHx8IGNhbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIGNiLmFwcGx5KHNlbGYsIHJlc3VsdHMpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVtb3ZlRGlyO1xuIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsInBhdGgiLCJkb3dubG9hZEZpbGVVdGlsIiwicmVtb3ZlRGlyIiwiZGlyIiwiY2IiLCJFTk9URU1QVFlfYXR0ZW1wdHMiLCJFTk9URU1QVFlfbWF4QXR0ZW1wdHMiLCJFTk9URU1QVFlfVElNRU9VVCIsIkVycm9yIiwidW5kZWZpbmVkIiwic2VsZiIsImNhbGxlZCIsInJlc3VsdHMiLCJjaGVja0ZvckxvY2FsRmlsZSIsImV4aXN0c0NhbGxiYWNrIiwiZXhpc3RzIiwicmVtb3ZlRGlyQ2FsbGJhY2siLCJzdGF0Iiwic3RhdENhbGxiYWNrIiwiZXJyIiwiaXNEaXJlY3RvcnkiLCJ1bmxpbmsiLCJyZWFkZGlyIiwicmVhZGRpckNhbGxiYWNrIiwiZmlsZXMiLCJuIiwibGVuZ3RoIiwicm1kaXIiLCJmb3JFYWNoIiwibmFtZSIsInJlc29sdmUiLCJjb2RlIiwiY29uc29sZSIsImVycm9yIiwic2V0VGltZW91dCIsImFyZ3VtZW50cyIsImFwcGx5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///943\n')},6744:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar _require = __webpack_require__(9526),\n  mkdirp = _require.mkdirp;\nvar fs = __webpack_require__(7147);\nvar path = __webpack_require__(1017);\nfunction saveFile(filePath, fileName, value, callback) {\n  mkdirp(filePath).then(function () {\n    var fileUrl = path.resolve(filePath + "/" + fileName);\n    fs.writeFile(fileUrl, value, "utf-8", callback);\n  }, function (error) {\n    callback(error);\n  });\n}\nmodule.exports = saveFile;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjc0NC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFBQSxRQUFBLEdBQWlCQyxtQkFBTyxDQUFDLElBQVEsQ0FBQztFQUEzQkMsTUFBTSxHQUFBRixRQUFBLENBQU5FLE1BQU07QUFDYixJQUFNQyxFQUFFLEdBQUdGLG1CQUFPLENBQUMsSUFBSSxDQUFDO0FBQ3hCLElBQU1HLElBQUksR0FBR0gsbUJBQU8sQ0FBQyxJQUFNLENBQUM7QUFFNUIsU0FBU0ksUUFBUUEsQ0FBRUMsUUFBUSxFQUFFQyxRQUFRLEVBQUVDLEtBQUssRUFBRUMsUUFBUSxFQUFFO0VBQ3REUCxNQUFNLENBQUNJLFFBQVEsQ0FBQyxDQUFDSSxJQUFJLENBQUMsWUFBWTtJQUNoQyxJQUFNQyxPQUFPLEdBQUdQLElBQUksQ0FBQ1EsT0FBTyxDQUFDTixRQUFRLEdBQUcsR0FBRyxHQUFHQyxRQUFRLENBQUM7SUFDdkRKLEVBQUUsQ0FBQ1UsU0FBUyxDQUFDRixPQUFPLEVBQUVILEtBQUssRUFBRSxPQUFPLEVBQUVDLFFBQVEsQ0FBQztFQUNqRCxDQUFDLEVBQUUsVUFBVUssS0FBSyxFQUFFO0lBQ2xCTCxRQUFRLENBQUNLLEtBQUssQ0FBQztFQUNqQixDQUFDLENBQUM7QUFDSjtBQUVBQyxNQUFNLENBQUNDLE9BQU8sR0FBR1gsUUFBUSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvdXRpbC9zYXZlLWZpbGUuanM/Yzk1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IHtta2RpcnB9ID0gcmVxdWlyZShcIm1rZGlycFwiKTtcbmNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuXG5mdW5jdGlvbiBzYXZlRmlsZSAoZmlsZVBhdGgsIGZpbGVOYW1lLCB2YWx1ZSwgY2FsbGJhY2spIHtcbiAgbWtkaXJwKGZpbGVQYXRoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBmaWxlVXJsID0gcGF0aC5yZXNvbHZlKGZpbGVQYXRoICsgXCIvXCIgKyBmaWxlTmFtZSk7XG4gICAgZnMud3JpdGVGaWxlKGZpbGVVcmwsIHZhbHVlLCBcInV0Zi04XCIsIGNhbGxiYWNrKTtcbiAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgY2FsbGJhY2soZXJyb3IpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzYXZlRmlsZTtcbiJdLCJuYW1lcyI6WyJfcmVxdWlyZSIsInJlcXVpcmUiLCJta2RpcnAiLCJmcyIsInBhdGgiLCJzYXZlRmlsZSIsImZpbGVQYXRoIiwiZmlsZU5hbWUiLCJ2YWx1ZSIsImNhbGxiYWNrIiwidGhlbiIsImZpbGVVcmwiLCJyZXNvbHZlIiwid3JpdGVGaWxlIiwiZXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6744\n')},4576:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nvar FlakeIdGen = __webpack_require__(1759);\nvar intFormat = __webpack_require__(1637);\nvar generator = new FlakeIdGen();\nvar SnowflakeId = function () {\n  function SnowflakeId() {}\n  SnowflakeId.getUUID = function () {\n    var id1 = generator.next();\n    var id3 = intFormat(id1, 'dec');\n    return id3;\n  };\n  return SnowflakeId;\n}();\nexports.SnowflakeId = SnowflakeId;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDU3Ni5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxVQUFVLEdBQUdDLG1CQUFPLENBQUMsSUFBYSxDQUFDO0FBQ3pDLElBQU1DLFNBQVMsR0FBR0QsbUJBQU8sQ0FBQyxJQUFnQixDQUFDO0FBQzNDLElBQU1FLFNBQVMsR0FBRyxJQUFJSCxVQUFVLENBQUQsQ0FBQztBQUNoQyxJQUFNSSxXQUFXLEdBQUksWUFBWTtFQUMvQixTQUFTQSxXQUFXQSxDQUFBLEVBQUksQ0FDeEI7RUFFQUEsV0FBVyxDQUFDQyxPQUFPLEdBQUcsWUFBWTtJQUNoQyxJQUFNQyxHQUFHLEdBQUdILFNBQVMsQ0FBQ0ksSUFBSSxDQUFDLENBQUM7SUFDNUIsSUFBTUMsR0FBRyxHQUFHTixTQUFTLENBQUNJLEdBQUcsRUFBRSxLQUFLLENBQUM7SUFDakMsT0FBT0UsR0FBRztFQUNaLENBQUM7RUFDRCxPQUFPSixXQUFXO0FBQ3BCLENBQUMsQ0FBQyxDQUFFO0FBQ0pLLG1CQUFtQixHQUFHTCxXQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS91dGlsL3Nub3dmbGFrZS1pZC5qcz9iNjM1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgRmxha2VJZEdlbiA9IHJlcXVpcmUoJ2ZsYWtlLWlkZ2VuJyk7XG5jb25zdCBpbnRGb3JtYXQgPSByZXF1aXJlKCdiaWd1aW50LWZvcm1hdCcpO1xuY29uc3QgZ2VuZXJhdG9yID0gbmV3IEZsYWtlSWRHZW47XG5jb25zdCBTbm93Zmxha2VJZCA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNub3dmbGFrZUlkICgpIHtcbiAgfVxuXG4gIFNub3dmbGFrZUlkLmdldFVVSUQgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgaWQxID0gZ2VuZXJhdG9yLm5leHQoKTtcbiAgICBjb25zdCBpZDMgPSBpbnRGb3JtYXQoaWQxLCAnZGVjJyk7XG4gICAgcmV0dXJuIGlkMztcbiAgfTtcbiAgcmV0dXJuIFNub3dmbGFrZUlkO1xufSgpKTtcbmV4cG9ydHMuU25vd2ZsYWtlSWQgPSBTbm93Zmxha2VJZDtcbiJdLCJuYW1lcyI6WyJGbGFrZUlkR2VuIiwicmVxdWlyZSIsImludEZvcm1hdCIsImdlbmVyYXRvciIsIlNub3dmbGFrZUlkIiwiZ2V0VVVJRCIsImlkMSIsIm5leHQiLCJpZDMiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4576\n")},3575:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar Storage = __webpack_require__(6351);\nvar createBridgeMethods = __webpack_require__(9273);\n\n/**\n * @param {DownloadsStorageController} parent - reference to parent object\n * @param {string} storageKey - storage key\n * @constructor\n */\nfunction StorageBridge(parent, storageKey) {\n  this._parent = parent;\n  this._storageKey = storageKey;\n  createBridgeMethods(this, Storage);\n}\nmodule.exports = StorageBridge;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU3NS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxPQUFPLEdBQUdDLG1CQUFPLENBQUMsSUFBVyxDQUFDO0FBQ3BDLElBQU1DLG1CQUFtQixHQUFHRCxtQkFBTyxDQUFDLElBQXlCLENBQUM7O0FBRTlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSxhQUFhQSxDQUFFQyxNQUFNLEVBQUVDLFVBQVUsRUFBRTtFQUMxQyxJQUFJLENBQUNDLE9BQU8sR0FBR0YsTUFBTTtFQUNyQixJQUFJLENBQUNHLFdBQVcsR0FBR0YsVUFBVTtFQUM3QkgsbUJBQW1CLENBQUMsSUFBSSxFQUFFRixPQUFPLENBQUM7QUFDcEM7QUFFQVEsTUFBTSxDQUFDQyxPQUFPLEdBQUdOLGFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3V0aWwvc3RvcmFnZS1icmlkZ2UuanM/NWExZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFN0b3JhZ2UgPSByZXF1aXJlKFwiLi9zdG9yYWdlXCIpO1xuY29uc3QgY3JlYXRlQnJpZGdlTWV0aG9kcyA9IHJlcXVpcmUoXCIuL2NyZWF0ZS1icmlkZ2UtbWV0aG9kc1wiKTtcblxuLyoqXG4gKiBAcGFyYW0ge0Rvd25sb2Fkc1N0b3JhZ2VDb250cm9sbGVyfSBwYXJlbnQgLSByZWZlcmVuY2UgdG8gcGFyZW50IG9iamVjdFxuICogQHBhcmFtIHtzdHJpbmd9IHN0b3JhZ2VLZXkgLSBzdG9yYWdlIGtleVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFN0b3JhZ2VCcmlkZ2UgKHBhcmVudCwgc3RvcmFnZUtleSkge1xuICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuX3N0b3JhZ2VLZXkgPSBzdG9yYWdlS2V5O1xuICBjcmVhdGVCcmlkZ2VNZXRob2RzKHRoaXMsIFN0b3JhZ2UpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0b3JhZ2VCcmlkZ2U7Il0sIm5hbWVzIjpbIlN0b3JhZ2UiLCJyZXF1aXJlIiwiY3JlYXRlQnJpZGdlTWV0aG9kcyIsIlN0b3JhZ2VCcmlkZ2UiLCJwYXJlbnQiLCJzdG9yYWdlS2V5IiwiX3BhcmVudCIsIl9zdG9yYWdlS2V5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3575\n")},6351:module=>{"use strict";eval('\n\n/**\n *\n * @constructor\n */\nfunction Storage() {\n  this._items = {};\n}\n\n/**\n * @returns {void}\n */\nStorage.prototype.clear = function () {\n  this._items = {};\n};\n\n/**\n * @returns {number} number of items\n */\nStorage.prototype.count = function () {\n  return this.getKeys().length;\n};\n\n/**\n * @param {string} id - item identifier\n * @returns {void}\n */\nStorage.prototype.decrease = function (id) {\n  if (typeof this._items[id] !== "number") {\n    this._items[id] = 0;\n  }\n  this._items[id]--;\n};\n\n/**\n * @param {string} id - item identifier\n * @returns {object} item\n */\nStorage.prototype.getItem = function (id) {\n  return this._items[id];\n};\n\n/**\n * @returns {object} items\n */\nStorage.prototype.getItems = function () {\n  return this._items;\n};\n\n/**\n * @returns {string[]} keys of all items\n */\nStorage.prototype.getKeys = function () {\n  return Object.keys(this._items);\n};\n\n/**\n * @param {string} id - item identifier\n * @returns {void}\n */\nStorage.prototype.increase = function (id) {\n  if (typeof this._items[id] !== "number") {\n    this._items[id] = 0;\n  }\n  this._items[id]++;\n};\n\n/**\n * @param {string} id - item identifier\n * @returns {void}\n */\nStorage.prototype.removeItem = function (id) {\n  delete this._items[id];\n};\n\n/**\n *\n * @param {string} id - item identifier\n * @param {object} item - item to be saved\n * @returns {void}\n */\nStorage.prototype.setItem = function (id, item) {\n  this._items[id] = item;\n};\n\n/**\n *\n * @param {object} items - items to be saved\n * @returns {void}\n */\nStorage.prototype.setItems = function (items) {\n  for (var key in items) {\n    if (items.hasOwnProperty(key)) {\n      this.setItem(key, items[key]);\n    }\n  }\n};\nmodule.exports = Storage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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b3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL3V0aWwvc3RvcmFnZS5qcz80YmFiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gU3RvcmFnZSAoKSB7XG4gIHRoaXMuX2l0ZW1zID0ge307XG59XG5cbi8qKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblN0b3JhZ2UucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9pdGVtcyA9IHt9O1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBudW1iZXIgb2YgaXRlbXNcbiAqL1xuU3RvcmFnZS5wcm90b3R5cGUuY291bnQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmdldEtleXMoKS5sZW5ndGg7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIGl0ZW0gaWRlbnRpZmllclxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblN0b3JhZ2UucHJvdG90eXBlLmRlY3JlYXNlID0gZnVuY3Rpb24gKGlkKSB7XG4gIGlmICh0eXBlb2YgdGhpcy5faXRlbXNbaWRdICE9PSBcIm51bWJlclwiKSB7XG4gICAgdGhpcy5faXRlbXNbaWRdID0gMDtcbiAgfVxuICB0aGlzLl9pdGVtc1tpZF0tLTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIC0gaXRlbSBpZGVudGlmaWVyXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBpdGVtXG4gKi9cblN0b3JhZ2UucHJvdG90eXBlLmdldEl0ZW0gPSBmdW5jdGlvbiAoaWQpIHtcbiAgcmV0dXJuIHRoaXMuX2l0ZW1zW2lkXTtcbn07XG5cbi8qKlxuICogQHJldHVybnMge29iamVjdH0gaXRlbXNcbiAqL1xuU3RvcmFnZS5wcm90b3R5cGUuZ2V0SXRlbXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9pdGVtcztcbn07XG5cbi8qKlxuICogQHJldHVybnMge3N0cmluZ1tdfSBrZXlzIG9mIGFsbCBpdGVtc1xuICovXG5TdG9yYWdlLnByb3RvdHlwZS5nZXRLZXlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5faXRlbXMpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBpdGVtIGlkZW50aWZpZXJcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5TdG9yYWdlLnByb3RvdHlwZS5pbmNyZWFzZSA9IGZ1bmN0aW9uIChpZCkge1xuICBpZiAodHlwZW9mIHRoaXMuX2l0ZW1zW2lkXSAhPT0gXCJudW1iZXJcIikge1xuICAgIHRoaXMuX2l0ZW1zW2lkXSA9IDA7XG4gIH1cbiAgdGhpcy5faXRlbXNbaWRdKys7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIGl0ZW0gaWRlbnRpZmllclxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblN0b3JhZ2UucHJvdG90eXBlLnJlbW92ZUl0ZW0gPSBmdW5jdGlvbiAoaWQpIHtcbiAgZGVsZXRlIHRoaXMuX2l0ZW1zW2lkXTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIGl0ZW0gaWRlbnRpZmllclxuICogQHBhcmFtIHtvYmplY3R9IGl0ZW0gLSBpdGVtIHRvIGJlIHNhdmVkXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuU3RvcmFnZS5wcm90b3R5cGUuc2V0SXRlbSA9IGZ1bmN0aW9uIChpZCwgaXRlbSkge1xuICB0aGlzLl9pdGVtc1tpZF0gPSBpdGVtO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGl0ZW1zIC0gaXRlbXMgdG8gYmUgc2F2ZWRcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5TdG9yYWdlLnByb3RvdHlwZS5zZXRJdGVtcyA9IGZ1bmN0aW9uIChpdGVtcykge1xuICBmb3IgKGxldCBrZXkgaW4gaXRlbXMpIHtcbiAgICBpZiAoaXRlbXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgdGhpcy5zZXRJdGVtKGtleSwgaXRlbXNba2V5XSlcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3RvcmFnZTsiXSwibmFtZXMiOlsiU3RvcmFnZSIsIl9pdGVtcyIsInByb3RvdHlwZSIsImNsZWFyIiwiY291bnQiLCJnZXRLZXlzIiwibGVuZ3RoIiwiZGVjcmVhc2UiLCJpZCIsImdldEl0ZW0iLCJnZXRJdGVtcyIsIk9iamVjdCIsImtleXMiLCJpbmNyZWFzZSIsInJlbW92ZUl0ZW0iLCJzZXRJdGVtIiwiaXRlbSIsInNldEl0ZW1zIiwiaXRlbXMiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6351\n')},2595:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar Snowflake = __webpack_require__(4576);\nvar _ = __webpack_require__(4952);\n\n/**\n *\n * @param {function} process - function to get the result from\n * @param {function} callback - callback to be invoked when "process" function returns anything\n * @param {number} target - window target id\n * @param {string} manifestId - manifest identifier\n * @param {number} time - time in miliseconds how often the callback should be invoked\n * @param {boolean} onceOnly - if set to true the callback will be invoked once only and subsriber will be removed\n * @constructor\n */\nfunction Subscriber(process, callback, target, manifestId, time, onceOnly) {\n  this._process = process;\n  this._callback = callback;\n  this._manifestId = manifestId;\n  this._id = String(Snowflake.SnowflakeId.getUUID());\n  this._onceOnly = onceOnly;\n  this._target = target;\n  this.onInterval = function () {\n    var result = this._process();\n    var self = this;\n    if (result) {\n      if (this._onceOnly) {\n        this.remove();\n        if (typeof this._callbackOnFinish === "function") {\n          this._callbackOnFinish(function (err, result) {\n            self._callback(self._id, err, result, self._target, true);\n          });\n        } else {\n          this._callback(this._id, null, result, self._target);\n        }\n      } else {\n        this._callback(this._id, null, result, self._target);\n      }\n    }\n  };\n  _.bindAll(this, "onInterval");\n  this._intervalTimer = setInterval(this.onInterval, time);\n}\n\n/**\n *\n * @returns {string} - subscriber identifier\n */\nSubscriber.prototype.getId = function () {\n  return this._id;\n};\n\n/**\n *\n * @returns {string} - manifest identifier\n */\nSubscriber.prototype.getManifestId = function () {\n  return this._manifestId;\n};\n\n/**\n * @param {function} callback - function to be invoked when "process" function returns anything\n * and when "onceOnly" is set to true\n * @returns {void}\n */\nSubscriber.prototype.onFinish = function (callback) {\n  this._callbackOnFinish = callback;\n};\n\n/**\n * @returns {void}\n */\nSubscriber.prototype.remove = function () {\n  clearInterval(this._intervalTimer);\n};\nmodule.exports = Subscriber;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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azovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvdXRpbC9zdWJzY3JpYmVyLmpzPzI1MzciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBTbm93Zmxha2UgPSByZXF1aXJlKFwiLi9zbm93Zmxha2UtaWRcIik7XG5jb25zdCBfID0gcmVxdWlyZShcInVuZGVyc2NvcmVcIik7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHByb2Nlc3MgLSBmdW5jdGlvbiB0byBnZXQgdGhlIHJlc3VsdCBmcm9tXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgd2hlbiBcInByb2Nlc3NcIiBmdW5jdGlvbiByZXR1cm5zIGFueXRoaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gdGFyZ2V0IC0gd2luZG93IHRhcmdldCBpZFxuICogQHBhcmFtIHtzdHJpbmd9IG1hbmlmZXN0SWQgLSBtYW5pZmVzdCBpZGVudGlmaWVyXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZSAtIHRpbWUgaW4gbWlsaXNlY29uZHMgaG93IG9mdGVuIHRoZSBjYWxsYmFjayBzaG91bGQgYmUgaW52b2tlZFxuICogQHBhcmFtIHtib29sZWFufSBvbmNlT25seSAtIGlmIHNldCB0byB0cnVlIHRoZSBjYWxsYmFjayB3aWxsIGJlIGludm9rZWQgb25jZSBvbmx5IGFuZCBzdWJzcmliZXIgd2lsbCBiZSByZW1vdmVkXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gU3Vic2NyaWJlciAocHJvY2VzcywgY2FsbGJhY2ssIHRhcmdldCwgbWFuaWZlc3RJZCwgdGltZSwgb25jZU9ubHkpIHtcbiAgdGhpcy5fcHJvY2VzcyA9IHByb2Nlc3M7XG4gIHRoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7XG4gIHRoaXMuX21hbmlmZXN0SWQgPSBtYW5pZmVzdElkO1xuICB0aGlzLl9pZCA9IFN0cmluZyhTbm93Zmxha2UuU25vd2ZsYWtlSWQuZ2V0VVVJRCgpKTtcbiAgdGhpcy5fb25jZU9ubHkgPSBvbmNlT25seTtcbiAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0O1xuICB0aGlzLm9uSW50ZXJ2YWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fcHJvY2VzcygpO1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIGlmICh0aGlzLl9vbmNlT25seSkge1xuICAgICAgICB0aGlzLnJlbW92ZSgpO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2NhbGxiYWNrT25GaW5pc2ggPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHRoaXMuX2NhbGxiYWNrT25GaW5pc2goZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7XG4gICAgICAgICAgICBzZWxmLl9jYWxsYmFjayhzZWxmLl9pZCwgZXJyLCByZXN1bHQsIHNlbGYuX3RhcmdldCwgdHJ1ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fY2FsbGJhY2sodGhpcy5faWQsIG51bGwsIHJlc3VsdCwgc2VsZi5fdGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fY2FsbGJhY2sodGhpcy5faWQsIG51bGwsIHJlc3VsdCwgc2VsZi5fdGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIF8uYmluZEFsbCh0aGlzLCBcIm9uSW50ZXJ2YWxcIik7XG4gIHRoaXMuX2ludGVydmFsVGltZXIgPSBzZXRJbnRlcnZhbCh0aGlzLm9uSW50ZXJ2YWwsIHRpbWUpO1xufVxuXG4vKipcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIHN1YnNjcmliZXIgaWRlbnRpZmllclxuICovXG5TdWJzY3JpYmVyLnByb3RvdHlwZS5nZXRJZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2lkO1xufTtcblxuLyoqXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gLSBtYW5pZmVzdCBpZGVudGlmaWVyXG4gKi9cblN1YnNjcmliZXIucHJvdG90eXBlLmdldE1hbmlmZXN0SWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9tYW5pZmVzdElkO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGZ1bmN0aW9uIHRvIGJlIGludm9rZWQgd2hlbiBcInByb2Nlc3NcIiBmdW5jdGlvbiByZXR1cm5zIGFueXRoaW5nXG4gKiBhbmQgd2hlbiBcIm9uY2VPbmx5XCIgaXMgc2V0IHRvIHRydWVcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5TdWJzY3JpYmVyLnByb3RvdHlwZS5vbkZpbmlzaCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB0aGlzLl9jYWxsYmFja09uRmluaXNoID0gY2FsbGJhY2s7XG59O1xuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5TdWJzY3JpYmVyLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWxUaW1lcik7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN1YnNjcmliZXI7Il0sIm5hbWVzIjpbIlNub3dmbGFrZSIsInJlcXVpcmUiLCJfIiwiU3Vic2NyaWJlciIsInByb2Nlc3MiLCJjYWxsYmFjayIsInRhcmdldCIsIm1hbmlmZXN0SWQiLCJ0aW1lIiwib25jZU9ubHkiLCJfcHJvY2VzcyIsIl9jYWxsYmFjayIsIl9tYW5pZmVzdElkIiwiX2lkIiwiU3RyaW5nIiwiU25vd2ZsYWtlSWQiLCJnZXRVVUlEIiwiX29uY2VPbmx5IiwiX3RhcmdldCIsIm9uSW50ZXJ2YWwiLCJyZXN1bHQiLCJzZWxmIiwicmVtb3ZlIiwiX2NhbGxiYWNrT25GaW5pc2giLCJlcnIiLCJiaW5kQWxsIiwiX2ludGVydmFsVGltZXIiLCJzZXRJbnRlcnZhbCIsInByb3RvdHlwZSIsImdldElkIiwiZ2V0TWFuaWZlc3RJZCIsIm9uRmluaXNoIiwiY2xlYXJJbnRlcnZhbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2595\n')},8167:module=>{"use strict";eval('\n\nfunction join() {\n  var pathString = "",\n    arg;\n  for (var i = 0, j = arguments.length; i < j; i++) {\n    arg = arguments[i].replace(/^\\.\\//g, "/");\n    // don\'t add to the last one\n    pathString += arg;\n    if (i < j - 1) {\n      pathString += "/";\n    }\n  }\n  pathString = pathString.replace(/\\/{2,}/g, "/");\n  pathString = pathString.replace("https:/", "https://");\n  pathString = pathString.replace("http:/", "http://");\n  pathString = pathString.replace("file:/", "file://");\n  return pathString;\n}\nfunction joinPath() {\n  return join.apply(null, arguments) + "/";\n}\nfunction joinPathWithFile() {\n  return join.apply(null, arguments);\n}\nmodule.exports = {\n  joinPath: joinPath,\n  joinPathWithFile: joinPathWithFile\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODE2Ny5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixTQUFTQSxJQUFJQSxDQUFBLEVBQUk7RUFDZixJQUFJQyxVQUFVLEdBQUcsRUFBRTtJQUFFQyxHQUFHO0VBQ3hCLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUMsQ0FBQyxHQUFHQyxTQUFTLENBQUNDLE1BQU0sRUFBRUgsQ0FBQyxHQUFHQyxDQUFDLEVBQUVELENBQUMsRUFBRSxFQUFFO0lBQ2hERCxHQUFHLEdBQUdHLFNBQVMsQ0FBQ0YsQ0FBQyxDQUFDLENBQUNJLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDO0lBQ3pDO0lBQ0FOLFVBQVUsSUFBSUMsR0FBRztJQUNqQixJQUFJQyxDQUFDLEdBQUdDLENBQUMsR0FBRyxDQUFDLEVBQUU7TUFDYkgsVUFBVSxJQUFJLEdBQUc7SUFDbkI7RUFDRjtFQUNBQSxVQUFVLEdBQUdBLFVBQVUsQ0FBQ00sT0FBTyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUM7RUFDL0NOLFVBQVUsR0FBR0EsVUFBVSxDQUFDTSxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQztFQUN0RE4sVUFBVSxHQUFHQSxVQUFVLENBQUNNLE9BQU8sQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDO0VBQ3BETixVQUFVLEdBQUdBLFVBQVUsQ0FBQ00sT0FBTyxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7RUFDcEQsT0FBT04sVUFBVTtBQUNuQjtBQUVBLFNBQVNPLFFBQVFBLENBQUEsRUFBSTtFQUNuQixPQUFPUixJQUFJLENBQUNTLEtBQUssQ0FBQyxJQUFJLEVBQUVKLFNBQVMsQ0FBQyxHQUFHLEdBQUc7QUFDMUM7QUFFQSxTQUFTSyxnQkFBZ0JBLENBQUEsRUFBSTtFQUMzQixPQUFPVixJQUFJLENBQUNTLEtBQUssQ0FBQyxJQUFJLEVBQUVKLFNBQVMsQ0FBQztBQUNwQztBQUVBTSxNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNmSixRQUFRLEVBQUVBLFFBQVE7RUFDbEJFLGdCQUFnQixFQUFFQTtBQUNwQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS91dGlsL3VybC5qcz81YWQ4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBqb2luICgpIHtcbiAgbGV0IHBhdGhTdHJpbmcgPSBcIlwiLCBhcmc7XG4gIGZvciAobGV0IGkgPSAwLCBqID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgIGFyZyA9IGFyZ3VtZW50c1tpXS5yZXBsYWNlKC9eXFwuXFwvL2csIFwiL1wiKTtcbiAgICAvLyBkb24ndCBhZGQgdG8gdGhlIGxhc3Qgb25lXG4gICAgcGF0aFN0cmluZyArPSBhcmc7XG4gICAgaWYgKGkgPCBqIC0gMSkge1xuICAgICAgcGF0aFN0cmluZyArPSBcIi9cIjtcbiAgICB9XG4gIH1cbiAgcGF0aFN0cmluZyA9IHBhdGhTdHJpbmcucmVwbGFjZSgvXFwvezIsfS9nLCBcIi9cIik7XG4gIHBhdGhTdHJpbmcgPSBwYXRoU3RyaW5nLnJlcGxhY2UoXCJodHRwczovXCIsIFwiaHR0cHM6Ly9cIik7XG4gIHBhdGhTdHJpbmcgPSBwYXRoU3RyaW5nLnJlcGxhY2UoXCJodHRwOi9cIiwgXCJodHRwOi8vXCIpO1xuICBwYXRoU3RyaW5nID0gcGF0aFN0cmluZy5yZXBsYWNlKFwiZmlsZTovXCIsIFwiZmlsZTovL1wiKTtcbiAgcmV0dXJuIHBhdGhTdHJpbmc7XG59XG5cbmZ1bmN0aW9uIGpvaW5QYXRoICgpIHtcbiAgcmV0dXJuIGpvaW4uYXBwbHkobnVsbCwgYXJndW1lbnRzKSArIFwiL1wiO1xufVxuXG5mdW5jdGlvbiBqb2luUGF0aFdpdGhGaWxlICgpIHtcbiAgcmV0dXJuIGpvaW4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGpvaW5QYXRoOiBqb2luUGF0aCxcbiAgam9pblBhdGhXaXRoRmlsZTogam9pblBhdGhXaXRoRmlsZVxufTtcbiJdLCJuYW1lcyI6WyJqb2luIiwicGF0aFN0cmluZyIsImFyZyIsImkiLCJqIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwicmVwbGFjZSIsImpvaW5QYXRoIiwiYXBwbHkiLCJqb2luUGF0aFdpdGhGaWxlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8167\n')},7074:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nvar ZeroPadding = function () {\n  function ZeroPadding() {}\n  ZeroPadding.addPadding = function (num, howManyZeros) {\n    var result;\n    var numArr = num.toString().split('');\n    while (numArr.length < howManyZeros) {\n      numArr.unshift('0');\n    }\n    result = numArr.join('');\n    return result;\n  };\n  ZeroPadding.getPaddingAmount = function (inputStr) {\n    var startIndex = inputStr.indexOf('%');\n    var endIndex = inputStr.lastIndexOf('$');\n    var numPadding = parseInt(inputStr.substring(startIndex + 1, endIndex - 1));\n    numPadding = isNaN(numPadding) ? 0 : numPadding;\n    return numPadding;\n  };\n  return ZeroPadding;\n}();\nexports.ZeroPadding = ZeroPadding;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzA3NC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxXQUFXLEdBQUksWUFBWTtFQUMvQixTQUFTQSxXQUFXQSxDQUFBLEVBQUksQ0FDeEI7RUFFQUEsV0FBVyxDQUFDQyxVQUFVLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxZQUFZLEVBQUU7SUFDcEQsSUFBSUMsTUFBTTtJQUNWLElBQU1DLE1BQU0sR0FBR0gsR0FBRyxDQUFDSSxRQUFRLENBQUMsQ0FBQyxDQUFDQyxLQUFLLENBQUMsRUFBRSxDQUFDO0lBQ3ZDLE9BQU9GLE1BQU0sQ0FBQ0csTUFBTSxHQUFHTCxZQUFZLEVBQUU7TUFDbkNFLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUNyQjtJQUNBTCxNQUFNLEdBQUdDLE1BQU0sQ0FBQ0ssSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUN4QixPQUFPTixNQUFNO0VBQ2YsQ0FBQztFQUNESixXQUFXLENBQUNXLGdCQUFnQixHQUFHLFVBQVVDLFFBQVEsRUFBRTtJQUNqRCxJQUFNQyxVQUFVLEdBQUdELFFBQVEsQ0FBQ0UsT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUN4QyxJQUFNQyxRQUFRLEdBQUdILFFBQVEsQ0FBQ0ksV0FBVyxDQUFDLEdBQUcsQ0FBQztJQUMxQyxJQUFJQyxVQUFVLEdBQUdDLFFBQVEsQ0FBQ04sUUFBUSxDQUFDTyxTQUFTLENBQUNOLFVBQVUsR0FBRyxDQUFDLEVBQUVFLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMzRUUsVUFBVSxHQUFJRyxLQUFLLENBQUNILFVBQVUsQ0FBQyxHQUFJLENBQUMsR0FBR0EsVUFBVTtJQUNqRCxPQUFPQSxVQUFVO0VBQ25CLENBQUM7RUFDRCxPQUFPakIsV0FBVztBQUNwQixDQUFDLENBQUMsQ0FBRTtBQUNKcUIsbUJBQW1CLEdBQUdyQixXQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG93bnN0cmVhbS1lbGVjdHJvbi8uL2FwaS91dGlsL3plcm8tcGFkZGluZy5qcz9kMjk0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgWmVyb1BhZGRpbmcgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBaZXJvUGFkZGluZyAoKSB7XG4gIH1cblxuICBaZXJvUGFkZGluZy5hZGRQYWRkaW5nID0gZnVuY3Rpb24gKG51bSwgaG93TWFueVplcm9zKSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBjb25zdCBudW1BcnIgPSBudW0udG9TdHJpbmcoKS5zcGxpdCgnJyk7XG4gICAgd2hpbGUgKG51bUFyci5sZW5ndGggPCBob3dNYW55WmVyb3MpIHtcbiAgICAgIG51bUFyci51bnNoaWZ0KCcwJyk7XG4gICAgfVxuICAgIHJlc3VsdCA9IG51bUFyci5qb2luKCcnKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBaZXJvUGFkZGluZy5nZXRQYWRkaW5nQW1vdW50ID0gZnVuY3Rpb24gKGlucHV0U3RyKSB7XG4gICAgY29uc3Qgc3RhcnRJbmRleCA9IGlucHV0U3RyLmluZGV4T2YoJyUnKTtcbiAgICBjb25zdCBlbmRJbmRleCA9IGlucHV0U3RyLmxhc3RJbmRleE9mKCckJyk7XG4gICAgbGV0IG51bVBhZGRpbmcgPSBwYXJzZUludChpbnB1dFN0ci5zdWJzdHJpbmcoc3RhcnRJbmRleCArIDEsIGVuZEluZGV4IC0gMSkpO1xuICAgIG51bVBhZGRpbmcgPSAoaXNOYU4obnVtUGFkZGluZykpID8gMCA6IG51bVBhZGRpbmc7XG4gICAgcmV0dXJuIG51bVBhZGRpbmc7XG4gIH07XG4gIHJldHVybiBaZXJvUGFkZGluZztcbn0oKSk7XG5leHBvcnRzLlplcm9QYWRkaW5nID0gWmVyb1BhZGRpbmc7XG4iXSwibmFtZXMiOlsiWmVyb1BhZGRpbmciLCJhZGRQYWRkaW5nIiwibnVtIiwiaG93TWFueVplcm9zIiwicmVzdWx0IiwibnVtQXJyIiwidG9TdHJpbmciLCJzcGxpdCIsImxlbmd0aCIsInVuc2hpZnQiLCJqb2luIiwiZ2V0UGFkZGluZ0Ftb3VudCIsImlucHV0U3RyIiwic3RhcnRJbmRleCIsImluZGV4T2YiLCJlbmRJbmRleCIsImxhc3RJbmRleE9mIiwibnVtUGFkZGluZyIsInBhcnNlSW50Iiwic3Vic3RyaW5nIiwiaXNOYU4iLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7074\n")}},__webpack_module_cache__={};function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.exports}var __webpack_exports__=__webpack_require__(1630);return __webpack_exports__})()));