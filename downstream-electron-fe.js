/*! For license information please see downstream-electron-fe.js.LICENSE.txt */
!function(Q,U){if("object"==typeof exports&&"object"==typeof module)module.exports=U(require("@electron/remote"),require("electron"));else if("function"==typeof define&&define.amd)define(["@electron/remote","electron"],U);else{var F="object"==typeof exports?U(require("@electron/remote"),require("electron")):U(Q["@electron/remote"],Q.electron);for(var B in F)("object"==typeof exports?exports:Q)[B]=F[B]}}(global,((__WEBPACK_EXTERNAL_MODULE__7911__,__WEBPACK_EXTERNAL_MODULE__7194__)=>(()=>{"use strict";var __webpack_modules__={7911:Q=>{Q.exports=__WEBPACK_EXTERNAL_MODULE__7911__},7194:Q=>{Q.exports=__WEBPACK_EXTERNAL_MODULE__7194__},3740:module=>{eval("\n\nvar codes = {\n  GENERAL: -1,\n  ERRORS: {\n    INTERNAL_ERROR: 1,\n    BROKEN: 11,\n    FINISHED: 12,\n    UNFINISHED: 13,\n    STOPPED: 14,\n    CREATED: 15,\n    MISSING: 16,\n    RESUMED: 17,\n    STARTED: 18,\n    LOADING: 19,\n    REMOVED: 20,\n    INFO: 21,\n    EXISTS: 22,\n    NOT_FOUND: 100\n  }\n};\nmodule.exports = codes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc0MC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFNQSxLQUFLLEdBQUc7RUFDWkMsT0FBTyxFQUFFLENBQUMsQ0FBQztFQUNYQyxNQUFNLEVBQUU7SUFDTkMsY0FBYyxFQUFFLENBQUM7SUFDakJDLE1BQU0sRUFBRSxFQUFFO0lBQ1ZDLFFBQVEsRUFBRSxFQUFFO0lBQ1pDLFVBQVUsRUFBRSxFQUFFO0lBQ2RDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLE9BQU8sRUFBRSxFQUFFO0lBQ1hDLElBQUksRUFBRSxFQUFFO0lBQ1JDLE1BQU0sRUFBRSxFQUFFO0lBQ1ZDLFNBQVMsRUFBRTtFQUNiO0FBQ0YsQ0FBQztBQUNEQyxNQUFNLENBQUNDLE9BQU8sR0FBR2xCLEtBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb3duc3RyZWFtLWVsZWN0cm9uLy4vYXBpL2Rvd25sb2Fkcy9jb2Rlcy5qcz84ZWMwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgY29kZXMgPSB7XG4gIEdFTkVSQUw6IC0xLFxuICBFUlJPUlM6IHtcbiAgICBJTlRFUk5BTF9FUlJPUjogMSxcbiAgICBCUk9LRU46IDExLFxuICAgIEZJTklTSEVEOiAxMixcbiAgICBVTkZJTklTSEVEOiAxMyxcbiAgICBTVE9QUEVEOiAxNCxcbiAgICBDUkVBVEVEOiAxNSxcbiAgICBNSVNTSU5HOiAxNixcbiAgICBSRVNVTUVEOiAxNyxcbiAgICBTVEFSVEVEOiAxOCxcbiAgICBMT0FESU5HOiAxOSxcbiAgICBSRU1PVkVEOiAyMCxcbiAgICBJTkZPOiAyMSxcbiAgICBFWElTVFM6IDIyLFxuICAgIE5PVF9GT1VORDogMTAwLFxuICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBjb2RlcztcblxuIl0sIm5hbWVzIjpbImNvZGVzIiwiR0VORVJBTCIsIkVSUk9SUyIsIklOVEVSTkFMX0VSUk9SIiwiQlJPS0VOIiwiRklOSVNIRUQiLCJVTkZJTklTSEVEIiwiU1RPUFBFRCIsIkNSRUFURUQiLCJNSVNTSU5HIiwiUkVTVU1FRCIsIlNUQVJURUQiLCJMT0FESU5HIiwiUkVNT1ZFRCIsIklORk8iLCJFWElTVFMiLCJOT1RfRk9VTkQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3740\n")},5434:(module,__unused_webpack_exports,__webpack_require__)=>{eval("/*eslint no-console: [\"error\", { allow: [\"warn\", \"error\", \"info\"] }] */\n\n\nvar WIDEVINE_SCHEME_ID_URI = 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\nvar ipcRenderer = (__webpack_require__(7194).ipcRenderer);\nvar translation = __webpack_require__(5847);\nvar downstreamElectronFE;\nfunction serialize(obj) {\n  return JSON.stringify(obj);\n}\nfunction getWidevinePSSH(info) {\n  var manifestProtections = info.manifestInfo.protections;\n  var videoRepresentation = manifestProtections.video[0] || {};\n  if (manifestProtections.video && info.manifest.video) {\n    videoRepresentation = manifestProtections.video.filter(function (manifestProtection) {\n      return info.manifest.video.indexOf(manifestProtection.id) >= 0;\n    });\n    videoRepresentation = videoRepresentation[0] || {};\n  }\n  var protections = videoRepresentation.protections || [];\n  var widevinePSSH;\n  for (var i = 0, j = protections.length; i < j; i++) {\n    if (protections[i].schemeIdUri === WIDEVINE_SCHEME_ID_URI) {\n      widevinePSSH = protections[i].cencPSSH;\n      break;\n    }\n  }\n  return widevinePSSH;\n}\nfunction bind(scope, f) {\n  return function bindF() {\n    f.apply(scope, arguments);\n  };\n}\nfunction bindAll(scope) {\n  for (var i = 1, j = arguments.length; i < j; i++) {\n    var fName = arguments[i];\n    scope[fName] = bind(scope, scope[fName]);\n  }\n}\nfunction clonePersistentConfig(config) {\n  // deep clone the config\n  var clonedConfig = JSON.parse(JSON.stringify(config));\n  if (typeof config.serverCertificate !== 'undefined') {\n    clonedConfig.serverCertificate = config.serverCertificate;\n  }\n  if (typeof config.licenseRequest === 'function') {\n    clonedConfig.licenseRequest = config.licenseRequest;\n  }\n  if (typeof config.licenseResponse === 'function') {\n    clonedConfig.licenseResponse = config.licenseResponse;\n  }\n  return clonedConfig;\n}\n\n/**\n * @constructor\n * @namespace DownstreamElectronFE\n * @param {object} window - window object from renderer window\n * @param {Persistent} persistent - persistent helper class for creating and removing persistent session\n * @property {DownstreamElectronFE.downloads} downloads - api for downloads\n * @description\n * this a bridge class for [DownstreamElectronBE]{@link DownstreamElectronBE}\n * all methods described in ({@link DownstreamElectronFE.downloads})\n */\nfunction DownstreamElectronFE(window, persistent) {\n  var currentWindow = (__webpack_require__(7911).getCurrentWindow)();\n  if (currentWindow) {\n    this._windowId = currentWindow.id;\n  }\n  this._promisesObj = {};\n  this._subscribersId = {};\n  this._promiseCounter = 0;\n  this._window = window;\n  this._persistent = persistent;\n  bindAll(this, '_processApi', '_beforeUnload');\n  this._createApiMethods('downloads', ['create', 'createPersistent', 'getFolderInfo', 'getList', 'getListWithInfo', 'getOfflineLink', 'info', 'remove', 'removeAll', 'removeAllUnfinished', 'removePersistent', 'resume', 'saveData', 'savePersistent', 'start', 'stop', 'stopAll', 'subscribe', 'unsubscribe', 'updateDownloadFolder']);\n  this._attachEvents();\n}\nDownstreamElectronFE.prototype.downloads = {};\n\n/**\n * Creates a persistent session in renderer process using external plugin defined as {@link Persistent}\n * @param {array} args - arguments\n * @param {function} resolve - should called on success\n * @param {function} reject - should called on failure\n * @returns {void}\n */\nDownstreamElectronFE.prototype.downloads.createPersistent = function (args, resolve, reject) {\n  var manifestId = args[0];\n  var config = clonePersistentConfig(args[1]);\n  var forced = args[2];\n  var scope = this;\n  if (this._persistent) {\n    this.downloads.info(manifestId).then(function (info) {\n      if (!info) {\n        reject(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n        return;\n      }\n      var existingPersistentSessionId = info.persistent;\n      if (existingPersistentSessionId && !forced) {\n        reject('persistent session already exists:' + JSON.stringify(existingPersistentSessionId));\n      } else {\n        if (!config.pssh) {\n          config.pssh = getWidevinePSSH(info);\n        }\n        scope._persistent.createPersistentSession(config).then(function (persistentSessionId) {\n          scope.downloads.savePersistent(manifestId, persistentSessionId).then(function () {\n            if (existingPersistentSessionId) {\n              scope._persistent.removePersistentSession(existingPersistentSessionId).then(function () {\n                resolve(persistentSessionId);\n              })[\"catch\"](function () {\n                resolve(persistentSessionId);\n              });\n            } else {\n              resolve(persistentSessionId);\n            }\n          }, reject);\n        }, reject);\n      }\n    }, reject);\n  } else {\n    reject('No persistent plugin initialized');\n  }\n};\n\n/**\n * Removes a persistent session in renderer process using external plugin defined as {@link Persistent}\n * @param {array} args - arguments\n * @param {function} resolve - should called on success\n * @param {function} reject - should called on failure\n * @param {object} manifest - full information about manifest\n * @returns {void}\n */\nDownstreamElectronFE.prototype.downloads.removePersistent = function (args, resolve, reject, manifest) {\n  if (this._persistent) {\n    if (manifest && manifest.persistent) {\n      this._persistent.removePersistentSession(manifest.persistent).then(resolve, reject);\n    } else {\n      resolve();\n    }\n  } else {\n    reject('No persistent plugin initialized');\n  }\n};\n\n/**\n * Removes a manifest - this is needed on renderer process to check for existence of persistent session\n * and then remove it if necessary\n * @param {array} args - arguments\n * @param {function} resolve - should called on success\n * @param {function} reject - should called on failure\n * @param {object} manifest - full information about manifest\n * @returns {void}\n */\nDownstreamElectronFE.prototype.downloads.remove = function (args, resolve, reject, manifest) {\n  var scope = this;\n  if (this._persistent && manifest && manifest.persistent) {\n    scope._persistent.removePersistentSession(manifest.persistent).then(resolve, reject);\n  } else {\n    resolve();\n  }\n};\n\n/**\n * Removes all manifests - this is needed on renderer process to check for existence of persistent sessions\n * and then remove them if necessary\n * @param {array} args - arguments\n * @param {function} resolve - should called on success\n * @param {function} reject - should called on failure\n * @param {object} manifests - full information about all manifests\n * @returns {void}\n */\nDownstreamElectronFE.prototype.downloads.removeAll = function (args, resolve, reject, manifests) {\n  var scope = this;\n  manifests = manifests || [];\n  var filtered = manifests.filter(function (manifest) {\n    return !!manifest.persistent;\n  });\n  var persistentArr = filtered.map(function (manifest) {\n    return manifest.persistent;\n  });\n  if (this._persistent && persistentArr.length > 0) {\n    var promises = [];\n    for (var i = 0, j = persistentArr.length; i < j; i++) {\n      promises.push(scope._persistent.removePersistentSession(persistentArr[i]));\n    }\n    Promise.all(promises).then(resolve, reject);\n  } else {\n    resolve();\n  }\n};\n\n/**\n * @param {string} method - method name\n * @param {object} args - arguments\n * @param {function} originalMethod - method to ba called on renderer when main process finishes\n * @private\n * @returns {Promise} - promise\n */\nDownstreamElectronFE.prototype._apiCall = function (method, args, originalMethod) {\n  var self = this;\n  var promiseId = this._generatePromiseId();\n  var promise = new Promise(function (resolve, reject) {\n    self._promisesObj[promiseId] = {\n      resolve: resolve,\n      reject: reject,\n      method: method,\n      args: args,\n      originalMethod: originalMethod\n    };\n  });\n  var request = {};\n  request.promiseId = promiseId;\n  request.method = method;\n  request.windowId = this._windowId;\n  request.args = serialize(args);\n  this._send(request);\n  return promise;\n};\n\n/**\n *\n * @private\n * @returns {void}\n */\nDownstreamElectronFE.prototype._attachEvents = function () {\n  var ipcRenderer = (__webpack_require__(7194).ipcRenderer);\n  ipcRenderer.on('downstreamElectronFE', this._processApi);\n  this._window.addEventListener('beforeunload', this._beforeUnload);\n};\n\n/**\n *\n * @private\n * @returns {void}\n */\nDownstreamElectronFE.prototype._beforeUnload = function () {\n  this._removeSubscribers();\n};\n\n/**\n *\n * @private\n * @param {string} namespace - namespace\n * @param {array} methods - methods name array\n * @returns {\n * void}\n */\nDownstreamElectronFE.prototype._createApiMethods = function (namespace, methods) {\n  function apiFunction(scope, name, originalMethod) {\n    return function () {\n      return scope._apiCall(name, arguments, originalMethod);\n    };\n  }\n  this[namespace] = this[namespace] || {};\n  function createApiMethod(scope, namespace, name) {\n    var originalMethod;\n    if (typeof scope[namespace][name] === 'function') {\n      originalMethod = scope[namespace][name];\n    }\n    scope[namespace][name] = apiFunction(scope, namespace + '.' + name, originalMethod);\n  }\n  for (var i = 0, j = methods.length; i < j; i++) {\n    createApiMethod(this, namespace, methods[i]);\n  }\n};\n\n/**\n * @private\n * @param {string} subscriberId - subscriber identifier\n * @param {object} err - error\n * @param {object} result - result\n * @param {boolean} subscriberFinished - information if the subscriber is the last one which helps to remove subscribers\n * for finished downloads\n * @returns {void}\n */\nDownstreamElectronFE.prototype._executeSubscriber = function (subscriberId, err, result, subscriberFinished) {\n  var subscriber = this._subscribersId[subscriberId];\n  if (subscriber) {\n    subscriber.callback(err, result);\n  } else {\n    //ignore wrong window\n  }\n  if (subscriberFinished && subscriber) {\n    this._removeLocalSubscribers(subscriber.manifestId);\n  }\n};\n\n/**\n *\n * @private\n * @returns {string} - promise identifier\n */\nDownstreamElectronFE.prototype._generatePromiseId = function () {\n  var ts = new Date().getTime();\n  var promiseId;\n  this._promiseCounter++;\n  promiseId = this._promiseCounter + '-' + ts;\n  return promiseId;\n};\n\n/**\n * @private\n * @param {object} obj - object to be processed\n * @param {object} evt - event\n * @returns {void}\n */\nDownstreamElectronFE.prototype._processApi = function (obj, evt) {\n  var promiseId = evt.promiseId;\n  var error = evt.error;\n  var result = evt.result;\n  var promiseObj = this._promisesObj[promiseId + ''];\n  function resolve(result) {\n    promiseObj.resolve(result);\n    this._removeLocalSubscribersForDefinedMethods(promiseObj.method, promiseObj.args[0] || result);\n  }\n  if (promiseObj) {\n    if (evt.status === 'OK') {\n      if (typeof promiseObj.originalMethod === 'function') {\n        promiseObj.originalMethod.call(this, promiseObj.args, resolve.bind(this), promiseObj.reject.bind(this), result);\n      } else {\n        resolve.call(this, result);\n      }\n    } else {\n      promiseObj.reject(error);\n    }\n    if (evt.subscribersId) {\n      this._saveSubscribersId(promiseObj, evt.subscribersId);\n    }\n    delete this._promisesObj[promiseId];\n  } else if (evt.subscriberId) {\n    this._executeSubscriber(evt.subscriberId, evt.err, result, evt.subscriberFinished);\n  } else {\n    //ignore different window\n  }\n};\n\n/**\n * @private\n * @returns {void}\n */\nDownstreamElectronFE.prototype._removeSubscribers = function () {\n  var request = {};\n  var subscribersId;\n  subscribersId = [];\n  for (var key in this._subscribersId) {\n    if (this._subscribersId.hasOwnProperty(key)) {\n      subscribersId.push(key);\n    }\n  }\n  request.method = 'removeSubscribers';\n  request.args = serialize([subscribersId]);\n  this._send(request);\n};\n\n/**\n * @param {string|array} manifestId - manifest identifier or array of manifests identifier\n * @private\n * @returns {void}\n */\nDownstreamElectronFE.prototype._removeLocalSubscribers = function (manifestId) {\n  var self = this;\n  if (typeof manifestId === 'string') {\n    manifestId = [manifestId];\n  } else if (manifestId instanceof Array) {\n    manifestId = manifestId.map(function (item) {\n      if (typeof item === 'string') {\n        return item;\n      } else {\n        return item.manifestInfo && item.manifestInfo.id;\n      }\n    });\n  }\n  function removeSubscribers(subscriberKey) {\n    for (var i = 0, j = manifestId.length; i < j; i++) {\n      if (typeof self._subscribersId[subscriberKey].manifestId === 'string') {\n        if (self._subscribersId[subscriberKey].manifestId === manifestId[i]) {\n          delete self._subscribersId[subscriberKey];\n          break;\n        }\n      } else {\n        var pos = self._subscribersId[subscriberKey].manifestId.indexOf(manifestId[i]);\n        if (pos >= 0) {\n          self._subscribersId[subscriberKey].manifestId.splice(pos, 1);\n        }\n        if (!self._subscribersId[subscriberKey].manifestId.length) {\n          delete self._subscribersId[subscriberKey];\n          break;\n        }\n      }\n    }\n  }\n  if (manifestId) {\n    for (var key in this._subscribersId) {\n      if (this._subscribersId.hasOwnProperty(key)) {\n        removeSubscribers(key);\n      }\n    }\n  } else {\n    this._subscribersId = {};\n  }\n};\n\n/**\n *\n * @param {string} method - method name\n * @param {string|array} manifestId - manifest identifier or array of manifests identifier\n * @private\n * @returns {void}\n */\nDownstreamElectronFE.prototype._removeLocalSubscribersForDefinedMethods = function (method, manifestId) {\n  var methods = ['downloads.stop', 'downloads.stopAll', 'downloads.remove', 'downloads.removeAll', 'downloads.removeAllUnfinished', 'downloads.unsubscribe'];\n  // remove all subscribers when user removes or stop all\n  if (method === 'downloads.removeAll' || method === 'downloads.stopAll') {\n    manifestId = undefined;\n  }\n  for (var i = 0, j = methods.length; i < j; i++) {\n    if (method === methods[i]) {\n      this._removeLocalSubscribers(manifestId);\n      break;\n    }\n  }\n};\n/**\n * @param {Promise} promise - promise\n * @param {string} subscribersId - subscriber identifier\n * @private\n * @returns {void}\n */\nDownstreamElectronFE.prototype._saveSubscribersId = function (promise, subscribersId) {\n  var i, j;\n  if (typeof subscribersId === 'string' || typeof subscribersId === 'number') {\n    subscribersId = [String(subscribersId)];\n  }\n  for (i = 0, j = subscribersId.length; i < j; i++) {\n    this._subscribersId[subscribersId[i]] = {\n      manifestId: promise.args[0],\n      callback: promise.args[2 + i]\n    };\n  }\n};\n\n/**\n * @param {object} request - request\n * @private\n * @returns {void}\n */\nDownstreamElectronFE.prototype._send = function (request) {\n  try {\n    ipcRenderer.send('downstreamElectronBE', request);\n  } catch (e) {\n    console.error(e);\n  }\n};\n\n//---------------------------\nmodule.exports = {\n  /**\n   * @function\n   * @name DownstreamElectronFE#init\n   * @param {object} window - window object from renderer window\n   * @param {Persistent} persistent - persistent helper class for creating and removing persistent session\n   * @description\n   * initialize the api in render process\n   * @returns {DownstreamElectronFE} DownstreamElectronFE\n   * @example\n   * // somewhere in the renderer process\n   * // this is example based on persistent plugin from {@link https://castlabs.com/products/prestoplay-desktop/|PRESTOplay for Desktops},\n   * // you can create its own too, for details click on >> {@link Persistent} <<\n   * const persistent = require('./clpp_persistent.plugin.min');\n   * const downstreamElectron = require(\"downstream-electron\").init(window, persistent);\n   */\n  init: function init(window, persistent) {\n    if (!downstreamElectronFE) {\n      downstreamElectronFE = new DownstreamElectronFE(window, persistent);\n    }\n    return downstreamElectronFE;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDO01BQzNCb0QsUUFBUSxFQUFFcEIsT0FBTyxDQUFDaEMsSUFBSSxDQUFDLENBQUMsR0FBR3BDLENBQUM7SUFDOUIsQ0FBQztFQUNIO0FBRUYsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FvQixvQkFBb0IsQ0FBQ2EsU0FBUyxDQUFDc0MsS0FBSyxHQUFHLFVBQVVGLE9BQU8sRUFBRTtFQUN4RCxJQUFJO0lBQ0YxRixXQUFXLENBQUNvSSxJQUFJLENBQUMsc0JBQXNCLEVBQUUxQyxPQUFPLENBQUM7RUFDbkQsQ0FBQyxDQUFDLE9BQU8xQixDQUFDLEVBQUU7SUFDVnFFLE9BQU8sQ0FBQ2xCLEtBQUssQ0FBQ25ELENBQUMsQ0FBQztFQUNsQjtBQUNGLENBQUM7O0FBRUQ7QUFDQXNFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2Y7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLElBQUksRUFBRSxTQUFBQSxLQUFVOUYsTUFBTSxFQUFFQyxVQUFVLEVBQUU7SUFDbEMsSUFBSSxDQUFDeEMsb0JBQW9CLEVBQUU7TUFDekJBLG9CQUFvQixHQUFHLElBQUlzQyxvQkFBb0IsQ0FBQ0MsTUFBTSxFQUFFQyxVQUFVLENBQUM7SUFDckU7SUFDQSxPQUFPeEMsb0JBQW9CO0VBQzdCO0FBQ0YsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvZG93bnN0cmVhbS1lbGVjdHJvbi1mZS5qcz9iNmNhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qZXNsaW50IG5vLWNvbnNvbGU6IFtcImVycm9yXCIsIHsgYWxsb3c6IFtcIndhcm5cIiwgXCJlcnJvclwiLCBcImluZm9cIl0gfV0gKi9cbid1c2Ugc3RyaWN0JztcbmNvbnN0IFdJREVWSU5FX1NDSEVNRV9JRF9VUkkgPSAndXJuOnV1aWQ6ZWRlZjhiYTktNzlkNi00YWNlLWEzYzgtMjdkY2Q1MWQyMWVkJztcblxuY29uc3QgaXBjUmVuZGVyZXIgPSByZXF1aXJlKCdlbGVjdHJvbicpLmlwY1JlbmRlcmVyO1xuXG5jb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoXCIuL3RyYW5zbGF0aW9uL2luZGV4XCIpO1xuXG5sZXQgZG93bnN0cmVhbUVsZWN0cm9uRkU7XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZShvYmopIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaik7XG59XG5cbmZ1bmN0aW9uIGdldFdpZGV2aW5lUFNTSChpbmZvKSB7XG4gIGNvbnN0IG1hbmlmZXN0UHJvdGVjdGlvbnMgPSBpbmZvLm1hbmlmZXN0SW5mby5wcm90ZWN0aW9ucztcbiAgbGV0IHZpZGVvUmVwcmVzZW50YXRpb24gPSBtYW5pZmVzdFByb3RlY3Rpb25zLnZpZGVvWzBdIHx8IHt9O1xuICBpZiAobWFuaWZlc3RQcm90ZWN0aW9ucy52aWRlbyAmJiBpbmZvLm1hbmlmZXN0LnZpZGVvKSB7XG4gICAgdmlkZW9SZXByZXNlbnRhdGlvbiA9IG1hbmlmZXN0UHJvdGVjdGlvbnMudmlkZW8uZmlsdGVyKGZ1bmN0aW9uIChtYW5pZmVzdFByb3RlY3Rpb24pIHtcbiAgICAgIHJldHVybiBpbmZvLm1hbmlmZXN0LnZpZGVvLmluZGV4T2YobWFuaWZlc3RQcm90ZWN0aW9uLmlkKSA+PSAwO1xuICAgIH0pO1xuICAgIHZpZGVvUmVwcmVzZW50YXRpb24gPSB2aWRlb1JlcHJlc2VudGF0aW9uWzBdIHx8IHt9O1xuICB9XG5cbiAgY29uc3QgcHJvdGVjdGlvbnMgPSB2aWRlb1JlcHJlc2VudGF0aW9uLnByb3RlY3Rpb25zIHx8IFtdO1xuICBsZXQgd2lkZXZpbmVQU1NIO1xuICBmb3IgKGxldCBpID0gMCwgaiA9IHByb3RlY3Rpb25zLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgIGlmIChwcm90ZWN0aW9uc1tpXS5zY2hlbWVJZFVyaSA9PT0gV0lERVZJTkVfU0NIRU1FX0lEX1VSSSkge1xuICAgICAgd2lkZXZpbmVQU1NIID0gcHJvdGVjdGlvbnNbaV0uY2VuY1BTU0g7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHdpZGV2aW5lUFNTSDtcbn1cblxuZnVuY3Rpb24gYmluZChzY29wZSwgZikge1xuICByZXR1cm4gZnVuY3Rpb24gYmluZEYoKSB7XG4gICAgZi5hcHBseShzY29wZSwgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmluZEFsbChzY29wZSkge1xuICBmb3IgKGxldCBpID0gMSwgaiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICBsZXQgZk5hbWUgPSBhcmd1bWVudHNbaV07XG4gICAgc2NvcGVbZk5hbWVdID0gYmluZChzY29wZSwgc2NvcGVbZk5hbWVdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjbG9uZVBlcnNpc3RlbnRDb25maWcoY29uZmlnKSB7XG4gIC8vIGRlZXAgY2xvbmUgdGhlIGNvbmZpZ1xuICBjb25zdCBjbG9uZWRDb25maWcgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGNvbmZpZykpO1xuICBpZiAodHlwZW9mIGNvbmZpZy5zZXJ2ZXJDZXJ0aWZpY2F0ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjbG9uZWRDb25maWcuc2VydmVyQ2VydGlmaWNhdGUgPSBjb25maWcuc2VydmVyQ2VydGlmaWNhdGU7XG4gIH1cbiAgaWYgKHR5cGVvZiBjb25maWcubGljZW5zZVJlcXVlc3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjbG9uZWRDb25maWcubGljZW5zZVJlcXVlc3QgPSBjb25maWcubGljZW5zZVJlcXVlc3Q7XG4gIH1cbiAgaWYgKHR5cGVvZiBjb25maWcubGljZW5zZVJlc3BvbnNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2xvbmVkQ29uZmlnLmxpY2Vuc2VSZXNwb25zZSA9IGNvbmZpZy5saWNlbnNlUmVzcG9uc2U7XG4gIH1cblxuICByZXR1cm4gY2xvbmVkQ29uZmlnO1xufVxuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICogQG5hbWVzcGFjZSBEb3duc3RyZWFtRWxlY3Ryb25GRVxuICogQHBhcmFtIHtvYmplY3R9IHdpbmRvdyAtIHdpbmRvdyBvYmplY3QgZnJvbSByZW5kZXJlciB3aW5kb3dcbiAqIEBwYXJhbSB7UGVyc2lzdGVudH0gcGVyc2lzdGVudCAtIHBlcnNpc3RlbnQgaGVscGVyIGNsYXNzIGZvciBjcmVhdGluZyBhbmQgcmVtb3ZpbmcgcGVyc2lzdGVudCBzZXNzaW9uXG4gKiBAcHJvcGVydHkge0Rvd25zdHJlYW1FbGVjdHJvbkZFLmRvd25sb2Fkc30gZG93bmxvYWRzIC0gYXBpIGZvciBkb3dubG9hZHNcbiAqIEBkZXNjcmlwdGlvblxuICogdGhpcyBhIGJyaWRnZSBjbGFzcyBmb3IgW0Rvd25zdHJlYW1FbGVjdHJvbkJFXXtAbGluayBEb3duc3RyZWFtRWxlY3Ryb25CRX1cbiAqIGFsbCBtZXRob2RzIGRlc2NyaWJlZCBpbiAoe0BsaW5rIERvd25zdHJlYW1FbGVjdHJvbkZFLmRvd25sb2Fkc30pXG4gKi9cbmZ1bmN0aW9uIERvd25zdHJlYW1FbGVjdHJvbkZFKHdpbmRvdywgcGVyc2lzdGVudCkge1xuICBsZXQgY3VycmVudFdpbmRvdyA9IHJlcXVpcmUoJ0BlbGVjdHJvbi9yZW1vdGUnKS5nZXRDdXJyZW50V2luZG93KCk7XG4gIGlmIChjdXJyZW50V2luZG93KSB7XG4gICAgdGhpcy5fd2luZG93SWQgPSBjdXJyZW50V2luZG93LmlkO1xuICB9XG4gIHRoaXMuX3Byb21pc2VzT2JqID0ge307XG4gIHRoaXMuX3N1YnNjcmliZXJzSWQgPSB7fTtcbiAgdGhpcy5fcHJvbWlzZUNvdW50ZXIgPSAwO1xuICB0aGlzLl93aW5kb3cgPSB3aW5kb3c7XG4gIHRoaXMuX3BlcnNpc3RlbnQgPSBwZXJzaXN0ZW50O1xuICBiaW5kQWxsKHRoaXMsICdfcHJvY2Vzc0FwaScsICdfYmVmb3JlVW5sb2FkJyk7XG5cbiAgdGhpcy5fY3JlYXRlQXBpTWV0aG9kcygnZG93bmxvYWRzJywgW1xuICAgICdjcmVhdGUnLFxuICAgICdjcmVhdGVQZXJzaXN0ZW50JyxcbiAgICAnZ2V0Rm9sZGVySW5mbycsXG4gICAgJ2dldExpc3QnLFxuICAgICdnZXRMaXN0V2l0aEluZm8nLFxuICAgICdnZXRPZmZsaW5lTGluaycsXG4gICAgJ2luZm8nLFxuICAgICdyZW1vdmUnLFxuICAgICdyZW1vdmVBbGwnLFxuICAgICdyZW1vdmVBbGxVbmZpbmlzaGVkJyxcbiAgICAncmVtb3ZlUGVyc2lzdGVudCcsXG4gICAgJ3Jlc3VtZScsXG4gICAgJ3NhdmVEYXRhJyxcbiAgICAnc2F2ZVBlcnNpc3RlbnQnLFxuICAgICdzdGFydCcsXG4gICAgJ3N0b3AnLFxuICAgICdzdG9wQWxsJyxcbiAgICAnc3Vic2NyaWJlJyxcbiAgICAndW5zdWJzY3JpYmUnLFxuICAgICd1cGRhdGVEb3dubG9hZEZvbGRlcidcbiAgXSk7XG4gIHRoaXMuX2F0dGFjaEV2ZW50cygpO1xufVxuXG5Eb3duc3RyZWFtRWxlY3Ryb25GRS5wcm90b3R5cGUuZG93bmxvYWRzID0ge307XG5cbi8qKlxuICogQ3JlYXRlcyBhIHBlcnNpc3RlbnQgc2Vzc2lvbiBpbiByZW5kZXJlciBwcm9jZXNzIHVzaW5nIGV4dGVybmFsIHBsdWdpbiBkZWZpbmVkIGFzIHtAbGluayBQZXJzaXN0ZW50fVxuICogQHBhcmFtIHthcnJheX0gYXJncyAtIGFyZ3VtZW50c1xuICogQHBhcmFtIHtmdW5jdGlvbn0gcmVzb2x2ZSAtIHNob3VsZCBjYWxsZWQgb24gc3VjY2Vzc1xuICogQHBhcmFtIHtmdW5jdGlvbn0gcmVqZWN0IC0gc2hvdWxkIGNhbGxlZCBvbiBmYWlsdXJlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuRG93bnN0cmVhbUVsZWN0cm9uRkUucHJvdG90eXBlLmRvd25sb2Fkcy5jcmVhdGVQZXJzaXN0ZW50ID0gZnVuY3Rpb24gKGFyZ3MsIHJlc29sdmUsIHJlamVjdCkge1xuICBjb25zdCBtYW5pZmVzdElkID0gYXJnc1swXTtcbiAgY29uc3QgY29uZmlnID0gY2xvbmVQZXJzaXN0ZW50Q29uZmlnKGFyZ3NbMV0pO1xuICBjb25zdCBmb3JjZWQgPSBhcmdzWzJdO1xuICBjb25zdCBzY29wZSA9IHRoaXM7XG4gIGlmICh0aGlzLl9wZXJzaXN0ZW50KSB7XG4gICAgdGhpcy5kb3dubG9hZHMuaW5mbyhtYW5pZmVzdElkKS50aGVuKGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgICBpZiAoIWluZm8pIHtcbiAgICAgICAgcmVqZWN0KHRyYW5zbGF0aW9uLmdldEVycm9yKHRyYW5zbGF0aW9uLmUubWFuaWZlc3RzLk5PVF9GT1VORCwgbWFuaWZlc3RJZCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBleGlzdGluZ1BlcnNpc3RlbnRTZXNzaW9uSWQgPSBpbmZvLnBlcnNpc3RlbnQ7XG4gICAgICBpZiAoZXhpc3RpbmdQZXJzaXN0ZW50U2Vzc2lvbklkICYmICFmb3JjZWQpIHtcbiAgICAgICAgcmVqZWN0KCdwZXJzaXN0ZW50IHNlc3Npb24gYWxyZWFkeSBleGlzdHM6JyArIEpTT04uc3RyaW5naWZ5KGV4aXN0aW5nUGVyc2lzdGVudFNlc3Npb25JZCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFjb25maWcucHNzaCkge1xuICAgICAgICAgIGNvbmZpZy5wc3NoID0gZ2V0V2lkZXZpbmVQU1NIKGluZm8pO1xuICAgICAgICB9XG5cbiAgICAgICAgc2NvcGUuX3BlcnNpc3RlbnQuY3JlYXRlUGVyc2lzdGVudFNlc3Npb24oY29uZmlnKS50aGVuKGZ1bmN0aW9uIChwZXJzaXN0ZW50U2Vzc2lvbklkKSB7XG4gICAgICAgICAgc2NvcGUuZG93bmxvYWRzLnNhdmVQZXJzaXN0ZW50KG1hbmlmZXN0SWQsIHBlcnNpc3RlbnRTZXNzaW9uSWQpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGV4aXN0aW5nUGVyc2lzdGVudFNlc3Npb25JZCkge1xuICAgICAgICAgICAgICBzY29wZS5fcGVyc2lzdGVudC5yZW1vdmVQZXJzaXN0ZW50U2Vzc2lvbihleGlzdGluZ1BlcnNpc3RlbnRTZXNzaW9uSWQpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgcmVzb2x2ZShwZXJzaXN0ZW50U2Vzc2lvbklkKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKHBlcnNpc3RlbnRTZXNzaW9uSWQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShwZXJzaXN0ZW50U2Vzc2lvbklkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfVxuICAgIH0sIHJlamVjdCk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KCdObyBwZXJzaXN0ZW50IHBsdWdpbiBpbml0aWFsaXplZCcpO1xuICB9XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgYSBwZXJzaXN0ZW50IHNlc3Npb24gaW4gcmVuZGVyZXIgcHJvY2VzcyB1c2luZyBleHRlcm5hbCBwbHVnaW4gZGVmaW5lZCBhcyB7QGxpbmsgUGVyc2lzdGVudH1cbiAqIEBwYXJhbSB7YXJyYXl9IGFyZ3MgLSBhcmd1bWVudHNcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHJlc29sdmUgLSBzaG91bGQgY2FsbGVkIG9uIHN1Y2Nlc3NcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHJlamVjdCAtIHNob3VsZCBjYWxsZWQgb24gZmFpbHVyZVxuICogQHBhcmFtIHtvYmplY3R9IG1hbmlmZXN0IC0gZnVsbCBpbmZvcm1hdGlvbiBhYm91dCBtYW5pZmVzdFxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbkRvd25zdHJlYW1FbGVjdHJvbkZFLnByb3RvdHlwZS5kb3dubG9hZHMucmVtb3ZlUGVyc2lzdGVudCA9IGZ1bmN0aW9uIChhcmdzLCByZXNvbHZlLCByZWplY3QsIG1hbmlmZXN0KSB7XG4gIGlmICh0aGlzLl9wZXJzaXN0ZW50KSB7XG4gICAgaWYgKG1hbmlmZXN0ICYmIG1hbmlmZXN0LnBlcnNpc3RlbnQpIHtcbiAgICAgIHRoaXMuX3BlcnNpc3RlbnQucmVtb3ZlUGVyc2lzdGVudFNlc3Npb24obWFuaWZlc3QucGVyc2lzdGVudCkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJlamVjdCgnTm8gcGVyc2lzdGVudCBwbHVnaW4gaW5pdGlhbGl6ZWQnKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmVzIGEgbWFuaWZlc3QgLSB0aGlzIGlzIG5lZWRlZCBvbiByZW5kZXJlciBwcm9jZXNzIHRvIGNoZWNrIGZvciBleGlzdGVuY2Ugb2YgcGVyc2lzdGVudCBzZXNzaW9uXG4gKiBhbmQgdGhlbiByZW1vdmUgaXQgaWYgbmVjZXNzYXJ5XG4gKiBAcGFyYW0ge2FycmF5fSBhcmdzIC0gYXJndW1lbnRzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSByZXNvbHZlIC0gc2hvdWxkIGNhbGxlZCBvbiBzdWNjZXNzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSByZWplY3QgLSBzaG91bGQgY2FsbGVkIG9uIGZhaWx1cmVcbiAqIEBwYXJhbSB7b2JqZWN0fSBtYW5pZmVzdCAtIGZ1bGwgaW5mb3JtYXRpb24gYWJvdXQgbWFuaWZlc3RcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5Eb3duc3RyZWFtRWxlY3Ryb25GRS5wcm90b3R5cGUuZG93bmxvYWRzLnJlbW92ZSA9IGZ1bmN0aW9uIChhcmdzLCByZXNvbHZlLCByZWplY3QsIG1hbmlmZXN0KSB7XG4gIGNvbnN0IHNjb3BlID0gdGhpcztcbiAgaWYgKHRoaXMuX3BlcnNpc3RlbnQgJiYgbWFuaWZlc3QgJiYgbWFuaWZlc3QucGVyc2lzdGVudCkge1xuICAgIHNjb3BlLl9wZXJzaXN0ZW50LnJlbW92ZVBlcnNpc3RlbnRTZXNzaW9uKG1hbmlmZXN0LnBlcnNpc3RlbnQpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgfSBlbHNlIHtcbiAgICByZXNvbHZlKCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwgbWFuaWZlc3RzIC0gdGhpcyBpcyBuZWVkZWQgb24gcmVuZGVyZXIgcHJvY2VzcyB0byBjaGVjayBmb3IgZXhpc3RlbmNlIG9mIHBlcnNpc3RlbnQgc2Vzc2lvbnNcbiAqIGFuZCB0aGVuIHJlbW92ZSB0aGVtIGlmIG5lY2Vzc2FyeVxuICogQHBhcmFtIHthcnJheX0gYXJncyAtIGFyZ3VtZW50c1xuICogQHBhcmFtIHtmdW5jdGlvbn0gcmVzb2x2ZSAtIHNob3VsZCBjYWxsZWQgb24gc3VjY2Vzc1xuICogQHBhcmFtIHtmdW5jdGlvbn0gcmVqZWN0IC0gc2hvdWxkIGNhbGxlZCBvbiBmYWlsdXJlXG4gKiBAcGFyYW0ge29iamVjdH0gbWFuaWZlc3RzIC0gZnVsbCBpbmZvcm1hdGlvbiBhYm91dCBhbGwgbWFuaWZlc3RzXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuRG93bnN0cmVhbUVsZWN0cm9uRkUucHJvdG90eXBlLmRvd25sb2Fkcy5yZW1vdmVBbGwgPSBmdW5jdGlvbiAoYXJncywgcmVzb2x2ZSwgcmVqZWN0LCBtYW5pZmVzdHMpIHtcbiAgY29uc3Qgc2NvcGUgPSB0aGlzO1xuICBtYW5pZmVzdHMgPSBtYW5pZmVzdHMgfHwgW107XG4gIGNvbnN0IGZpbHRlcmVkID0gbWFuaWZlc3RzLmZpbHRlcihmdW5jdGlvbiAobWFuaWZlc3QpIHtcbiAgICByZXR1cm4gISFtYW5pZmVzdC5wZXJzaXN0ZW50O1xuICB9KTtcbiAgY29uc3QgcGVyc2lzdGVudEFyciA9IGZpbHRlcmVkLm1hcChmdW5jdGlvbiAobWFuaWZlc3QpIHtcbiAgICByZXR1cm4gbWFuaWZlc3QucGVyc2lzdGVudDtcbiAgfSk7XG5cbiAgaWYgKHRoaXMuX3BlcnNpc3RlbnQgJiYgcGVyc2lzdGVudEFyci5sZW5ndGggPiAwKSB7XG4gICAgbGV0IHByb21pc2VzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDAsIGogPSBwZXJzaXN0ZW50QXJyLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgcHJvbWlzZXMucHVzaChzY29wZS5fcGVyc2lzdGVudC5yZW1vdmVQZXJzaXN0ZW50U2Vzc2lvbihwZXJzaXN0ZW50QXJyW2ldKSk7XG4gICAgfVxuICAgIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzb2x2ZSgpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2QgLSBtZXRob2QgbmFtZVxuICogQHBhcmFtIHtvYmplY3R9IGFyZ3MgLSBhcmd1bWVudHNcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9yaWdpbmFsTWV0aG9kIC0gbWV0aG9kIHRvIGJhIGNhbGxlZCBvbiByZW5kZXJlciB3aGVuIG1haW4gcHJvY2VzcyBmaW5pc2hlc1xuICogQHByaXZhdGVcbiAqIEByZXR1cm5zIHtQcm9taXNlfSAtIHByb21pc2VcbiAqL1xuRG93bnN0cmVhbUVsZWN0cm9uRkUucHJvdG90eXBlLl9hcGlDYWxsID0gZnVuY3Rpb24gKG1ldGhvZCwgYXJncywgb3JpZ2luYWxNZXRob2QpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gIGNvbnN0IHByb21pc2VJZCA9IHRoaXMuX2dlbmVyYXRlUHJvbWlzZUlkKCk7XG4gIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgc2VsZi5fcHJvbWlzZXNPYmpbcHJvbWlzZUlkXSA9IHtcbiAgICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgICByZWplY3Q6IHJlamVjdCxcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgYXJnczogYXJncyxcbiAgICAgIG9yaWdpbmFsTWV0aG9kOiBvcmlnaW5hbE1ldGhvZFxuICAgIH07XG4gIH0pO1xuICBsZXQgcmVxdWVzdCA9IHt9O1xuICByZXF1ZXN0LnByb21pc2VJZCA9IHByb21pc2VJZDtcbiAgcmVxdWVzdC5tZXRob2QgPSBtZXRob2Q7XG4gIHJlcXVlc3Qud2luZG93SWQgPSB0aGlzLl93aW5kb3dJZDtcbiAgcmVxdWVzdC5hcmdzID0gc2VyaWFsaXplKGFyZ3MpO1xuICB0aGlzLl9zZW5kKHJlcXVlc3QpO1xuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbi8qKlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuRG93bnN0cmVhbUVsZWN0cm9uRkUucHJvdG90eXBlLl9hdHRhY2hFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGlwY1JlbmRlcmVyID0gcmVxdWlyZSgnZWxlY3Ryb24nKS5pcGNSZW5kZXJlcjtcbiAgaXBjUmVuZGVyZXIub24oJ2Rvd25zdHJlYW1FbGVjdHJvbkZFJywgdGhpcy5fcHJvY2Vzc0FwaSk7XG4gIHRoaXMuX3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCB0aGlzLl9iZWZvcmVVbmxvYWQpO1xufTtcblxuLyoqXG4gKlxuICogQHByaXZhdGVcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5Eb3duc3RyZWFtRWxlY3Ryb25GRS5wcm90b3R5cGUuX2JlZm9yZVVubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fcmVtb3ZlU3Vic2NyaWJlcnMoKTtcbn07XG5cbi8qKlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZXNwYWNlIC0gbmFtZXNwYWNlXG4gKiBAcGFyYW0ge2FycmF5fSBtZXRob2RzIC0gbWV0aG9kcyBuYW1lIGFycmF5XG4gKiBAcmV0dXJucyB7XG4gKiB2b2lkfVxuICovXG5Eb3duc3RyZWFtRWxlY3Ryb25GRS5wcm90b3R5cGUuX2NyZWF0ZUFwaU1ldGhvZHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2RzKSB7XG4gIGZ1bmN0aW9uIGFwaUZ1bmN0aW9uKHNjb3BlLCBuYW1lLCBvcmlnaW5hbE1ldGhvZCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc2NvcGUuX2FwaUNhbGwobmFtZSwgYXJndW1lbnRzLCBvcmlnaW5hbE1ldGhvZCk7XG4gICAgfTtcbiAgfVxuXG4gIHRoaXNbbmFtZXNwYWNlXSA9IHRoaXNbbmFtZXNwYWNlXSB8fCB7fTtcblxuICBmdW5jdGlvbiBjcmVhdGVBcGlNZXRob2Qoc2NvcGUsIG5hbWVzcGFjZSwgbmFtZSkge1xuICAgIGxldCBvcmlnaW5hbE1ldGhvZDtcbiAgICBpZiAodHlwZW9mIHNjb3BlW25hbWVzcGFjZV1bbmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9yaWdpbmFsTWV0aG9kID0gc2NvcGVbbmFtZXNwYWNlXVtuYW1lXTtcbiAgICB9XG4gICAgc2NvcGVbbmFtZXNwYWNlXVtuYW1lXSA9IGFwaUZ1bmN0aW9uKHNjb3BlLCBuYW1lc3BhY2UgKyAnLicgKyBuYW1lLCBvcmlnaW5hbE1ldGhvZCk7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMCwgaiA9IG1ldGhvZHMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgY3JlYXRlQXBpTWV0aG9kKHRoaXMsIG5hbWVzcGFjZSwgbWV0aG9kc1tpXSk7XG4gIH1cbn07XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdWJzY3JpYmVySWQgLSBzdWJzY3JpYmVyIGlkZW50aWZpZXJcbiAqIEBwYXJhbSB7b2JqZWN0fSBlcnIgLSBlcnJvclxuICogQHBhcmFtIHtvYmplY3R9IHJlc3VsdCAtIHJlc3VsdFxuICogQHBhcmFtIHtib29sZWFufSBzdWJzY3JpYmVyRmluaXNoZWQgLSBpbmZvcm1hdGlvbiBpZiB0aGUgc3Vic2NyaWJlciBpcyB0aGUgbGFzdCBvbmUgd2hpY2ggaGVscHMgdG8gcmVtb3ZlIHN1YnNjcmliZXJzXG4gKiBmb3IgZmluaXNoZWQgZG93bmxvYWRzXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuRG93bnN0cmVhbUVsZWN0cm9uRkUucHJvdG90eXBlLl9leGVjdXRlU3Vic2NyaWJlciA9IGZ1bmN0aW9uIChzdWJzY3JpYmVySWQsIGVyciwgcmVzdWx0LCBzdWJzY3JpYmVyRmluaXNoZWQpIHtcbiAgY29uc3Qgc3Vic2NyaWJlciA9IHRoaXMuX3N1YnNjcmliZXJzSWRbc3Vic2NyaWJlcklkXTtcbiAgaWYgKHN1YnNjcmliZXIpIHtcbiAgICBzdWJzY3JpYmVyLmNhbGxiYWNrKGVyciwgcmVzdWx0KTtcbiAgfSBlbHNlIHtcbiAgICAvL2lnbm9yZSB3cm9uZyB3aW5kb3dcbiAgfVxuICBpZiAoc3Vic2NyaWJlckZpbmlzaGVkICYmIHN1YnNjcmliZXIpIHtcbiAgICB0aGlzLl9yZW1vdmVMb2NhbFN1YnNjcmliZXJzKHN1YnNjcmliZXIubWFuaWZlc3RJZCk7XG4gIH1cbn07XG5cbi8qKlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIHByb21pc2UgaWRlbnRpZmllclxuICovXG5Eb3duc3RyZWFtRWxlY3Ryb25GRS5wcm90b3R5cGUuX2dlbmVyYXRlUHJvbWlzZUlkID0gZnVuY3Rpb24gKCkge1xuICBsZXQgdHMgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgbGV0IHByb21pc2VJZDtcbiAgdGhpcy5fcHJvbWlzZUNvdW50ZXIrKztcbiAgcHJvbWlzZUlkID0gdGhpcy5fcHJvbWlzZUNvdW50ZXIgKyAnLScgKyB0cztcbiAgcmV0dXJuIHByb21pc2VJZDtcbn07XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmogLSBvYmplY3QgdG8gYmUgcHJvY2Vzc2VkXG4gKiBAcGFyYW0ge29iamVjdH0gZXZ0IC0gZXZlbnRcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5Eb3duc3RyZWFtRWxlY3Ryb25GRS5wcm90b3R5cGUuX3Byb2Nlc3NBcGkgPSBmdW5jdGlvbiAob2JqLCBldnQpIHtcbiAgY29uc3QgcHJvbWlzZUlkID0gZXZ0LnByb21pc2VJZDtcbiAgY29uc3QgZXJyb3IgPSBldnQuZXJyb3I7XG4gIGNvbnN0IHJlc3VsdCA9IGV2dC5yZXN1bHQ7XG4gIGNvbnN0IHByb21pc2VPYmogPSB0aGlzLl9wcm9taXNlc09ialtwcm9taXNlSWQgKyAnJ107XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZShyZXN1bHQpIHtcbiAgICBwcm9taXNlT2JqLnJlc29sdmUocmVzdWx0KTtcbiAgICB0aGlzLl9yZW1vdmVMb2NhbFN1YnNjcmliZXJzRm9yRGVmaW5lZE1ldGhvZHMocHJvbWlzZU9iai5tZXRob2QsIHByb21pc2VPYmouYXJnc1swXSB8fCByZXN1bHQpO1xuICB9XG5cbiAgaWYgKHByb21pc2VPYmopIHtcbiAgICBpZiAoZXZ0LnN0YXR1cyA9PT0gJ09LJykge1xuICAgICAgaWYgKHR5cGVvZiBwcm9taXNlT2JqLm9yaWdpbmFsTWV0aG9kID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb21pc2VPYmoub3JpZ2luYWxNZXRob2QuY2FsbCh0aGlzLCBwcm9taXNlT2JqLmFyZ3MsIHJlc29sdmUuYmluZCh0aGlzKSwgcHJvbWlzZU9iai5yZWplY3QuYmluZCh0aGlzKSwgcmVzdWx0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUuY2FsbCh0aGlzLCByZXN1bHQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlT2JqLnJlamVjdChlcnJvcik7XG4gICAgfVxuICAgIGlmIChldnQuc3Vic2NyaWJlcnNJZCkge1xuICAgICAgdGhpcy5fc2F2ZVN1YnNjcmliZXJzSWQocHJvbWlzZU9iaiwgZXZ0LnN1YnNjcmliZXJzSWQpO1xuICAgIH1cbiAgICBkZWxldGUgKHRoaXMuX3Byb21pc2VzT2JqW3Byb21pc2VJZF0pO1xuICB9IGVsc2UgaWYgKGV2dC5zdWJzY3JpYmVySWQpIHtcbiAgICB0aGlzLl9leGVjdXRlU3Vic2NyaWJlcihldnQuc3Vic2NyaWJlcklkLCBldnQuZXJyLCByZXN1bHQsIGV2dC5zdWJzY3JpYmVyRmluaXNoZWQpO1xuICB9IGVsc2Uge1xuICAgIC8vaWdub3JlIGRpZmZlcmVudCB3aW5kb3dcbiAgfVxufTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbkRvd25zdHJlYW1FbGVjdHJvbkZFLnByb3RvdHlwZS5fcmVtb3ZlU3Vic2NyaWJlcnMgPSBmdW5jdGlvbiAoKSB7XG4gIGxldCByZXF1ZXN0ID0ge307XG4gIGxldCBzdWJzY3JpYmVyc0lkO1xuICBzdWJzY3JpYmVyc0lkID0gW107XG4gIGZvciAobGV0IGtleSBpbiB0aGlzLl9zdWJzY3JpYmVyc0lkKSB7XG4gICAgaWYgKHRoaXMuX3N1YnNjcmliZXJzSWQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgc3Vic2NyaWJlcnNJZC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJlcXVlc3QubWV0aG9kID0gJ3JlbW92ZVN1YnNjcmliZXJzJztcbiAgcmVxdWVzdC5hcmdzID0gc2VyaWFsaXplKFtzdWJzY3JpYmVyc0lkXSk7XG5cbiAgdGhpcy5fc2VuZChyZXF1ZXN0KTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd8YXJyYXl9IG1hbmlmZXN0SWQgLSBtYW5pZmVzdCBpZGVudGlmaWVyIG9yIGFycmF5IG9mIG1hbmlmZXN0cyBpZGVudGlmaWVyXG4gKiBAcHJpdmF0ZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbkRvd25zdHJlYW1FbGVjdHJvbkZFLnByb3RvdHlwZS5fcmVtb3ZlTG9jYWxTdWJzY3JpYmVycyA9IGZ1bmN0aW9uIChtYW5pZmVzdElkKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuICBpZiAodHlwZW9mIG1hbmlmZXN0SWQgPT09ICdzdHJpbmcnKSB7XG4gICAgbWFuaWZlc3RJZCA9IFttYW5pZmVzdElkXTtcbiAgfSBlbHNlIGlmIChtYW5pZmVzdElkIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICBtYW5pZmVzdElkID0gbWFuaWZlc3RJZC5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaXRlbS5tYW5pZmVzdEluZm8gJiYgaXRlbS5tYW5pZmVzdEluZm8uaWQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVTdWJzY3JpYmVycyhzdWJzY3JpYmVyS2V5KSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGogPSBtYW5pZmVzdElkLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgaWYgKHR5cGVvZiBzZWxmLl9zdWJzY3JpYmVyc0lkW3N1YnNjcmliZXJLZXldLm1hbmlmZXN0SWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmIChzZWxmLl9zdWJzY3JpYmVyc0lkW3N1YnNjcmliZXJLZXldLm1hbmlmZXN0SWQgPT09IG1hbmlmZXN0SWRbaV0pIHtcbiAgICAgICAgICBkZWxldGUgKHNlbGYuX3N1YnNjcmliZXJzSWRbc3Vic2NyaWJlcktleV0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcG9zID0gc2VsZi5fc3Vic2NyaWJlcnNJZFtzdWJzY3JpYmVyS2V5XS5tYW5pZmVzdElkLmluZGV4T2YobWFuaWZlc3RJZFtpXSk7XG4gICAgICAgIGlmIChwb3MgPj0gMCkge1xuICAgICAgICAgIHNlbGYuX3N1YnNjcmliZXJzSWRbc3Vic2NyaWJlcktleV0ubWFuaWZlc3RJZC5zcGxpY2UocG9zLCAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNlbGYuX3N1YnNjcmliZXJzSWRbc3Vic2NyaWJlcktleV0ubWFuaWZlc3RJZC5sZW5ndGgpIHtcbiAgICAgICAgICBkZWxldGUgKHNlbGYuX3N1YnNjcmliZXJzSWRbc3Vic2NyaWJlcktleV0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKG1hbmlmZXN0SWQpIHtcbiAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5fc3Vic2NyaWJlcnNJZCkge1xuICAgICAgaWYgKHRoaXMuX3N1YnNjcmliZXJzSWQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICByZW1vdmVTdWJzY3JpYmVycyhrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9zdWJzY3JpYmVyc0lkID0ge307XG4gIH1cbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2QgLSBtZXRob2QgbmFtZVxuICogQHBhcmFtIHtzdHJpbmd8YXJyYXl9IG1hbmlmZXN0SWQgLSBtYW5pZmVzdCBpZGVudGlmaWVyIG9yIGFycmF5IG9mIG1hbmlmZXN0cyBpZGVudGlmaWVyXG4gKiBAcHJpdmF0ZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbkRvd25zdHJlYW1FbGVjdHJvbkZFLnByb3RvdHlwZS5fcmVtb3ZlTG9jYWxTdWJzY3JpYmVyc0ZvckRlZmluZWRNZXRob2RzID0gZnVuY3Rpb24gKG1ldGhvZCwgbWFuaWZlc3RJZCkge1xuICBjb25zdCBtZXRob2RzID0gW1xuICAgICdkb3dubG9hZHMuc3RvcCcsXG4gICAgJ2Rvd25sb2Fkcy5zdG9wQWxsJyxcbiAgICAnZG93bmxvYWRzLnJlbW92ZScsXG4gICAgJ2Rvd25sb2Fkcy5yZW1vdmVBbGwnLFxuICAgICdkb3dubG9hZHMucmVtb3ZlQWxsVW5maW5pc2hlZCcsXG4gICAgJ2Rvd25sb2Fkcy51bnN1YnNjcmliZSdcbiAgXTtcbiAgLy8gcmVtb3ZlIGFsbCBzdWJzY3JpYmVycyB3aGVuIHVzZXIgcmVtb3ZlcyBvciBzdG9wIGFsbFxuICBpZiAobWV0aG9kID09PSAnZG93bmxvYWRzLnJlbW92ZUFsbCcgfHwgbWV0aG9kID09PSAnZG93bmxvYWRzLnN0b3BBbGwnKSB7XG4gICAgbWFuaWZlc3RJZCA9IHVuZGVmaW5lZDtcbiAgfVxuICBmb3IgKGxldCBpID0gMCwgaiA9IG1ldGhvZHMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgaWYgKG1ldGhvZCA9PT0gbWV0aG9kc1tpXSkge1xuICAgICAgdGhpcy5fcmVtb3ZlTG9jYWxTdWJzY3JpYmVycyhtYW5pZmVzdElkKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxufTtcbi8qKlxuICogQHBhcmFtIHtQcm9taXNlfSBwcm9taXNlIC0gcHJvbWlzZVxuICogQHBhcmFtIHtzdHJpbmd9IHN1YnNjcmliZXJzSWQgLSBzdWJzY3JpYmVyIGlkZW50aWZpZXJcbiAqIEBwcml2YXRlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuRG93bnN0cmVhbUVsZWN0cm9uRkUucHJvdG90eXBlLl9zYXZlU3Vic2NyaWJlcnNJZCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdWJzY3JpYmVyc0lkKSB7XG4gIGxldCBpLCBqO1xuICBpZiAodHlwZW9mIHN1YnNjcmliZXJzSWQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBzdWJzY3JpYmVyc0lkID09PSAnbnVtYmVyJykge1xuICAgIHN1YnNjcmliZXJzSWQgPSBbU3RyaW5nKHN1YnNjcmliZXJzSWQpXTtcbiAgfVxuICBmb3IgKGkgPSAwLCBqID0gc3Vic2NyaWJlcnNJZC5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICB0aGlzLl9zdWJzY3JpYmVyc0lkW3N1YnNjcmliZXJzSWRbaV1dID0ge1xuICAgICAgbWFuaWZlc3RJZDogcHJvbWlzZS5hcmdzWzBdLFxuICAgICAgY2FsbGJhY2s6IHByb21pc2UuYXJnc1syICsgaV1cbiAgICB9O1xuICB9XG5cbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHJlcXVlc3QgLSByZXF1ZXN0XG4gKiBAcHJpdmF0ZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbkRvd25zdHJlYW1FbGVjdHJvbkZFLnByb3RvdHlwZS5fc2VuZCA9IGZ1bmN0aW9uIChyZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgaXBjUmVuZGVyZXIuc2VuZCgnZG93bnN0cmVhbUVsZWN0cm9uQkUnLCByZXF1ZXN0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gIH1cbn07XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLyoqXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbmFtZSBEb3duc3RyZWFtRWxlY3Ryb25GRSNpbml0XG4gICAqIEBwYXJhbSB7b2JqZWN0fSB3aW5kb3cgLSB3aW5kb3cgb2JqZWN0IGZyb20gcmVuZGVyZXIgd2luZG93XG4gICAqIEBwYXJhbSB7UGVyc2lzdGVudH0gcGVyc2lzdGVudCAtIHBlcnNpc3RlbnQgaGVscGVyIGNsYXNzIGZvciBjcmVhdGluZyBhbmQgcmVtb3ZpbmcgcGVyc2lzdGVudCBzZXNzaW9uXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBpbml0aWFsaXplIHRoZSBhcGkgaW4gcmVuZGVyIHByb2Nlc3NcbiAgICogQHJldHVybnMge0Rvd25zdHJlYW1FbGVjdHJvbkZFfSBEb3duc3RyZWFtRWxlY3Ryb25GRVxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBzb21ld2hlcmUgaW4gdGhlIHJlbmRlcmVyIHByb2Nlc3NcbiAgICogLy8gdGhpcyBpcyBleGFtcGxlIGJhc2VkIG9uIHBlcnNpc3RlbnQgcGx1Z2luIGZyb20ge0BsaW5rIGh0dHBzOi8vY2FzdGxhYnMuY29tL3Byb2R1Y3RzL3ByZXN0b3BsYXktZGVza3RvcC98UFJFU1RPcGxheSBmb3IgRGVza3RvcHN9LFxuICAgKiAvLyB5b3UgY2FuIGNyZWF0ZSBpdHMgb3duIHRvbywgZm9yIGRldGFpbHMgY2xpY2sgb24gPj4ge0BsaW5rIFBlcnNpc3RlbnR9IDw8XG4gICAqIGNvbnN0IHBlcnNpc3RlbnQgPSByZXF1aXJlKCcuL2NscHBfcGVyc2lzdGVudC5wbHVnaW4ubWluJyk7XG4gICAqIGNvbnN0IGRvd25zdHJlYW1FbGVjdHJvbiA9IHJlcXVpcmUoXCJkb3duc3RyZWFtLWVsZWN0cm9uXCIpLmluaXQod2luZG93LCBwZXJzaXN0ZW50KTtcbiAgICovXG4gIGluaXQ6IGZ1bmN0aW9uICh3aW5kb3csIHBlcnNpc3RlbnQpIHtcbiAgICBpZiAoIWRvd25zdHJlYW1FbGVjdHJvbkZFKSB7XG4gICAgICBkb3duc3RyZWFtRWxlY3Ryb25GRSA9IG5ldyBEb3duc3RyZWFtRWxlY3Ryb25GRSh3aW5kb3csIHBlcnNpc3RlbnQpO1xuICAgIH1cbiAgICByZXR1cm4gZG93bnN0cmVhbUVsZWN0cm9uRkU7XG4gIH1cbn07XG4iXSwibmFtZXMiOlsiV0lERVZJTkVfU0NIRU1FX0lEX1VSSSIsImlwY1JlbmRlcmVyIiwicmVxdWlyZSIsInRyYW5zbGF0aW9uIiwiZG93bnN0cmVhbUVsZWN0cm9uRkUiLCJzZXJpYWxpemUiLCJvYmoiLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0V2lkZXZpbmVQU1NIIiwiaW5mbyIsIm1hbmlmZXN0UHJvdGVjdGlvbnMiLCJtYW5pZmVzdEluZm8iLCJwcm90ZWN0aW9ucyIsInZpZGVvUmVwcmVzZW50YXRpb24iLCJ2aWRlbyIsIm1hbmlmZXN0IiwiZmlsdGVyIiwibWFuaWZlc3RQcm90ZWN0aW9uIiwiaW5kZXhPZiIsImlkIiwid2lkZXZpbmVQU1NIIiwiaSIsImoiLCJsZW5ndGgiLCJzY2hlbWVJZFVyaSIsImNlbmNQU1NIIiwiYmluZCIsInNjb3BlIiwiZiIsImJpbmRGIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJiaW5kQWxsIiwiZk5hbWUiLCJjbG9uZVBlcnNpc3RlbnRDb25maWciLCJjb25maWciLCJjbG9uZWRDb25maWciLCJwYXJzZSIsInNlcnZlckNlcnRpZmljYXRlIiwibGljZW5zZVJlcXVlc3QiLCJsaWNlbnNlUmVzcG9uc2UiLCJEb3duc3RyZWFtRWxlY3Ryb25GRSIsIndpbmRvdyIsInBlcnNpc3RlbnQiLCJjdXJyZW50V2luZG93IiwiZ2V0Q3VycmVudFdpbmRvdyIsIl93aW5kb3dJZCIsIl9wcm9taXNlc09iaiIsIl9zdWJzY3JpYmVyc0lkIiwiX3Byb21pc2VDb3VudGVyIiwiX3dpbmRvdyIsIl9wZXJzaXN0ZW50IiwiX2NyZWF0ZUFwaU1ldGhvZHMiLCJfYXR0YWNoRXZlbnRzIiwicHJvdG90eXBlIiwiZG93bmxvYWRzIiwiY3JlYXRlUGVyc2lzdGVudCIsImFyZ3MiLCJyZXNvbHZlIiwicmVqZWN0IiwibWFuaWZlc3RJZCIsImZvcmNlZCIsInRoZW4iLCJnZXRFcnJvciIsImUiLCJtYW5pZmVzdHMiLCJOT1RfRk9VTkQiLCJleGlzdGluZ1BlcnNpc3RlbnRTZXNzaW9uSWQiLCJwc3NoIiwiY3JlYXRlUGVyc2lzdGVudFNlc3Npb24iLCJwZXJzaXN0ZW50U2Vzc2lvbklkIiwic2F2ZVBlcnNpc3RlbnQiLCJyZW1vdmVQZXJzaXN0ZW50U2Vzc2lvbiIsInJlbW92ZVBlcnNpc3RlbnQiLCJyZW1vdmUiLCJyZW1vdmVBbGwiLCJmaWx0ZXJlZCIsInBlcnNpc3RlbnRBcnIiLCJtYXAiLCJwcm9taXNlcyIsInB1c2giLCJQcm9taXNlIiwiYWxsIiwiX2FwaUNhbGwiLCJtZXRob2QiLCJvcmlnaW5hbE1ldGhvZCIsInNlbGYiLCJwcm9taXNlSWQiLCJfZ2VuZXJhdGVQcm9taXNlSWQiLCJwcm9taXNlIiwicmVxdWVzdCIsIndpbmRvd0lkIiwiX3NlbmQiLCJvbiIsIl9wcm9jZXNzQXBpIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9iZWZvcmVVbmxvYWQiLCJfcmVtb3ZlU3Vic2NyaWJlcnMiLCJuYW1lc3BhY2UiLCJtZXRob2RzIiwiYXBpRnVuY3Rpb24iLCJuYW1lIiwiY3JlYXRlQXBpTWV0aG9kIiwiX2V4ZWN1dGVTdWJzY3JpYmVyIiwic3Vic2NyaWJlcklkIiwiZXJyIiwicmVzdWx0Iiwic3Vic2NyaWJlckZpbmlzaGVkIiwic3Vic2NyaWJlciIsImNhbGxiYWNrIiwiX3JlbW92ZUxvY2FsU3Vic2NyaWJlcnMiLCJ0cyIsIkRhdGUiLCJnZXRUaW1lIiwiZXZ0IiwiZXJyb3IiLCJwcm9taXNlT2JqIiwiX3JlbW92ZUxvY2FsU3Vic2NyaWJlcnNGb3JEZWZpbmVkTWV0aG9kcyIsInN0YXR1cyIsImNhbGwiLCJzdWJzY3JpYmVyc0lkIiwiX3NhdmVTdWJzY3JpYmVyc0lkIiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJBcnJheSIsIml0ZW0iLCJyZW1vdmVTdWJzY3JpYmVycyIsInN1YnNjcmliZXJLZXkiLCJwb3MiLCJzcGxpY2UiLCJ1bmRlZmluZWQiLCJTdHJpbmciLCJzZW5kIiwiY29uc29sZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbml0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5434\n")},1953:(module,__unused_webpack_exports,__webpack_require__)=>{eval('\n\nvar CODES = __webpack_require__(3740);\nvar translationErrors = {\n  downloads: {\n    _GENERAL: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Sorry we are unable to process your request - some internal error occurred"\n    },\n    ALREADY_FINISHED: {\n      code: CODES.ERRORS.FINISHED,\n      msg: "This download \'%manifestId%\' has been already finished."\n    },\n    ALREADY_REMOVED_ALL_UNFINISHED: {\n      code: CODES.ERRORS.REMOVED,\n      msg: "All unfinished downloads have been already removed, nothing left."\n    },\n    ALREADY_RESUMED: {\n      code: CODES.ERRORS.RESUMED,\n      msg: "This download \'%manifestId%\' has been already resumed."\n    },\n    ALREADY_STOPPED: {\n      code: CODES.ERRORS.STOPPED,\n      msg: "This download \'%manifestId%\' has been already stopped or has been already downloaded."\n    },\n    ALREADY_STOPPED_ALL: {\n      code: CODES.ERRORS.STOPPED,\n      msg: "There are no downloads to be stopped."\n    },\n    ALREADY_STARTED: {\n      code: CODES.ERRORS.STARTED,\n      msg: "This download \'%manifestId%\' has been already started."\n    },\n    BROKEN_CANNOT_BE_RESUMED: {\n      code: CODES.ERRORS.BROKEN,\n      msg: "This download \'%manifestId%\' is broken and cannot be resumed."\n    },\n    INFO_FAILED: {\n      code: CODES.ERRORS.INFO,\n      msg: "Gettting info of download \'%manifestId%\' failed."\n    },\n    REMOVING_ALL_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Removing of all downloads failed."\n    },\n    REMOVING_ALL_UNFINISHED_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Removing of all unfinished downloads failed."\n    },\n    REMOVING_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Removing of download \'%manifestId%\' failed."\n    },\n    RESUMING_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Resuming of download \'%manifestId%\' failed."\n    },\n    UPDATE_DOWNLOAD_FOLDER_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Updating of download folder for \'%manifestId%\' failed."\n    },\n    STOPPING_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Stopping of download \'%manifestId%\' failed."\n    },\n    SAVING_PERSISTENT_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Saving persistent info for download \'%manifestId%\' failed."\n    },\n    SAVING_DATA_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Saving data for download \'%manifestId%\' failed."\n    },\n    STOPPING_ALL_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Stopping all downloads failed."\n    },\n    UNFINISHED: {\n      code: CODES.ERRORS.UNFINISHED,\n      msg: "This download is not ready yet."\n    }\n  },\n  manifests: {\n    NOT_FOUND: {\n      code: CODES.ERRORS.NOT_FOUND,\n      msg: "Manifest with id=\'%manifestId%\' not found."\n    },\n    LOADING_FAILED: {\n      code: CODES.ERRORS.LOADING,\n      msg: "Could not load manifest from url \'%manifestUrl%\'."\n    },\n    LIST_LOADING_FAILED: {\n      code: CODES.ERRORS.LOADING,\n      msg: "Could not load list of manifests."\n    },\n    FOLDER_ALREADY_EXISTS: {\n      code: CODES.ERRORS.EXISTS,\n      msg: "Folder for manifest with id =\'%manifestId%\' already exists."\n    },\n    INVALID_ID: {\n      code: CODES.ERRORS.BROKEN,\n      msg: "Provided custom id for manifest is not valid: (\'%invalid%\')"\n    }\n  }\n};\nmodule.exports = translationErrors;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1953\n')},5406:module=>{eval('\n\nmodule.exports = {\n  test: "Hello world"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQwNi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZkMsSUFBSSxFQUFFO0FBQ1IsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rvd25zdHJlYW0tZWxlY3Ryb24vLi9hcGkvdHJhbnNsYXRpb24vX3RyYW5zbGF0aW9ucy5qcz82ZWIwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdGVzdDogXCJIZWxsbyB3b3JsZFwiXG59OyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidGVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5406\n')},5847:(module,__unused_webpack_exports,__webpack_require__)=>{eval('\n\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nvar errors = __webpack_require__(1953);\nvar translations = __webpack_require__(5406);\nvar CODES = __webpack_require__(3740);\nvar REGEXP_KEYS = /%[A-Za-z0-9_-]+%/g;\n\n/**\n * @namespace <global>\n * @module util/translation\n * @property {translationErrors} e - {@link translationErrors}\n */\nvar translation = {};\n\n/**\n *\n * @param {object} key - translation object\n * @returns {*} key from translation object\n * @private\n */\nfunction _getCode(key) {\n  key = key || {};\n  var code = key.code;\n  if (!code) {\n    code = CODES.GENERAL;\n  }\n  return code;\n}\n\n/**\n *\n * @param {object} key - translation object\n * @param {array|object|string|number|boolean} values - translation values\n * @returns {*} all key values\n * @private\n */\nfunction _getKeyValues(key, values) {\n  var translation = key;\n  var keyValues = [];\n  if (_typeof(translation) === "object") {\n    translation = translation.msg;\n  }\n  if (translation) {\n    if (values instanceof Array) {\n      var groups = _getUniqueKeys(translation.match(REGEXP_KEYS));\n      for (var i = 0, j = Math.min(groups.length, values.length); i < j; i++) {\n        var keyValue = {};\n        keyValue[groups[i].replace(/%/g, "")] = values[i];\n        keyValues.push(keyValue);\n      }\n    } else if (_typeof(values) === "object") {\n      for (var _key in values) {\n        if (values.hasOwnProperty(_key)) {\n          var _keyValue = {};\n          _keyValue[_key] = values[_key];\n          keyValues.push(_keyValue);\n        }\n      }\n    } else if (typeof values === "string" || typeof values === "number" || typeof values === "boolean") {\n      var _groups = translation.match(REGEXP_KEYS) || [];\n      for (var _i = 0, _j = _groups.length; _i < _j; _i++) {\n        var _keyValue2 = {};\n        _keyValue2[_groups[_i].replace(/%/g, "")] = values;\n        keyValues.push(_keyValue2);\n      }\n    }\n  }\n  if (keyValues && !keyValues.length) {\n    keyValues = undefined;\n  }\n  return keyValues;\n}\n\n/**\n *\n * @param {object} key - translation object\n * @param {array|object|string|number|boolean} values - translation values\n * @returns {*} translated message with attached values\n * @private\n */\nfunction _getTranslation(key, values) {\n  var translation = key;\n  if (_typeof(translation) === "object") {\n    translation = translation.msg;\n  }\n  if (translation) {\n    translation = _parseValues(translation, values);\n  } else {\n    translation = "Internal Error";\n  }\n  return translation;\n}\n\n/**\n *\n * @param {array} args - arguments\n * @returns {array} array of all values except 1st one\n * @private\n */\nfunction _getValues(args) {\n  var values = [];\n  for (var i = 1, j = args.length; i < j; i++) {\n    values.push(args[i]);\n  }\n  if (values.length === 0) {\n    values = undefined;\n  } else if (values.length === 1) {\n    values = values[0];\n  }\n  return values;\n}\n\n/**\n *\n * @param {array} groups - matched groups\n * @returns {array} unique names\n * @private\n */\nfunction _getUniqueKeys(groups) {\n  var hashKey = {};\n  var uniqueNames = [];\n  groups = groups || [];\n  for (var i = 0, j = groups.length; i < j; i++) {\n    if (!hashKey[groups[i]]) {\n      hashKey[groups[i]] = true;\n      uniqueNames.push(groups[i]);\n    }\n  }\n  return uniqueNames;\n}\n\n/**\n *\n * @param {string} translation - text to be translated\n * @param {array|object|string|number|boolean} values - values to be parsed with translation\n * @returns {*} translation\n * @private\n */\nfunction _parseValues(translation, values) {\n  values = values || \'\';\n  if (values instanceof Array) {\n    var groups = _getUniqueKeys(translation.match(REGEXP_KEYS));\n    for (var i = 0, j = Math.min(groups.length, values.length); i < j; i++) {\n      translation = translation.replace(new RegExp(groups[i], "g"), values[i]);\n    }\n  } else if (_typeof(values) === "object") {\n    for (var key in values) {\n      if (values.hasOwnProperty(key)) {\n        translation = translation.replace(new RegExp("%" + key + "%", "g"), values[key]);\n      }\n    }\n    translation = translation.replace(REGEXP_KEYS, values);\n  } else if (typeof values === "string" || typeof values === "number" || typeof values === "boolean") {\n    translation = translation.replace(REGEXP_KEYS, values);\n  }\n  return translation;\n}\n\n/**\n * @alias module:util/translation.getError\n * @param {object} key - translation object\n * @returns {{code: *, msg: *, keys: *}} - error object with code, msg and keys\n */\nfunction getError(key) {\n  var values = _getValues(arguments);\n  var keyValues = _getKeyValues(key, values);\n  var msg = _getTranslation(key, values);\n  var code = _getCode(key);\n  return {\n    code: code,\n    msg: msg,\n    keys: keyValues\n  };\n}\n\n/**\n * @alias module:util/translation.getTranslation\n * @static\n * @param {object} key - translation object\n * @returns {*} - return translated string with correctly applied values\n */\nfunction getTranslation(key) {\n  var values = _getValues(arguments);\n  return _getTranslation(key, values);\n}\ntranslation.getError = getError;\ntranslation.getTranslation = getTranslation;\ntranslation.e = errors;\ntranslation.t = translations;\nmodule.exports = translation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5847\n')}},__webpack_module_cache__={};function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}var __webpack_exports__=__webpack_require__(5434);return __webpack_exports__})()));